{
  "exts": {
    " css": {
      "css": true,
      "html": true,
      "javascript": true
    },
    " jinja2": {
      "html": true,
      "jinja2": true
    },
    " r": {
      "r": true,
      "tex": true
    },
    "Gemfile": {},
    "_": {},
    "actionscript": {},
    "ada": {},
    "all": {},
    "alpaca": {},
    "angular": {},
    "angular_coffee": {},
    "apache": {},
    "applescript": {},
    "arduino": {},
    "asciidoc": {
      "asciidoc": true
    },
    "asm": {},
    "autoit": {},
    "awk": {},
    "axios": {},
    "base": {},
    "beancount": {},
    "bib": {},
    "bindzone": {},
    "blade": {},
    "c": {
      "c": true
    },
    "chef": {},
    "classnames": {},
    "clojure": {},
    "cmake": {},
    "codeigniter": {},
    "coffee": {
      "coffee": true
    },
    "cpp": {
      "cpp": true
    },
    "crystal": {},
    "cs": {},
    "css": {
      "css": true
    },
    "cypress": {},
    "d": {},
    "dart": {},
    "dart-flutter": {},
    "diff": {},
    "django": {},
    "dockerfile": {},
    "dosini": {},
    "dotenv": {},
    "dotenv-safe": {},
    "ejs": {},
    "elixir": {},
    "elm": {},
    "erlang": {},
    "eruby": {},
    "falcon": {},
    "fortran": {},
    "framer-motion": {},
    "fsharp": {},
    "gatsby": {},
    "gatsby-image": {},
    "gitcommit": {},
    "gnuplot": {},
    "go": {},
    "graphql-request": {},
    "groovy": {},
    "haml": {},
    "handlebars": {},
    "haskell": {
      "haskell": true
    },
    "helm": {},
    "help": {},
    "html": {
      "html": true
    },
    "html_minimal": {},
    "htmltornado": {},
    "idris": {},
    "ignore": {},
    "jade": {},
    "java": {},
    "javascript": {
      "javascript": true
    },
    "javascript-angular": {},
    "javascript-bemjson": {},
    "javascript-d3": {},
    "javascript-ember": {},
    "javascript-jasmine": {},
    "javascript-jasmine-arrow": {},
    "javascript-jquery": {},
    "javascript-jsdoc": {},
    "javascript-mocha": {},
    "javascript-node": {},
    "javascript-openui5": {},
    "javascript-react": {},
    "javascript-redux": {},
    "javascript-requirejs": {},
    "javascript.node": {},
    "javascript_react": {},
    "jenkins": {},
    "jest": {},
    "jinja2": {},
    "jquery_coffee": {},
    "json": {},
    "jsonc": {},
    "jsp": {},
    "julia": {},
    "kotlin": {},
    "kp19pp": {},
    "laravel": {},
    "ledger": {},
    "lfe": {},
    "liquid": {},
    "lodash": {},
    "lpc": {},
    "ls": {},
    "lua": {},
    "make": {},
    "mako": {},
    "markdown": {
      "markdown": true
    },
    "matlab": {
      "matlab": true
    },
    "mediawiki": {},
    "moon": {},
    "mustache": {},
    "neosnippet": {},
    "next": {},
    "nim": {},
    "nuxt": {},
    "nuxt-config": {},
    "nuxt-script": {},
    "objc": {},
    "ocaml": {},
    "openfoam": {},
    "perl": {},
    "perl6": {},
    "phoenix": {},
    "php": {},
    "php-laravel": {},
    "php-phpspec": {},
    "php-symfony2": {},
    "plsql": {},
    "po": {},
    "processing": {},
    "progress": {},
    "prolog": {},
    "prop-types": {},
    "proto": {},
    "ps1": {},
    "puppet": {},
    "purescript": {},
    "python": {},
    "r": {},
    "r-snippets": {},
    "racket": {},
    "rails": {},
    "react": {},
    "react-helmet": {},
    "react-intersection-observer": {},
    "react-modal": {},
    "reason": {},
    "redux": {},
    "redux-thunk": {},
    "requirejs_coffee": {},
    "rmarkdown": {},
    "rmd": {},
    "robot": {},
    "rst": {},
    "ruby": {},
    "rust": {},
    "sass": {},
    "scala": {},
    "scheme": {},
    "sh": {
      "sh": true
    },
    "simplemvcf": {},
    "slim": {},
    "snippets": {},
    "snippets-ts": {},
    "sql": {},
    "sshconfig": {},
    "styled-components": {},
    "stylus": {},
    "supercollider": {},
    "svelte": {},
    "swift": {},
    "tcl": {},
    "tex": {},
    "texmath": {
      "texmath": true
    },
    "textile": {},
    "toml": {},
    "ts-snippets": {},
    "twig": {},
    "typescript": {
      "javascript_react": true,
      "typescript": true
    },
    "verilog": {
      "verilog": true
    },
    "vhdl": {},
    "vim": {
      "vim": true
    },
    "vimshell": {},
    "vimwiki": {},
    "vital": {},
    "vue": {},
    "vue-pug": {},
    "vue-script": {},
    "vue-script-router": {},
    "vue-script-vuex": {},
    "vue-template": {},
    "vuex": {},
    "xml": {},
    "xslt": {},
    "yii": {},
    "yii-chtml": {},
    "yup": {},
    "zsh": {}
  },
  "snippets": {
    "00004ee34815886af2e309116f170798": {
      "content": "<body>\n\t${0}\n</body>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "body": true
      },
      "source": "vim-snippets/snippets"
    },
    "0019e87cef266c4fc18f95fc36aee988": {
      "content": "echo CHtml::ajaxLink('${1:label}', '${2:url}',array('${3:ajaxOptionName}'=>${4:ajaxOptionValue}),array('${5:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhajl": true
      },
      "source": "vim-snippets/snippets"
    },
    "001c45092cb4c4a8c069a0a2b3f2575c": {
      "content": "min { |a, b| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "min": true
      },
      "source": "vim-snippets/snippets"
    },
    "001d51df8c4bcb1fbe5ae916bd8411b1": {
      "content": "'use strict';",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "us": true
      },
      "source": "snippets/javascript"
    },
    "001d9c4a5296f2b96c3b0b157391f10d": {
      "content": "<label for=\"${2:$1}\">${1}</label>\n<input type=\"${3:text/submit/hidden/button}\" name=\"${4:$2}\" id=\"${5:$2}\" value=\"${6}\" />",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "label:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "0029e333db7646711d54d307ceac45a8": {
      "content": "else {\n\t${1}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "003d3b11e89b627c4a815ddc479e8f9f": {
      "content": "if ${1}\n\t${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "if statement",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "003d9c83c7be8db1b497c9d48b1188f7": {
      "content": "text-align: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta": true,
        "text-align": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "003f0ba687b9c0917d1373c06c610229": {
      "content": "${1} ? ${2} : ${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "?": true
      },
      "source": "vim-snippets/snippets"
    },
    "005328fc3ccceb7fa45788bc23ed1d3f": {
      "content": "if (${1:condition}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "00564972757326dc7aa0b92f42bd8cda": {
      "content": "default:\n\t${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "0057ff8cb4587e75723019151cd8c5dc": {
      "content": "{%- else -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else-": true
      },
      "source": "vim-snippets/snippets"
    },
    "005ab1b9a3a1d6ccf7e1a7f2aadaacf0": {
      "content": "set datafile separator '${1:#:separator}'",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set datafile separator 'separator'",
      "matches": {
        "datasep": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "005b280a391e79eaffc1a16815e46876": {
      "content": "urlize(trim_url_limit=${1:None}, nofollow=${2:False})",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "convert plain-text url to <a/>",
      "matches": {
        "urlize": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0067cced85abad79a610361422ca259b": {
      "content": "@include ${1:NAME}(${2:#:ARGS});",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "@include ...",
      "matches": {
        "include": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "006fb10941d9c577b9480f0d6676292b": {
      "content": "protected ${1:int} ${2} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p|": true
      },
      "source": "vim-snippets/snippets"
    },
    "007af26f6dd9e2cdd65f2010e0593caa": {
      "content": "log.Println(\"${1}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "log.Println(...)",
      "matches": {
        "ln": true
      },
      "source": "gosnippets/snippets"
    },
    "0084064ec8837d206ec657b390876881": {
      "content": "expect(${1:target}).toEqual(${2:value})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to equal (coffee)",
      "matches": {
        "ee": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "00844ce414bbe75bcac0bf0d27852c3a": {
      "content": "__device__ ${1:int} ${2:foo}(${3:void}) {\n\t${0:// TODO: Implement}\n\treturn 0;\n}",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Device function definition",
      "matches": {
        "dev": true
      },
      "source": "vim-snippets/snippets"
    },
    "0087f09b9ecea37432ed86223acb81e5": {
      "content": "echo CHtml::errorSummary(${1:model},'${2:headerHtml}','${0:footerHtml}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yherrs": true
      },
      "source": "vim-snippets/snippets"
    },
    "00900e4083c593c65596fd16b95a7287": {
      "content": "font-weight: normal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "009346c30f31e4f742983e68ce345cdc": {
      "content": "data() {\n\treturn {\n\t\t${1:key}: ${2:value}\n\t};\n}",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vdata": true
      },
      "source": "vim-snippets/snippets"
    },
    "00969c9617f51ec736029321a7afb661": {
      "content": "\\\\${1:x} -> ${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "λ",
      "matches": {
        "lambda": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0097602b7f9d1398eea79823ed006c5d": {
      "content": "align-self: baseline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "009ff0a7455aae186063971e163bbe01": {
      "content": "<button>${1:TARGET}</button>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "button": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "00aa20d1e343a9767dba030aa75ae4a6": {
      "content": "background-color: transparent;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background-color:  transparent (background)",
      "matches": {
        "background": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "00abc44ea499c6c45f12ad210d68fe45": {
      "content": "System.out.printf(\"${1}\", ${2});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "printf": true,
        "souf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "00af6425ea4618133f4940af91028285": {
      "content": "${1:obj}.end()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "end": true
      },
      "source": "snippets/javascript"
    },
    "00bd38e1dcd1f00035894dcfadf0fc2a": {
      "content": "_.entriesIn(${object})",
      "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.toPairsIn(new Foo);\n// => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n\nCreates an array of own and inherited enumerable string keyed-value pairs\nfor `object` which can be consumed by `_.fromPairs`. If `object` is a map\nor set, its entries are returned.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-entriesin",
      "matches": {
        "lodash entriesin": true
      },
      "source": "javascript/lodash"
    },
    "00be670eb451935c184b7f9ade71a17b": {
      "content": "overflow: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov": true
      },
      "source": "vim-snippets/snippets"
    },
    "00c413e1fd78b6e77fe5d7a67df5a2e5": {
      "content": "@booklet{${1:LABEL},\n    title = {${2}},\n    memo = {author, howpublished, address, month, year, note},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@booklet": true,
        "booklet": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "00d7031e5eb86c400bb5a8585f69c6ea": {
      "content": "@ManyToOne\n${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mo": true
      },
      "source": "vim-snippets/snippets"
    },
    "00dc1c2685e527bd45509b30fdb464ad": {
      "content": "before_action :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ba": true
      },
      "source": "vim-snippets/snippets"
    },
    "00eb8655e497fdffd0dcb16b2384280a": {
      "content": "| handleize",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "handleize": true
      },
      "source": "vim-snippets/snippets"
    },
    "00ee10d0d52622642d56cacc560ea005": {
      "content": "${1:int}[] ${2:numbers}${3: = new $1}[${0:length}];",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "array": true
      },
      "source": "vim-snippets/snippets"
    },
    "00f19fa0cd0e63510d65e7a19e2655a0": {
      "content": "| sort: '${1:key}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sort": true
      },
      "source": "vim-snippets/snippets"
    },
    "00f2b61ba5ef19c1c1af04c037ff2875": {
      "content": ":only-child",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":oc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "00ff9ee3c092aded71afe801229e3ba2": {
      "content": "background-break: each-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk:eb": true
      },
      "source": "vim-snippets/snippets"
    },
    "01021574b2bdefeb1601aa077ea624a8": {
      "content": "{% verbatim %}\n\t${0:TARGET}\n{% endverbatim %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% verbatim %} ... {% endverbatim %}",
      "matches": {
        "verbatim": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "01049fcab0eaa608a017f0bce2d10066": {
      "content": "type ${1:msg}\n\t= ${0}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ty": true
      },
      "source": "vim-snippets/snippets"
    },
    "010f172100190d2d30d87948dbb45b41": {
      "content": "${1:map}.${2:connect} '${3::controller/:action/:id}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "map.named_route",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "01119dc149864402db16090273499c4d": {
      "content": "const ${1:store} = tweened(${2:value}, ${3:options});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-tweened",
      "matches": {
        "svelte tweened": true,
        "svtw": true
      },
      "source": "javascript/svelte"
    },
    "0112729084498f24947040666d1b7ddc": {
      "content": "# SCM Resource, Chef::Provider::Git\ngit ${1:\"/destination/path\"} do # Path to clone/checkout/export the source to\n\t${2:#}repository ${3} # URI of the repository\n\t${4:#}revision ${5:\"HEAD\"} # revision to checkout. can be symbolic, like \"HEAD\" or an SCM specific revision id\n\t${6:#}reference ${7} # (Git only) alias for revision\n\t${8:#}user ${9:nil} # System user to own the checked out code\n\t${10:#}group ${11:nil} # System group to own the checked out code\n\t${12:#}depth ${13:nil} # (Git only) Number of past revisions to include in Git shallow clone\n\t${14:#}enable_submodules ${15:\"false\"} # (Git only) performs a submodule init and submodule update\n\t${16:#}remote ${17:\"origin\"} # (Git only) remote repository to use for syncing an existing clone\n\t${18:#}ssh_wrapper ${19} # (Git only) path to a wrapper script for running SSH with git. GIT_SSH environment variable is set to this.\n\t${20:#}${21:action :sync} # Update the source to the specified revision, or get a new clone (Default)\n\t${22:#}${23:action :checkout} # Clone the source. Does nothing if a checkout is available\n\t${24:#}${0:action :export} # Export the source, excluding or removing any version control artifacts\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "git": true
      },
      "source": "vim-snippets/snippets"
    },
    "0126776b3a410e13a5c9460695495e47": {
      "content": "<script>\n\t${0}\n</script>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "script": true
      },
      "source": "vim-snippets/snippets"
    },
    "012a11d661804eca617055aacfa201bb": {
      "content": "void main(string[] args) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maina": true
      },
      "source": "vim-snippets/snippets"
    },
    "012d18bef9b468a634ab714a105da28f": {
      "content": "margin-left: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "margin-left": true,
        "ml": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0133726916a898b6f3d33f0c11948d63": {
      "content": "render text: \"${1:text to render...}\", layout: ${2:true}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (text,layout => true) (rtlt)",
      "matches": {
        "rtlt": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0135562587dbb8956fcdce3acb72dd47": {
      "content": "echo ${0};",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec": true
      },
      "source": "vim-snippets/snippets"
    },
    "0136d7949a65000bd6ca1529a3460eb5": {
      "content": "border-top-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdti:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "013b48dda6f99c4052e83191159086e0": {
      "content": "${1:obj}.width(${2:integer})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "width": true
      },
      "source": "snippets/javascript"
    },
    "013f4dfd5722498539163fd9fd1eb683": {
      "content": "max-height: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mah:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "013ff33ca1092dd1f8a3c23083ee5007": {
      "content": "attr_accessible :${0:attr_names}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ata": true
      },
      "source": "vim-snippets/snippets"
    },
    "014f3141f9e3aae71b69318de84702bf": {
      "content": "cursor: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur": true
      },
      "source": "vim-snippets/snippets"
    },
    "015809897e69e56d705f9e5b0791a4a3": {
      "content": "$.ajaxSetup({\n\turl: \"${1:mydomain.com/url}\",\n\ttype: \"${2:POST}\",\n\tdataType: \"${3:xml/html/script/json}\",\n\tdata: $.param( $(\"${4:Element or Expression}\") ),\n\tcomplete: function (jqXHR, textStatus) {\n\t\t${5:// callback}\n\t},\n\tsuccess: function (data, textStatus, jqXHR) {\n\t\t${6:// success callback}\n\t},\n\terror: function (jqXHR, textStatus, errorThrown) {\n\t\t${0:// error callback}\n\t}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxsetup": true
      },
      "source": "snippets/javascript"
    },
    "015b78e864b03cda13aed63868d3c567": {
      "content": "methods: {\n\t${1:name}() {\n\t\t${0}\n\t}\n},",
      "doc": "vue method",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-methods",
      "matches": {
        "vmethod": true,
        "vue methods": true
      },
      "source": "javascript/vue"
    },
    "01670ec16a9fd543fd7c90a4eecf35ad": {
      "content": "switch ( ${1:test} ){\n\t${2:condition1} { ${3:action} }\n\t${4:condition2} { ${5:action} }\n\tdefault { ${6:action} }",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "016d8facea22be4bd2f1599f02935221": {
      "content": "DEFINE VARIABLE ${1:VariableName} AS ${0}.",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defvar": true
      },
      "source": "vim-snippets/snippets"
    },
    "016dbc90bb5caaf3b91c111ec3b7b116": {
      "content": "let ${1} =\n\t${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "018234c1a669c5bcb03ce73893a8d5c4": {
      "content": ":after",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":a": true
      },
      "source": "vim-snippets/snippets"
    },
    "01890aecfe3622ca65c5994a7b12a8d6": {
      "content": "border-top-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdti": true
      },
      "source": "vim-snippets/snippets"
    },
    "018fb52b54c1c5bc0fcede868435c1da": {
      "content": "foreach(${1:/*elem*/}; ${2:/*range*/}) if(${3:/*condition*/})\n{\n\t${VISUAL}$4\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "foreach if (forif)",
      "matches": {
        "forif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "01948cf54e747f50e1293610334645fa": {
      "content": "assert(${0:/* condition */});",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as": true
      },
      "source": "vim-snippets/snippets"
    },
    "01972b50c1258c9a23733be4e371e381": {
      "content": "java.beans.",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "j.b": true
      },
      "source": "vim-snippets/snippets"
    },
    "019854cb246046c49c2b43f57e2eec98": {
      "content": "if !exists('b:undo_ftplugin')\n  let b:undo_ftplugin = ''\nendif\n${1}\nlet b:undo_ftplugin .= '\n\\ | setlocal ${2:#:option_name1< option_name2<...}\n\\'",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "if !exists('b:undo_ftplugin')",
      "matches": {
        "b:undo_ftplugin": true,
        "undo_ftplugin": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "019fa99ea147bba8a73b0c9042beee8e": {
      "content": "<?= ${0} ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "?=": true
      },
      "source": "vim-snippets/snippets"
    },
    "01a49a3e4a0237f72da785e286917b89": {
      "content": ".. toctree::\n\t:maxdepth: 2\n\t${0}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "toc:": true
      },
      "source": "vim-snippets/snippets"
    },
    "01a7e2b5896a8aca7b97e687a207406e": {
      "content": "imagePullPolicy: ${1:imagePullPolicy}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imagePullPolicy_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "01ae36f22b4bf9ca8346b303f25ed1cc": {
      "content": "for (${1} : ${2}) ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enfor": true
      },
      "source": "vim-snippets/snippets"
    },
    "01b34ed609a654f29d23088040392ee4": {
      "content": "margin: ${1:20px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "margin:   all (margin)",
      "matches": {
        "margin": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "01baf26b7dc8782a5bb2ba02397aa115": {
      "content": "require ${0:Logger}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req": true
      },
      "source": "vim-snippets/snippets"
    },
    "01bb2a28ac0cd95c57f0f2670f8a06ac": {
      "content": ":${1:field name}: ${0:field body}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":": true
      },
      "source": "vim-snippets/snippets"
    },
    "01bef7b38d8b29ec0f7cbe8f1df58581": {
      "content": "_.unionBy(${arrays}, ${iteratee})",
      "doc": "_.unionBy([2.1], [1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `_.property` iteratee shorthand.\n_.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n\nThis method is like `_.union` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich uniqueness is computed. Result values are chosen from the first\narray in which the value occurs. The iteratee is invoked with one argument:\n(value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-unionby",
      "matches": {
        "lodash unionby": true
      },
      "source": "javascript/lodash"
    },
    "01cb83984aa827a84e7a5d36a5224697": {
      "content": "${1:obj}.slideDown('${2:slow/400/fast}', function () {\n\t${0:// callback};\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sdownc": true
      },
      "source": "snippets/javascript"
    },
    "01d2e03f300acae729eb541f5815e89b": {
      "content": "border-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "01d590172ee9f1fdf6a6693defb27d31": {
      "content": "${1:FIELDNAME} = models.DateTimeField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "DateTimeField",
      "matches": {
        "mdatetime": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "01d7623696ab6a33f94c7a5bd0b87fd0": {
      "content": "#!/usr/bin/env ${1}",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "env": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "01e430c834f7afe8dcd282f9a099584d": {
      "content": "void setup()\n{\n\tSerial.begin(${1:9600});\n\t${2}\n}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "setup": true
      },
      "source": "vim-snippets/snippets"
    },
    "01eaef81cb595c78ae07c06306005d7a": {
      "content": "post {\n\tfailure {\n\t\t${1}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pfa": true
      },
      "source": "vim-snippets/snippets"
    },
    "01ed18e98b04c3b0b1d34353b2696a2b": {
      "content": "text-emphasis: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "01efd507d1513cf03a9ac0f7698a9b7f": {
      "content": "_.endsWith(${string}, ${target}, ${position})",
      "doc": "_.endsWith('abc', 'c');\n// => true\n\n_.endsWith('abc', 'b');\n// => false\n\n_.endsWith('abc', 'b', 2);\n// => true\n\nChecks if `string` ends with the given target string.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-endswith",
      "matches": {
        "lodash endswith": true
      },
      "source": "javascript/lodash"
    },
    "01f49d24473c48df342beb0e46cf2d8e": {
      "content": "!important",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "!important",
      "matches": {
        "!": true
      },
      "source": "vim-snippets/snippets"
    },
    "01fcc5cb42bf4ace22efc234b1496214": {
      "content": "word-break: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob": true
      },
      "source": "vim-snippets/snippets"
    },
    "0216d53b109e44707e40333255823bd7": {
      "content": "font: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "f": true
      },
      "source": "vim-snippets/snippets"
    },
    "0220ffaac54501a0735200f89b5f0700": {
      "content": "$.inArray(${1:value}, ${0:array})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inarr": true
      },
      "source": "snippets/coffee"
    },
    "02211b74726e1f67f90ecb33a6b1893a": {
      "content": "import qualified ${1} as ${2}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "import qualified ... as ...",
      "matches": {
        "import": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "02238eef1a5d99e2f05f7a1ad64496ed": {
      "content": "${1:source} instanceof ${2:Object}",
      "doc": "instanceof",
      "filetype": "base",
      "grammar": "lsp",
      "label": "instanceof",
      "matches": {
        "base instanceof": true
      },
      "source": "javascript/base"
    },
    "02386a846aeb526c71fd7188a770be82": {
      "content": "\\begin{exampleblock}{${1:#:title}}\n\t${2:TARGET}\n\\end{exampleblock}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{exampleblock}": true,
        "exampleblock": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "023ac5008761327ef669d28057571305": {
      "content": "function ${1}(${2}) return ${3} is\n\t${4}\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "023eb546cdd5aa6d96e6fe52f481b936": {
      "content": "async function ${1:name}() {\n\ttry {\n\t\tconst response = await axios.post('${2:uri}', ${3:post});\n\t\t${4:success}\n\t}\tcatch (error) {\n\t\t${5:error}\n\t}\n}",
      "doc": "Use Axios to make a post request - async-await",
      "filetype": "axios",
      "grammar": "lsp",
      "label": "axios-post-async-await",
      "matches": {
        "axios post async await": true
      },
      "source": "javascript/axios"
    },
    "02426621e89300a8c720f77e2d9f6ca2": {
      "content": "font-effect outline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "0258e89e4d81a6907e98bf172b1cc784": {
      "content": "@moduletag :${1:module tag}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mtag": true
      },
      "source": "vim-snippets/snippets"
    },
    "025ad4d77fb44c048469e72e95645157": {
      "content": "| map: '${1:key}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/snippets"
    },
    "0261805a716178911b36a0d5b674fc6f": {
      "content": "{% firstof ${1} %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "firstof": true
      },
      "source": "vim-snippets/snippets"
    },
    "026516de2eca2de06cc5e966457bbb67": {
      "content": "if ${1:condition} {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "else { ... }",
      "matches": {
        "if": true
      },
      "source": "gosnippets/snippets"
    },
    "0269227a6b356f17397b77d2ffa3799a": {
      "content": "text-transform: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt": true
      },
      "source": "vim-snippets/snippets"
    },
    "0274bb6141e15535330a0a31b28fe9c4": {
      "content": "foreach ( $${1:iterator} in $${2:collection} ) {\n\t${3:statement}\n}",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "foreach": true
      },
      "source": "vim-snippets/snippets"
    },
    "0277138dce6a877670f6cd50d7d3d3a8": {
      "content": "translate(${1:x}, ${2:y}${3:, }${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "translate": true
      },
      "source": "vim-snippets/snippets"
    },
    "027af2d9ba6d7286a74ee5b608191ca4": {
      "content": "_.valuesIn(${object})",
      "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.valuesIn(new Foo);\n// => [1, 2, 3] (iteration order is not guaranteed)\n\nCreates an array of the own and inherited enumerable string keyed property\nvalues of `object`.\n\n**Note:** Non-object values are coerced to objects.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-valuesin",
      "matches": {
        "lodash valuesin": true
      },
      "source": "javascript/lodash"
    },
    "028adcad1478bcc0c2e9ce1573a74868": {
      "content": "# Package resource\npackage ${1:\"package_name\"} do # Name of the package to install\n\t${2:#}version ${3:nil} # The version of the package to install/upgrade\n\t${4:#}response_file ${5:nil} # An optional response file - used to pre-seed packages (note: the file is fetched by Remote File)\n\t${6:#}source ${7} # Used to provide an optional package source for providers that use a local file (rubygems, dpkg and rpm)\n\t${8:#}options ${9:nil} # Add additional options to the underlying package command\n\t${10:#}gem_binary ${11:gem} # A gem_package attribut to specify a gem binary. Useful for installing ruby 1.9 gems while running chef in ruby 1.8\n\t${12:#}${13:action :install} # Install a package - if version is provided, install that specific version (Default)\n\t${14:#}${15:action :upgrade} # Upgrade a package - if version is provided, upgrade to that specific version\n\t${16:#}${17:action :remove} # Remove a package\n\t${18:#}${0:action :purge} # Purge a package (this usually entails removing configuration files as well as the package itself)\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "package": true
      },
      "source": "vim-snippets/snippets"
    },
    "028ccac223a58088f2c79c5f7a47420b": {
      "content": "<select>${1:TARGET}</select>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "select": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "028e94f8b631da811da0aa283477a780": {
      "content": "on:${1:eventname}|${2|preventDefault,stopPropagation,passive,capture,once|}={${3:handler}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-on-event-modifiers",
      "matches": {
        "svelte on event modifiers": true,
        "svon-modifiers": true
      },
      "source": "javascript/svelte"
    },
    "028f6ac201d0e6be475addb01d89f236": {
      "content": "\\begin{array}{${1}}\n\t${2:TARGET}\n\\end{array}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{array} \\array": true,
        "array": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "02985a37c3c1c00b1c1b91cb1b07947e": {
      "content": "text-decoration underline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "02a4a0e5bf3f835c0fe6e3403ce405eb": {
      "content": "let open ${1} in\n${2:TARGET}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "let open .. in",
      "matches": {
        "lopen": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "02a968acdd396eb6a22c7411aa3b2f1a": {
      "content": "<ul type=\"disc\">${1:TARGET}</ul>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "uldisc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "02ac9c9a983d89bc5689fe93176f112b": {
      "content": "align-content: space-between",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "02ba3b582c08b607305b1c1f35ed0d7e": {
      "content": "list-style none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lis:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "02bb8cdbbe9cfebe39bdf3ae3d912d6c": {
      "content": "background-position-y: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgpy": true
      },
      "source": "vim-snippets/snippets"
    },
    "02bbfb8ef0d97bd81c848b25f0f38866": {
      "content": "?assertException(${1:Class}, ${2:Pattern}, ${0:Expression})",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asexc": true
      },
      "source": "vim-snippets/snippets"
    },
    "02c2a1c9b797b7adc79baea417ad7d12": {
      "content": "display: ${1:none/inline/block/list-item/run-in/compact/marker};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "display: common-types (display)",
      "matches": {
        "display": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "02c2d694ce3833d2a046a3dc3d00a993": {
      "content": "public static void ${1:index}(${2:args}) { ${0} }",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "action": true
      },
      "source": "vim-snippets/snippets"
    },
    "02cd7db143fd379db7a5d8017da8e2f2": {
      "content": "onBeforeUnmount(() => {${1}})",
      "doc": "(beforeDestroy) Vue onBeforeUnmount Lifecycle hook",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle Hooks - onBeforeUnmount",
      "matches": {
        "v3onbeforeunmount": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "02d0ef10f7d2bbc67ae19089a4d52463": {
      "content": "border-bottom-left-radius: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdblrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "02d3095fde4ee60b3c37c563aa5c73a9": {
      "content": "/// <summary>\n/// $0\n/// </summary>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "XML summary comment",
      "matches": {
        "///": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "02eb22b4df45393f0333a49687ca3833": {
      "content": "$.Callbacks()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "C": true
      },
      "source": "snippets/coffee"
    },
    "02fc2e876d56716ce37f94dbce22b7d3": {
      "content": "Yii::app()->request->isPostRequest",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yispost": true
      },
      "source": "vim-snippets/snippets"
    },
    "02fc3042d16a7e09b1284792f1bd6542": {
      "content": "${1:s:V}.load('${2:#:module_name}')",
      "doc": "",
      "filetype": "vital",
      "grammar": "snu",
      "label": "s:V.load('...')",
      "matches": {
        "vital_load_without_call": true
      },
      "source": "neosnippets/vim"
    },
    "02fc51f2f1286d43543b6ca427f780f3": {
      "content": "mixed.isValidSync()",
      "doc": "mixed.isValidSync(value: any, options?: object): boolean\n\nSynchronously returns true when the passed in value matches the schema.Takes the same options as validateSync() and has the same caveats around async tests.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-is-valid-sync",
      "matches": {
        "yup mixed isvalidsync": true
      },
      "source": "javascript/yup"
    },
    "0300e8cb95aa45daff5a269aef7a7424": {
      "content": "PropTypes.func,",
      "doc": "Func prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeFunc",
      "matches": {
        "ptf": true
      },
      "source": "vscode-react/snippets"
    },
    "03014fa32f2a1305157dfd75306e8026": {
      "content": "\\filldraw[${1}] ${2};${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\filldraw": true,
        "filldraw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "030389aef0538cb7788d87e0b91676e0": {
      "content": "typedef struct {\n\t${0}\n} ${1:name_t};",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "types": true
      },
      "source": "vim-snippets/snippets"
    },
    "03075c1d454303fc8874916f5b8af276": {
      "content": "${1:obj}.toggleClass('${2:class name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "togclass": true
      },
      "source": "snippets/coffee"
    },
    "031e9cbf2c54b12af6c8767fcb478950": {
      "content": "\\begin{displaymath}\n\t${1:TARGET}\n\\end{displaymath}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{displaymath} \\displaymath": true,
        "displaymath": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "031f4402e94523f682514e40f2f1070b": {
      "content": "_.sumBy(${array}, ${iteratee})",
      "doc": "var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.sumBy(objects, function(o) { return o.n; });\n// => 20\n\n// The `_.property` iteratee shorthand.\n_.sumBy(objects, 'n');\n// => 20\n\nThis method is like `_.sum` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be summed.\nThe iteratee is invoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sumby",
      "matches": {
        "lodash sumby": true
      },
      "source": "javascript/lodash"
    },
    "032553039c2315dd361a9afb132d4e8d": {
      "content": "while ${1}\n\t${0}\nend",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "while",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "03259d3e0fd44d58cd038cdbe80d6edf": {
      "content": "from PyQt5.QtCore import pyqtRemoveInputHook\npyqtRemoveInputHook()\nimport pdb; pdb.set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "removeInputHook...pdb",
      "matches": {
        "qtpdb": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "032ea44f890c8e8c3376c8d84c00b9a0": {
      "content": "<?php echo ${0} ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<?e": true
      },
      "source": "vim-snippets/snippets"
    },
    "03316f852545e5e17c6dda3fe6cac176": {
      "content": "text-shadow: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tsh:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "0335b6a76db5172eedc8f87db137f25d": {
      "content": "match '${1:${2::controller}${3:/${4::action}${5:/${6::id}${7:(.:format)}}}}'${8: '${9:$2}#${10:$4}'${11:, as: :${12:$10}}}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "match",
      "matches": {
        "match": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "033f8d66cc48a8cf4225eed04f713a65": {
      "content": "PropTypes.func.isRequired,",
      "doc": "Func prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeFuncRequired",
      "matches": {
        "ptfr": true
      },
      "source": "vscode-react/snippets"
    },
    "03464f3a8f042492edf2579088c6b9c0": {
      "content": "white-space-collapse: keep-all;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:k": true
      },
      "source": "vim-snippets/snippets"
    },
    "034731cdefd821c621fcceb730aaf41f": {
      "content": "${1:obj}.after('${2:Some text <b>and bold!</b>}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "after": true
      },
      "source": "snippets/coffee"
    },
    "0348d55ccbbc0da12c1ce494ba18e6a4": {
      "content": "text-align: left",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "0355ae473edef6ebe15b963e8861ac20": {
      "content": "border-fit: clip;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "0359fd61df4a560549fe67d7919510e0": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script lang=\"ts\">\n\timport Vue from 'vue'\n\n\texport default Vue.extend({\n\t\t${0}\n\t})\n</script>\n\n<style scoped>\n\n</style>",
      "doc": "Base for Vue File with Typescript",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-single-file-component-with-typescript",
      "matches": {
        "vue base ts": true
      },
      "source": "javascript/vue"
    },
    "035a462d6331444b2aeb3f534d343bb4": {
      "content": "vertical-align: text-bottom;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:tb": true
      },
      "source": "vim-snippets/snippets"
    },
    "035d7e012cb0653a523b8ca6756332cb": {
      "content": "for ${1:name} in ${2:array}\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Array Comprehension",
      "matches": {
        "fora": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "035ef0f56bac71634efd7fdf3d4a97e2": {
      "content": "assert.equal ${0}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ae": true
      },
      "source": "vim-snippets/snippets"
    },
    "035f53e5cb3ed74e609c3f448dfad7da": {
      "content": "${1:method_name}: function (${2:attribute}) {\n\t${0:${VISUAL}}\n},",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":f": true
      },
      "source": "snippets/javascript"
    },
    "0362258d454aaf9666f81b0751a89e20": {
      "content": "[ngClass]=\"{${1:cssClass}: ${2:expression}}\"",
      "doc": "Angular ngClass",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngclass",
      "matches": {
        "a-ngclass": true,
        "angular ng class": true
      },
      "source": "javascript/angular"
    },
    "0368130cb693249be4190603df0d163c": {
      "content": "padding-left ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pl": true
      },
      "source": "vim-snippets/snippets"
    },
    "03694b2eeb15d3ae8dcfcbc2c566fe3e": {
      "content": "case ${0:TARGET} of\n    ${1}\nend",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "case",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0370a5d6408e2c0def4a414e60e035a5": {
      "content": "def test_should_post_${1:action}\n\t${3:@$2 = ${4:$2s}(:${5:fixture_name})\n\t}post :$1${6:, id: @$2.to_param}, ${2:model}: { $0 }\n\tassert_response :redirect\n\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "def post request",
      "matches": {
        "deftp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0373de0c377b2d6c094d38982b1ce6a2": {
      "content": "(\n\t${0}\n)",
      "doc": "",
      "filetype": "supercollider",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b": true
      },
      "source": "vim-snippets/snippets"
    },
    "0377190373aab265c600accd3fa4a7e2": {
      "content": "expect(${1:target}).not.toBeVisible();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to be visible (js)",
      "matches": {
        "notv": true
      },
      "source": "vim-snippets/snippets"
    },
    "0378f60955fd2bf74d5287cf11178360": {
      "content": "while ${1:condition}\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "037b612bbee8a9cefe803d611d93da3f": {
      "content": "import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1:${TM_FILENAME_BASE}} = memo((props) => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n});\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a memoized stateless React component with PropTypes and ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactMemoProps",
      "matches": {
        "rscpm": true
      },
      "source": "vscode-react/snippets"
    },
    "037cd5fd6868b7b67f0082984587dac1": {
      "content": "const ${1:store} = writable(${2:initialValue}, () => {\n\t${3:console.log('got a subscriber');}\n\treturn () => ${4:console.log('no more subscribers');}\n});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-writeable-set",
      "matches": {
        "svelte writeable set": true,
        "svwt": true
      },
      "source": "javascript/svelte"
    },
    "037f37378ae06ca0926fc3850a2ee59e": {
      "content": "(deftest ${1:name}\n\t(is (= ${0:assertion})))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deft": true
      },
      "source": "vim-snippets/snippets"
    },
    "0383b3ef72ac538f6212aca9d69274dd": {
      "content": "render inline:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render :inline",
      "matches": {
        "ri": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0386f1347cb70aff52136d549bde0a05": {
      "content": "const ${1} = Symbol('${0}');",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sym": true
      },
      "source": "snippets/javascript"
    },
    "03876adf8d458fef1cd27c26d28d5360": {
      "content": "align-self: last baseline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:lb": true
      },
      "source": "vim-snippets/snippets"
    },
    "038a0f2a4852a077c125006f695f75f1": {
      "content": "import ${1:New} from '@/components/${1:New}.vue';",
      "doc": "Import one component into another",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-import-file",
      "matches": {
        "vimport": true,
        "vue import file": true
      },
      "source": "javascript/vue"
    },
    "039749e4c5feccaee2a2b3af59948e9e": {
      "content": "for (${1}; ${2}; ${3}) ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "039d5074803b9cec6e68b6908ee0d90e": {
      "content": "Run Keyword And Ignore Error    ${1:${kw}}    ${2:${args}}\n\\${${3:result}}    \\${${4:return_value}}=    Run Keyword And Ignore Error    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword And Ignore Error",
      "matches": {
        "rkaie": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "03a4cf37053b9559ba555bf22c053e4e": {
      "content": "# Link resource\nlink ${1:\"/target/file\"} do # The file name of the link\n\t${2:#}to ${3} # The real file you want to link to\n\t${4:#}link_type ${5:symbolic} # Either :symbolic or :hard\n\t${6:#}owner ${7} # The owner of the symlink\n\t${8:#}group ${9} # The group of the symlink\n\t${10:#}${11:action :create} # Create a link (Default)\n\t${12:#}${0:action :delete} # Delete a link\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link": true
      },
      "source": "vim-snippets/snippets"
    },
    "03a8fb7ced2603c3b7f18f1f24c14e5c": {
      "content": "_.tail(${array})",
      "doc": "_.tail([1, 2, 3]);\n// => [2, 3]\n\nGets all but the first element of `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-tail",
      "matches": {
        "lodash tail": true
      },
      "source": "javascript/lodash"
    },
    "03a9573f5518cc7138b8ffa465ff74e6": {
      "content": "<svelte:component this={${1:component}} />",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-component",
      "matches": {
        "svc": true,
        "svelte component": true
      },
      "source": "javascript/svelte"
    },
    "03b055ae9d07878a75c813208927baa3": {
      "content": "{\n\t:f${0}\n}",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eventsmap": true
      },
      "source": "snippets/javascript"
    },
    "03b1ee85f9b590c71fd110e548a8d54d": {
      "content": "place-items: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "03b6b83b3e2aae70db31f701e5f16d55": {
      "content": "journal = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "journal": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "03cb8cc8d455caeb9b6caa9ab56c2141": {
      "content": "text-emphasis: circle;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "03d2496792d280b0a2b6a844b7e813e0": {
      "content": "clocking ${1:clocking_name} @(${2:posedge} ${3:clk});\n\t${0}\nendclocking : $1",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clock": true
      },
      "source": "vim-snippets/snippets"
    },
    "03d4eed3b44b96dea3e3010ba9e5b516": {
      "content": "do\n{\n\t${0:${VISUAL}}\n} while (${1:true});",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "03dfeb95ac162187055e79806b73512c": {
      "content": "page-break-after: always;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "03f4b04f95abce2dd40d31b8b446029e": {
      "content": "setup do\n\t${1}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "setup": true
      },
      "source": "vim-snippets/snippets"
    },
    "03f923d02b6187162a302e10e85ec15f": {
      "content": "(deftest ${1:a}-test\n  (testing \"${2:hello}\"\n    ${0:TARGET:(is (= 0 1))}))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deftest": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "03fba21ed3086e27a01b32064dac35ba": {
      "content": "<c:url value=\"${1}\" var=\"${2}\" />\n<a href=\"${$2}\">${0}</a>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "curl": true
      },
      "source": "vim-snippets/snippets"
    },
    "0403fb5df9a6ab9f9b4eb0e19d98113f": {
      "content": "${1:obj}.is('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "is": true
      },
      "source": "snippets/javascript"
    },
    "040898506398aa704b6e84b324dd71f5": {
      "content": "[TestFixture]\npublic class ${1}Test {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tc": true,
        "testclass": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "041be5170b4009a15dfb74da815c85f2": {
      "content": "logger.fatal { '${1:message}' }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "logf": true
      },
      "source": "vim-snippets/snippets"
    },
    "0427a785bdc127503d5e62f38fee7733": {
      "content": "green(${0:color});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "green": true
      },
      "source": "vim-snippets/snippets"
    },
    "0431dbf3756b45020c87a68a76809561": {
      "content": "<td>${1}</td>\ntd+${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td+": true
      },
      "source": "vim-snippets/snippets"
    },
    "043c719281606ec2566c96e46d1f08a6": {
      "content": "form_open_multipart(\"${1:action}\");${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_open_multipart": true
      },
      "source": "vim-snippets/snippets"
    },
    "0443a36e5115577093b4e53ae349360a": {
      "content": "var ${1:name} = ${2:value};",
      "doc": "var assignment",
      "filetype": "base",
      "grammar": "lsp",
      "label": "var-assignment",
      "matches": {
        "base var": true
      },
      "source": "javascript/base"
    },
    "044bdff3614115fe5540bef3f7586526": {
      "content": "def update\n\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\n\trespond_to do |format|\n\t\tif @$1.update($1_params)\n\t\t\tflash[:notice] = '$2 was successfully updated.'\n\t\t\tformat.html { redirect_to(@$1) }\n\t\t\tformat.json  { head :ok }\n\t\telse\n\t\t\tformat.html { render action: 'edit' }\n\t\t\tformat.json  { render json: @$1.errors, status: :unprocessable_entity }\n\t\tend\n\tend\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defupdate": true
      },
      "source": "vim-snippets/snippets"
    },
    "04551466ae693b193ce954d25421edcd": {
      "content": "<<<${1:HTML}\n${2:TARGET:#:content here}\n$1;",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "here": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0458a62cc93176234e2af7bd56e88fec": {
      "content": "MessageBox.Show(\"${1:message}\");",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "Message box",
      "matches": {
        "mbox": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "045a7a0eb0ab0440ebeef6ec38b91f97": {
      "content": "font-stretch: semi-condensed;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "045cbecc7797ac15e9c036728dcac9b4": {
      "content": "import (\n\t\"${1:package}\"\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "import ( ... )",
      "matches": {
        "import": true
      },
      "source": "gosnippets/snippets"
    },
    "045dbc5f16804fb363e511ed94e3f801": {
      "content": "int main(void)\n{\n\t${0}\n\treturn 0;\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mainn": true
      },
      "source": "vim-snippets/snippets"
    },
    "045f98e2a73f27e0a171b756debc499a": {
      "content": "String ${1:str}${2: = \"}${0:CCCP\"};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "string": true
      },
      "source": "vim-snippets/snippets"
    },
    "0463d97f386c870a83aca33a8dc6910e": {
      "content": "using terms from ${1:#:app}\n\t${0:TARGET}\nend using terms from",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "terms": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "047a301bffc8b61e124f5be99bcab133": {
      "content": "/**\n * ${0:description}\n *\n */",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "/**": true
      },
      "source": "snippets/javascript"
    },
    "0496a5405a344dcc9d7c97fa92fd8365": {
      "content": "it { should redirect_to ${0:url} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isrt": true
      },
      "source": "vim-snippets/snippets"
    },
    "049a0027c224dafc2d55f3953754e5fd": {
      "content": "{\n\t\"type\": \"page\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_page": true
      },
      "source": "vim-snippets/snippets"
    },
    "049f2e69af7b575a71d650201e240db8": {
      "content": "${1:dfname} <- read.csv(file = \"${2:file}\", header = ${3|TRUE,FALSE|},  sep = \"${4|\\,,;|}\", row.names = ${5:NULL},  stringsAsFactors = ${6|FALSE,TRUE|})",
      "doc": "Read a data table from a comma-separated file (CSV) and create a data frame",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Read CSV",
      "matches": {
        "readc": true
      },
      "source": "vscode-R/snippets"
    },
    "04a4d58f3f2be2a4b0e8c4bccf2bd4d8": {
      "content": "font-emphasize-style: accent;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:ac": true
      },
      "source": "vim-snippets/snippets"
    },
    "04a4eb20552f595ab48a4cd242639795": {
      "content": "${1:obj}.find('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "find": true
      },
      "source": "snippets/javascript"
    },
    "04a9148f549e2eeae06ec548a621535b": {
      "content": "z-index: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "z:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "04ac4303d83db9740dd9f0ca653b7706": {
      "content": "text-align-last: right;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "04acfb77717edec06f98cbd9f6e98409": {
      "content": "clear: left;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "04c1556f3af3b536171fb3e90cf8a88b": {
      "content": "@param ${0:param}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@pa": true
      },
      "source": "vim-snippets/snippets"
    },
    "04c3430db181268bd78798003132b753": {
      "content": "unless ${1:condition}, do: ${0}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "unless .. do: ..",
      "matches": {
        "unless:": true
      },
      "source": "vim-snippets/snippets"
    },
    "04c4ca6cfeae4259ce4985599c10a8bc": {
      "content": "visibility: visible",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "04cf6db61c8c1318ef47c6f4747f94b0": {
      "content": "%% @spec ${0}",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "%s": true
      },
      "source": "vim-snippets/snippets"
    },
    "04cf7a81c97f205ca0ffc8b54d1e11c4": {
      "content": "${1:#:set the_folder to }choose folder with prompt \"${2:#:Pick a folder:}\"\n${3:#:default location path to home folder}\n${4:#:with invisibles}\n${5:#:with multiple selections allowed}\n${6:#:with showing package contents}\n${0}",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "choose",
      "matches": {
        "choose_Folders": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "04d4d443f6e2675a3c5af5a0434b4141": {
      "content": "static defaultProps = {\n\t${1}: ${2}\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "static defaultProps",
      "matches": {
        "sdp": true
      },
      "source": "snippets/javascript"
    },
    "04d71c1dece676b7642a640c1188ed18": {
      "content": "to!double(${1:str});\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tod": true
      },
      "source": "vim-snippets/snippets"
    },
    "04f26eab68efdf1e492fcf86c1f0b5e0": {
      "content": "const ${1:module} = require('./${1:module}');",
      "doc": "require assignment local",
      "filetype": "base",
      "grammar": "lsp",
      "label": "require-assignment-local",
      "matches": {
        "base require assignment local": true
      },
      "source": "javascript/base"
    },
    "04fb578817fac9b9b30c533168536158": {
      "content": "font-size-adjust: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fza": true
      },
      "source": "vim-snippets/snippets"
    },
    "04fd566d408329e3090ac02635f6b03a": {
      "content": "console.trace(${1:object})",
      "doc": "Prints a stack trace from the point where the method was called",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleTrace",
      "matches": {
        "ctr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "04fe51613666c77b283a85dad308e5c5": {
      "content": "resize: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz": true
      },
      "source": "vim-snippets/snippets"
    },
    "0519b3e9180e1034789585f7b04f16cf": {
      "content": "justify-content: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "0520db8a6837b80772f19be3e9ded9fe": {
      "content": "$this->${1:method}()->shouldReturn(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldReturn('value')",
      "matches": {
        "sreturn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "052d28d9e02f82d8fd267f8649afad21": {
      "content": "{% raw %}${1:#:TARGET}{% endraw %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "raw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "052ecc7fb67101dad2199d7c178743b2": {
      "content": "macro_rules! ${1:name} {\n\t(${2:matcher}) => (\n\t\t$3\n\t)\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "macro_rules!",
      "matches": {
        "macro": true
      },
      "source": "vim-snippets/snippets"
    },
    "053a5067b8044bc79b38a5983a2af916": {
      "content": "while ($1) {\n\t${2:# body...}\n}\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "while",
      "matches": {
        "while": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "054285c8c5e865d47b795f0e09f34999": {
      "content": "height: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "0544e0d574260382c4f2add48f199583": {
      "content": "@behaviour ${1:Mix.Task}\n${0}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "beh": true
      },
      "source": "vim-snippets/snippets"
    },
    "054544de977ad871c4f157d6ac9fc005": {
      "content": "t.Run(\"${0}\", func(t *testing.T){\n})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "t.Run(\"test name\", func(t *testing.T){ ... })",
      "matches": {
        "tr": true
      },
      "source": "gosnippets/snippets"
    },
    "054fd92a5d2085c408e71290959a72b3": {
      "content": "<Link href=\"${1:/path/[id]}\" as=\"${2:/path/${id}}\">\n  <a>${3:content}</a>\n</Link>",
      "doc": "",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-link-dynamic-route",
      "matches": {
        "next link dynamic route": true
      },
      "source": "javascript/next"
    },
    "055aa7280c06469c1127cf89faf5133d": {
      "content": "$.post('${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\tfunction (data, textStatus, jqXHR) {\n\t\t${0:// success callback}\n\t}\n);",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxpost": true
      },
      "source": "snippets/javascript"
    },
    "0562a5ca995fe3207be22306fa74afe0": {
      "content": "PropTypes.objectOf($0).isRequired,",
      "doc": "An object with property values of a certain type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeObjectOfRequired",
      "matches": {
        "ptoor": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "056e4394cdb537bb9f341044574f957d": {
      "content": "<input type=\"text\" name=\"${1:user}\">${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inputtext": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "056e8d967798f78f07de0381f404b6e4": {
      "content": "table-layout ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbl": true
      },
      "source": "vim-snippets/snippets"
    },
    "0579bef010cca11b771a565180f6e36f": {
      "content": "outline-color: invert;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oc:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "0580d58ef5a858f17798b1fb17cbe64d": {
      "content": "if([${1:[self delegate]} respondsToSelector:@selector(${2:selfDidSomething:})])\n\t[${1} ${3}];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "del": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "05829f9a255dd79f5bc30ce162202f35": {
      "content": "if err != nil {\n\t${1}\n\treturn\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error handle and return",
      "matches": {
        "errh": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "0586f08a17a908e3f380508f16acac73": {
      "content": "else {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "058988b5b7cf4c7df85c4a5f1acfdf39": {
      "content": "<template>\n\t<div>\n\t</div>\n</template>\n<script>\n\texport default{\n\t\t${0}\n\t}\n</script>\n<style scoped>\n</style>",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vbase": true
      },
      "source": "vim-snippets/snippets"
    },
    "0589bbc958f34b09094077bf85cfbd35": {
      "content": "if ${1} then\n\t${2:${VISUAL}}\nelse\n\t${0}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "058a6f093ec31e2c16cc5c23f7a820fe": {
      "content": "import PropTypes from 'prop-types'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import PropTypes",
      "matches": {
        "impt": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "059521b76a5339f0a2e633491012f333": {
      "content": "${1:obj}.mousedown(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mdown": true
      },
      "source": "snippets/javascript"
    },
    "0599256c443f61396a9c1b75403efdb9": {
      "content": "return new Promise((resolve, reject) => {\n\t${1}\n})\n",
      "doc": "Creates and returns a new Promise in the standard ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "promise",
      "matches": {
        "prom": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "059b5a1bfa28ed5ac4c2a9323526616c": {
      "content": "align-self: end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "059dab83d04d2cb974867844d377b160": {
      "content": "abs(${0:value});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "abs": true
      },
      "source": "vim-snippets/snippets"
    },
    "059ef2dc2ec419d8223ad14e365279fc": {
      "content": "background-position-x ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgpx": true
      },
      "source": "vim-snippets/snippets"
    },
    "05a690bab2c80828d4d0cfa601058a11": {
      "content": "|${1}|",
      "doc": "",
      "filetype": "textile",
      "grammar": "snu",
      "label": "",
      "matches": {
        "|": true
      },
      "source": "vim-snippets/snippets"
    },
    "05b632d14f5fcb426018db05b39e88f3": {
      "content": "resize: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "05ba7c21bf7292b9a5e38e3dc52e8fd0": {
      "content": "${1:condition} ?? ${2:value-if-true} !! ${3:value-if-false};",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tc": true
      },
      "source": "vim-snippets/snippets"
    },
    "05baeba16e4024ea99cc02ac91077517": {
      "content": "_.divide(${dividend}, ${divisor})",
      "doc": "_.divide(6, 4);\n// => 1.5\n\nDivide two numbers.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-divide",
      "matches": {
        "lodash divide": true
      },
      "source": "javascript/lodash"
    },
    "05c455cf81dee373c2b7667fed3ab411": {
      "content": "dbms_output.put_line('${0}');",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "log": true
      },
      "source": "vim-snippets/snippets"
    },
    "05c909435176aafea2ab266479a3a517": {
      "content": "-   ${0}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "-": true
      },
      "source": "vim-snippets/snippets"
    },
    "05cf06dc9dd19aac3136f003568e120e": {
      "content": "@component('$1')\n\t${2:${VISUAL}}\n@endcomponent",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@component directive",
      "matches": {
        "component": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "05e253f1483b7367cb68b97e061402b3": {
      "content": "if {${1}} {\n\t${2}\n} elseif {${3}} {\n\t${4:# elsif...}\n} else {\n\t${0:# else...}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifee": true
      },
      "source": "vim-snippets/snippets"
    },
    "05e961f018a6866f8d39e23ccf086bfa": {
      "content": "${1:obj}.fadeOut('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadeout": true
      },
      "source": "snippets/coffee"
    },
    "05f44d6b41823563b8a6fdbf33ef2e6e": {
      "content": "${1:fn} := func() {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fn := func() { ... }",
      "matches": {
        "anon": true
      },
      "source": "gosnippets/snippets"
    },
    "05f45ac4a22c9cbfb63b8ea794655d29": {
      "content": "process.stdin",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stdin": true
      },
      "source": "snippets/javascript"
    },
    "05f7b37a9b1e921b4a923e5398036451": {
      "content": "function! ${1:#:func_name}(arglead, cmdline, cursorpos) abort\n  return filter(${2:#:list}, 'stridx(v:val, a:arglead) == 0')\nendfunction",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "customlist complete function",
      "matches": {
        "customlist": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "05fdb24270cf7997ba07d4ed387cfd3e": {
      "content": "{\n\tpath: '${1:path}', \n\tcomponent: ${2:Component},\n\tchildren: [\n\t\t{ path: '${3:childpath}', component: ${4:ChildComponent} }\n\t]\n}$0",
      "doc": "Angular route path with children",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-route-path-with-children",
      "matches": {
        "a-route-path-with-children": true,
        "angular route path children": true
      },
      "source": "javascript/angular"
    },
    "060d71e3643580aff358da82c4f22959": {
      "content": "#!/usr/bin/env perl -w\n\nuse strict;\nuse Test::More tests => ${1:1};\nuse ${2:ModuleName};\n\nok(${3:assertion});\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "Test",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "06157f72c6df21d390dbe7c23df8da21": {
      "content": "onBeforeUpdate(() => {${1}})",
      "doc": "Vue onBeforeUpdate Lifecycle hook",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle Hooks - onBeforeUpdate",
      "matches": {
        "v3onbeforeupdate": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "0617d03edaef97c9479ef97cf541e137": {
      "content": "for k, v in ipairs(${1:table}) do\n  print(k, v)\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "for k, v in ipairs(table) do",
      "matches": {
        "print_table": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0618970341d138974ee3b0f64e74484f": {
      "content": "erlang:display({${1}, ${0}}),",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "06233a7750a687d5813a1ba2d67e4cb2": {
      "content": "for (int ${1:i} = ${2}; $1 < ${3}; ${4:do what}) begin\n    ${5:TARGET}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0625206d1a0d0e2050e0bcf00273a65a": {
      "content": "${1:dfname} <- data.frame(${2:varlist})",
      "doc": "Create a data frame from vectors",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Data frame",
      "matches": {
        "dfv": true
      },
      "source": "vscode-R/snippets"
    },
    "0637373012d0a88ebae516cf99005075": {
      "content": "_.isPlainObject(${value})",
      "doc": "function Foo() {\n  this.a = 1;\n}\n\n_.isPlainObject(new Foo);\n// => false\n\n_.isPlainObject([1, 2, 3]);\n// => false\n\n_.isPlainObject({ 'x': 0, 'y': 0 });\n// => true\n\n_.isPlainObject(Object.create(null));\n// => true\n\nChecks if `value` is a plain object, that is, an object created by the\n`Object` constructor or one with a `[[Prototype]]` of `null`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isplainobject",
      "matches": {
        "lodash isplainobject": true
      },
      "source": "javascript/lodash"
    },
    "063d34b87a2fce44f2f8591b3edb463b": {
      "content": "padding-bottom: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "padding-bottom": true,
        "pb": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "06465f3eb1f9b5f8be06d3bc90a77204": {
      "content": "case ${1}:\n\t${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "064cade44e54494a332809b0f7a097ba": {
      "content": "_.dropWhile(${array}, ${predicate})",
      "doc": "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.dropWhile(users, function(o) { return !o.active; });\n// => objects for ['pebbles']\n\n// The `_.matches` iteratee shorthand.\n_.dropWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['fred', 'pebbles']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropWhile(users, ['active', false]);\n// => objects for ['pebbles']\n\n// The `_.property` iteratee shorthand.\n_.dropWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']\n\nCreates a slice of `array` excluding elements dropped from the beginning.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-dropwhile",
      "matches": {
        "lodash dropwhile": true
      },
      "source": "javascript/lodash"
    },
    "0663b328609f69ed3eb981c4cb90ec25": {
      "content": "after_save :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mas": true
      },
      "source": "vim-snippets/snippets"
    },
    "066cd1847db85a4e04826b0a840a32e0": {
      "content": "border-left ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdl": true
      },
      "source": "vim-snippets/snippets"
    },
    "0672638d73a1879668157258541d6ae4": {
      "content": "useEffect(() => {\n$0 return () => {\n$0\n\t}\n})",
      "doc": "Adds use effect",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useEffectUnMount",
      "matches": {
        "usfu": true
      },
      "source": "vscode-react/snippets"
    },
    "0672c2a03bdf5b66282c84e07092fab8": {
      "content": "/**\n * ${0}\n */",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "/*": true
      },
      "source": "vim-snippets/snippets"
    },
    "0679e54456951429d42e56505acf81ea": {
      "content": "fopen(\"${1:PATH}\", \"${2:MODE}\");\n${0:TARGET}\nfclose(${3:FD});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "fopen(\"...\", \"...\");",
      "matches": {
        "fopen": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "067cff639abbaebdf0d03e7cce756527": {
      "content": "import { ${1:MEMBERS} } from \"${0:TARGET}\";",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "import { member, ... } from \"module-name\";",
      "matches": {
        "import": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0685004b037de7cc0c900b59ce54ed67": {
      "content": "void ${1:/*function name*/}(${2:/*args*/}) ${3:@safe pure nothrow}\n{\n\t${VISUAL}$4\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "void function definition (void)",
      "matches": {
        "void": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "069eb85b273d014a92fb615293767617": {
      "content": "[#]",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "caption": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "06a2786543b0ea7b2c27979b40927d21": {
      "content": "-webkit-border-image: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "06b455c4783615c86c9b001bb17776c8": {
      "content": "cy.go('${1:direction}');",
      "doc": "Navigate back or forward to the previous or next URL in the browser’s history.",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-go",
      "matches": {
        "cypress go": true
      },
      "source": "javascript/cypress"
    },
    "06bee861e1ed8c13acec410253b95ba6": {
      "content": "@each ${1:$item} in ${2:items} {\n\t${0}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each": true
      },
      "source": "vim-snippets/snippets"
    },
    "06df5ccc683dae65d13ed25da99c687c": {
      "content": "<%= yield ${1::content_symbol} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yield": true
      },
      "source": "vim-snippets/snippets"
    },
    "06ef819b2ac542a8cbf5e1709d15460f": {
      "content": "outline: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "06f2e9aab5631d7bc7f7a25ddb910820": {
      "content": "max-width ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maw": true
      },
      "source": "vim-snippets/snippets"
    },
    "06f829ae90ed0361bffd90d21de6d3dd": {
      "content": "{% include '${1:#:template}' %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% include '...' %}",
      "matches": {
        "include": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "06fa7a1c6cda62df390f7043b086820e": {
      "content": "${1:name}.foldRight(${0:first}) {(",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fldr": true
      },
      "source": "vim-snippets/snippets"
    },
    "0716e4300a3e004d71a5c8719874bda6": {
      "content": "-record(${1:record}, {${2:field}=${3:value}}).",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rec": true
      },
      "source": "vim-snippets/snippets"
    },
    "07172fd152f9eddcbe6776639028790c": {
      "content": "printf(\"${1:%s}\\n\"${2});",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "071d40a5c2cd1ada57f214ac1f6e9b20": {
      "content": "if(${1:true})\n{\n\t${2:${VISUAL}}\n}\nelse\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "071dbcc140623373364cb7b1990ae56c": {
      "content": "function letgo()\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "function letgo() { ... }",
      "matches": {
        "letgo": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0720fbfdf6e74ee7ea464e4af71f0288": {
      "content": "justify-content: space-between",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "072289df3fec97e60834ad08fb4db074": {
      "content": "http.createServer(${1:handler}).listen(${2:port_number});",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "http": true
      },
      "source": "snippets/javascript"
    },
    "07232931e04ad462c0f032f13e3eab1a": {
      "content": "for ${1:#:value} in ${2:#:list}:\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "for ... in ...: ...",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "072a652acd1077e19e9eaa4da6aa424b": {
      "content": "vertical-align: super",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:sup": true
      },
      "source": "vim-snippets/snippets"
    },
    "07331b01aa0d907d8edccd62f7961f69": {
      "content": "{% else %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else": true
      },
      "source": "vim-snippets/snippets"
    },
    "0733d3d662a3f46c86eeebb8170eeeaa": {
      "content": "axios.get('${1:uri}')\n.then(function (response) {\n\t${2:success}\n})\n.catch(function (error) {\n\t${3:error}\n})",
      "doc": "Use Axios to make a get request - promise based",
      "filetype": "axios",
      "grammar": "lsp",
      "label": "axios-get-promise",
      "matches": {
        "axios get promise": true
      },
      "source": "javascript/axios"
    },
    "073c5a64f9f2f67b0fcaff2e83679e03": {
      "content": "module type ${1:(* Name *)} = sig\n\t${2:(* BODY *)}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "Declare module signature",
      "matches": {
        "mot": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "074111df9d6776a2b6a07b440770c945": {
      "content": "border-bottom-left-radius: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdblrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "0742e4f6feed6d2ee6f13b9526601250": {
      "content": "package body ${1} is\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "package body",
      "matches": {
        "pacb": true
      },
      "source": "vim-snippets/snippets"
    },
    "0743a198391587d9dda5ea6f3209efdf": {
      "content": "assert_in_delta ${1:expected_float}, ${2:actual_float}, ${3:2**-20}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asid": true
      },
      "source": "vim-snippets/snippets"
    },
    "074815ef74ab43cf87d2d94a7bcac372": {
      "content": "it { should_not ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isn": true
      },
      "source": "vim-snippets/snippets"
    },
    "074abb496242b3e02604197d8d6bdf64": {
      "content": "foreign import ${1} :: ${2}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fi": true
      },
      "source": "vim-snippets/snippets"
    },
    "074b6fcc39fdbb912410b5a14e1c11f8": {
      "content": "PropTypes.number,",
      "doc": "Number prop type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-number",
      "matches": {
        "prop-types number": true,
        "ptn": true
      },
      "source": "javascript/prop-types"
    },
    "0753b41185345ba54c4fe5e5ad7ce458": {
      "content": "${1:obj}.toggle('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "togsh": true
      },
      "source": "snippets/coffee"
    },
    "0757fcf0b8731ee7685e87f05871a8fc": {
      "content": "console.warn(${1:object})",
      "doc": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleWarn",
      "matches": {
        "cwa": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "07603462674517e22bd8e2e5ca5797e6": {
      "content": "case ${1:/* variable case */}:\n\t${2}\n\t${3:break;}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "076847c2bea955024686d9e7769e03cd": {
      "content": "import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LogInterceptor implements HttpInterceptor {\n\tconstructor() {}\n\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\tconst started = Date.now();\n\t\treturn next.handle(req).pipe(\n\t\t\ttap(event => {\n\t\t\t\tif (event instanceof HttpResponse) {\n\t\t\t\t\tconst elapsed = Date.now() - started;\n\t\t\t\t\tconsole.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}",
      "doc": "Angular HttpInterceptor for Logging HttpClient",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-httpinterceptor-for-logging",
      "matches": {
        "a-http-interceptor-logging": true,
        "angular http interceptor logging": true
      },
      "source": "javascript/angular"
    },
    "076894e570a529159863dd482c16b96a": {
      "content": "Array.new(${1:10}) { |${2:i}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "array": true
      },
      "source": "vim-snippets/snippets"
    },
    "0774d71f81f2168548266646dd09af31": {
      "content": "namespace ${1:#:NAME} {\n  ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "namespace NAME {...}",
      "matches": {
        "namespace": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0775146b55ecdabf02d54fe54852b907": {
      "content": "Page Should Not Contain    ${1:${text}}    ${2:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Not Contain",
      "matches": {
        "psnc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0778eaa1199065e661544e5b87feeb3e": {
      "content": "protected int ${1}(${2})\n{\n\t${0:return 0;}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mi|": true
      },
      "source": "vim-snippets/snippets"
    },
    "077b0f664189ab5868be3a18e18396a4": {
      "content": "border-right-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdri": true
      },
      "source": "vim-snippets/snippets"
    },
    "07858df0b2aa7c99830ee7733f0f4ce4": {
      "content": "<ol id=\"${1}\">\n\t${0}\n</ol>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ol#": true
      },
      "source": "vim-snippets/snippets"
    },
    "078a536fda19b406c8eb8d93d0eb77e7": {
      "content": "render nothing: ${1:true}, status: ${0:401}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rns": true
      },
      "source": "vim-snippets/snippets"
    },
    "078cd19d9fca8ad0003f4dee4dacc684": {
      "content": "std.stdio",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "io": true
      },
      "source": "vim-snippets/snippets"
    },
    "078e5ee3c664501e918ac95e82ffcd0d": {
      "content": "it { should have_one :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isho": true
      },
      "source": "vim-snippets/snippets"
    },
    "078e74f96cc7c542e3d18bc63c7c088f": {
      "content": "print(\"${1}\")\n${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "print",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "07909463a0179218f95efb2457af5bdf": {
      "content": "foreach (${1:item} = ${2:list}) {\n\t${3}\n}",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "foreach": true
      },
      "source": "vim-snippets/snippets"
    },
    "0790fe562736c418045c66876545720c": {
      "content": "defmacro ${1:name} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defma": true
      },
      "source": "vim-snippets/snippets"
    },
    "07980f56b38e3282cc8eb1e727d59bf1": {
      "content": "case ${1} do\n\t${2} ->\n\t\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "07a0d801f0c5c2f6e089fcfecc11d8e7": {
      "content": "display: inline;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "display: inline (display)",
      "matches": {
        "display": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "07a3c2097cc1ff0e221b2ab68c15c5fd": {
      "content": "(:use [${1:namespace} :only [${0}]])",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "use": true
      },
      "source": "vim-snippets/snippets"
    },
    "07aacae42314f1928b7d352ab2b5ca57": {
      "content": "dbl",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "Double",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "07afb423347033409b4399bdfb9f8908": {
      "content": "<a id=\"${1}\" href=\"${2:#}\">${0:$1}</a>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "a#": true
      },
      "source": "vim-snippets/snippets"
    },
    "07b2083feb5c5992889cfed0c19d1002": {
      "content": "*ngIf=\"${1:expression}\"",
      "doc": "Angular *ngIf",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngif",
      "matches": {
        "a-ngif": true,
        "angular ng if": true
      },
      "source": "javascript/angular"
    },
    "07b4dab22624d34847829bd8df73e0ae": {
      "content": "font-family: ${1:\"Helvetica Neue\", Helvetica, Arial, sans-serif};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "font-family",
      "matches": {
        "ff": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "07ba8b48e336f39792a5bad8b1028b52": {
      "content": "cy.get('${1:selector}');",
      "doc": "Get one or more DOM elements by selector or alias",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-get",
      "matches": {
        "cypress get": true
      },
      "source": "javascript/cypress"
    },
    "07badd9fca8c3002b548bce1cbf71a2b": {
      "content": "AnyRef",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "anyr": true
      },
      "source": "vim-snippets/snippets"
    },
    "07bc6d080d90c91680b9634fa3e59b15": {
      "content": "<dt>${0}</dt>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "07bc7d15347ed832e977f07d7bb02cf6": {
      "content": "render action: \"${1:action}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (action)... (ra)",
      "matches": {
        "ra": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "07c4f7fa90991bac718ba79c9292961b": {
      "content": "echo CHtml::dropDownList('${1:name}', '${2:select}', array(${3}),array('${4:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhddl": true
      },
      "source": "vim-snippets/snippets"
    },
    "07d13c56a0836ab99e81cda33b415940": {
      "content": "type tt_${1:name} is table of tr_${0:name} index by binary_integer;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tti": true
      },
      "source": "vim-snippets/snippets"
    },
    "07d57bb359c58fcec46e377bc36d411b": {
      "content": "{% for ${1:item} in ${2:collection} %}\n\t${0}\n{% endfor %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "07ed82025ad38fdd377eb08a00cb6e67": {
      "content": "$this->beConstructedThrough(${1:'methodName'}, [${2:'$arg'}]);",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->beConstructedThrough($methodName, [$arg])",
      "matches": {
        "ct": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "08036ec23abaa757bc0a44ad76741246": {
      "content": "println(\"${0}\");",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "080e8c6985e97f37c6a709a0d00fc370": {
      "content": "text-emphasis: dot",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "080f1d89bd66dcf5f5af335ae5fe4a44": {
      "content": "position: absolute;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "08177ead0f7a5bb90934661536b22ccd": {
      "content": "flex-wrap: ${0:nowrap};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxw": true
      },
      "source": "vim-snippets/snippets"
    },
    "081892ecee06da5945c65d72af8897a1": {
      "content": "_.toPath(${value})",
      "doc": "_.toPath('a.b.c');\n// => ['a', 'b', 'c']\n\n_.toPath('a[0].b.c');\n// => ['a', '0', 'b', 'c']\n\nConverts `value` to a property path array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-topath",
      "matches": {
        "lodash topath": true
      },
      "source": "javascript/lodash"
    },
    "0820f18050fc7a961e4daf97d426bc0f": {
      "content": "v-else-if=\"${1:condition}\"",
      "doc": "Expects: any. previous sibling element must have v-if or v-else-if.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-else-if",
      "matches": {
        "velseif": true,
        "vue v-else-if": true
      },
      "source": "javascript/vue"
    },
    "082658d445525a0b0a6d2768c26c5d3d": {
      "content": "(case ${1}\n\t[(${2}) ${0}])",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "0836f034ae9e39ed13f9f62e0fe214fe": {
      "content": "textFont(${1:font}${2:, }${0:size});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "textFont": true
      },
      "source": "vim-snippets/snippets"
    },
    "08420a994981457dab4d686f34bd5d90": {
      "content": "aaply(${1:array}, ${2:margin}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aa": true
      },
      "source": "vim-snippets/snippets"
    },
    "084882c22d2d0ffaf7dd8bb33247623f": {
      "content": "table-layout: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbl:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "085820f15c9e0b4ad6e8d42682a045e4": {
      "content": "grid-auto-rows max-content",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar:mac": true
      },
      "source": "vim-snippets/snippets"
    },
    "085be21e16cbce4cb739d9df8ae396dc": {
      "content": "PropTypes.oneOf(['$0']),",
      "doc": "Prop type limited to specific values by treating it as an enum",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeEnum",
      "matches": {
        "pte": true
      },
      "source": "vscode-react/snippets"
    },
    "086090ff76687985c8cf187e2f764dd8": {
      "content": "componentWillUnmount() {\n\t$0\n}\n",
      "doc": "Invoked immediately before a component is unmounted from the DOM.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentWillUnmount",
      "matches": {
        "cwun": true
      },
      "source": "vscode-react/snippets"
    },
    "0861ad7b7c6d0cbd821e0c9ab46ca9b1": {
      "content": "failwith \"${0:TARGET}\"",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "failwith \"...\"",
      "matches": {
        "fail": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0862f8f8837506752f7c99c60bf39efe": {
      "content": "brightness(${0:color});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "brightness": true
      },
      "source": "vim-snippets/snippets"
    },
    "08637d5d2a300f69c370f524b6e7c5b0": {
      "content": "font-stretch: semi-condensed",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "086c49bd183cde1369377a4ccf5c026c": {
      "content": "format!(\"${1}{${2}}\", ${3});",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "format!",
      "matches": {
        "fmt": true
      },
      "source": "vim-snippets/snippets"
    },
    "087b705b35e6a4b6d6175a4dd3d1d33f": {
      "content": "display: inline-table",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:itb": true
      },
      "source": "vim-snippets/snippets"
    },
    "08812c9705f4839ff509349ab39f0860": {
      "content": "margin-left: ${1:20px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "margin-left: length (margin)",
      "matches": {
        "margin": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0881f01f5b086705e9d4d30cc9dcfd92": {
      "content": "formArrayName=\"${1:control}\"",
      "doc": "Angular formArrayName",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngformarrayname",
      "matches": {
        "a-formarrayname": true,
        "angular ng form array name": true
      },
      "source": "javascript/angular"
    },
    "0884a03fc1e5f434e429bca1252e6f6e": {
      "content": "<li><a href=\"${0:#}\">${1}</a></li>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lia": true
      },
      "source": "vim-snippets/snippets"
    },
    "088a41a6b7dd5c63fba18139fbce8d7a": {
      "content": "@break",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@break",
      "matches": {
        "break": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "088d2017231c8db94334f20a27034486": {
      "content": "justify-items: stretch",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "089d40db15f8f0189df8d8213f6658f5": {
      "content": "_.isElement(${value})",
      "doc": "_.isElement(document.body);\n// => true\n\n_.isElement('<body>');\n// => false\n\nChecks if `value` is likely a DOM element.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-iselement",
      "matches": {
        "lodash iselement": true
      },
      "source": "javascript/lodash"
    },
    "08a294bdc2d43d3545e0ae7dca8aa520": {
      "content": "display dialog \"${1:#:text}\"\n\t${2:#:with icon} ${3:1}\n\tbuttons {\"${4:OK}\"} default button 1",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "dialog",
      "matches": {
        "dialog_OK": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "08a91eeb46a5ebce57bc35f2fc71f4e1": {
      "content": "text-height: max-size",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "08bcd3ce15a0486adc56076aa2b92708": {
      "content": "${1:NSObject} *${2:foo} = [${3:$1 alloc}]${4};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o": true
      },
      "source": "vim-snippets/snippets"
    },
    "08bef17219eb58af5455d41c2b01493c": {
      "content": "trace(${1:\"$0\"});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "08c52d0fb9aeadf9742d9ad5615844d9": {
      "content": "#!/usr/bin/env sh",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "08c8a1356e1182137e23cec4e286ad09": {
      "content": "margin: ${1:20px} ${2:0px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "margin: V H (margin)",
      "matches": {
        "margin": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "08c8cd16a97a618867393774ee570c7f": {
      "content": "{@docRoot",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{docRoot": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "08cfd61bc141c04065261f23064318ce": {
      "content": "isset($${1:array}[${2:key}])$0",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "isset array",
      "matches": {
        "isa": true
      },
      "source": "vim-snippets/snippets"
    },
    "08d032683a03ef2a783c24c8199d1801": {
      "content": "expect(${1:target}).toHaveAttr('${2:attr}'${3:, '${4:value}'})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to have attribute (coffee)",
      "matches": {
        "eha": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "08d4f7706c25532308c0100f5ae4218b": {
      "content": "View::renderTemplate('${1:part}', $${2:array});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_render_template": true
      },
      "source": "vim-snippets/snippets"
    },
    "08e740212bc252ece6ea1159024acda4": {
      "content": "{{ block.super }}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "super": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "08e9691d5937bc29909a5bbacb0d3ade": {
      "content": "componentDidUpdate: (prevProps, prevState) ->\n\t$1",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define componentDidUpdate",
      "matches": {
        "componentDidUpdate": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "08f310fe4b103ae57ba238b6ce2b8853": {
      "content": "${1:callbacks}.fireWith(${2:this}, ${3:args})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cfirew": true
      },
      "source": "snippets/coffee"
    },
    "08f44ed885536fe52b7e3347a33100b3": {
      "content": "\\[${1:#:expression}\\]${2}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\[ expression \\]",
      "matches": {
        "\\[": true,
        "mathenvb": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "08f5539e2d7e2bd683b7bc71d5c9a620": {
      "content": "word-break loose",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "08faf3c492bccd344523d7cd1fa90d71": {
      "content": "@callback ${1:name}(${2:args}) :: ${3:returns}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cb": true
      },
      "source": "vim-snippets/snippets"
    },
    "08fb52cb3dcdcda263aafdf2e0b13dd8": {
      "content": "place-content: flex-start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "08fbc73b1f066ef2c473c69f5ee7bb2f": {
      "content": "do |${1:v}|\n\t${2}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dov": true
      },
      "source": "vim-snippets/snippets"
    },
    "0903f736dd36302e0220fc1c3c5d31be": {
      "content": "import 'package:${1}/${2}.dart';\n${0}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "im": true
      },
      "source": "vim-snippets/snippets"
    },
    "09045fe3ce0373a1a73aa83a3f57a221": {
      "content": "white-space-collapse: break-strict",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:bs": true
      },
      "source": "vim-snippets/snippets"
    },
    "090e39fcedbe970790d62c8416815104": {
      "content": "if __FILE__ == \\$0\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0916b77ec70e2c97b859f874fe0bda4b": {
      "content": "\"${1:key}\": [\n\t${VISUAL}$0\n],",
      "doc": "",
      "filetype": "json",
      "grammar": "snu",
      "label": "Named array",
      "matches": {
        "na": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "092270bc03c277ef7a008a50b499c9d6": {
      "content": "background-origin: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo": true
      },
      "source": "vim-snippets/snippets"
    },
    "092320d2cbc3aaf6592990154fd8d40b": {
      "content": "*args${1:,}${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "args": true
      },
      "source": "vim-snippets/snippets"
    },
    "092bca57fe2508b9843f83a8d3981d75": {
      "content": "console.table(${1:\"${2:value}\"});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.table",
      "matches": {
        "ctable": true
      },
      "source": "snippets/javascript"
    },
    "093935374aaf8786347ef91a68c934db": {
      "content": "${1}:\nfor ${2:I} in ${3} loop\n\t${0}\nend loop $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "named for",
      "matches": {
        "named_for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "093ec6e516f4b918eeb9542457ddbf1c": {
      "content": "${1:deferred}.reject(${2:args})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Drej": true
      },
      "source": "snippets/javascript"
    },
    "094b70e2420fb079178dd00b773f8b22": {
      "content": "padding-top: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "padding-top": true,
        "pt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "094e18f5649bd2bf2ec0aca5e1bce460": {
      "content": "import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\ninterface Props {\n\t\n}\ninterface State {\n\t\n}\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {\n\tstate = {}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
      "doc": "Creates a React component class with PropTypes with connected redux and ES7 module system and TypeScript interfaces",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typeScriptReactClassCompomentRedux",
      "matches": {
        "tsrcredux": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "0951ab873821fa3a3c6c6308be6f7786": {
      "content": "await tick()",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-tick",
      "matches": {
        "sv-tick": true,
        "svelte tick": true
      },
      "source": "javascript/svelte"
    },
    "0955858b5ec9f63361622292a5575eb9": {
      "content": "afterAll(() => {\n\t$0\n});",
      "doc": "afterAll function is called once after all specs",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-afterall",
      "matches": {
        "aa": true,
        "jest afterall": true
      },
      "source": "javascript/jest"
    },
    "095662e68e2c29414a3a9548e97a8700": {
      "content": "while ${1:true} do\n  ${2:TARGET}\ndone",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "while ... do; ... done",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "095b9917a95d1af198ee4ee07e89e1bb": {
      "content": "type ${1:}\n\t${2}\nend type $1",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "type",
      "matches": {
        "ty": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "095e6ffaf1f07237230cbb0ffbcd3346": {
      "content": "$this->${1:method}()->shouldHaveKey(${2:'key'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldHaveKey('key')",
      "matches": {
        "skey": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0964a2fd749f227c89aab72d44e1a336": {
      "content": "${1:classNames}('${2:foo}', '${3:bar}');",
      "doc": "",
      "filetype": "classnames",
      "grammar": "lsp",
      "label": "classnames-usage",
      "matches": {
        "classnames usage": true
      },
      "source": "javascript/classnames"
    },
    "0969d68a1de941b00665880526b4eb80": {
      "content": "${1:obj}.next('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "next": true
      },
      "source": "snippets/javascript"
    },
    "096b215ac7b3d62b82d3691e3329b460": {
      "content": "white-space-collapse keep-all",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:k": true
      },
      "source": "vim-snippets/snippets"
    },
    "096df8b3ce3f49febbb3857344cadd41": {
      "content": "@impl true",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "im": true
      },
      "source": "vim-snippets/snippets"
    },
    "0971beb249aa0eec874568cbea7b76a2": {
      "content": "onUnmounted(() => {${1}})",
      "doc": "(destroyed) Vue onUnmounted Lifecycle hook",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle Hooks - onUnmounted",
      "matches": {
        "v3onunmounted": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "097e519151945456c71be2a5f314d9fb": {
      "content": "#define",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "097f4321d215ca4150ad9504fb614154": {
      "content": "_.partial(${func}, ${partials})",
      "doc": "function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar sayHelloTo = _.partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n\n// Partially applied with placeholders.\nvar greetFred = _.partial(greet, _, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\nCreates a function that invokes `func` with `partials` prepended to the\narguments it receives. This method is like `_.bind` except it does **not**\nalter the `this` binding.\n\nThe `_.partial.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-partial",
      "matches": {
        "lodash partial": true
      },
      "source": "javascript/lodash"
    },
    "098838ceb8162ac733e3eb0a1c0653de": {
      "content": "align-content: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac": true
      },
      "source": "vim-snippets/snippets"
    },
    "0994321273af2898f306cedbb5a261ac": {
      "content": "return ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "re": true
      },
      "source": "vim-snippets/snippets"
    },
    "09a1abfb0ab9ef3756c71de8961c0101": {
      "content": "- name: https\n  port: 443\n  protocol: TCP\n  targetPort: {{ .Values.$1.service.targetPorts.https }}\n  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.https))) }}\n  nodePort: {{ .Values.${1:value_key}.service.nodePorts.https }}\n  {{- end }}\n  ${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "portHTTPS_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "09a7755ca4fde0dfd0fc179c3b5fcd40": {
      "content": "align-self: stretch",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "09ab02405fa542741d7043138af74cfb": {
      "content": "if $1 then\n\t$2\nelseif $3 then\n\t$4\nelse\n\t$0\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "if/elseif/else statement",
      "matches": {
        "eife": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "09b6adfd718df2f91f30964fe9fe66be": {
      "content": "expect(${1:target}).toHaveBeenCalledWith(${2:arguments});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to have been called with (js)",
      "matches": {
        "ethbcw": true
      },
      "source": "vim-snippets/snippets"
    },
    "09c3caeed606cc793de10f26d49003b8": {
      "content": "| reverse",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reverse": true
      },
      "source": "vim-snippets/snippets"
    },
    "09c722ec0bc3035c329e234987471ec0": {
      "content": ".. warning:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "warning",
      "matches": {
        "warning": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "09c79b44e0cc01a8fa645ff60cb228a2": {
      "content": "drop_table :${1:table}${2: [press tab twice to generate create_table]}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Migration Drop Create Table (mdct)",
      "matches": {
        "mtab": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "09cd1e77fa4bcc1a4136e7f58f76b142": {
      "content": "<?=${0}?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<?=": true
      },
      "source": "vim-snippets/snippets"
    },
    "09d56a0e2fc364e1d19eff4e465e2ed3": {
      "content": "${1:FIELDNAME} = models.ImageField(upload_to=${2:path/for/upload}${3:, height_field=height, width_field=width}${0:, max_length=100})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "image": true
      },
      "source": "vim-snippets/snippets"
    },
    "09d7e757ffd1498248ad8d8bb6239ed3": {
      "content": "${1:ModelName}::model()->count(${2:condition}, array('${3:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ycountm": true
      },
      "source": "vim-snippets/snippets"
    },
    "09d882f7558975896d407357e69ca0eb": {
      "content": "clip: rect(${1:0} ${2:0} ${3:0} ${4:0});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cp:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "09d9c6782eaa57ae6828b6b5d4525b0d": {
      "content": "set ${1:#:axis}range [${2:*}:${3:*}]",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set x/y range.",
      "matches": {
        "range": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "09dc1b0e6b662f12228dd6de4f7a4c33": {
      "content": "min-height: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mih": true
      },
      "source": "vim-snippets/snippets"
    },
    "09e873e1866c1e107effe82fc0c04f78": {
      "content": "split('::').inject(Object) { |par, const| par.const_get(const) }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clafn": true
      },
      "source": "vim-snippets/snippets"
    },
    "09efc268718f449df39651f0ff38b76d": {
      "content": "margin-top auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mt:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "09f110e7ffcbbd75464fc457e6d8a129": {
      "content": "list-style ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lis": true
      },
      "source": "vim-snippets/snippets"
    },
    "09fcbab12c5ff9fee6a71bc7af46123f": {
      "content": "<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\nclass ${1:ClassName_model} extends CI_Model\n{\n\tprivate $table = '${2:table_name}';\n\tfunction __construct()\n\t{\n\t\tparent::__construct();\n\t\t${3:// code...}\n\t}\n\tpublic function create($data)\n\t{\n\t\tif($this->db->insert($this->table, $data))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\tpublic function read($id)\n\t{\n\t\treturn $this->db->get_where($this->table, array('id', $id))->result();\n\t}\n\tpublic function update($id, $data)\n\t{\n\t\tif($this->db->update($this->table, $data, array('id' => $id)))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\tpublic function delete($id)\n\t{\n\t\tif(is_array($id))\n\t\t{\n\t\t\t$this->db->trans_start();\n\t\t\tforeach($id as $elem)\n\t\t\t\t$this->db->delete($this->table, array('id' => $elem));\n\t\t\t$this->db->trans_complete();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif($this->db->delete($this->table, array('id' => $id)))\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n\tpublic function listRows($limit = null, $offset = 0)\n\t{\n\t\tif(!is_null($limit))\n\t\t\t$this->db->limit($limit, $offset);\n\t\treturn $this->db->get($this->table)->result();\n\t}\n}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_model_crudl": true
      },
      "source": "vim-snippets/snippets"
    },
    "09fdb3f0837bfb29f96e0e866ebc1df0": {
      "content": "expect(${1:target}).toBeGreaterThan(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to be greater than (js)",
      "matches": {
        "eg": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a020fd746caa7230433a9dd6446ecdd": {
      "content": "function ${1:#:function_name}(${2:#:argument})\n\t${0:TARGET}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "function name(args)...end",
      "matches": {
        "func": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0a051bed96f2ad50e8799e026ec63a61": {
      "content": "if(${1:/*condition*/})\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "if .. (if)",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0a2144280d9759dffea5dbfe0db1ace9": {
      "content": "{% firstof $1 %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "firstof": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0a2c6b94a75b8bd1e3289129a973cdd1": {
      "content": "$this->assertInternalType(${1:'string'}, ${2:actual});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertInternalType('string', $actual)",
      "matches": {
        "asit": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a3326d49197c1ac5fe631aa5a7ec772": {
      "content": "\\$_GET['${1:#:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "get": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0a33ae8b524ef4b8605dbc59833012f8": {
      "content": "echo CHtml::textField('${1:name}', '${2:value}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhtf": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a3544b3ead00442a11b18c608791390": {
      "content": "if ${1:condition}; then\n\t${0:${VISUAL}}\nfi",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a36727a10ec0adcd908890993aecdff": {
      "content": "isset(${1:var})$0",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "isset",
      "matches": {
        "is": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a37be50e4012ee0722ce775b60885c4": {
      "content": "expect(${1:target}).toHaveAttr('${2:attr}'${3:, '${4:value}'});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to have attribute (js)",
      "matches": {
        "eha": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a3ae0e75caa8fca209f60060cdeedb8": {
      "content": "_.toPlainObject(${value})",
      "doc": "function Foo() {\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.assign({ 'a': 1 }, new Foo);\n// => { 'a': 1, 'b': 2 }\n\n_.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n// => { 'a': 1, 'b': 2, 'c': 3 }\n\nConverts `value` to a plain object flattening inherited enumerable string\nkeyed properties of `value` to own properties of the plain object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-toplainobject",
      "matches": {
        "lodash toplainobject": true
      },
      "source": "javascript/lodash"
    },
    "0a507429bfe03cfcce5e2aad77f84d8b": {
      "content": "width: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a564a3ca1acd531513606250d230992": {
      "content": "apply(${1:X}, ${2:MARGIN}, ${3:FUN}, ${4:...})",
      "doc": "Apply",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "app",
      "matches": {
        "apply": true
      },
      "source": "vscode-R/snippets"
    },
    "0a6b770823a9a35390e7108cfe181fdf": {
      "content": "${1}:\nwhile ${2} loop\n\t${0}\nend loop $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "named while",
      "matches": {
        "named_while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0a6dacb4bf39d7b77cebc3b9cf7b2489": {
      "content": "console.info(${0:TARGET});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci": true,
        "console-info": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0a6ebb2f54972c62893077540f2e3158": {
      "content": "if(${1}) {\n\t${2}\n} else {\n\t${3}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a72682b03019fc2a23e86139b3c6e6a": {
      "content": "livenessProbe:\n  httpGet:\n\tpath: /healthz\n\tport: 8080\n\tscheme: HTTP\n  initialDelaySeconds: 30\n  timeoutSeconds: 5\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "livenessProbe_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a7a4c07eb21d25306986ce1db348ecb": {
      "content": "blue(${0:color});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blue": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a7c9dc8311ec0d9b4178a21f1ab9438": {
      "content": "border-top-color: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "border-top-color": true,
        "btc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0a7ec6a8e773c4a7988e7834da7b4e89": {
      "content": "${1:obj}.serialize()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "serialize": true
      },
      "source": "snippets/javascript"
    },
    "0a80acaceb4476502c0246f62351c59b": {
      "content": "bitflags! {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "bitflags!",
      "matches": {
        "bfl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0a81022bf495aed84839f5fe3eb057b1": {
      "content": "make(${1:[]string}, ${2:0})${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "make(Type, size)",
      "matches": {
        "make": true
      },
      "source": "gosnippets/snippets"
    },
    "0a856a4807b1f8c42bacb31dd205a9f6": {
      "content": "@else",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@else directive",
      "matches": {
        "else": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0a91b2c3a2350eef61251211ebce9c91": {
      "content": "form_button(\"${1:name}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_button": true
      },
      "source": "vim-snippets/snippets"
    },
    "0a9bf50747cfa4f01bd1cfb66a0a41ce": {
      "content": "if [ ${1:#:condition} ]; then\n\t${0:TARGET}\nfi",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0a9d8c34d7709bd49c375c3c1e9ea509": {
      "content": "{% verbatim %}\n\t${VISUAL}\n{% endverbatim %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "verbatim": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0aa284f042cc0351ca784c5e3c0e2447": {
      "content": "${1:true} ? ${2:a} : ${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "?:": true
      },
      "source": "vim-snippets/snippets"
    },
    "0aa39c065d8667719aaeb56b1d1fa7bb": {
      "content": "background-repeat: repeat-y;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:y": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ab23722430e9a01b0cd9a2854ae64e2": {
      "content": "<template>\n  ${0}\n</template>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <template> with html",
      "matches": {
        "template_with_html": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0ab37da105fa9cc8be06a43c62b27cd2": {
      "content": "_.update(${object}, ${path}, ${updater})",
      "doc": "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.update(object, 'a[0].b.c', function(n) { return n * n; });\nconsole.log(object.a[0].b.c);\n// => 9\n\n_.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\nconsole.log(object.x[0].y.z);\n// => 0\n\nThis method is like `_.set` except that accepts `updater` to produce the\nvalue to set. Use `_.updateWith` to customize `path` creation. The `updater`\nis invoked with one argument: (value).\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-update",
      "matches": {
        "lodash update": true
      },
      "source": "javascript/lodash"
    },
    "0ab39e04dd77e7753527f7c56f30b7d0": {
      "content": "align-self: stretch;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ac0e0c1723536e5b623dd99be72025a": {
      "content": "const ${1:name} = computed(() => {\n\treturn ${2}\n})",
      "doc": "Set computed property - Vue Composition API",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v3computed",
      "matches": {
        "vue v3 computed": true
      },
      "source": "javascript/vue"
    },
    "0ac519f18742bb27e955530aba3e4cd9": {
      "content": "assert_difference \"${1:Model}.${2:count}\", ${3:1} do\n\t$0\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "assert_difference",
      "matches": {
        "asd": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0acce92733fe75c356044f672c23e592": {
      "content": "grid-row-start: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grs": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ad43725b5d17156f96bbf23d04ffdc6": {
      "content": "{% extends \"${1}\" %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig extends",
      "matches": {
        "extends": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ad5d33692341ab40245d5e30be573ad": {
      "content": "background-break: bounding-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ad6f75f3d07e317e9d67e2039d43dd4": {
      "content": "$this->shouldThrow(${1:'\\Exception'})->duringInstantiation();",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldThrow('\\Exception')->duringInstantiation()",
      "matches": {
        "sthrowi": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0adc941f4c11c5dba9b99be0989e4836": {
      "content": "border-left-style: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdls:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ae043062d8c5ddefa7fb167500534c0": {
      "content": "${1:component}(:${1:propName}=\"${0}\")",
      "doc": "component element with props",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Component with Props Binding",
      "matches": {
        "vel-props": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "0ae43c28476391ee539d78c248c028ba": {
      "content": "box-shadow: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ae6b46809c05bf021cdd54f12d316b6": {
      "content": "begin\n    ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "begin ... end",
      "matches": {
        "begin": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0ae70fed445e5425f2e8b1c5d2fa7f27": {
      "content": "border-bottom ${1:1px} ${2:solid} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdb+": true
      },
      "source": "vim-snippets/snippets"
    },
    "0af357703ba5ec9ad12b88a69446623b": {
      "content": "\\begin{flushleft}\n\t${1:TARGET}\n\\end{flushleft}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{flushleft} \\flushleft": true,
        "flushleft": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0afabcbce5bdb38259853b09b7de2e9e": {
      "content": "logger.warn { \"${1:message}\" }$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "logger.warn",
      "matches": {
        "logw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0b072cbef1e979ba52779d3112987f7e": {
      "content": "padding-bottom: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b0bd69495c5c0e9051a8ee1b9b51d2e": {
      "content": "z-index: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "z": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b0ea15ba092c7482ee2060c6c7117a3": {
      "content": "enter-to-class=\"$1\"$0",
      "doc": "enter-to-class=''. Expects: string.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-enter-to-class",
      "matches": {
        "entertoclass": true,
        "vue enter-to-class": true
      },
      "source": "javascript/vue"
    },
    "0b11a6a994defef056911d9878e1b1fb": {
      "content": "<head>\n    <meta charset=\"${1:utf-8}\">\n    <title>${2}</title>\n<style>\n    ${3}\n</style>\n    ${4}\n</head>${5}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "head": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0b139a7b253e3afaab51544a0096938a": {
      "content": "finally {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "finally {}",
      "matches": {
        "fin": true,
        "finally": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0b303190f02c0763792b77c76de3353f": {
      "content": "floor(${0:value});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "floor": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b40cc26a7f70d872fc19a8933c89fbd": {
      "content": "_.subtract(${minuend}, ${subtrahend})",
      "doc": "_.subtract(6, 4);\n// => 2\n\nSubtract two numbers.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-subtract",
      "matches": {
        "lodash subtract": true
      },
      "source": "javascript/lodash"
    },
    "0b427921fb45e2d38026554ad2fd068d": {
      "content": "void mouseMoved(){\n\t${0}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mouseMoved": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b49de7bd011148db98abf2c5e0322be": {
      "content": "vertical-align: sub",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:sub": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b4c1ec8bc859508f0887a131f711e34": {
      "content": "mean(${1:x}${2:, na.rm=${3:FALSE}})",
      "doc": "Mean",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "mea",
      "matches": {
        "mean": true
      },
      "source": "vscode-R/snippets"
    },
    "0b5a9fd7f2a02246f931a614afe0125f": {
      "content": "(${1: a > b}) ? ${2:a} : ${3:b};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "?": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b5fa44180329bc2a89554218ee254bb": {
      "content": "list-style-type: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b63b5ee7746912cfec772d4b0851647": {
      "content": "overflow-y ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b65521eed5a4cd182221f3132efe355": {
      "content": "redirect(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rr": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b65be31c57c105890f9bd26b47e5e27": {
      "content": "new $1($2);",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "new (new)",
      "matches": {
        "new": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0b696d3f000aa9dbae1dcc9140c97433": {
      "content": "text-justify: inter-cluster;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:ic": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b6a0e0ec848ed9e83068417ac5116fa": {
      "content": "INTEGER",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "int": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b71dfa81e545f081181ed4a06460d3f": {
      "content": "padding-right: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b764deb891d5f3bde27faeaadc44a1f": {
      "content": "import pudb; pudb.set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "import pudb..",
      "matches": {
        "pudb": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0b76c1f135f7a129ee51c98c6f4c20d5": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script setup>\n\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
      "doc": "Base for Vue File Setup Composition API with SCSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component Setup Composition API",
      "matches": {
        "vbase-3-setup": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "0b813fe6824c0a3488c3ec153ce7b778": {
      "content": "using (${1:#:resource}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "using () {}",
      "matches": {
        "using resource": true,
        "using_resource": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0b817510db028718ffcf855c928a5842": {
      "content": "dbg!(&${1});\n${0}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "dbg! debugging macro statement",
      "matches": {
        "d;": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b8622f7b23eef9496c551a651f2e097": {
      "content": "border-bottom-left-image: continue",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbli:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b88a4977ec041aeeb4a39fb4ab3e813": {
      "content": "<hgroup class=\"${1}>\n\t${0}\n</hgroup>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hgroup.": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b90ba91dc5423ba20f8e19dfea3f7f7": {
      "content": "import qualified ${1:Data.Text} as ${0:T}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "importq": true
      },
      "source": "vim-snippets/snippets"
    },
    "0b94dc56d3fc0d352881a24da58733f9": {
      "content": "${1:FIELDNAME} = models.AutoField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "AutoField",
      "matches": {
        "mauto": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0ba62b9ab207056b4da2b781eb943be9": {
      "content": "<dfn>${0}</dfn>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dfn": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ba9837b9b90bccccd07a67df44f96ba": {
      "content": "(${1:arguments}) => {\n\t${0}\n}",
      "doc": "arrow function with body (ES6)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "arrow-function-with-body-es6-",
      "matches": {
        "base function arrow body": true
      },
      "source": "javascript/base"
    },
    "0baf18041eec27c220454ac3198f7ce1": {
      "content": "assert_no_match(/${1:unexpected_pattern}/, ${2:actual_string})",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asnm": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bb3525e8aafc08beb58a3df9a32036e": {
      "content": "else {\n\t${1}\n}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bb63d47725cc05b7e284475d3f35bb4": {
      "content": "import React, { memo } from 'react'\n\nexport default memo(function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n})\n",
      "doc": "Creates a React Memo Function Component with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactFunctionMemoComponent",
      "matches": {
        "rmc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "0bb84f5d99a632302d9554a9a4914d4c": {
      "content": "results.report('${1:name}:') { TESTS.times { ${0} } }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rep": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bbc9c72261afb6cf6e38b911113023a": {
      "content": "import React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativeComponent",
      "matches": {
        "rnc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "0bbe8eff962278d9c3a5519b75c5a71c": {
      "content": "border-fit stretch",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bc1d0ae38250284c2685c9f7cef7d6f": {
      "content": "border-style dot-dash",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:dtds": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bc3ee5ce4f4c7e1eee2bac7acc57973": {
      "content": "public ${1:int} ${2:MyProperty} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "Property with a private setter",
      "matches": {
        "propg": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0bc58ad307ae437d9a0e631dbfcba33f": {
      "content": "java.beans.",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "j.b": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0bc952e1f66dc79b3aa9c28b832ef152": {
      "content": "else:\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "else: ...",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0bca605f14ef1fb83f115416604fdb71": {
      "content": "static if(${1}) {\n\t${2}\n} else static if(${3}) {\n\t${4}\n} else {\n\t${5}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sifee": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bcd1ed652073fcbff7e43a4be386059": {
      "content": "std::unordered_set<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "uset": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bcd8629e9120f77547dbfd1a82de700": {
      "content": "align-content: ${1:stretch};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bd14ff6dfe13475443845596569cdfe": {
      "content": "const ${1:results} = await ${2:client}.request(\n  ${3:query},\n  ${4:variables}\n);",
      "doc": "",
      "filetype": "graphql-request",
      "grammar": "lsp",
      "label": "graphql-request-client-request-variables",
      "matches": {
        "graphql-request client request variables": true
      },
      "source": "javascript/graphql-request"
    },
    "0bd687d0b2be44056a2a7ea1754166bc": {
      "content": "${1:ModelName}::model()->findByPk(${2:pk}, ${3:condition}, array('${4:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yfindbp": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bd8f07518264067eaba646e2b813f9e": {
      "content": "while(${1:/* condition */})\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bdfcf512262373f11d92635ffd086ba": {
      "content": "$this->input->is_ajax_request();${1}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_input-is_ajax_request": true
      },
      "source": "vim-snippets/snippets"
    },
    "0be51c1bfb890a0de2afab3d785b2069": {
      "content": "box-sizing border-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxz:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "0be5eff753136913b85ba9a033b3f2e6": {
      "content": "${1:obj}.reset(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reset": true
      },
      "source": "snippets/javascript"
    },
    "0bede1f630340266933b705e4c21ed86": {
      "content": "HashSet${1:[T]}${0:()}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hset": true
      },
      "source": "vim-snippets/snippets"
    },
    "0bf59ab58f6246369ee0f3910e4e220b": {
      "content": "justify-content space-around",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:sa": true
      },
      "source": "vim-snippets/snippets"
    },
    "0c02d47571eefc79aa31f2e24c86cc74": {
      "content": "\\\\subsection*{${1:subsection name}}%\n\\\\label{sub:${2:$1}}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\subsection*",
      "matches": {
        "sub*": true
      },
      "source": "vim-snippets/snippets"
    },
    "0c04173faf5aeed55cbbab20a82b1561": {
      "content": "const ${1} = styled(${2})`\n  ${3}\n`;",
      "doc": "Styled-Component from existing component",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-styled-component-from-existing-component",
      "matches": {
        "scc": true,
        "styled-components component from existing": true
      },
      "source": "javascript/styled-components"
    },
    "0c06127b64920dee4ee9a22e6c5833c2": {
      "content": "pure @safe nothrow",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "psn": true
      },
      "source": "vim-snippets/snippets"
    },
    "0c128997b49fb49e5d699d1dc0431d73": {
      "content": "| modulo: ${1:2}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "modulo": true
      },
      "source": "vim-snippets/snippets"
    },
    "0c283b8eb4262cb17ea883e47fc85b66": {
      "content": "(case ${1}\n  ((${2}) ${3})\n  (${0:else}))",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0c2c4eff24d5c009c3a8e783c2e62631": {
      "content": "${1:obj}.keyup (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "kup": true
      },
      "source": "snippets/coffee"
    },
    "0c35353f3e8ce77dd6e10195f34eb460": {
      "content": "case ${1}:\n  ${0}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cs": true
      },
      "source": "vim-snippets/snippets"
    },
    "0c36128cb056bfb9bd8fc672c4da9521": {
      "content": "const ${1} = styled.${2}`\n  ${3}\n`;",
      "doc": "Styled-Component",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-styled-component",
      "matches": {
        "sc": true,
        "styled-components component": true
      },
      "source": "javascript/styled-components"
    },
    "0c4041095a328b684da1d41511e48abe": {
      "content": "import React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativeComponentExport",
      "matches": {
        "rnce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "0c45b4ec89f10935ecab14223a838352": {
      "content": "{% blockquote ${1:author} ${2:URL} ${3:link_text} %}\n${0:quote}\n{% endblockquote %}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blockquote-link": true
      },
      "source": "vim-snippets/snippets"
    },
    "0c48ed5f3eb48dbcb5524119a89218d3": {
      "content": "get ${1:#:NAME}() {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "get": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0c4ec83f12275458c81e9d2ad6990953": {
      "content": "Maximize Browser Window",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Maximize Browser Window",
      "matches": {
        "mbw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0c594244d0198d88239984988888d0b7": {
      "content": "${1:name}.reduceRight[${0:T}] {(",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "redr": true
      },
      "source": "vim-snippets/snippets"
    },
    "0c5d941999866033f094e56391fff2b0": {
      "content": "textWidth(${0:data});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "textWidth": true
      },
      "source": "vim-snippets/snippets"
    },
    "0c61f5ffc0aa515e6a84c945d0079ba5": {
      "content": "(* ${0:TARGET} *)",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "comment",
      "matches": {
        "cc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0c630d087b130a9da676a0251f1e4ec8": {
      "content": "[| ${0:TARGET} |]",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "array literal [| |]",
      "matches": {
        "arl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0c67b6e2b973f30e1681d631fe842c57": {
      "content": "grid-auto-flow: dense",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "0c76b6200753eba6e669ff168e2233f5": {
      "content": "import React, { Component } from 'react'\n",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "import-react-component",
      "matches": {
        "imrc": true,
        "react import component": true
      },
      "source": "javascript/react"
    },
    "0c86a7a4a5f135756a003607856563c7": {
      "content": "for (${1:var} in ${2:object}){\n\t${0}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "enumerate names",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "0c94079f8d34112eca29a9d023e330a4": {
      "content": "school = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "school": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0c9880bb6507546d7e4d19a5b02aca1a": {
      "content": "<img class=\"${1}\" src=\"${2}\" alt=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img.": true
      },
      "source": "vim-snippets/snippets"
    },
    "0cab63fd83bec4e714c803a3eac9e7f3": {
      "content": "function* (${1:arguments}) {\n\t${0}\n}",
      "doc": "generator function (ES6)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "generator-function-es6-",
      "matches": {
        "base function generator": true
      },
      "source": "javascript/base"
    },
    "0cad6e2b385a1206de301f7ab930f3df": {
      "content": "border-right-width: ${1:1}px",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-right-width: size (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0cafd25d774ade578bbc5d21502b1c89": {
      "content": "<nuxt-link :to=\"{\t${1|name,path|}: '${2:value}', ${3|params,query|}: {\t${4:key}: '${5:value}'\t}\t}\">$6</nuxt-link>$0",
      "doc": "",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-namedlinkto",
      "matches": {
        "nuxt namedlinkto": true
      },
      "source": "javascript/nuxt"
    },
    "0cb3fb6a65af59a2d33beafa3a71e334": {
      "content": "Plug '${0}'",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "vim-plug Plugin definition",
      "matches": {
        "plug": true
      },
      "source": "vim-snippets/snippets"
    },
    "0cb5da9018c7ac0fdb21a47692fa9bdf": {
      "content": "add:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "add": true
      },
      "source": "vim-snippets/snippets"
    },
    "0cb84123dfbffc2e1e9391dc2d3f9b56": {
      "content": "echo CHtml::normalizeUrl(array('${0}'));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhnurl": true
      },
      "source": "vim-snippets/snippets"
    },
    "0cb8956a244db38d44966160a19f34ce": {
      "content": "func Test${1} (${2:t *testing.T}) {\n  for i := 0; i < ${3:t.N}; i++ {\n    ${4}\n  }\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func Test... (t *testing.T) { ... }",
      "matches": {
        "funcTest": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0cbd1645a12728ecb337dd8d708cfcd7": {
      "content": "@unpublished{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    note = {${4}},\n    memo = {month, year},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@unpublished": true,
        "unpublished": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0cbf96370b4890262a05bc16b173115e": {
      "content": "wilcox.test(${1:x}, ${0:y})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wil": true
      },
      "source": "vim-snippets/snippets"
    },
    "0cc981bc4648b15e6226a01a9a3461ff": {
      "content": "render text: '${1:text to render}', layout: ${0:true}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rtlt": true
      },
      "source": "vim-snippets/snippets"
    },
    "0cd089df87bf40da975553827190808c": {
      "content": "(${1:params}) => {\n\t${2}\n}",
      "doc": "Creates an anonymous function in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "anonymousFunction",
      "matches": {
        "anfn": true
      },
      "source": "vscode-javascript/snippets"
    },
    "0cd4b462a7388082b30b2a0e4dc2d2b5": {
      "content": "has_many :${1:object}s${2:, class_name: \"$1\", foreign_key: \"${4:reference}_id\"}, dependent: :destroy$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "has_many dependent: :destroy",
      "matches": {
        "hmd": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0cd8491f9e58097508ec4afbeeb8ad77": {
      "content": "${1:app}.delete('$2', $3);",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "express DELETE",
      "matches": {
        "edelete": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0cdbb251ee284200df6ba0d989f4f7c8": {
      "content": "${1:obj}.prependTo('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prependto": true
      },
      "source": "snippets/javascript"
    },
    "0ce28e67e9f008dc4899c15d3523da52": {
      "content": "border-spacing: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdsp": true
      },
      "source": "vim-snippets/snippets"
    },
    "0cebf1d587976f263115f8cdf338e357": {
      "content": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
      "doc": "Invoked immediately after the component's updates are flushed to the DOM.",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-componentdidupdate",
      "matches": {
        "cdup": true,
        "react componentdidupdate": true
      },
      "source": "javascript/react"
    },
    "0cef6157507728114ddedc031ffdcdd3": {
      "content": "white-space-collapse: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc": true
      },
      "source": "vim-snippets/snippets"
    },
    "0cf1a22c304cffed2bbbafa886d72310": {
      "content": "validates_length_of :${1:attribute}, within: ${2:3..20}${3:, on: :${4:create}, message: \"${5:must be present}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_length_of (vl)",
      "matches": {
        "vl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0cf47a7d3c563bb02ebbc035d82a676e": {
      "content": "if ${1} do\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "if .. do .. end",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "0cf5caa81f6a28709dea6274227e6acf": {
      "content": "${1:obj}.removeProp('${2:property name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "remp": true
      },
      "source": "snippets/javascript"
    },
    "0d04d153553044e7af4119c828701932": {
      "content": "::after",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "::a": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d04f7960cd1c729ec67d0fedf718d23": {
      "content": "${1:map}.${2:connect} '${0:controller/:action/:id}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapc": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d06e07f655c24d70c71d1b05dd72347": {
      "content": "${1:my} class ${2:ClassName} ${3:is|does Parent|Role}{\n\t${4}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d109da8a5b50fe8ecc33508878e8fb2": {
      "content": "margin-bottom: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "margin-bottom": true,
        "mb": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0d19e4cd59e380bce05c1c495d005990": {
      "content": "_.multiply(${multiplier}, ${multiplicand})",
      "doc": "_.multiply(6, 4);\n// => 24\n\nMultiply two numbers.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-multiply",
      "matches": {
        "lodash multiply": true
      },
      "source": "javascript/lodash"
    },
    "0d1b0cd76eb9714cf0cdd8013387b272": {
      "content": "<ol>\n\t${0}\n</ol>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ol": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d1d593f15612e019940679a36fa5736": {
      "content": ".. note::\n\t${0:my notes}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "not:": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d25982f671eaeac6c6a303757bc2866": {
      "content": "@if ${1:condition}\n\t${2:${VISUAL}}\n@else\n\t${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d2e757c0c456f957835e1df5f0165b2": {
      "content": "switch(${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sw": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d3a194b14054fe122dc9209f3f97f10": {
      "content": "${1:obj}.attr('${2:attribute}', '${3:value}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "attr": true
      },
      "source": "snippets/javascript"
    },
    "0d474c8be85f10b6557707384cd9faef": {
      "content": "INSERT INTO ${1:cities}\nVALUES (${0:'Vancouver', 'Canada'});",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "INSERT INTO ... VALUES ( ... )",
      "matches": {
        "INSERT_DATA": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0d492c1d20a6f9b0220a071fbcf41dee": {
      "content": "border-fit repeat",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d4c6d1fb72d3dd1ee717a9017819dc2": {
      "content": "border none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bd:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d509699cad53da710103906e83300d5": {
      "content": "rapply(${1:list}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rapply": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d567d4b9906b0e899ed9038bc261661": {
      "content": "function ${1:fname}(${2:...})\n\t${0:-- body}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d57b99ebcbdd829f54f2880c6357e02": {
      "content": "import { NgModule } from '@angular/core';\n\nimport { ${1:Name}Component } from './${2:name}.component';\n\n@NgModule({\n\timports: [],\n\texports: [],\n\tdeclarations: [${1:Name}Component],\n\tproviders: [],\n})\nexport class ${1:Name}Module { }\n$0",
      "doc": "Angular Module",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-module",
      "matches": {
        "a-module": true,
        "angular module": true
      },
      "source": "javascript/angular"
    },
    "0d59b86c3c3612d7bd5438b000a8b47e": {
      "content": "----------\n",
      "doc": "Insert horizontal rule",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert horizontal rule",
      "matches": {
        "horizontal rule": true
      },
      "source": "vscode-R/snippets"
    },
    "0d5e7ba5391aa8f23dca9662583edae5": {
      "content": "background-attachment fixed",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bga:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d63182c2da4198ca40d499eae82e6fa": {
      "content": "has_and_belongs_to_many",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "has_and_belongs_to_many",
      "matches": {
        "habtm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0d63e59e85b7690729d8aaa393cd2970": {
      "content": "\\\\url{${1}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "url": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d73a2440b772f558ffd9549dd196b1b": {
      "content": "@param ${1:#:var} ${0:#:description}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "param": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0d74f5cfa476e61cf7fdd36d1e9f9334": {
      "content": "mixed.notOneOf()",
      "doc": "mixed.notOneOf(arrayOfValues: Array<any>, message?: string | function)\n\nBlacklist a set of values. Values added are automatically removed from any whitelist if they are in it.\nThe ${values} interpolation can be used in the message argument.let schema = yup.mixed().notOneOf([\"jimmy\", 42]);\n\nawait schema.isValid(42); // => false\nawait schema.isValid(new Date()); // => true\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-not-one-of",
      "matches": {
        "yup mixed notoneof": true
      },
      "source": "javascript/yup"
    },
    "0d80007ba237d8c89f435d4c481d9741": {
      "content": "<optgroup label=\"${1}\">\n${2:TARGET}\n<optgroup>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "optgroup": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0d852a01068df94428009102a1f20a6b": {
      "content": "\"net.liftweb\" %% \"${0:lib}\" % liftVersion % \"compile->default\",",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "liftjar": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d8a7a12d8341f2127e326a3262fd35c": {
      "content": "PropTypes.instanceOf($0).isRequired,",
      "doc": "Is an instance of a class prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeInstanceOfRequired",
      "matches": {
        "ptir": true
      },
      "source": "vscode-react/snippets"
    },
    "0d901cb7f513b10451afb6a072dcaeb3": {
      "content": "clip: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cp": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d93535d9df242e362ce360c1de07d24": {
      "content": "(scope, element, attrs${1:ctrl}) ->\n\t${2}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngdlf": true
      },
      "source": "snippets/coffee"
    },
    "0d96acadc4ef32ce3d37bc7f0f885bea": {
      "content": "${1:pattern} {\n\t${2:#do something}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ca": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d9d51280c68056eb6d34023d9559116": {
      "content": "type ${1:Interface} interface {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Interface declaration",
      "matches": {
        "interface": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0d9dc731592f4527e20fae8a2e2432c3": {
      "content": "(is (= ${1} ${0}))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "is": true
      },
      "source": "vim-snippets/snippets"
    },
    "0d9fb3b0f36e33918f2d8d30a6b86e95": {
      "content": "var_dump(${0:TARGET});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "var_dump": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0da938a82b0cd5c57e05d8995827889b": {
      "content": "<dt>${1:TARGET}</dt>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0da9e4da62924b0b5922ede15480d90d": {
      "content": "import React, { Component } from 'react'\n\ninterface Props {\n\t\n}\ninterface State {\n\t\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {\n\tstate = {}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React component class with ES7 module system and TypeScript interfaces",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typeScriptReactClassExportComponent",
      "matches": {
        "tsrce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "0dada7183c8409484ce4dc3573f0ca70": {
      "content": "<p id=\"${1}\">${2:TARGET}</p>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pid": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0db22dd4a827ac4d55021f00fbc19d51": {
      "content": "foreach ($${1:variable} as $${2:value}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "foreach ($var as $value) { .. }",
      "matches": {
        "foreach": true
      },
      "source": "vim-snippets/snippets"
    },
    "0dbaffc79023edb80acda906108b674e": {
      "content": "import ${1:Name} from './components/$1.vue';\nexport default {\n\tcomponents: {\n\t\t$1\n\t}\n}",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vimport:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "0dbf765d7c28cbe04957d0d4d1ffea2c": {
      "content": "border-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-style: style (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0dbf84bb7b84acd11c48be7830f742f6": {
      "content": "warning(\"${1:message}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "warning": true
      },
      "source": "vim-snippets/snippets"
    },
    "0dd218344855471f4b9fb0a75b7cf638": {
      "content": "JSON.stringify(${1:TARGET}, null, 2);",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0dd303f417cb2999fdfe1a08e2d8a0ba": {
      "content": "final switch(${1:/*var*/})\n{\n\tcase ${2:/*value*/}:\n\t\t$3\n\t\tbreak;\n\tcase ${4:/*value*/}:\n\t\t$5\n\t\tbreak;\n\t${7:/*more cases*/}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "final switch (fsw)",
      "matches": {
        "fsw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0dd3b1305cc10d146333182c88d240ba": {
      "content": "@manual{${1:LABEL},\n    title = {${2}},\n    memo = {author, organization, address, edition, month, year, note},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@manual": true,
        "manual": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0dd3c5bc9872d0607b9a2c10d62ff616": {
      "content": "export const ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
      "doc": "Creates a React 17 Arrow Function Component with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_reactArrowFunctionComponent",
      "matches": {
        "_rafc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "0dda4324502b60723127fa3d245b4a1e": {
      "content": "<footer>\n\t${0}\n</footer>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "footer": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ddc8599784452a17162d8b4e7ca2210": {
      "content": "-moz-box-shadow ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "0de66bb01bd248dcfb035a0e09efd525": {
      "content": "router.afterEach((to, from) => {\n\t\n});",
      "doc": "Vue Router global guards afterEach",
      "filetype": "vue-script-router",
      "grammar": "lsp",
      "label": "Vue Router afterEach",
      "matches": {
        "vaftereach": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "0de91c5d3706642a115f1cdea1b08c6c": {
      "content": "filter progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1}',sizingMethod='${0:crop}')",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg:ie": true
      },
      "source": "vim-snippets/snippets"
    },
    "0dfb611b21099fd26143b3efb458dce7": {
      "content": "add_column :${1:table_name}, :${2:column_name}, :${0:data_type}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mac": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e0457f9b87f9aab232b69c8c0d0b081": {
      "content": "switch ${1:#:v} {\ncase ${2:#:condition}:\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "switch {}",
      "matches": {
        "switch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0e2a4e4e02651c282485e482f2d9ce03": {
      "content": "border-right-color: #${1:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrc": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e2a77f51ba15f21a736d305a3106a28": {
      "content": "${1:obj}.hover (${2:e}) ->\n\t${3:// event handler}\n, ($2) ->\n\t${4:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hover": true
      },
      "source": "snippets/coffee"
    },
    "0e41af7a4722ba9c39f819e1d1dfe41f": {
      "content": "box-shadow none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e44a24119de44a240cee38387eff48b": {
      "content": "throw new $1Exception(\"$2\");",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "throw",
      "matches": {
        "throw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0e45a46575b9f83566403c334ed22ce1": {
      "content": "$.isXMLDoc(${1:node})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isxml": true
      },
      "source": "snippets/javascript"
    },
    "0e47abc23d2b0ace7fa2ac0a14b204b6": {
      "content": "use:action",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-use",
      "matches": {
        "svelte use": true,
        "svu": true
      },
      "source": "javascript/svelte"
    },
    "0e5070998e2e8574f2dda3d42e4ad82f": {
      "content": "AllowOverride ${1:#:AuthConfig} ${2:#:FileInfo} ${3:#:Indexes} ${4:#:Limit} ${5:#:Options}",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "allow": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0e5382987d182d7db662f4254043a710": {
      "content": "<h1>${0}</h1>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h1": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e569c980bcbe23bea87978a00a09b09": {
      "content": "while ${1:condition}\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e58327b0680994355ffff5e79eae8bb": {
      "content": "go ${1:funcName}(${0})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "go someFunc(...)",
      "matches": {
        "go": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "0e631f18940b8cae0fe19bd892957cfa": {
      "content": "# -*- coding: utf-8 -*-\n$0",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "?[uU][tT][fF]-?8\" \"# encoding: UTF-8\" r",
      "matches": {
        "\"^#": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0e691b9ccf3bef79fe77afaf2265efdf": {
      "content": "after_validation_on_update $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "after_validation_on_update",
      "matches": {
        "aftvou": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0e6df54e27861058ad1c4cfcb969780a": {
      "content": "logger.debug",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "logger.debug",
      "matches": {
        "logd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0e702a51b2ca8bf3c03f7a4c1afffdc9": {
      "content": "list-style-type disc",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e71dc3451ff117fcf703c30d4ec284a": {
      "content": "${1:public} ${2:int} ${3} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e733ca055672cec84ad803b8e33ef2e": {
      "content": "expect(${1:target}).toMatch(${2:pattern})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to match (coffee)",
      "matches": {
        "em": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0e76edc4403c1d67bc13a77219416292": {
      "content": "specify { subject.${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e772cd73738b8cd56c80691b2e8112e": {
      "content": "xhr :put, :${1:update}, id: ${2:1}, ${3:object}: { $4 }$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "xhr put",
      "matches": {
        "xput": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0e7a8b32a7b993d216b597a3a5dd43d9": {
      "content": "overflow-y: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e7a9a8f075eba391629c82c8f86c117": {
      "content": "border-bottom-width: ${1:1}px ${2:solid} #${3:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-bottom-width: size style color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0e824bf3c6a91d49b96703ee40df4ab0": {
      "content": "try {\n    ${0:TARGET}\n} catch (${1:Exception} ${2:e}) {\n    ${3:e.printStackTrace();}\n} finally {\n    ${4}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try_finally": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0e85ee93d02b1222b0e6eb8c46270df5": {
      "content": "${1:#:title}\n====================================",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "title": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0e8a784cfe6665bd2b74a37a88b9f80d": {
      "content": "${1:obj}.position()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos": true
      },
      "source": "snippets/coffee"
    },
    "0e8b07155c093777c5bd1f013b8100c1": {
      "content": "_.isEqualWith(${value}, ${other}, ${customizer})",
      "doc": "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true;\n  }\n}\n\nvar array = ['hello', 'goodbye'];\nvar other = ['hi', 'goodbye'];\n\n_.isEqualWith(array, other, customizer);\n// => true\n\nThis method is like `_.isEqual` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with up to\nsix arguments: (objValue, othValue [, index|key, object, other, stack]).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isequalwith",
      "matches": {
        "lodash isequalwith": true
      },
      "source": "javascript/lodash"
    },
    "0e8b526ea217d3b7b30fd4e35b84b8c0": {
      "content": "auto ${1:/*variable*/} = ${2:/*value*/};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "auto (auto)",
      "matches": {
        "auto": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0e8b7aa7778267b0968629e329dd671b": {
      "content": "Yii::app()->cache->delete('${0:key}');",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ydelcache": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e8f360c4f5474b89a8d2719c644c55d": {
      "content": "catch(${1:Exception} ${2:e}) ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ca": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e8fdab1926efb171c6d6de254e1c7b4": {
      "content": "class {\n\t[string] ${1:FirstName}\n}",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "vim-snippets/snippets"
    },
    "0e962e3eb70cd4eab3673ce51ab3d781": {
      "content": "<frameset cols=\"${1}\">\n${2:TARGET}\n</frameset>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "framesetcols": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0ea1944c692540852ed7acc50c0f30f8": {
      "content": "$.get '${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\t(data, textStatus, jqXHR) ->\n\t\t${0:// success callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxget": true
      },
      "source": "snippets/coffee"
    },
    "0ea9705342d16202e7c0a33a1ae62c30": {
      "content": "![${1:id}]: ${2:url}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "![:": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ea98f2638346f7a2f35ab00c480b894": {
      "content": "{${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "dict comprehension",
      "matches": {
        "dcp": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ea9fecd10b13987be2c3939af988528": {
      "content": "<link rel=\"manifest\" href=\"${1:manifest.json}\">${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "manifest": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0eb27f03e5aaecf4896a18b6726ff452": {
      "content": "function ${1:name} {\n\t[CmdletBinding()]\n\tparam (\n\t\t[Parameter(Mandatory = $true)]\n\t\t[string] ${2:Param}\n\t)\n\tbegin {\n\t}\n\tprocess {\n\t}\n\tend {\n\t}\n}",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "function": true
      },
      "source": "vim-snippets/snippets"
    },
    "0eb8b7ea0a7f8262ef771d276f7794b9": {
      "content": "echo '<pre>'; var_dump(${0}); echo '</pre>';",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pd": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ebb1cb9545798aba487518118c8244b": {
      "content": "<var>${0}</var>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "var": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ebf30ceab96ea10033f81f7cef43426": {
      "content": "${1:void} ${2:#:func_name}(${3:void}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "func() {}",
      "matches": {
        "func": true,
        "function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0ec00565a8fede6aec0b08de85ae8516": {
      "content": "assert_send [${1:object}, :${2:message}, ${3:args}]",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "assert_send(..)",
      "matches": {
        "asss": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ec0c70b9772b6460107857ced700e09": {
      "content": "-moz-border-image: url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${7:stretch};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:m+": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ec2f70d6bcd5c1d9725ab5cd1780081": {
      "content": "display: table-footer-group",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbfg": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ec7424f92ea495141e546ecf3aa0f59": {
      "content": "?assertMatch(${1:Pattern}, ${0:Expression})",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asmat": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ec7f5d21e53a04271b3277bdbac9e84": {
      "content": "(${1}) => {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "=>": true
      },
      "source": "snippets/javascript"
    },
    "0ec88c2748adbe170e4f9bfd6138989e": {
      "content": "require! ${1}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req!": true
      },
      "source": "vim-snippets/snippets"
    },
    "0ecc390c308a71bfaa6a2ea9da6e1383": {
      "content": "struct ${1:#:name} {\n    ${0:TARGET:data}\n};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "struct {}",
      "matches": {
        "struct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0ecd2c6fcaf29ea2c770cbef2d5bf945": {
      "content": "<meta name=\"author\" content=\"${1}\">${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "metaauthor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0ed67cf3d0b27de4a97bae5dc2f0728d": {
      "content": "for [${1:i} = ${2:#:start}, ${3:#:end}, ${4:1}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "for [intvar = start, end, incr]",
      "matches": {
        "fori": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0eeeebd63b56a457ebf9e738ad448736": {
      "content": "string.min()",
      "doc": "string.min(limit: number | Ref, message?: string | function): Schema\n\nSet a minimum length limit for the string value. The ${min} interpolation can be used in the message argument",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-min",
      "matches": {
        "yup string min": true
      },
      "source": "javascript/yup"
    },
    "0ef4424ac2fce0cf576ee3cddd21383d": {
      "content": "sub ${1:function_name} {\n\t${2:# body...}\n}\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "Function (sub)",
      "matches": {
        "sub": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0ef5208e073c393256ca855d950b1a0c": {
      "content": "module.exports = {\n\t$0\n};\n",
      "doc": "Module exports from Common JS, node syntax at ES6",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "moduleExports",
      "matches": {
        "mde": true
      },
      "source": "vscode-javascript/snippets"
    },
    "0eff0dbe6cabfe13757a235f6db1d45e": {
      "content": "${1:mutationName}() {\n\tthis.\\$store.commit('${1:mutationName}', ${2:payload});\n}",
      "doc": "commit to vuex store in methods for mutation",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Commit Vuex Store in Methods",
      "matches": {
        "vcommit": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "0f022f194f0f9e946c29f8756b11148d": {
      "content": ":first-child",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":fc": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f03a69a1612c4ae0ccb8ba6ccbef0de": {
      "content": "type tr_${1:name} is record (${0:/* columns */});",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tr": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f03d22d40c5c268b038be050ca23c2a": {
      "content": "local ${1:x} = ${0:1}",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "local x = 1",
      "matches": {
        "local": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0f0692f76ba48d018361369904600c4d": {
      "content": "echo CHtml::textArea('${1:name}', '${2:value}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhta": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f09e6253f67e50e3f4b362a960ec68f": {
      "content": "import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React, { memo } & PropTypes",
      "matches": {
        "imrmp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "0f0c4a3c828102a5918066c03225a569": {
      "content": "delegate (${1:int x}) => ${2}${3:;}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "del": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f0d7d2a9502f5667ab1f35538feadcb": {
      "content": "z-index: $1;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "z-index: index (z)",
      "matches": {
        "z": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0f0db313255166fe82181c9cbe2c4970": {
      "content": "\\textit{${1:TARGET}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\textit": true,
        "textit \\textit{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0f1430e7e24ebb0ca3692ea5321cbf9e": {
      "content": "import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../../environments/environment';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n    environment.production ? [] : StoreDevtoolsModule.instrument()\n  ]\n})\nexport class $1StoreModule {}",
      "doc": "NgRx Store Module",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrx-store-module",
      "matches": {
        "a-ngrx-store-module": true,
        "angular ng rx store module": true
      },
      "source": "javascript/angular"
    },
    "0f15aac3c13d214826a6b0c4c2f2262c": {
      "content": "expect(${1:target}).not.toBeNull()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect not to be null (coffee)",
      "matches": {
        "notn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0f1beb31f55d76e81bcae445fe356fff": {
      "content": "content: no-close-quote",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:ncq": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f23c0edb8c94673536c6837b6f1aa24": {
      "content": "else",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f2974d03d341bee5263357136b34768": {
      "content": "{% html %}\n\t${0}\n{% endhtml %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig html",
      "matches": {
        "html": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f7362fc8dc817dde03dad88ad927ef1": {
      "content": "#!/usr/bin/env python3\n${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "#!/usr/bin/env python3",
      "matches": {
        "#!": true,
        "shebang": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0f73edf605f41c16f7e1345f3511ff2d": {
      "content": "${1:obj}.parentsUntil('${2:selector expression}'${3:, 'filter expression'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parentsu": true
      },
      "source": "snippets/coffee"
    },
    "0f787cf9466779637dcac990b5491cae": {
      "content": "text-height: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f7ffd7fe11a5e72513aee17a94beadd": {
      "content": "\\begin{alertblock}{${1:#:title}}\n\t${2:TARGET}\n\\end{alertblock}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{alertblock}": true,
        "alertblock": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0f83c13d7ad29901f4d42271960e3faa": {
      "content": "declare(strict_types=${1:1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "declare(strict_types=1)",
      "matches": {
        "dst": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f85e7d86dcd4713540ea97b3c877674": {
      "content": "select case (${1:expr})\n\tcase ($2)\n\tcase default\n\t\t$3\nend select ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f86089a9a5f66ec51177b13f2a20645": {
      "content": "(match ${1}\n\t[(${2}) ${0}])",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "match": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f86743bb9d14d7eb9cf31f3f1946810": {
      "content": "text-align left",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f8cafb74699a420b9167ada8f785fa5": {
      "content": "echo CHtml::activeFileField(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhaff": true
      },
      "source": "vim-snippets/snippets"
    },
    "0f943c02bde94a0127f1117258300e11": {
      "content": "mixed.strict()",
      "doc": "mixed.strict(isStrict: boolean = false): Schema\n\nSets the strict option to true. Strict schemas skip coercion and transformation attempts,\nvalidating the value \"as is\".",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-strict",
      "matches": {
        "yup mixed strict": true
      },
      "source": "javascript/yup"
    },
    "0f9ba606911c8b6ffb13dede7d097cf3": {
      "content": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms})\n",
      "doc": "Executes the given function at specified intervals in ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "setInterval",
      "matches": {
        "sti": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "0f9ded7bb9f4991955106fb9d21a1790": {
      "content": "$.parseXML(${1:data})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parsexml": true
      },
      "source": "snippets/javascript"
    },
    "0fa49ce6b2191fccfc9bc577c6e75bbc": {
      "content": "if ${1:condition}; then\n\t${2:${VISUAL}}\nelse\n\t${0:# statements}\nfi",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "0fa5df3deba0b4389c3315ffb5a86a24": {
      "content": "\\textup{${1:TARGET}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\textup": true,
        "textup \\textup{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0fab4b001ad532ae0df54d8edddaec60": {
      "content": "while (${1:obj}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "0fab92786f342151b601a293e6889cb0": {
      "content": "spyOn(${1:object}, \"${2:method}\")$0",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "spy on (coffee)",
      "matches": {
        "s": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0fac4c73069698273ebd78f083bb2587": {
      "content": "int ${1:x} = threadIdx.x + blockIdx.x * blockDim.x;\nint ${2:y} = threadIdx.y + blockIdx.y * blockDim.y;",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Get current X,Y index (2D)",
      "matches": {
        "ixy": true
      },
      "source": "vim-snippets/snippets"
    },
    "0faef89010656ac0feae52910c536ae0": {
      "content": "\\begin{equation*}\n\t${0:${VISUAL}}\n\\end{equation*}",
      "doc": "",
      "filetype": "texmath",
      "grammar": "snu",
      "label": "Equation without a number",
      "matches": {
        "eqnn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "0fb4bf5fe4fcb1fe62ed5fbfe3076dec": {
      "content": "LOGGER.warning(${0:msg})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lw": true
      },
      "source": "vim-snippets/snippets"
    },
    "0fb5bdf2a712e87bfe392cc407a23d78": {
      "content": "place-content: stretch",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "0fb792858306c1ff3d3a2def3388f602": {
      "content": "border-left-style: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdls": true
      },
      "source": "vim-snippets/snippets"
    },
    "0fc54b2d9698d43392e2f90886d59a1c": {
      "content": "${1} : out std_logic_vector (${2} downto 0);",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "osv": true
      },
      "source": "vim-snippets/snippets"
    },
    "0fc562bd9ec5d5b59c1de20ff299d06a": {
      "content": "<map name=\"${1}\" id=\"${2:$1}>\n\t${0}\n</map>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map#": true
      },
      "source": "vim-snippets/snippets"
    },
    "0fd1b21e413253608892d4f8a60a74e4": {
      "content": "import { mapActions } from 'vuex'\n\nexport default {\n\tmethods: {\n\t\t...mapActions([\n\t\t\t${1:'nameOfAction'}, //also supports payload `this.nameOfAction(amount)` \n\t\t])\n\t},\n}",
      "doc": "mapactions inside a vue component",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-mapactions",
      "matches": {
        "vmapactions": true,
        "vue mapactions": true
      },
      "source": "javascript/vue"
    },
    "0fd20eee94db361215f20b50e135f2f4": {
      "content": "white-space ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs": true
      },
      "source": "vim-snippets/snippets"
    },
    "0fddb123fa4c7cd2586e1e6b2b98e58d": {
      "content": "**${1:${TM_SELECTED_TEXT}}**$0",
      "doc": "Insert bold text",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert bold text",
      "matches": {
        "bold": true
      },
      "source": "vscode-R/snippets"
    },
    "0fde429742741270d145de438bbaddea": {
      "content": "${1:deferred}.always(${2:callbacks})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dalways": true
      },
      "source": "snippets/coffee"
    },
    "0fe609680dd89660ae4fb2a89ef3bf8e": {
      "content": "\\begin{matrix}\n\t${1:TARGET}\n\\end{matrix}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{matrix} \\matrix": true,
        "matrix": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "0fed20b1ea717300e6211f3686db84a1": {
      "content": "const ${1:contextName} = React.createContext()\n",
      "doc": "Create React context",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "createContext",
      "matches": {
        "rcontext": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "0ff470f6de61e79d9ea2f72bad36aa2f": {
      "content": "${1:controls}.start({ ${2:opacity: 1} })",
      "doc": "AnimationControls with a start and stop method",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-animation-controls",
      "matches": {
        "controls": true,
        "framer-motion controls": true
      },
      "source": "javascript/framer-motion"
    },
    "0fffc85604da6f1b38c2c06418d794ed": {
      "content": "justify-items: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "1008b40228758091dec74ff85f9afbbb": {
      "content": "DEFINE BUFFER b_${1:TableName} FOR $1 ${0}.",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defbuf": true
      },
      "source": "vim-snippets/snippets"
    },
    "100e98df1d84c2ae115256556332623a": {
      "content": "created () {\n\t${0};\n},",
      "doc": "created lifecycle method",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle created",
      "matches": {
        "vcreated": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "1010b3532c9b319bcf4d5f7cc6a124d9": {
      "content": "t.references :${1:taggable}${2:, polymorphic: ${3:{ default: '${4:Photo}' }}}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create references column",
      "matches": {
        "tcr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "10140a63c5e0a5e94bd9fab29f188160": {
      "content": ":after",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":a": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "101b2fcb75de6b14d772aecd2d082983": {
      "content": "(dotimes [_ 10]\n\t(time\n\t\t(dotimes [_ ${1:times}]\n\t\t\t${0:code})))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dotimes": true
      },
      "source": "vim-snippets/snippets"
    },
    "101d2190e10827cab6e5533d738413d3": {
      "content": "has_one",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "has_one",
      "matches": {
        "ho": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "10217c25eb6ff3769b5a0bc7d2a9d14f": {
      "content": "read(unit = ${1:fp}, file = ${2:filename}, iostat = ${3:ierr}) ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "read": true
      },
      "source": "vim-snippets/snippets"
    },
    "1021e96b1758e5f3f66afeb82e19c5a2": {
      "content": "$.when(${1:deferreds})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dwhen": true
      },
      "source": "snippets/coffee"
    },
    "1032bf1ef44edae3018fcc1f7ac800eb": {
      "content": "synchronized",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sy": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1037d0fa26345dd570c4c9c8f095484e": {
      "content": "collect do |${1:e}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cold": true
      },
      "source": "vim-snippets/snippets"
    },
    "1043fe8f012070ee5d9a0f0c596bc7ce": {
      "content": "-undef(${1:macro}).",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "undef": true
      },
      "source": "vim-snippets/snippets"
    },
    "1056318b8709da2bf825f1d0a6d88124": {
      "content": "onMount(() => {\n\t${1:// content here}\n});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-on-mount",
      "matches": {
        "svelte lifecycle mount": true,
        "svlfm": true
      },
      "source": "javascript/svelte"
    },
    "10617345a6cda35231fac804ba537b9b": {
      "content": "text-align: right;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "106dc7240ebd97a238c0879e115b0b2a": {
      "content": "Run Keyword If All Tests Passed    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword If All Tests Passed",
      "matches": {
        "rkiatp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1075633bee6d279a5f3d4ff1d779f6c9": {
      "content": "classify { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl": true
      },
      "source": "vim-snippets/snippets"
    },
    "107a5bb34bd450a406983b346b538754": {
      "content": "margin-right ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mr": true
      },
      "source": "vim-snippets/snippets"
    },
    "107cee867f4a98775d22729c9e205cdf": {
      "content": "${1:obj}.slideToggle('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stoggle": true
      },
      "source": "snippets/coffee"
    },
    "108439f0a2cb5e59adf484ce54035cb4": {
      "content": "task body ${1} is\n\t${2}\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "task body",
      "matches": {
        "taskb": true
      },
      "source": "vim-snippets/snippets"
    },
    "109561c6a392765469948dc1a895708c": {
      "content": "all? { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "all": true
      },
      "source": "vim-snippets/snippets"
    },
    "10958814669d5a377fceeb9d5847b18e": {
      "content": "do{\n\t${0:${VISUAL}}\n}while (${1:/* condition */});",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "1096f28dc76a2021975abb9562d2628c": {
      "content": "if ${1} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "1098fa99fe8b4da6a3d2ef720182720b": {
      "content": "<Helmet>\n  <title>${1:title}</title>\n</Helmet>",
      "doc": "",
      "filetype": "react-helmet",
      "grammar": "lsp",
      "label": "react-helmet-title",
      "matches": {
        "react-helmet title": true
      },
      "source": "javascript/react-helmet"
    },
    "10a407295ea9d51eda54e9ff4d2cff29": {
      "content": "function(${1:name} ${2:args})\n\t${3}\nendfunction($1)",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "function() endfunction()",
      "matches": {
        "function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "10a9098f25abdc4b59bd5b3d3abec7b8": {
      "content": "async fetch ({ store, ${1:params} }) {\n\tlet { data } = await fetch('${2:endpoint}').then(res => res.json())\n\tstore.commit('${3:MUTATION_TYPE}', data)\n},",
      "doc": "Nuxt Fetch",
      "filetype": "nuxt-script",
      "grammar": "lsp",
      "label": "Nuxt Fetch",
      "matches": {
        "nfetch": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "10b0ec9abef6a0415275695f901382be": {
      "content": "result",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "result",
      "matches": {
        "rs": true
      },
      "source": "vim-snippets/snippets"
    },
    "10b42f0ffd3fe9c76e1904eef6110ed6": {
      "content": "SynthDef(\\\\${1:synthName}, {${2}\n\t${0}\n}).add;",
      "doc": "",
      "filetype": "supercollider",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sdef": true
      },
      "source": "vim-snippets/snippets"
    },
    "10be30981aaf0cd36270081382748f01": {
      "content": "redirect_to(${2:${12:parent}_${13:child}_path(${14:@}${15:$12}, ${16:@}${17:$13})})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to (nested path)",
      "matches": {
        "renp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "10c0af07568335c222933f3c9af43da8": {
      "content": "subscript(${1:index: Int}) -> ${2:Int} {\n    ${0:TARGET}\n}\n${9}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "subscript": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "10cae05f5dc1be377216b21c0280c282": {
      "content": "{% ssi $1 %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ssi": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "10d1a38679bfb728823e38f184b6af70": {
      "content": "expect(${1:target}).toBeHidden()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to be hidden (coffee)",
      "matches": {
        "eh": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "10d5b568625fd5eee3db88cb190cda0d": {
      "content": "[routerLink]=\"['${1:routePath}', ${2:routeParameterValue}]\"\nrouterLinkActive=\"${3:router-link-active}\"$0",
      "doc": "Angular routerLink with a route parameter",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngRouterLinkWithParameter",
      "matches": {
        "a-routerLink-param": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "10d66ff1384bdb3868f059ba195d95fa": {
      "content": "perf(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "perf conventional commit",
      "matches": {
        "perf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "10da9be8176e38c6ccf27ccfb817d45d": {
      "content": "cron { \"${1:name}\":\n\tcommand => \"${2}\",\n\tuser    => \"${3:root}\",\n\t${4}    => ${0},\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cron": true
      },
      "source": "vim-snippets/snippets"
    },
    "10deb1e71c056a79f4f71ca3c3620087": {
      "content": "tell ${1:#:app}\n\t${0:TARGET}\nend tell",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tell": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "10df3bcb634154553b42afd48a0e4aa8": {
      "content": "%ul\n\t%li\n\t\t${0:item}\n\t%li",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ul": true
      },
      "source": "vim-snippets/snippets"
    },
    "10e24a13e54f1cfcdca3cc42e9886621": {
      "content": "checked\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "checked block",
      "matches": {
        "checked": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "10e29781f3897dc736148e2bdcc493cd": {
      "content": "case(${1})\n\t${2}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "case",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "10e2a499d395ef541a2ad5c0b93b987e": {
      "content": "font-style: normal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "10ec0acf68abf8d4182c2f0adef96f18": {
      "content": "$${1:observer} = $this->prophesize(${2:SomeClass}::class);",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$observer = $this->prophesize(SomeClass::class);",
      "matches": {
        "proph": true
      },
      "source": "vim-snippets/snippets"
    },
    "10ef07ff85cbbd6738244911aa54ebb6": {
      "content": "${1:propName}: {\n  type: ${2:Number},\n  default: ${0}\n},",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vprops:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "10f8018b74658203cb64527fe9520e8a": {
      "content": "Map[${1:T},${2:T}]${0:(keyval)}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/snippets"
    },
    "10f8bb03c89928ecbdbc005c98ff4d6d": {
      "content": "$this->assertNotEquals(${1:$expected}, ${2:$actual});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertNotEquals($a, $b)",
      "matches": {
        "asne": true
      },
      "source": "vim-snippets/snippets"
    },
    "110d8de6a38d8d4a1b0c16174838b2df": {
      "content": "[${1}](${2})${3}{ ${4:TARGET} }${0:;}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "[](){}",
      "matches": {
        "lambda": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "110eaf778b7f05ef0f63d7f4667c1ad2": {
      "content": "internal string ${1} { get; protected set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps&|": true
      },
      "source": "vim-snippets/snippets"
    },
    "1116105fae2064ea16d1f2441a251884": {
      "content": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
      "doc": "Export default class which extends a base one in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportClassExtends",
      "matches": {
        "ece": true
      },
      "source": "vscode-javascript/snippets"
    },
    "1116fc2ff40ce33e5eae77e6799d7048": {
      "content": "@enforce_keys [:${1:key_name}]",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enfk": true
      },
      "source": "vim-snippets/snippets"
    },
    "1119fb73bb62031a46cdf9b6215f16d7": {
      "content": "grid-auto-columns: auto",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "111da858ab1a3b42782ebd6a018a0481": {
      "content": "(${1:name} [${2:this} ${0:args}])",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pmethod": true
      },
      "source": "vim-snippets/snippets"
    },
    "11227fc11ec4923d3b9072e7435723f1": {
      "content": "ARGF.each_line${1} do |${2:line}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unif": true
      },
      "source": "vim-snippets/snippets"
    },
    "11277c24dbf77633ca0a20430181b6cc": {
      "content": "defer func() {\n\tif err := recover(); err != nil {\n\t\t${0:${VISUAL}}\n\t}\n}()",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "defer recover",
      "matches": {
        "dfr": true
      },
      "source": "vim-snippets/snippets"
    },
    "1127fce4382d02fcd97e372760a843be": {
      "content": "function* ${1:function_name}(${2}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun*": true
      },
      "source": "snippets/javascript"
    },
    "112ff920b92909bafde8288395568e58": {
      "content": "_.slice(${array}, ${start}, ${end})",
      "doc": "undefined\n\nCreates a slice of `array` from `start` up to, but not including, `end`.\n\n**Note:** This method is used instead of\n[`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\nreturned.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-slice",
      "matches": {
        "lodash slice": true
      },
      "source": "javascript/lodash"
    },
    "113c64bcecdc248896457e367bca812e": {
      "content": "content: counter(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "1142784f070a6edbefece6e6ab8e47f2": {
      "content": "id:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "id:",
      "matches": {
        "id": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "114412c568c3583045713c2cb2bd3a54": {
      "content": "public ${1:void} ${2}(${3})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m+": true
      },
      "source": "vim-snippets/snippets"
    },
    "114453552dc3c2d53699a47e1b20e695": {
      "content": "outline: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o": true
      },
      "source": "vim-snippets/snippets"
    },
    "11506dc376e93d971c7e7347aca242c2": {
      "content": "createReader(${0:filename});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "createReader": true
      },
      "source": "vim-snippets/snippets"
    },
    "1153ab13952dfa82b08ae76218f1d8e9": {
      "content": "console.profile(\"${1:label}\");\n${0:${VISUAL}}\nconsole.profileEnd();",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.profile",
      "matches": {
        "cprof": true
      },
      "source": "snippets/javascript"
    },
    "115b0865070b85f99f9711c88896f045": {
      "content": "<?php foreach ($${1:variable} as $${2:key} => $${3:value}): ?>\n\t${0:<!-- html... -->}\n<?php endforeach; ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "<?php foreach ($var as $key => $value): ?>  ... <?php endforeach; ?>",
      "matches": {
        "foreachkil": true
      },
      "source": "vim-snippets/snippets"
    },
    "115bfbd51d97d52941a4b69f35980633": {
      "content": "beforeUpdate () {\n\t${0};\n},",
      "doc": "beforeUpdate lifecycle method",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle beforeUpdate",
      "matches": {
        "vbeforeupdate": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "1170a24abf53eb031c03fb2343684135": {
      "content": "Page Should Not Contain Link    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Not Contain Link",
      "matches": {
        "psncl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1177c13c7def74cfcd733cb2a1ec6d15": {
      "content": "{#await ${1:promise}}\n\t${2: <!-- content when promise is pending -->}\n{:then ${3:value}}\n\t${4: <!-- content when promise was fulfilled -->}\n{:catch error}\n\t${5: <!-- content when promise was rejected -->}\n{/await}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-await-catch-block",
      "matches": {
        "svawait-catch": true,
        "svelte await catch": true
      },
      "source": "javascript/svelte"
    },
    "117d1ff63fd3f8c0a1e7ddd3e1d9fa1e": {
      "content": "if ${1:(* condition *)} then\n\t${2:(* A *)}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "If",
      "matches": {
        "If": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "117eae5becb2ba1f5568da794c09118c": {
      "content": "render :update do |${1:page}|\n\t$1.${0}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ru": true
      },
      "source": "vim-snippets/snippets"
    },
    "118b28dea0f6d4fcd9426070eabafbcb": {
      "content": "once('${1:event_name}', function(${2:stream}) {\n  ${3}\n});",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "once": true
      },
      "source": "snippets/javascript"
    },
    "1195a9113624b0455ce124b8a01f5f09": {
      "content": "param(${0:s});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "param": true
      },
      "source": "vim-snippets/snippets"
    },
    "119ce69a4278b4c03936ba43a43e332f": {
      "content": "overflow-x visible",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "11a2ecef4aed1ea49997b44ebaf4d3ec": {
      "content": "console.log ${0}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "log": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "11a9c66374bd6d841911a67f0d57177e": {
      "content": "defp ${1:name} do\n  ${2:TARGET}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "defp .. end",
      "matches": {
        "defp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "11ad6154e14db97506a181d9bf4fc1a9": {
      "content": "CREATE INDEX ${1:_name} ON ${2:cities} (${3:name});",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "CREATE INDEX ... ON ... ( ... )",
      "matches": {
        "CREATE_INDEX": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "11bbc7ee2619c61e0f47d34c8840ca0e": {
      "content": "wont_equal ${0:other}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "we": true
      },
      "source": "vim-snippets/snippets"
    },
    "11c54afdc2a6b868af794b43998719b0": {
      "content": "echo '<pre>' . var_export(${1}, 1) . '</pre>';",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "Dumb debug helper in HTML",
      "matches": {
        "ve": true
      },
      "source": "vim-snippets/snippets"
    },
    "11ca04c468866f5152c2c664cd9e35bc": {
      "content": "always @(posedge ${1:clk} iff !${2:rst} or posedge $2) begin\n    if (${2}) begin\n        ${3:TARGET}\n    end else begin\n    end\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "always_ff @()",
      "matches": {
        "alf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "11d25731f7236a38e4fce2f3eb82ed17": {
      "content": "formControlName=\"${1:control}\"",
      "doc": "Angular formControlName",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngformcontrolname",
      "matches": {
        "a-formcontrolname": true,
        "angular ng form control name": true
      },
      "source": "javascript/angular"
    },
    "11d5f0eb40307fc598beddfd7b1c70df": {
      "content": "scale(${1:x}, ${2:y}${3:, }${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scale": true
      },
      "source": "vim-snippets/snippets"
    },
    "11d64d3ff1d4b5172b7331b72bc73176": {
      "content": "right: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r": true
      },
      "source": "vim-snippets/snippets"
    },
    "11ddf3ac69757467a483454cff6362e4": {
      "content": "| rstrip",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rstrip": true
      },
      "source": "vim-snippets/snippets"
    },
    "11e73f30a7bd39534ab6c7d860210854": {
      "content": "${1:obj}.replaceWith(${2:content})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "repw": true
      },
      "source": "snippets/coffee"
    },
    "11f8f6e92ba1d6724b56b08fb111f599": {
      "content": "<svelte:self />",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-self",
      "matches": {
        "svelte self": true,
        "svse": true
      },
      "source": "javascript/svelte"
    },
    "11ff039d3ad12904adaa80450826612d": {
      "content": "_.sortedLastIndexBy(${array}, ${value}, ${iteratee})",
      "doc": "var objects = [{ 'x': 4 }, { 'x': 5 }];\n\n_.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 1\n\n// The `_.property` iteratee shorthand.\n_.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n// => 1\n\nThis method is like `_.sortedLastIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sortedlastindexby",
      "matches": {
        "lodash sortedlastindexby": true
      },
      "source": "javascript/lodash"
    },
    "120877e781b63cdc808c2da49802e8d9": {
      "content": "Console.WriteLine(${1:#:message});${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "println p": true,
        "writeline": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "120c0592e42ecd192deff26a267ebe5c": {
      "content": "{% when ${1:condition} %}\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when": true
      },
      "source": "vim-snippets/snippets"
    },
    "1213e653856ec1c99507a66f380b2433": {
      "content": "Wait Until Page Does Not Contain Element    ${1:${locator}}    ${2:${timeout=None}}    ${3:${error=None}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Wait Until Page Does Not Contain Element",
      "matches": {
        "wupdnce": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "121f006a15ac41378371073b7879dfdc": {
      "content": "unique case (${1}) begin\n    ${2:'b0}: begin\n        ${3}\n    end\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case_parallel": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "12223e305841cdc7b32aabef715bd5b9": {
      "content": "data ${1:Type} = ${2:$1} ${0:Int}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "data": true
      },
      "source": "vim-snippets/snippets"
    },
    "122e777ea55c6d3ffa966988d4a6a31e": {
      "content": "mixed.when()",
      "doc": "mixed.when(keys: string | Array<string>, builder: object | (value, schema)=> Schema): Schema\n\nAdjust the schema based on a sibling or sibling children fields. You can provide an object\nliteral where the key is is value or a matcher function, then provides the true schema and/or\notherwise for the failure condition.is conditions are strictly compared (===) if you want to use a different form of equality you\ncan provide a function like: is: (value) => value == true.Like joi you can also prefix properties with $ to specify a property that is dependent\non context passed in by validate() or isValid. when conditions are additive.let schema = object({\n  isBig: boolean(),\n  count: number()\n    .when(\"isBig\", {\n      is: true, // alternatively: (val) => val == true\n      then: yup.number().min(5),\n      otherwise: yup.number().min(0)\n    })\n    .when(\"$other\", (other, schema) => (other === 4 ? schema.max(6) : schema))\n});\n\nawait schema.validate(value, { context: { other: 4 } });\nYou can also specify more than one dependent key, in which case each value will be spread as an argument.let schema = object({\n  isSpecial: boolean(),\n  isBig: boolean(),\n  count: number().when([\"isBig\", \"isSpecial\"], {\n    is: true, // alternatively: (isBig, isSpecial) => isBig && isSpecial\n    then: yup.number().min(5),\n    otherwise: yup.number().min(0)\n  })\n});\n\nawait schema.validate({\n  isBig: true,\n  isSpecial: true,\n  count: 10\n});\nAlternatively you can provide a function that returns a schema\n(called with the value of the key and the current schema).let schema = yup.object({\n  isBig: yup.boolean(),\n  count: yup.number().when(\"isBig\", (isBig, schema) => {\n    return isBig ? schema.min(5) : schema.min(0);\n  })\n});\n\nawait schema.validate({ isBig: false, count: 4 });\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-when",
      "matches": {
        "yup mixed when": true
      },
      "source": "javascript/yup"
    },
    "12325ee35b857bf00797fa696dd4eaa2": {
      "content": "character(len=${1:*}) :: ${0:}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "str": true
      },
      "source": "vim-snippets/snippets"
    },
    "1236259184d5593cb42065482d887c15": {
      "content": "${1:obj}.removeClass('${2:class name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "remc": true
      },
      "source": "snippets/javascript"
    },
    "1236dd0213d8d291d08d8da7a20f1a20": {
      "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanActivateChild {\n\tconstructor() { }\n\n\tcanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\t\treturn true;$0\n\t}\n}",
      "doc": "Angular CanActivateChild guard",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular CanActivateChild Guard",
      "matches": {
        "a-guard-can-activate-child": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "123f38e71a719577ef7400bd2eed6c96": {
      "content": "before :${1:each} do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bef": true
      },
      "source": "vim-snippets/snippets"
    },
    "1240663fef7ce66a5880a8c197b92abc": {
      "content": "map[${1:string}]${0:int}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "map[Type]Type",
      "matches": {
        "map": true
      },
      "source": "gosnippets/snippets"
    },
    "12487d2ee4dc6015fd8e8068dc084743": {
      "content": "for (${1:i} in ${2:array}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "for each",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "124d153b54bb31c9c364db13f788c709": {
      "content": "import { motion, AnimateSharedLayout } from \"framer-motion\"",
      "doc": "",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-import-animate-shared-layout",
      "matches": {
        "animate-presence": true,
        "framer-motion import animate-shared-layout": true
      },
      "source": "javascript/framer-motion"
    },
    "1250a8a69d88a4b2fd8934f11f15331d": {
      "content": "public string ${1} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps+-": true
      },
      "source": "vim-snippets/snippets"
    },
    "1252c296b0b446dac0014d0b76b3b43e": {
      "content": "case ${1} of\n\t${2} =>\n\t\t${0}",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "1253585c494b973675dcdd3cf97908b7": {
      "content": "delegate ${1:void} ${2:#:Delegate}(${3:#:arguments});${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "delegate": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1254a456832d8bca3f40791c65b71eca": {
      "content": "[formGroup]=\"${1:form}\"",
      "doc": "Angular formGroup",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngFormGroup",
      "matches": {
        "a-formGroup": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "125981d3db7439cc88aca2a5d2f92a1b": {
      "content": "System.Collections.Generic",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s.c.g": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "125e57e28b582704dc2accb6bcfa0d00": {
      "content": "PropTypes.arrayOf($0).isRequired,",
      "doc": "An array of a certain type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeArrayOfRequired",
      "matches": {
        "ptaor": true
      },
      "source": "vscode-react/snippets"
    },
    "126d86f383a4df209af507c6ee6b864b": {
      "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "docxs": true
      },
      "source": "vim-snippets/snippets"
    },
    "12716caab6a5fa641429c56d5db845cc": {
      "content": "<hgroup>\n\t${0}\n</hgroup>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hgroup": true
      },
      "source": "vim-snippets/snippets"
    },
    "127343b1a4b0193b68ebbafd28952e00": {
      "content": "try {\n  ${1:TARGET}\n} catch (${2:e}) {\n  ${3}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "127a5be4c08a565b5e9b40ac6b5f29f1": {
      "content": "procedure ${1:name}\n\t${0}\nend procedure $1",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "proc": true
      },
      "source": "vim-snippets/snippets"
    },
    "12831ec2bf93016c594912fd569cca89": {
      "content": "MovieClip",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1292d1318fb7843f8cbe54eb9044d0e2": {
      "content": "{% css %}\n\t${0}\n{% endcss %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig css",
      "matches": {
        "css": true
      },
      "source": "vim-snippets/snippets"
    },
    "129350feabf24d183924854596760cfa": {
      "content": "{% for ${1:item} in ${2:sequence} %}\n\t$3\n{% endfor %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "for",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1299ba6fa0126080ebc65d0944706542": {
      "content": "message(WARNING \"${1}\")",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "message(WARNING \"...\")",
      "matches": {
        "warning_message": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "129a8c54ae38ffc8ba966657c20c116e": {
      "content": "${1:type} ${2:ptr} = ($1*) malloc(sizeof($1));",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mlcd": true
      },
      "source": "vim-snippets/snippets"
    },
    "129d5c22d01c345588e7960434298717": {
      "content": "_.orderBy(${collection}, ${iteratees}, ${orders})",
      "doc": "var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 34 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 36 }\n];\n\n// Sort by `user` in ascending order and by `age` in descending order.\n_.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n\nThis method is like `_.sortBy` except that it allows specifying the sort\norders of the iteratees to sort by. If `orders` is unspecified, all values\nare sorted in ascending order. Otherwise, specify an order of \"desc\" for\ndescending or \"asc\" for ascending sort order of corresponding values.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-orderby",
      "matches": {
        "lodash orderby": true
      },
      "source": "javascript/lodash"
    },
    "129de790e105d8c77e9499874b4b244c": {
      "content": "for ${2:k}, ${3:v} in ${1:ipairs(xs)} do\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forin": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "12a43fd37f963838b13376b42a9228b8": {
      "content": "${1:#:expression} while ${2:#:condition};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "xwh",
      "matches": {
        "xwhile": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "12a84fd2b391b84725e61b3bc620342d": {
      "content": "const ${1:store} = spring(${2:value}, ${3:options});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-spring",
      "matches": {
        "svelte spring": true,
        "svsp": true
      },
      "source": "javascript/svelte"
    },
    "12a9bf62211b865ddfce98c3b2b3b6db": {
      "content": "font-weight normal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "12b2951249f0418755c42aa5afe03ed8": {
      "content": "${1:obj}.clone()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clone": true
      },
      "source": "snippets/javascript"
    },
    "12b2b9bf7b56feac38b181dc2b6706c0": {
      "content": "loop {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "loop {}",
      "matches": {
        "loop": true
      },
      "source": "vim-snippets/snippets"
    },
    "12b30a080880ffdaa47dd63773d41518": {
      "content": "for ${1:name} in [${2:start}..${3:finish}] by ${4:step}\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forrb": true
      },
      "source": "snippets/coffee"
    },
    "12b558e570fbb5375c9c6d2a23c27844": {
      "content": "assert_respond_to ${1:object}, :${2:method}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asrt": true
      },
      "source": "vim-snippets/snippets"
    },
    "12c1006a3c97fb65fd5218f0e51ff210": {
      "content": "font-family ${0:Monaco,'Courier New'},monospace",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "12d491a4b32f0397a64d3149ab07506e": {
      "content": "when {\n\tbranch '${1:branch}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whenbranch": true
      },
      "source": "vim-snippets/snippets"
    },
    "12dd19ce1f0ba605cdad8fba4687d2cd": {
      "content": "<select [(ngModel)]=\"${1:model}\">\n\t<option *ngFor=\"let ${2:item} of ${3:list}\" [value]=\"${2:item}\">{{${2:item}}}</option>\n</select>",
      "doc": "<select> control with ngModel",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngselect",
      "matches": {
        "a-select": true,
        "angular ng select": true
      },
      "source": "javascript/angular"
    },
    "12eec57e8a479655961c3e1d874f861d": {
      "content": "const ${dragControls} = useDragControls()",
      "doc": "useDragControls()\nBy creating a dragControls using the useDragControls hook, we can pass this into the draggable component's dragControls prop.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-drag-controls",
      "matches": {
        "framer-motion use-drag-controls": true,
        "use-drag-controls": true
      },
      "source": "javascript/framer-motion"
    },
    "12f8d3ea38e1509d4e9c906d048d5704": {
      "content": "console.clear();",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.clear",
      "matches": {
        "cclear": true
      },
      "source": "snippets/javascript"
    },
    "1306b8e9e872ea40ceff1bec50ec2992": {
      "content": "|> ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "1309c55d0a665fe06e6a419449ffde8c": {
      "content": "-module(${0:module}).",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "-module": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "130a1b0de037530e0ca8fd2f87c48501": {
      "content": "while [[ ${1:condition} ]]; do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "130d8cd827ab99bbbaa895afd7d4f9b2": {
      "content": "${1:FIELDNAME} = forms.SlugField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "SlugField",
      "matches": {
        "fslug": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "13120c8e67ba62ec0731a10bcdb48de6": {
      "content": "grid-auto-flow: column;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "1317864ec712ef81549ecd694caf0ec7": {
      "content": "with ${1:what}${0: with}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "with": true
      },
      "source": "vim-snippets/snippets"
    },
    "1319373b3bec2678ce593c343ff272bf": {
      "content": "<frameset rows=\"${1}\"\n${2:TARGET}\n</frameset>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "framesetrows": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "131a73f12bdd114fcdd599fd9d99bc21": {
      "content": "Result<${1:#:~str}, ${2:#:()}>${3}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Result<A, B>",
      "matches": {
        "res": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "131b63cd6fc145c55c536e947c8430d0": {
      "content": "post {\n\tunstable {\n\t\t${1}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pu": true
      },
      "source": "vim-snippets/snippets"
    },
    "131bfe3b3e721e4eaeae10c7622a772d": {
      "content": "unchecked (${1:#:var}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "unchecked () {}",
      "matches": {
        "unchecked": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "13213b8a7e039d17e4135cd1bae53ed7": {
      "content": "internal bool ${1}(${2})\n{\n\t${0:return false;}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb&": true
      },
      "source": "vim-snippets/snippets"
    },
    "1323e8064bd4f8699be007a0b1a44e5e": {
      "content": "int opApply(Dg)(Dg dg) if(ParameterTypeTuble!Dg.length == 2) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "opApply": true
      },
      "source": "vim-snippets/snippets"
    },
    "132466fa60facbe1ca6a783647f33fd8": {
      "content": "${1:FIELDNAME} = models.XMLField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "XMLField",
      "matches": {
        "mxml": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "13269465405770e6ca54defe5f9f6308": {
      "content": "density(${1:x}${2:, bw = ${3:bandwidth}})",
      "doc": "Density",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "den",
      "matches": {
        "density": true
      },
      "source": "vscode-R/snippets"
    },
    "132a45f9b291bbad97ba23aab59d1fce": {
      "content": "const {${1:name}} = ${2:value};",
      "doc": "Object destructing",
      "filetype": "base",
      "grammar": "lsp",
      "label": "destructuring-const-assignment",
      "matches": {
        "base const destruct object": true
      },
      "source": "javascript/base"
    },
    "132c0a1b15283740807c626dfc334dbd": {
      "content": "${1:s:V}.import('${2:#:module_name}')",
      "doc": "",
      "filetype": "vital",
      "grammar": "snu",
      "label": "s:V.import('...')",
      "matches": {
        "vital_import_without_let": true
      },
      "source": "neosnippets/vim"
    },
    "13386d2af70fbb7040ccaf64c24749c5": {
      "content": "margin-right: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mr": true
      },
      "source": "vim-snippets/snippets"
    },
    "1343531aff1ce005d98fc6603e523356": {
      "content": "$this->db->join(\"${1:table}\", \"${2:condition}\", \"${3:type}\");${4}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_db-join": true
      },
      "source": "vim-snippets/snippets"
    },
    "1361acad4978fa3c7088a5008e145a0a": {
      "content": "(${1:arguments}) => ${2:statement}",
      "doc": "arrow function (ES6)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "arrow-function-es6-",
      "matches": {
        "base function arrow": true
      },
      "source": "javascript/base"
    },
    "136c5544e18f4917009fc4e946e18a91": {
      "content": "import { createSelector } from 'reselect'\n\nexport const ${1:selectorName} = state => state.${2:selector}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reduxSelector",
      "matches": {
        "rxselect": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "1373af6f289c6a4f44e087693c896db1": {
      "content": "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "useReducer",
      "matches": {
        "userd": true
      },
      "source": "snippets/javascript"
    },
    "137a9a08fdcbfb1cc57aec40b3a89d27": {
      "content": "justify-self start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "137ffd052ef624acd7f38bcfce879aba": {
      "content": "=over 2\n=item\nArguments\n=over 3\n=item\nC<${1:DataStructure}>\n  ${2:Sample}\n=back\n=item\nReturn\n=over 3\n=item\nC<${0:...return data}>\n=back\n=back",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parg": true
      },
      "source": "vim-snippets/snippets"
    },
    "1382a72aee1cefc83d1a58cf64adda4c": {
      "content": "[[${1:foo} alloc] init${2}];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "a": true
      },
      "source": "vim-snippets/snippets"
    },
    "138a1ccf29769f9953e984a729881d4b": {
      "content": "import { createStore } from 'redux';",
      "doc": "",
      "filetype": "javascript-redux",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ist": true
      },
      "source": "snippets/javascript"
    },
    "138dab10a480fa9732621b0a4cf9393b": {
      "content": "{-| ${0}\n-}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/snippets"
    },
    "1394258b1864fccfc8af4a7eef8bcf3a": {
      "content": "import React, { useRef } from 'react'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React, {useRef}",
      "matches": {
        "imrr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "1398af1570520d8cd26be0b0ac988b3a": {
      "content": ":after",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":a": true
      },
      "source": "vim-snippets/snippets"
    },
    "13a96393d3989ef59118a23f5f84e55d": {
      "content": "class << self; self end",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sinc": true
      },
      "source": "vim-snippets/snippets"
    },
    "13ae7b248931add699a8bda9f89a8f3f": {
      "content": "t.column ${1:title}, :${2:string}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Migration Create Column (mcc)",
      "matches": {
        "mcol": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "13b01447ba6c9df84d0231e5f6129312": {
      "content": "position: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos": true
      },
      "source": "vim-snippets/snippets"
    },
    "13c1073185add2097c88befded839cf5": {
      "content": "after cancel ${0:id or script}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "afc": true
      },
      "source": "vim-snippets/snippets"
    },
    "13c6ec427d6c8e126860bf453b682a24": {
      "content": "Ada.Text_IO.Get_Line(${1});${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "Ada.Text_IO.Get_Line",
      "matches": {
        "getl": true
      },
      "source": "vim-snippets/snippets"
    },
    "13c88f7089170194cd5bd52735584b81": {
      "content": "protected body ${1} is\n\t${2}\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "protected body",
      "matches": {
        "prob": true
      },
      "source": "vim-snippets/snippets"
    },
    "13ce0710b751229853b195227dc62922": {
      "content": "__ScriptVersion=\"${1:version}\"\n#===  FUNCTION  ================================================================\n#         NAME:  usage\n#  DESCRIPTION:  Display usage information.\n#===============================================================================\nfunction usage ()\n{\n\techo \"Usage :  $${0:0} [options] [--]\n    Options:\n    -h|help       Display this message\n    -v|version    Display script version\"\n}    # ----------  end of function usage  ----------\n#-----------------------------------------------------------------------\n#  Handle command line arguments\n#-----------------------------------------------------------------------\nwhile getopts \":hv\" opt\ndo\n  case $opt in\n\th|help     )  usage; exit 0   ;;\n\tv|version  )  echo \"$${0:0} -- Version $__ScriptVersion\"; exit 0   ;;\n\t* )  echo -e \"\\n  Option does not exist : $OPTARG\\n\"\n\t\t  usage; exit 1   ;;\n  esac    # --- end of case ---\ndone\nshift $(($OPTIND-1))",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "getopt": true
      },
      "source": "vim-snippets/snippets"
    },
    "13d21c4d1f947d6772ca331a4886fef9": {
      "content": "const ${1} = ${0};",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "const": true
      },
      "source": "snippets/javascript"
    },
    "13d66c1e0549403d086c240bc0ad6b98": {
      "content": "background-clip: padding-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "13dbc3835c3005ac29a750602296cc9b": {
      "content": "auto ${1:name}(${2}) -> ${3:void}\n{\n\t${0}\n};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "auto function",
      "matches": {
        "af": true
      },
      "source": "vim-snippets/snippets"
    },
    "13dda66557c94cd8104b832225c99183": {
      "content": "word-spacing: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "word-spacing": true,
        "ws": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "13de46c219ec5a4f2fbee1500d83fb8d": {
      "content": "(${1:params}) => {\n\t${2}\n}",
      "doc": "Creates an anonymous function in ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "anonymousFunction",
      "matches": {
        "anfn": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "13dfe49b1ff39a332dbdb036aa89afce": {
      "content": "${1:fn}.call(${2:this}, ${3:arguments})",
      "doc": "function call",
      "filetype": "base",
      "grammar": "lsp",
      "label": "function-call",
      "matches": {
        "base function call": true
      },
      "source": "javascript/base"
    },
    "13f5b867c2fa9db95fa6e4ad3b8c8bea": {
      "content": "<button class=\"${1:button}\" type=\"${2:submit}\">${0}</button>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "button.": true
      },
      "source": "vim-snippets/snippets"
    },
    "13f60f8cf993d9779269c0f368fab5b4": {
      "content": "${1:obj}.on('${2:events}', '${3:selector expression}', function (${4:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "on": true
      },
      "source": "snippets/javascript"
    },
    "1400fd9b9d5e60751d0600b07456d639": {
      "content": "quad(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${0:y4});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "quad": true
      },
      "source": "vim-snippets/snippets"
    },
    "1402ca7791e44a48b807b69776e507f6": {
      "content": "var $1 = new sap.m.VBox({\n\t\t\tvisible : $2,\n\t\t\theight : $3,\n\t\t\twidth : $4,\n\t\t\tdisplayInline :$5,\n\t\t\tdirection :$6,\n\t\t\tfitContainer : $7,\n\t\t\trenderType : $8,\n\t\t\tjustifyContent :$9,\n\t\t\talignItems : $10,\n\t\t\titems:[]\n\t\t});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapmvbox": true
      },
      "source": "vim-snippets/snippets"
    },
    "140429865a935e0c3946bedea606158d": {
      "content": "$.isPlainObject(${1:obj})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isobj": true
      },
      "source": "snippets/coffee"
    },
    "1406440b863372155fa45e2c06589cf2": {
      "content": "\\textsf{${1:TARGET}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\textsf": true,
        "textsf \\textsf{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "14070ab1fcab63dda2e330c85493743f": {
      "content": "{% cycle ${1:val1} ${2:val2} ${3:as $4} %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cycle": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "140a9c29c6577f5ada21c264eff6b2db": {
      "content": "${2:$1} = require '${1:sys}'",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req": true
      },
      "source": "snippets/coffee"
    },
    "143003aa75325cc34f3819270b87b49f": {
      "content": "<object data=\"${1}\" type=\"${2}\">\n\t${3}\n</object>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "object": true
      },
      "source": "vim-snippets/snippets"
    },
    "143db5c56c6cd9ec64e7375878dd206a": {
      "content": "t.datetime :${1:title}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.datetime (tcdt)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "143ef50d2718eb20ac60d077ecb0098d": {
      "content": "_.isArguments(${value})",
      "doc": "_.isArguments(function() { return arguments; }());\n// => true\n\n_.isArguments([1, 2, 3]);\n// => false\n\nChecks if `value` is likely an `arguments` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isarguments",
      "matches": {
        "lodash isarguments": true
      },
      "source": "javascript/lodash"
    },
    "143f8f375bb086d844153cb7fc10407e": {
      "content": "t.rename(:${1:old_column_name}, :${2:new_column_name})\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.rename (tre)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "14507cdea25de192de94d4dfd1c50dfa": {
      "content": "_.isNaN(${value})",
      "doc": "_.isNaN(NaN);\n// => true\n\n_.isNaN(new Number(NaN));\n// => true\n\nisNaN(undefined);\n// => true\n\n_.isNaN(undefined);\n// => false\n\nChecks if `value` is `NaN`.\n\n**Note:** This method is based on\n[`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\nglobal [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n`undefined` and other non-number values.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isnan",
      "matches": {
        "lodash isnan": true
      },
      "source": "javascript/lodash"
    },
    "145d0789fcd04ffe07552d3965be2494": {
      "content": "vertical-align: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va": true
      },
      "source": "vim-snippets/snippets"
    },
    "1462c63463cb8512c55cdab35bafb932": {
      "content": "(define (${1:name})\n\t\t(${0:definition}))",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "146fb04396bc859308e9c25658ea8845": {
      "content": "echo CHtml::radioButtonList('${1:name}', ${2:select}, array(${3}),array('${4:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhrbl": true
      },
      "source": "vim-snippets/snippets"
    },
    "14748b122be3bfe6ea904f100c6902a8": {
      "content": "enum ${1:MyEnum} { ${2:Item} };",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "enumeration",
      "matches": {
        "enum": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "14765e3165011419b0a2e4f54347a986": {
      "content": "<Location ${1:location}>\n        ${2:config}\n</Location>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "location": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "147adf3bebce2c9b05fde42838d95001": {
      "content": "/**\n * ${1:${VISUAL}}$0\n */",
      "doc": "",
      "filetype": "javascript-jsdoc",
      "grammar": "snu",
      "label": "A JSDoc comment",
      "matches": {
        "/*": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1484bd562ca1ac1fb18e2b7b7046c39c": {
      "content": "const [${1:state}, set${2}] = useState(${3:initialState});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "useState",
      "matches": {
        "uses": true
      },
      "source": "snippets/javascript"
    },
    "1495df655bd570a9802ba6e0a35abbbd": {
      "content": "if err != nil {\n\tpanic(${1})\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err != nil { panic(...) }",
      "matches": {
        "errp": true
      },
      "source": "gosnippets/snippets"
    },
    "14996c7660f056aa22f907cc824f8d48": {
      "content": ":first-child",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":fc": true
      },
      "source": "vim-snippets/snippets"
    },
    "14a2b83272830f629f59a79f6263a752": {
      "content": "text-wrap normal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "14ae9bc163a06fce3e251f4ee2e36f4f": {
      "content": "func main() {\n\t${1}\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func main()",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "14b01e895f4d6133d66d57d5b77dff46": {
      "content": "{% endif %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endif",
      "matches": {
        "endif": true
      },
      "source": "vim-snippets/snippets"
    },
    "14b30b9581c84edf7e026e22b9745e5c": {
      "content": "${1:obj}.dblclick(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dblclick": true
      },
      "source": "snippets/javascript"
    },
    "14b5b219ba452aec8d82b67a46084abe": {
      "content": "echo CHtml::activeLabel(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhal": true
      },
      "source": "vim-snippets/snippets"
    },
    "14b65a25fe2c1991f12d230a9c2308c6": {
      "content": "display: list-item",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:li": true
      },
      "source": "vim-snippets/snippets"
    },
    "14baf780ffe2b0b09dd0191b072b427f": {
      "content": "real, intent(in)  ::",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "real intent(in)",
      "matches": {
        "rei": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "14c3b51593c773cc419d5481b2dff3a9": {
      "content": "list-style-type: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "14c620c2b4714fc193120ba910197bcf": {
      "content": "public final ${1:#:type} ${2:#:var} = ${3};",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "final": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "14ccb0839c939767407542ef21157d37": {
      "content": "Console.WriteLine(\"$1\");",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "Console.WriteLine",
      "matches": {
        "cw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "14d3881e6d0b31685f159b2f8007c61d": {
      "content": "_.forOwn(${object}, ${iteratee})",
      "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forOwn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed).\n\nIterates over own enumerable string keyed properties of an object and\ninvokes `iteratee` for each property. The iteratee is invoked with three\narguments: (value, key, object). Iteratee functions may exit iteration\nearly by explicitly returning `false`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-forown",
      "matches": {
        "lodash forown": true
      },
      "source": "javascript/lodash"
    },
    "14d6a745a422380a1c12756d3ae693dd": {
      "content": "border-radius ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "14dd3b7133a0058e961c7cf9cbf96e85": {
      "content": "justify-content start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "14e544eca3b622778db63296ca841273": {
      "content": "{#each ${1:items} as ${2:item}, ${3:i}}\n\t${4: <!-- content here -->}\n{/each}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-each-index-block",
      "matches": {
        "sveach-index": true,
        "svelte each index": true
      },
      "source": "javascript/svelte"
    },
    "14e54df7772f251262d756ccc70bf795": {
      "content": "@doc false",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "docf": true
      },
      "source": "vim-snippets/snippets"
    },
    "14ed6fe9991e65d87ad8f2ca794df931": {
      "content": "| money_without_currency",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "money_without_currency": true
      },
      "source": "vim-snippets/snippets"
    },
    "14ef0f70d85a9ea19af37e78d0b37171": {
      "content": "{% endblock %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endblock",
      "matches": {
        "endblock": true
      },
      "source": "vim-snippets/snippets"
    },
    "14f6e9c7fadab9bec553b69d5f7564a4": {
      "content": "( ${0:#statements} )",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "(": true
      },
      "source": "vim-snippets/snippets"
    },
    "1500c0e64317fb0ac09a6059bd0ce9cc": {
      "content": "class ${1} {\n\tconstructor(${2}) {\n\t\t${0:${VISUAL}}\n\t}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clac": true
      },
      "source": "snippets/javascript"
    },
    "15046c93e4f2a745d2324b9b2a0f5658": {
      "content": "else {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "else { ... }",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "150f7cdf16d02935bb50e11297eb6196": {
      "content": "static if(${1:cond}) {\n\t${2}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sif": true
      },
      "source": "vim-snippets/snippets"
    },
    "1511da36c87e8102f33619d4ec11f684": {
      "content": "${1:fn} : ${2:a} -> ${3:a}\n$1 ${4} =\n\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn1": true
      },
      "source": "vim-snippets/snippets"
    },
    "15137c39c42a90f2005eaeb633622499": {
      "content": "<xsl:choose>\n\t<xsl:when test=\"${1:value}\">\n\t\t${2}\n\t</xsl:when>\n</xsl:choose>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "choose": true
      },
      "source": "vim-snippets/snippets"
    },
    "15152c466dbaf3d9e850b544411ea15f": {
      "content": "border-style dot-dot-dash",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:dtdtds": true
      },
      "source": "vim-snippets/snippets"
    },
    "151770f10d2e34ee85319368403320f2": {
      "content": "sum(attribute=${1:None}, start=${2:0})",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "sum of sequence of numbers + start",
      "matches": {
        "sum": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "152364adf49abd95166326beba3529d7": {
      "content": "${1:void} ${2:/*function name*/}(${3:/*args*/}) ${4:@safe pure nothrow}\n{\n\t${VISUAL}$5\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "function definition (fun)",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1526d315291319e6d54733981615bd04": {
      "content": "${fn:replace(${1:string}, ${2:substr}, ${0:replace})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "replace": true
      },
      "source": "vim-snippets/snippets"
    },
    "1527f671f1d5001de9a8031fba26f411": {
      "content": "console.log(JSON.stringify(${0}, null, 2));",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.log stringified",
      "matches": {
        "clstr": true
      },
      "source": "snippets/javascript"
    },
    "1532b20836c14fab7cef0c75cd7f8114": {
      "content": "background-clip: content-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:cb": true
      },
      "source": "vim-snippets/snippets"
    },
    "1534426326d95de9a1a23c5ac93d2ab4": {
      "content": "*${1}*${2}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "*emphasis*",
      "matches": {
        "emphasis1": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "153e28555e96c583288e239199ea1e09": {
      "content": "top: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "153e7c6c4bdbcb3b8d131d1db20b70c8": {
      "content": "feat(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "feat conventional commit",
      "matches": {
        "feat": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "153edc50eb51ca5e4539ab5cc513dd7b": {
      "content": "import React, { memo } from 'react'\n",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "import-react-memo",
      "matches": {
        "imrm": true,
        "react import memo": true
      },
      "source": "javascript/react"
    },
    "15463b0b2fc7db533bb04021ab8b4100": {
      "content": "Set Global Variable    \\${${1:name}}    ${2:${value}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Set Global Variable",
      "matches": {
        "sgv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "154f45afbd7c2ab139bc6dfbbd9e21cf": {
      "content": "#[macro_use]\nextern crate log;",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "extern crate log",
      "matches": {
        "ecl": true
      },
      "source": "vim-snippets/snippets"
    },
    "1553ffbd76d519b78293b7b7e79d508c": {
      "content": "/**\n * ${3:#:undocumented constant}\n **/\ndefine(${1} ${2});${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc_constant": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "155753dc95a3f87eae294ffb3e485125": {
      "content": "do {\n  ${0}\n} while (${0:/* condition */});",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dowh": true
      },
      "source": "vim-snippets/snippets"
    },
    "156ced1669c8166448b7d34067142cde": {
      "content": "<exception cref=\"${1:System.Exception}\">${2}</exception>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "XML exception comment",
      "matches": {
        "<ex": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1572d980368bcc4033dcff44f5667d91": {
      "content": "${1:FIELDNAME} = models.FileField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "FileField",
      "matches": {
        "mfile": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1577344ae6e35e3a86d1bf1ab0a7622f": {
      "content": "- (${1:unsigned int})${2:#:thing}\n{\n\treturn ${3};\n}\n- (void)set${2}:(${1:unsigned int})new${2}\n{\n\t${3} = new${2};\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "PrimitiveType",
      "matches": {
        "acc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1579db9cb727cb1f0cf12c4f8c686035": {
      "content": "margin-left: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ml:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "1584e27582db7c4a705d5221b62ea36b": {
      "content": "for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "for ($i = 0; $i < $count; $i++) { ... }",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "158d40674b284dbed5d8358f8f3d488c": {
      "content": "case ${1:value}:\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "case",
      "matches": {
        "cs": true
      },
      "source": "vim-snippets/snippets"
    },
    "15904fd74b9bb010c09ef74d5ec2dc3e": {
      "content": "float: right",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "159bfb5064ebe3564fa46e9e754ec920": {
      "content": "if ${1:/* condition */} {\n\t${2:${VISUAL}}\n} else {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if else condition",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "15a477d62b5ee83c6491cfe023212b0c": {
      "content": "for ${1:i} in ${2:1}..${3:42} loop\n\t${0}\nend loop;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "15a5f1e9ba97c6aeed5c701b7606f2d2": {
      "content": "grid-auto-rows: min-content",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar:mic": true
      },
      "source": "vim-snippets/snippets"
    },
    "15a669c0ca4b481e63f013284d6fe9f3": {
      "content": "scope :${1:name}, -> { where(${2:field}: ${0:value}) }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "15af89f5a331575e55991f0c76efc98f": {
      "content": "<li>${0}</li>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "li": true
      },
      "source": "vim-snippets/snippets"
    },
    "15d46b2824f6acbc8bf810a68019c310": {
      "content": "import React, { Component } from 'react'\nimport { View, Text } from 'react-native'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
      "doc": "Creates a React Native component class with PropTypes with connected redux and ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativeClassComponentRedux",
      "matches": {
        "rncredux": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "15d9e191fdf9eae1c04908bb120ef304": {
      "content": "extends ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ext": true
      },
      "source": "vim-snippets/snippets"
    },
    "15deedadfe59adeae7c691d2c1a960a9": {
      "content": "break ${1:label};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "break": true
      },
      "source": "vim-snippets/snippets"
    },
    "15e36fe423da9cc148a625cd19db437d": {
      "content": "filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1}',sizingMethod='${0:crop}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg:ie": true
      },
      "source": "vim-snippets/snippets"
    },
    "15ee1673916aa41d412b00b751047b17": {
      "content": "|> Enum.map(fn ${1} -> ${0} end)",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "pipe to map",
      "matches": {
        ">m": true
      },
      "source": "vim-snippets/snippets"
    },
    "15f1d1f9f0395e3f1227bd16085a8e57": {
      "content": "grid-template-columns: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gtc": true
      },
      "source": "vim-snippets/snippets"
    },
    "15f66379ea40667b61e4c665caccb88e": {
      "content": "enum ${1:#:NAME} {\n  ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "enum NAME {...}",
      "matches": {
        "enum": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "15fae3fa064feb7e52f5217773f0993a": {
      "content": "table-layout auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbl:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "1605261417d44910c9bf1a27911242f7": {
      "content": "constructor( @Optional() @SkipSelf() parentModule: ${1:ModuleName} {\n\tif (parentModule) {\n\t\tconst msg = `${1:ModuleName} has already been loaded. \n\t\t\tImport ${1:ModuleName} once, only, in the root AppModule.`;\n\t\tthrow new Error(msg);\n\t}\n}",
      "doc": "Angular Module SkipSelf constructor",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-module-skipself-constructor",
      "matches": {
        "a-ctor-skip-self": true,
        "angular module skip self constructor": true
      },
      "source": "javascript/angular"
    },
    "1605b115c9b612aeef4bb011918bb7a1": {
      "content": "(unless ${1} ${2} ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unless": true
      },
      "source": "vim-snippets/snippets"
    },
    "160de2d79616c7d5d047dd548b5ff8f0": {
      "content": ".. csv-table:: ${1:Title}\n\t:header-rows: 1\n\t:stub-columns: 0\n\t${0:R1C1}, R1C2\n\tR2C1, R2C2",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "csv:": true
      },
      "source": "vim-snippets/snippets"
    },
    "16119447904ebd302fec9906ca45be97": {
      "content": "word-wrap: unrestricted;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "16123b22f5d3f3b5c8c6ec44cd60a2e5": {
      "content": "PropTypes.arrayOf($0).isRequired,",
      "doc": "An array of a certain type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeArrayOfRequired",
      "matches": {
        "ptaor": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "161b35a52e1f34df183107bcb0622ecd": {
      "content": "for (let ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "for (...) {...}",
      "matches": {
        "for": true
      },
      "source": "snippets/javascript"
    },
    "161dc7e9e55df5a9fc35a7e9afa11089": {
      "content": "background-origin: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo": true
      },
      "source": "vim-snippets/snippets"
    },
    "16340fb3522a1e72a15fd9859e392cf2": {
      "content": "const {\n  ${1:queryName}: { childImageSharp: {fluid: ${2:imageFluid}}}\n} = useStaticQuery(graphql`\n  query {\n    ${1:queryName}: file(relativePath: { eq: \"${3:imagePath.png}\" }) {\n      childImageSharp {\n        fluid(maxWidth: ${4:300}) {\n          ...${5|GatsbyImageSharpFluid,GatsbyImageSharpFluid_noBase64,GatsbyImageSharpFluid_tracedSVG,GatsbyImageSharpFluid_withWebp,GatsbyImageSharpFluid_withWebp_noBase64,GatsbyImageSharpFluid_withWebp_tracedSVG|}\n        }\n      }\n    }\n  }\n`)",
      "doc": "",
      "filetype": "gatsby-image",
      "grammar": "lsp",
      "label": "gatsby-image-usestaticquery-fluid",
      "matches": {
        "gatsby-image usestaticquery fluid": true
      },
      "source": "javascript/gatsby-image"
    },
    "163722d7d1befa8f9e3d694e08c2964c": {
      "content": "respond_to do |format|\n\tformat.${1:html} { ${0} }\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rest": true
      },
      "source": "vim-snippets/snippets"
    },
    "1651945b00196f60aa6039c419f74152": {
      "content": "NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dict": true
      },
      "source": "vim-snippets/snippets"
    },
    "165dd380f78b11b667e72f84b062e6e8": {
      "content": "vapply(${1:list}, ${2:function}, ${0:type})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vapply": true
      },
      "source": "vim-snippets/snippets"
    },
    "166b64c33933266788cae0c2d6824d81": {
      "content": "{{local:${1:image_path}}}${2}",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": "{{<image path>}}",
      "matches": {
        "image_local": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "166cd2d18e4b1dddb55ac2c7eb9a4dff": {
      "content": "<%= link_to '${1:link text...}', action: '${2:edit}', id: ${0:@item} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "liai": true
      },
      "source": "vim-snippets/snippets"
    },
    "167415e0957ba9d698ff623449a07d82": {
      "content": "${fn:substringAfter(${1:string}, ${0:substr})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "substr:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "1677fa37997667fb898dfd0a38068216": {
      "content": "scope=\"${1:this api replaced by slot-scope in 2.5.0+}\"$0",
      "doc": "Used to denote a <template> element as a scoped slot, which is replaced by `slot-scope` in 2.5.0+.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-scope",
      "matches": {
        "scope": true,
        "vue scope": true
      },
      "source": "javascript/vue"
    },
    "167a0a058579a3530011270d337af788": {
      "content": "import { graphql } from 'gatsby';",
      "doc": "",
      "filetype": "gatsby",
      "grammar": "lsp",
      "label": "gatsby-graphql-import",
      "matches": {
        "gatsby import graphql": true
      },
      "source": "javascript/gatsby"
    },
    "168c47a4cbc69e6cc4ed02aa8ed1039b": {
      "content": "console.time(${1:object});",
      "doc": "Sets starting point for execution time measurement",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleTime",
      "matches": {
        "cti": true
      },
      "source": "vscode-javascript/snippets"
    },
    "1698f6a9ca0569781686e20380521780": {
      "content": "{% cache %}\n\t${0}\n{% endcache %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig cache",
      "matches": {
        "cache": true
      },
      "source": "vim-snippets/snippets"
    },
    "169998f5bfcfc0e2629c6f935a0c32c5": {
      "content": "const ${1:module} = require('${1:module}');",
      "doc": "require assignment",
      "filetype": "base",
      "grammar": "lsp",
      "label": "require-assignment",
      "matches": {
        "base require assignment": true
      },
      "source": "javascript/base"
    },
    "1699ea1eef9d23d1dff18037a35b1a06": {
      "content": "this.$1 = this.$1.bind(this);$0",
      "doc": "Binds the this of a method. To be used inside a constructor",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "bindThis",
      "matches": {
        "bnd": true
      },
      "source": "vscode-react/snippets"
    },
    "169aa0a85797d7641563321e1e182cd3": {
      "content": "<xsl:with-param name=\"${1:name}\" select=\"${0:*}\" />",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "select",
      "matches": {
        "with-param": true
      },
      "source": "vim-snippets/snippets"
    },
    "169dd3aac86059c0a65aed5258eaf8a6": {
      "content": "@media ${1:print}\n\t${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@m": true
      },
      "source": "vim-snippets/snippets"
    },
    "16ab364c36d9801d15a049b89bdaaac1": {
      "content": "YYii::app()->request->userHostAddress",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yuserip": true
      },
      "source": "vim-snippets/snippets"
    },
    "16abf37c1f22ff1cbdb6376e62b45b1d": {
      "content": "[${1:text}](https://${2:address})",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[": true
      },
      "source": "vim-snippets/snippets"
    },
    "16ae612a5acf7274bb7d61e77de9dd1e": {
      "content": "choice(name: \"${1:CHOICE}\" , choices: [\"${2:Choices}\",] , description: \"${3:Pick something}\")\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "paramchoice": true
      },
      "source": "vim-snippets/snippets"
    },
    "16b98931c66c95da1ec337e73206d430": {
      "content": "let ${1} = ${0};",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "snippets/javascript"
    },
    "16c4aaba2758f5e8420131a75987dfd2": {
      "content": "if(${1}) {\n\t${2}\n} else if(${3}) {\n\t${4}\n} else {\n\t${5}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifee": true
      },
      "source": "vim-snippets/snippets"
    },
    "16c541859d008b618b845a11fbe097fc": {
      "content": "else:\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "16c5678b456b552011c60c49bec9346f": {
      "content": "align-self: flex-start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "16c75b1c25ad86e876f3570e55473b8d": {
      "content": "script ${1:#:new_object}\n\ton run\n\t\t${2:TARGET}\n\tend run\nend script",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "script": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "16d919e433b24c1e34ccd0bc3438cc6a": {
      "content": "<output>${0}</output>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "output": true
      },
      "source": "vim-snippets/snippets"
    },
    "16f1603dc5746ae15c3f78ac2c96927f": {
      "content": "@media ${1:print} {\n\t${2:${VISUAL}}\n}${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "@media mediatype { }",
      "matches": {
        "@m": true
      },
      "source": "vim-snippets/snippets"
    },
    "16f61cff786dbc1a351026307cdec200": {
      "content": "internal int ${1} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi&-": true
      },
      "source": "vim-snippets/snippets"
    },
    "16f7dc6424ba977000be94980b2d422e": {
      "content": "<%# ${0} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<%# %>",
      "matches": {
        "#": true
      },
      "source": "vim-snippets/snippets"
    },
    "16faf2bf633dd237fbe0697fa23c128f": {
      "content": ":last-child",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":lc": true
      },
      "source": "vim-snippets/snippets"
    },
    "170038d466538d7bba102f066c0ceb9f": {
      "content": "[[${0:TARGET}]]",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comment": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "17048543a02469c7dfdb8e1fe4ef3400": {
      "content": "$this->${1:method}()->shouldNotContain(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotContain('value')",
      "matches": {
        "sncontain": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "170579cab4d23991ca9f74df75025973": {
      "content": "${1:name}\t${2:type}\t${3:default ''}\t${0:not null}",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "col": true
      },
      "source": "vim-snippets/snippets"
    },
    "170b8766658f0232f6f6e18e7070c939": {
      "content": "describe('${1:}', () => {\n\t${0:${VISUAL}}\n});",
      "doc": "",
      "filetype": "javascript-mocha",
      "grammar": "snu",
      "label": "describe('thing', () => { ... })",
      "matches": {
        "des": true
      },
      "source": "vim-snippets/snippets"
    },
    "1717ae124b87f9ae5b7f8dc00788b3f8": {
      "content": "border-bottom-right-image continue",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbri:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "171d3005fbe8c60e5f025d9eec8ed4f9": {
      "content": "// I don't know how this works. Don't touch it.",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "idk": true
      },
      "source": "vim-snippets/snippets"
    },
    "17206dc7f1ae9b62394178adb4a5b465": {
      "content": "default_if_none:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defaultifnone": true
      },
      "source": "vim-snippets/snippets"
    },
    "172e89d0c658901f5f558653ae83655c": {
      "content": "blockIdx.${0}",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Block Index",
      "matches": {
        "bid": true
      },
      "source": "vim-snippets/snippets"
    },
    "17390e2b5592a11df529dafd753bd039": {
      "content": "$this->markTestSkipped(${1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->markTestSkipped()",
      "matches": {
        "marks": true
      },
      "source": "vim-snippets/snippets"
    },
    "173e711ec890bf96bed97342bc094c5a": {
      "content": "border-top-style none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdts:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "174445354ad5d511f0de9290e2aa18a9": {
      "content": "clear both",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "17456768d26e5999452e3df2c2e8275f": {
      "content": "erlang:display(${0}),",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d": true
      },
      "source": "vim-snippets/snippets"
    },
    "1746fa7052baa1a377629d1efba09581": {
      "content": "wont_be_same_as ${0:other}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wbsa": true
      },
      "source": "vim-snippets/snippets"
    },
    "174f899b4d80949e627771c9c36a5e42": {
      "content": "link(${1:url}${2:, }${0:target});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link": true
      },
      "source": "vim-snippets/snippets"
    },
    "175106a58cbba517dac2a8ff70588bbe": {
      "content": "cursor auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "1751e0d3322b5d0eae70bbb69d2143fc": {
      "content": "range ${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "range",
      "matches": {
        "rn": true
      },
      "source": "vim-snippets/snippets"
    },
    "1752fcd21caa6925acdf7ea899a09045": {
      "content": "@include ${1:mixin}(${2});",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc": true
      },
      "source": "vim-snippets/snippets"
    },
    "17556664dec48d03d1974a7d04ee4e73": {
      "content": "if (${1:#:condition}) {\n    ${2:TARGET}\n} else {\n    ${3:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "if () {} else {}",
      "matches": {
        "ifel": true,
        "ifelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "175a4894b7d91f854774aa014c7be14b": {
      "content": "import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class ${2:Your}Interceptor implements HttpInterceptor {\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\treturn next.handle(req);\n\t}\n}",
      "doc": "Empty Angular HttpInterceptor for HttpClient",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-httpinterceptor-empty",
      "matches": {
        "a-http-interceptor": true,
        "angular http interceptor empty": true
      },
      "source": "javascript/angular"
    },
    "1764226ddb566b8c8b88c77392b62ed2": {
      "content": "align-items: start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "17694cb87630d723c1eacbab671e9d9b": {
      "content": "reduce(Array.new) { |${1:arr}, ${2:a}| $1.push(*$2) }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "flao": true
      },
      "source": "vim-snippets/snippets"
    },
    "176c762bb1a4c20b0a80f2fadb940a68": {
      "content": ".. contents::\n\t:depth: ${1:2}\n\t${2::local:}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "directive_content",
      "matches": {
        "content": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1772b9f041970a8af200eeef2f51fc62": {
      "content": "import React from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a stateless React component without PropTypes and ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactStateless",
      "matches": {
        "rsc": true
      },
      "source": "vscode-react/snippets"
    },
    "17787002b3c2a5b3d80a9e0f710d5095": {
      "content": "${1:obj}.animate({${2:param1: value1, param2: value2}}, ${3:speed})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "animate": true
      },
      "source": "snippets/coffee"
    },
    "177a0f39fdc9b05a098b6640ab784fbc": {
      "content": "<%= options_for_select ${1:collection}, ${2:value_method} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ofs": true
      },
      "source": "vim-snippets/snippets"
    },
    "1781852ba6f4f942f867c5c55d4fe709": {
      "content": "unless ($1) {\n\t${2:# body...}\n}\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "unless",
      "matches": {
        "unless": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1783bc30379699d442442463ce4196f8": {
      "content": "expect(${1:target}).not.toEqual(${2:value})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect not to equal (coffee)",
      "matches": {
        "note": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "178968609b5de441057d6ac02f43d07f": {
      "content": "grid-auto-columns: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "1792e1af9bff621e8b102864ba09750d": {
      "content": "else if (${1:condition}) {\n   ${2:selected}\n}",
      "doc": "Code snippet for 'else' conditional",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "elseif",
      "matches": {
        "elseif": true
      },
      "source": "vscode-R/snippets"
    },
    "17944eb87a7909f40a3f873a266457de": {
      "content": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
      "doc": "Invoked immediately after the component's updates are flushed to the DOM.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentDidUpdate",
      "matches": {
        "cdup": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "1796831cf124522ef62b9f37c6e495a5": {
      "content": "expect(${1:target}).not.toContain(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to contain (js)",
      "matches": {
        "notc": true
      },
      "source": "vim-snippets/snippets"
    },
    "1796dd6b2fe1b2f357251a2b85d02ec3": {
      "content": "${1:value_key}:\n  service:\n\tannotations: {}\n\tlabels: {}\n\tclusterIP: \"\"\n\texternalIPs: []\n\tloadBalancerIP: \"\"\n\tloadBalancerSourceRanges: []\n\texternalTrafficPolicy: \"\"\n\thealthCheckNodePort: 0\n\ttargetPorts:\n\t  http: http\n\t  https: https\n\ttype: LoadBalancer\n\tnodePorts:\n\t  http: \"\"\n\t  https: \"\"\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "service_values": true
      },
      "source": "vim-snippets/snippets"
    },
    "179a10cdba79caa194cd56ae7869296b": {
      "content": "tuple(${1:/*args*/})",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "tuple (tup)",
      "matches": {
        "tup": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "17a2244680aa611f6e64d29048e55141": {
      "content": "Wait Until Element Does Not Contain    ${1:${locator}}    ${2:${text}}    ${3:${timeout=None}}    ${4:${error=None}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Wait Until Element Does Not Contain",
      "matches": {
        "wuednc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "17b2e0357c17167366d9cfb742ca46e0": {
      "content": "expect(${1:target}).wasCalledWith(${2:arguments})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect was called with (coffee)",
      "matches": {
        "escw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "17b2e2fd299528d11ace0fbe3dcf0bbd": {
      "content": "<wbr>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wbr": true
      },
      "source": "vim-snippets/snippets"
    },
    "17c1986384f34bac7cc75a714feda85a": {
      "content": "/*\n\t${0}\n */",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/snippets"
    },
    "17c837cf161a1520023ed030802e1051": {
      "content": "require('getopt', quietly = TRUE)\nopt_spec <- matrix(c(\n\t\t\t\t'help',     'h', 0, \"logical\", \t\"Getting help\",\n\t\t\t\t'file',     'f', 1, \"character\",\"File to process\"\n                ), ncol = 5, byrow = TRUE)\nopt <- getopt(spec = opt_spec)\nif ( !is.null(opt$help) || is.null(commandArgs()) )   {\n    cat(getopt(spec = opt_spec, usage = TRUE, command = \"yourCmd\"))\n    q(status=0)\n}\n# some inital value\nif ( is.null(opt$???) )    { opt$??? <- ??? }",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "getopt": true
      },
      "source": "vim-snippets/snippets"
    },
    "17d5b61d8d989739109a4801c0c7cd1b": {
      "content": "@warn \"${1}\" ${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@w": true
      },
      "source": "vim-snippets/snippets"
    },
    "17db108d9e4a2a3aeb0104e84dcb9cb6": {
      "content": "hsla(${1:360}, ${2:100}%, ${3:100}%, ${4:0.5})$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "color hsla",
      "matches": {
        "hsla": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "17f114a6062e569ea7a5646fbd78743f": {
      "content": "my ${1:$var} = \"${2:filename}\".IO.slurp;",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slurp": true
      },
      "source": "vim-snippets/snippets"
    },
    "181be6df446732d2fb4ec2b9f8ebc9cc": {
      "content": "import { $2 } from '${1:module}';$0",
      "doc": "Imports only a portion of the module in ES6 syntax",
      "filetype": "base",
      "grammar": "lsp",
      "label": "importdestructing",
      "matches": {
        "base import destructing": true
      },
      "source": "javascript/base"
    },
    "181d4ea2d5a82b022d3a8cce1f367246": {
      "content": "static_cast<${1}>(${2})${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "static_cast<>()",
      "matches": {
        "static_cast": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "181e121e9c242af19ea4154e8b76b8a9": {
      "content": "echo CHtml::radioButton('${1:name}', ${2:false},array(${3:optionName}=>${0:optionValue} );",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhrb": true
      },
      "source": "vim-snippets/snippets"
    },
    "1822297c1887a8b8e31ce33b4d3ac642": {
      "content": "each_value { |${1:val}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eav": true
      },
      "source": "vim-snippets/snippets"
    },
    "1831b756c69a2e71566ccc6049926350": {
      "content": "{\n\t/* $1 */\n\t$0\n",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "properties { } ( } )",
      "matches": {
        "{": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "183d150114baaf27dd13be3d4f05be66": {
      "content": "$.ajax\n  url: \"${1:mydomain.com/url}\"\n  type: \"${2:POST}\"\n  dataType: \"${3:xml/html/script/json}\"\n  data: ${4:data}\n  complete: (jqXHR, textStatus) ->\n\t${5:// callback}\n  success: (data, textStatus, jqXHR) ->\n\t${6:// success callback}\n  error: (jqXHR, textStatus, errorThrown) ->\n\t${0:// error callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajax": true
      },
      "source": "snippets/coffee"
    },
    "18465c755aebd22eb9546a1b03f19a6b": {
      "content": "getContext(${1:key})",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-get-context",
      "matches": {
        "svelte get content": true,
        "svgetc": true
      },
      "source": "javascript/svelte"
    },
    "184a762d6f35e2cfa6b72c8de9a8d611": {
      "content": "background-position-y: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgpy": true
      },
      "source": "vim-snippets/snippets"
    },
    "184ac5516f94d51a1d605b11aa6d84d4": {
      "content": "@click=\"${1:handler}(${2:arg}, $event)\"",
      "doc": "v-on click handler with arguments",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue v-on Shortcut Directive",
      "matches": {
        "von": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "185ad3262982fcf638c3fc34767a15e2": {
      "content": "place-self: start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "186302198b3fb2bba19ab207b4876cb4": {
      "content": "_.reject(${collection}, ${predicate})",
      "doc": "var users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n\n_.reject(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `_.matches` iteratee shorthand.\n_.reject(users, { 'age': 40, 'active': true });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.reject(users, ['active', false]);\n// => objects for ['fred']\n\n// The `_.property` iteratee shorthand.\n_.reject(users, 'active');\n// => objects for ['barney']\n\nThe opposite of `_.filter`; this method returns the elements of `collection`\nthat `predicate` does **not** return truthy for.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-reject",
      "matches": {
        "lodash reject": true
      },
      "source": "javascript/lodash"
    },
    "187026a118d744b34b62b6c154a58afa": {
      "content": "import styled from 'styled-components';\n\nconst ${1} = styled.${2}`\n  ${3}\n`;\n\nexport default ${1};",
      "doc": "Styled-Components file",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-styled-components-file",
      "matches": {
        "scf": true,
        "styled-components file": true
      },
      "source": "javascript/styled-components"
    },
    "187784ad276cfe57174046285d82a5c0": {
      "content": "text(${1:data}, ${2:x}, ${3:y}${4:, }${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "data",
      "matches": {
        "text": true
      },
      "source": "vim-snippets/snippets"
    },
    "18801da0fb1fc52d0ca4e31eac648eee": {
      "content": "echo CHtml::listOptions('${1:selection}', array(${2}), array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhlo": true
      },
      "source": "vim-snippets/snippets"
    },
    "188bbaa62a1a24bcdbba0513dbc404c3": {
      "content": "${1:FIELDNAME} = models.SlugField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "SlugField",
      "matches": {
        "mslug": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "188d8f7f38ef5703de4a1618b2e25552": {
      "content": "${1:ModelName}::model()->findAll(${2:condition},array('${3:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yfinda": true
      },
      "source": "vim-snippets/snippets"
    },
    "189287c330438339e26ae1ddbb54032d": {
      "content": "border-break close",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbk:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "189769eb5ce2338447bf818fae807d59": {
      "content": "for (${4:size_t} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "for (for)",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "189f911bdc30a3e70bff7c1d186f669f": {
      "content": "<!% ${0:} %>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<!%": true
      },
      "source": "vim-snippets/snippets"
    },
    "18b07f4a1101b0c3c71fc9c091e1204f": {
      "content": "${1:ModelName}::model()->updateAll(${2:array('attributes')}, ${3:condition},array('${4:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yupdatea": true
      },
      "source": "vim-snippets/snippets"
    },
    "18b8126ada4f4617a8bcc78159261221": {
      "content": "_.stubTrue()",
      "doc": "_.times(2, _.stubTrue);\n// => [true, true]\n\nThis method returns `true`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-stubtrue",
      "matches": {
        "lodash stubtrue": true
      },
      "source": "javascript/lodash"
    },
    "18c30943603d4db084348cbf3abdb7bc": {
      "content": "expect { ${1:object} }.to ${0}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "expb": true
      },
      "source": "vim-snippets/snippets"
    },
    "18c4955044cc656ae5e45a261f777187": {
      "content": "_.compact(${array})",
      "doc": "_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]\n\nCreates an array with all falsey values removed. The values `false`, `null`,\n`0`, `\"\"`, `undefined`, and `NaN` are falsey.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-compact",
      "matches": {
        "lodash compact": true
      },
      "source": "javascript/lodash"
    },
    "18cca6655f240973769d1774e56fa0d5": {
      "content": "&#x21A9;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "return": true
      },
      "source": "vim-snippets/snippets"
    },
    "18ddb05e1a9b3b6aeb4bb2322295441b": {
      "content": "font-variant: small-caps;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fv:sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "18e7bd303401a451794ab643c4faa458": {
      "content": "_.findLastIndex(${array}, ${predicate}, ${fromIndex})",
      "doc": "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n// => 2\n\n// The `_.matches` iteratee shorthand.\n_.findLastIndex(users, { 'user': 'barney', 'active': true });\n// => 0\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findLastIndex(users, ['active', false]);\n// => 2\n\n// The `_.property` iteratee shorthand.\n_.findLastIndex(users, 'active');\n// => 0\n\nThis method is like `_.findIndex` except that it iterates over elements\nof `collection` from right to left.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-findlastindex",
      "matches": {
        "lodash findlastindex": true
      },
      "source": "javascript/lodash"
    },
    "18efd7463ebe8caf17411c4db1838bf3": {
      "content": "$scope.$emit '${1:eventName}', ${2:eventArgs}\n${3}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$e": true
      },
      "source": "snippets/coffee"
    },
    "18f9eba2ef2960274612952ee9af6b31": {
      "content": "before_destroy :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbd": true
      },
      "source": "vim-snippets/snippets"
    },
    "18fe1f017b73f1723d736dc1627957d1": {
      "content": "def ${1:name} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "19010d9a00ed96ecbfd58c33385b3156": {
      "content": "$strobe(\"${1}\", ${2});",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "$strobe(\"...\", ...);",
      "matches": {
        "strobe": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1902b86b3e67183a1cba389406575d2f": {
      "content": "_.pad(${string}, ${length}, ${chars})",
      "doc": "_.pad('abc', 8);\n// => '  abc   '\n\n_.pad('abc', 8, '_-');\n// => '_-abc_-_'\n\n_.pad('abc', 3);\n// => 'abc'\n\nPads `string` on the left and right sides if it's shorter than `length`.\nPadding characters are truncated if they can't be evenly divided by `length`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-pad",
      "matches": {
        "lodash pad": true
      },
      "source": "javascript/lodash"
    },
    "1905cae18d0269b920b5857104d330e3": {
      "content": "<%= if ${1} do %>\n\t${2:${VISUAL}}\n<% else %>\n\t${0}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "1907cddc11cd720a8ab571f475fc43b4": {
      "content": "removeMovieClip(${1:#:target});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "190dcf83fdaea6050239cc1cd1e35539": {
      "content": "\\\\subsubsection*{${1:subsubsection name}}%\n\\\\label{ssub:${2:$1}}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\subsubsection*",
      "matches": {
        "ssub*": true
      },
      "source": "vim-snippets/snippets"
    },
    "19133ce51d5eeec2da3208c0b24e0269": {
      "content": "place-self: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps": true
      },
      "source": "vim-snippets/snippets"
    },
    "1913ae01174eba2f7d25ff24c0a4a801": {
      "content": "_.takeWhile(${array}, ${predicate})",
      "doc": "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.takeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n\n// The `_.matches` iteratee shorthand.\n_.takeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.takeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n\n// The `_.property` iteratee shorthand.\n_.takeWhile(users, 'active');\n// => []\n\nCreates a slice of `array` with elements taken from the beginning. Elements\nare taken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-takewhile",
      "matches": {
        "lodash takewhile": true
      },
      "source": "javascript/lodash"
    },
    "1917d01fdee4042fa7e35b087e2c9b6b": {
      "content": "expect(${1:target}).not.toHaveAttr('${2:attr}'${3:, '${4:value}'});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to not have attribute (js)",
      "matches": {
        "notha": true
      },
      "source": "vim-snippets/snippets"
    },
    "1917e36bc9b9db9ea2252369d44d6204": {
      "content": "File.read(${1:'path/to/file'})",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "File.read()",
      "matches": {
        "file": true
      },
      "source": "vim-snippets/snippets"
    },
    "1923a83b7afc5b667eb4916018b635f7": {
      "content": "for (var ${1} in ${2}){\n\t${3:TARGET}\n};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "fi",
      "matches": {
        "fori": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "192417553367d2e2142bf87a224d8bae": {
      "content": "grid-auto-flow: row",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "192516780e62ab4ec5d13f5fbbfdcf53": {
      "content": "=head1 NAME\n${1:ClassName} - ${2:ShortDesc}\n=head1 SYNOPSIS\n  use $1;\n  ${3:# synopsis...}\n=head1 DESCRIPTION\n${0:# longer description...}\n=head1 INTERFACE\n=head1 DEPENDENCIES\n=head1 SEE ALSO",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ppod": true
      },
      "source": "vim-snippets/snippets"
    },
    "1935b6ad3c254736362f6fc345b4bdc6": {
      "content": "list-style-position: inside",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisp:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "1940db9e3e455a7cd833bd0733ee1fc5": {
      "content": "export default class ${1:ClassName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t${2}\n\t\t\t</>\n\t\t);\n\t};\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ercla": true
      },
      "source": "snippets/javascript"
    },
    "19414fe681dba36a021c9e05d3cae731": {
      "content": "fread(${1:ARRAY}, sizeof(${2:TYPE}), ${3:N_MEMBERS}, ${4:FILE})",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "fread(......, file)",
      "matches": {
        "fread": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "195069bd0f417bab92357ddeee017cfd": {
      "content": "#[derive(${1:TARGET})]${2}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "derive": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "19506b3ef8600c49d1ba75a8824173de": {
      "content": "with (${1:#:target});\n\t${0:TARGET}\n};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "19644c38ec0f2389a1f855b24d65dfb0": {
      "content": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}",
      "doc": "try/catch",
      "filetype": "base",
      "grammar": "lsp",
      "label": "try-catch",
      "matches": {
        "base try catch": true
      },
      "source": "javascript/base"
    },
    "1965b5500bab3b91798f0c6adddaca75": {
      "content": "(defrecord ${1:type} [${2:constructor-args}]\n  ${3:protocol} (${3:method} [${5}] ${6}))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deftype": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "196782135a57b08a9c0be23e476e0ea9": {
      "content": "else\n\t${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "196b6c679ba98d7a0ea6910ca1d44baa": {
      "content": "it { should belong_to :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isbt": true
      },
      "source": "vim-snippets/snippets"
    },
    "19722b6f54d2b306ccbb512f2daed2e9": {
      "content": "afterEach(() => {\n\t$0\n});",
      "doc": "afterEach function is called once after each spec",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-aftereach",
      "matches": {
        "ae": true,
        "jest aftereach": true
      },
      "source": "javascript/jest"
    },
    "1974754e8e20849f1a3e4660b36e97e1": {
      "content": "text-align: left;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "197bbc782b0051e3ddb48eea03423697": {
      "content": "<h2 id=\"${1}\">${0}</h2>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h2#": true
      },
      "source": "vim-snippets/snippets"
    },
    "197c7612351bcd5908938af962133186": {
      "content": "(fun ${1:x} -> ${2:x})",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "anonymous function",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "197ca331d2c83097c443e9951d4bdd0b": {
      "content": "render(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ren": true
      },
      "source": "vim-snippets/snippets"
    },
    "19897a86315c8ac9d23c460729e585d8": {
      "content": "Plug '${1}', { 'do': '${0}' }",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "vim-plug Plugin definition with { 'do': '' }",
      "matches": {
        "plugdo": true
      },
      "source": "vim-snippets/snippets"
    },
    "198ad7090746e9186b89603d8211e46d": {
      "content": "else\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "1993b6a077e46e126df95e50b134784f": {
      "content": "default:\n  ${0}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "de": true
      },
      "source": "vim-snippets/snippets"
    },
    "199e2d768234a51083429f9dc5bf8b58": {
      "content": ".attr(\"${1}\", ${2})",
      "doc": "",
      "filetype": "javascript-d3",
      "grammar": "snu",
      "label": "",
      "matches": {
        ".attr": true
      },
      "source": "vim-snippets/snippets"
    },
    "19b014a4842210a90be9dc4129847210": {
      "content": "text-decoration none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "19bf127381d0373da6c07233f5b07a4d": {
      "content": "local ok, err = pcall(${1:your_function})\nif not ok then\n\thandler(${2:ok, err})\n${3:else\n\tsuccess(${4:ok, err})\n}end",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "pcall statement",
      "matches": {
        "pcall": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "19d5551b78fd8591224834e60d676ccc": {
      "content": "private ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "19d896137c7f3fd3a87fdd1e1d2842e7": {
      "content": "leave-to-class=\"$1\"$0",
      "doc": "leave-to-class=''. Expects: string.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-leave-to-class",
      "matches": {
        "leavetoclass": true,
        "vue leave-to-class": true
      },
      "source": "javascript/vue"
    },
    "19dafbf65e8b7925e492989bd16b3088": {
      "content": "[assembly: InternalsVisibleTo(\"${1:#:FriendName}\")]${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asm_internals_visible_to": true,
        "internals asmInternalsVisibleTo friend_attr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "19e20fa48ff8b0f28c94a81bf3f3daf4": {
      "content": "opacity: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "op": true
      },
      "source": "vim-snippets/snippets"
    },
    "19f1b85b99031b8a43732e1e57d61311": {
      "content": "<svelte:window />",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-window",
      "matches": {
        "svelte window": true,
        "svw": true
      },
      "source": "javascript/svelte"
    },
    "19f633d9e7aa450ecc4d3b176571906a": {
      "content": "border-right: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdr": true
      },
      "source": "vim-snippets/snippets"
    },
    "19f782555b193628ccb4ba209e8e9392": {
      "content": "it { should validate_numericality_of :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isvn": true
      },
      "source": "vim-snippets/snippets"
    },
    "19fb0be6fcd4da07d0a151be85f296a9": {
      "content": "month = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "month": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "19fc49180f7f0f3d156fd8f3d6f1a426": {
      "content": "font ${1:1em} ${2:Arial},${0:sans-serif}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "f+": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a134ea922526a3e9633c6d297df2c38": {
      "content": "try do\n  ${1:TARGET}\nrescue\n  ${2} -> ${3}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "try .. rescue .. end",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1a139c2fc1a5b7a0b653ac30ed876178": {
      "content": "| slice: ${1:0}, ${2:5}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slice": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a1764d3c32f5bac897126ad4945a12a": {
      "content": "size(${1:200}, ${2:200}${0:, P3D});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "normal",
      "matches": {
        "size": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a202e44bf6e71cf0288d7e49d8f10c8": {
      "content": "| stylesheet_tag",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stylesheet_tag": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a256942c64c540e14c4fa9408d29734": {
      "content": "#lang scribble/base",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a2acbe8354e5d82e05d484ef5593806": {
      "content": "overflow: scroll;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a37d6581e10af69266ba02214b70650": {
      "content": "border-bottom none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdb:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a3cecf60384b0a67ca586fb0772539f": {
      "content": "<ins>${1:TARGET}</ins>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ins": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1a483450d0183298a5ad73afe96e2665": {
      "content": "public enum ${1}\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enum+": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a4a61e5a88d732bbeafa7a90decfac3": {
      "content": "border-top-width ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtw": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a523ad93badb616697b9a24f285a43a": {
      "content": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
      "doc": "Invoked when a component is receiving new props. This method is not called for the initial render. [DEPRECATION NOTE]: This method is deprecated in React 16.3",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentWillReceiveProps",
      "matches": {
        "cwr": true
      },
      "source": "vscode-react/snippets"
    },
    "1a6c255513e8eae1577aaebde2074e96": {
      "content": "while (${1:#:condition}) {\n\t${0:TARGET}\n};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1a7b423b034dfdbe34898db2b3adb3c9": {
      "content": "IO.inspect(${0}label: \"${1:label}\")",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "IO.inspect with label",
      "matches": {
        "insl": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a8013d36c62be9c4e02c799fb008859": {
      "content": "*${1:Emphasis}* ${0}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "*": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a895daa3d79dfc6abf615da1ecbd579": {
      "content": "select ${1:variable}\n\tcase ${2:TypeSpec}\n\tcase ${0:TypeSpec}\n\tdefault\nend",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "select": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a93017689d4cd55afca85199928028e": {
      "content": "it { should route(:${1:method}, '${0:path}') }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isr": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a9711896f611dfe6e30d26662603eab": {
      "content": "static public final String ${1:var} = \"${2}\";",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cos": true
      },
      "source": "vim-snippets/snippets"
    },
    "1a980aaaf8e5f28c1a250ef883a3b8c7": {
      "content": "each_index {|${1:#:variable}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each_index": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1a9ca5730053c4c129043ede00fd22bb": {
      "content": "v-else",
      "doc": "Does not expect expression. previous sibling element must have v-if or v-else-if.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-else",
      "matches": {
        "velse": true,
        "vue v-else": true
      },
      "source": "javascript/vue"
    },
    "1aa9b2be0faf22431fabd3b8769c77b0": {
      "content": "interface ${1:#:NAME} {\n  ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "interface NAME {...}",
      "matches": {
        "interface": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1ab0672b2484307945f1e7eae366772c": {
      "content": "render inline: \"${1:<%= 'hello' %>}\", type: ${0::rxml}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rit": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ab1ef127a5f40e824d882580a42fa08": {
      "content": "(define ${1:name}\n\t(lambda (x)(${0:definition})))",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defl": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ab758bdd50222ba1cea2e2930e33d6a": {
      "content": "this.props.${1};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "this props",
      "matches": {
        "tp": true
      },
      "source": "snippets/javascript"
    },
    "1ab760ce99e8ad60bc52a87ab6ab3ddf": {
      "content": "var ${1}:${2};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1acd12394b2362b59a74298e6f2d7dc9": {
      "content": "~~${1}~~${2}",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": "~~scratch~~",
      "matches": {
        "scratch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1aceb12c4e05a90248688ae901ac3c39": {
      "content": "\\${${1:width}}    \\${${2:height}}=    Get Window Size",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Get Window Size",
      "matches": {
        "gws": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1ad0da701ecfc9c160fbaafa4f69bf1f": {
      "content": "@spec ${1:name}(${2:args}) :: ${3:returns}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sp": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ad1b327af9b38d9f0c686d4d4b2e123": {
      "content": "this.setState((state, props) => { return { $0 }});\n",
      "doc": "Performs a shallow merge of nextState into current state",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentSetStateFunc",
      "matches": {
        "ssf": true
      },
      "source": "vscode-react/snippets"
    },
    "1add56b3646e5634ee585f50d1c24a05": {
      "content": "${1:obj}.removeData('${2:key name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "remd": true
      },
      "source": "snippets/coffee"
    },
    "1adf69bc6982b701eef29b582f508ff4": {
      "content": "mixed.cast()",
      "doc": "mixed.cast(value: any, options = {}): any\n\nAttempts to coerce the passed in value to a value that matches the schema. For example: '5' will\ncast to 5 when using the number() type. Failed casts generally return null, but may also\nreturn results like NaN and unexpected strings.options parameter can be an object containing context. (For more info on context see mixed.validate)",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-cast",
      "matches": {
        "yup mixed cast": true
      },
      "source": "javascript/yup"
    },
    "1aea8cd2c5639b2a6b6f945ba2764797": {
      "content": "background-break: continuous;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "1aeea00095dc28a5d27cce3b933f28e4": {
      "content": "interface ${1} {\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "interface",
      "matches": {
        "int": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1af4a1da142e6e558020a0f1139f84eb": {
      "content": "componentWillReceiveProps(nextProps) {\n\t${1}\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "componentWillReceiveProps",
      "matches": {
        "cwr": true
      },
      "source": "snippets/javascript"
    },
    "1af8ef12009e14466f2c2c2a1f7d0503": {
      "content": "font-smooth always",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm:aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b016e33d42dfd9c971cb83b43450e2a": {
      "content": "{% javascript %}\n\t${0}\n{% endjavascript %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "javascript": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b09cbfc8a540dc46062f2879ca7e508": {
      "content": "const dispatch = useDispatch()",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useDispatch",
      "matches": {
        "useDispatch": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "1b0c8c9a4d27ea47294f3e3622e06994": {
      "content": "REXML::Document.new(File.read('${1:path/to/file}'))",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xml-": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b192b8212320078c91bc96f96de9ccc": {
      "content": "setTimeout(() => {\n\t${0}\n}, ${1:delay});",
      "doc": "setTimeout",
      "filetype": "base",
      "grammar": "lsp",
      "label": "settimeout",
      "matches": {
        "base set timeout": true
      },
      "source": "javascript/base"
    },
    "1b216e661054238fe35720b51b2942dd": {
      "content": "\\begin{verbatim}\n\t${1:TARGET}\n\\end{verbatim}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{verbatim} verb \\verbatim": true,
        "verbatim": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1b2fac0d3ed52ed537ba635cfc709526": {
      "content": "expression()",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b323b743c3a1a1529e496c97b1d8815": {
      "content": "cursor: crosshair;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b3cdf62fd3a98dc4c0d0cc1cf64d406": {
      "content": "grid-gap ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gg": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b44d23114db64d581f3def810af17ce": {
      "content": "guard let ${1} = ${2} else {\n    ${0:TARGET}\n}\n${9}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "guard let ... else { ... }",
      "matches": {
        "guard": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1b44f525d79656c101938f867c5c95a0": {
      "content": "std::multiset<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mset": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b557e2480b15147eb8db825342a10b9": {
      "content": "${1:name}.foldLeft(${0:first}) {(",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fldl": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b59832ee71bae9598db28173074af72": {
      "content": "booleanParam(name: \"${1:TOGGLE}\" , defaultValue: ${2:default}, description: \"${3:Toggle this value}\")\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parambool": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b77dd3d8ef820ab02c5c14a14fc8eed": {
      "content": "import ${0:Data.List}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b7bfda95c165b9bf3d3fa68b5f7c3f9": {
      "content": "\\${5:TARGET}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${5:TARGET}",
      "matches": {
        "5T": true,
        "5t": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1b7d6e94a9099626f7ed1ea9be896f8e": {
      "content": "lmObj <- lm(${1:yCol} ~ {2:xCol}, data = ${3:data}, subset = ${4:subset}, weights = ${5:weights}, na.action = ${6:na.action})\nsummary(lmObj)",
      "doc": "Fit a linear model",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Linear model",
      "matches": {
        "lm": true
      },
      "source": "vscode-R/snippets"
    },
    "1b7ddc9c43730c95b07de96624c64985": {
      "content": "box-sizing content-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxz:cb": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b8097fe06339d3e196c890d3be3a3a5": {
      "content": "from __future__ import ${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fut": true
      },
      "source": "vim-snippets/snippets"
    },
    "1b82b6fbf92c594eaa5656b2a35e2950": {
      "content": "checkEvents() {\n\tthis.router.events.subscribe(event => {\n\t\tswitch (true) {\n\t\t\tcase event instanceof ${1:eventName}:\n\t\t\t\t$0\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t});\n}",
      "doc": "Angular Router Events",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-router-events",
      "matches": {
        "a-router-events": true,
        "angular router events": true
      },
      "source": "javascript/angular"
    },
    "1b94f4f5a11c09a01272bdf64295e9a5": {
      "content": "_.at(${object}, ${paths})",
      "doc": "var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n_.at(object, ['a[0].b.c', 'a[1]']);\n// => [3, 4]\n\nCreates an array of values corresponding to `paths` of `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-at",
      "matches": {
        "lodash at": true
      },
      "source": "javascript/lodash"
    },
    "1bac17edaff7c76986b0e4272978b33a": {
      "content": "vertical-align: baseline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:bl": true
      },
      "source": "vim-snippets/snippets"
    },
    "1bae75109b8f10a4033ff5ce92b441c5": {
      "content": "package ${1:com.github.ujihisa}\nclass ${2:TARGET} {\n  public static void main(String[] args) {\n    println(\"Hello world!\")\n  }\n}",
      "doc": "",
      "filetype": "groovy",
      "grammar": "snu",
      "label": "",
      "matches": {
        "helloworld": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1bb6934c61fa304f7211238ad09fa98b": {
      "content": "assert_raises(${1:StandardError}) { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asr": true
      },
      "source": "vim-snippets/snippets"
    },
    "1bb6b94d0dfc9c9674a5caf519411326": {
      "content": "- (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument}\n{\n${0}\n\treturn nil;\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Method",
      "matches": {
        "m": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1bb8bd77f8f6faac1d1a0863781c1c84": {
      "content": "grid-row-end: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gre": true
      },
      "source": "vim-snippets/snippets"
    },
    "1bbb661a48376a0648314eb95e8dd9ba": {
      "content": "${1:obj}.slice(${2:start}${3:, end})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slice": true
      },
      "source": "snippets/coffee"
    },
    "1bc0224303963f6fa88058348071b5b5": {
      "content": "when (${1:case}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when": true
      },
      "source": "vim-snippets/snippets"
    },
    "1bdd4f50e2c1b9cb8940511b58f7ead6": {
      "content": "font-stretch ultra-condensed",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:uc": true
      },
      "source": "vim-snippets/snippets"
    },
    "1be1027e86fe3bd6c27653e2b172f84c": {
      "content": "border-style: ridge",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "1be367406b0fcb2221bb7e1f9fd9b965": {
      "content": "frameRate(${1:30});\n${0}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "frameRate": true
      },
      "source": "vim-snippets/snippets"
    },
    "1be603e2da1811d1a2038dbd3b345454": {
      "content": "<xsl:with-param name=\"${1:name}\">${0}</xsl:with-param>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "with-param": true
      },
      "source": "vim-snippets/snippets"
    },
    "1be878e3fac67ec177b54d1f6fcea5d9": {
      "content": "func Test${1:Function}(t *testing.T) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func TestXYZ(t *testing.T) { ... }",
      "matches": {
        "test": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "1bedffb5cfcd6c91c1f5f414b911574d": {
      "content": "for some ${1} ${2:in} ${3} => ${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "for some",
      "matches": {
        "fors": true
      },
      "source": "vim-snippets/snippets"
    },
    "1bf181844301fb7fe27d3ddd05cdab9e": {
      "content": "static public final ${1:String} ${2:var} = ${3};",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "co": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c00f9df90a06d5738e41f5dfcd3aae1": {
      "content": "{% for ${1:#:var} in ${2:#:list} %}\n  ${0:TARGET}\n{% endfor%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "for in endfor",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1c0aac10d76f9930a8676f59a4407c57": {
      "content": "function ${1:function_name}() {\n\t${0:# function_body}\n}",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffun": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c0e215e0bb178356b656b31fc3b883c": {
      "content": "text-align ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c0fccbd990e64f31638c339b4c0325d": {
      "content": "text-replace: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tr": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c1410900181d45940676bae50c18240": {
      "content": "_.invertBy(${object}, ${iteratee})",
      "doc": "var object = { 'a': 1, 'b': 2, 'c': 1 };\n\n_.invertBy(object);\n// => { '1': ['a', 'c'], '2': ['b'] }\n\n_.invertBy(object, function(value) {\n  return 'group' + value;\n});\n// => { 'group1': ['a', 'c'], 'group2': ['b'] }\n\nThis method is like `_.invert` except that the inverted object is generated\nfrom the results of running each element of `object` thru `iteratee`. The\ncorresponding inverted value of each inverted key is an array of keys\nresponsible for generating the inverted value. The iteratee is invoked\nwith one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-invertby",
      "matches": {
        "lodash invertby": true
      },
      "source": "javascript/lodash"
    },
    "1c19e4c8c8a4cd17c4199876ba14777d": {
      "content": "${1:obj}.position()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos": true
      },
      "source": "snippets/javascript"
    },
    "1c1ae758559589fb655ef8f0943aa926": {
      "content": "indent(width=${1:4}, indentfirst=${2:False})",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "indent",
      "matches": {
        "indent": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1c34cab60eceaeea6eb4eb51ec1e8ffb": {
      "content": "std::cin >> ${1};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cin": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c3e5fa2e747d71e51b701057841494d": {
      "content": "grid-column-start: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gcs": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c512b016476d53326fbe313f2fa7b2b": {
      "content": "position: fixed",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c53c06e978d68169cbba63c335f4bc0": {
      "content": "_.flatten(${array})",
      "doc": "_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]\n\nFlattens `array` a single level deep.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-flatten",
      "matches": {
        "lodash flatten": true
      },
      "source": "javascript/lodash"
    },
    "1c54dd02af91f4a3728927c68e9f44dd": {
      "content": "${1:name} :: ${2:a}\n$1 = ${0:undefined}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "const": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c5c8abcbc0bd159de722577fc218835": {
      "content": "margin-bottom: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c5d78ed95ccd52010ac18d4dfd34bc3": {
      "content": "router.beforeEach((to, from, next) => {\n\t${1:next();}\n});",
      "doc": "Vue Router global guards beforeEach",
      "filetype": "vue-script-router",
      "grammar": "lsp",
      "label": "Vue Router beforeEach",
      "matches": {
        "vbeforeeach": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "1c6781810af16e93eabdf86b48dd22f2": {
      "content": "border-bottom-right-image: continue;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbri:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c70e68b3fac0e889d6750dd80c553ef": {
      "content": "\\ref{${1}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\ref": true,
        "ref": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1c74b3044869b6aa1336122730a12bc4": {
      "content": "<#if ${1:true}>\n\t${0:${VISUAL}}\n</#if>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#if condition>...</#if>",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c7a2c56c7539a85751c5dacd1492fd2": {
      "content": "\"\"\"${1:Description}\n@param ${2:param}: ${3: Description}\n@type  $2: ${4: Type}\n@return: ${5: Description}\n@rtype : ${6: Type}\n@raise e: ${0: Description}\n\"\"\"",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "epydoc": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c7c78846269021e2d17df8ef3abdd8d": {
      "content": "transaction(${1:true}) { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tra": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c824278047f95518fb12a382ac13231": {
      "content": "Register Keyword To Run On Failure    ${1:${kw}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Register Keyword To Run On Failure",
      "matches": {
        "rktrof": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1c82707de066f507cf6375fb2bc80963": {
      "content": "int",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "Int",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c8f61b78ba3d2c9d7e72c97ba44d126": {
      "content": "-moz-box-shadow ${1:0} ${2:0} ${3:0} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:m+": true
      },
      "source": "vim-snippets/snippets"
    },
    "1c9abe60bcf6a3e05d02a45219e92224": {
      "content": "PropTypes.symbol.isRequired,",
      "doc": "Symbol prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeSymbolRequired",
      "matches": {
        "ptsmr": true
      },
      "source": "vscode-react/snippets"
    },
    "1c9c88cccec82dfb4bfacb5604b6fe61": {
      "content": "componentWillUnmount() {\n\t${1}\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "componentWillUnmount",
      "matches": {
        "cwun": true
      },
      "source": "snippets/javascript"
    },
    "1ca196c344b91ac49e82de950091bcd5": {
      "content": "{% post_url ${1:#:TARGET} %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "post_url": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1ca5de743d6c3c4af12bdfaee51da923": {
      "content": "let (${1:tx}, ${2:rx}): (Sender<${3:i32}>, Receiver<${4:i32}>) = channel();",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Declare (Sender, Receiver) pair of asynchronous channel()",
      "matches": {
        "chan": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ca9b61b6a1caf13d0bde3aee3478530": {
      "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a React component class with PropTypes and ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassComponentPropTypes",
      "matches": {
        "rccp": true
      },
      "source": "vscode-react/snippets"
    },
    "1cad575d3219ace968252d87bd0be818": {
      "content": "match ${1:TARGET} {\n    ${2:#:pattern} => ${3:#expr},${4}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "match": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1cb0c2eeb830dc4d8aee5e7eb85e4012": {
      "content": "{\n\t\"type\": \"color\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": \"${3}\",\n\t\"info\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_color": true
      },
      "source": "vim-snippets/snippets"
    },
    "1cb37a5e8af15639c339afc2f226f879": {
      "content": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
      "doc": "Invoked before rendering when new props or state are being received. ",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "shouldComponentUpdate",
      "matches": {
        "scu": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "1cbd3c9772939a98500d459eee7713f1": {
      "content": "analogWrite(${1});",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "1cbd8d5aae1467cdc3c3a852c170c3fc": {
      "content": "\\begin{pmatrix}\n\t${1:TARGET}\n\\end{pmatrix}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\pegin{bmatrix} \\pmatrix": true,
        "pmatrix": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1cc74d5a64bffce86c4a60ef32c77eb8": {
      "content": "integer, dimension(${1}), intent(out) :: ${2}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "integer dimension intent(out)",
      "matches": {
        "indo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1cd2d3e8c0a16ae7994f3a7c6661440a": {
      "content": "@before-enter=\"$1\"$0",
      "doc": "@before-enter=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-before-enter",
      "matches": {
        "beforeenterevent": true,
        "vue before-enter": true
      },
      "source": "javascript/vue"
    },
    "1cdb0d9bb9dd341bfef959f2f9dd7da1": {
      "content": "post {\n\taborted {\n\t\t${1}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pab": true
      },
      "source": "vim-snippets/snippets"
    },
    "1cdd699421ce567686bfd7334df47a68": {
      "content": "@{ ${1:hash}  }{ ${0:array} }",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hslice": true
      },
      "source": "vim-snippets/snippets"
    },
    "1cdecf9a2f3e3c20f3693a0da34e17aa": {
      "content": "word-wrap ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ce723446ac790f5f5f7f8b5380d6f03": {
      "content": "python << EOF\n${0}\nEOF",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "python <<EOF | EOF",
      "matches": {
        "py": true,
        "python": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1cebafcf09d866a7ea3c7d6c2b69e599": {
      "content": "(if (${1:predicate})\n\t(${2:true-action})\n\t(${0:false-action}))",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "1cf1dbdea23bcd82cc44838a05414d0d": {
      "content": "program ${1:main}\n\t${2}\nend program $1",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "program",
      "matches": {
        "pr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1cf6adb5c6ff3606bb6850b2115642b2": {
      "content": "padding-right: ${1:20px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "padding-right: length (margin)",
      "matches": {
        "padding": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1cfc442418aab1495d1cf3618ec418c0": {
      "content": "default :\n\t${1:TARGET}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1d02e1888c16f5536206abdc3215e335": {
      "content": "#' @description\n#'\n#' ${1:type description}\n#'\n#' ${2:@field ${3:name}::${4:Type} ${5:Description}}\n#'\n#' @examples\n#'\n#' ${10: constructor examples}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "type definition",
      "matches": {
        "doct": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1d05f903eed7dd2a124c22c109c5840e": {
      "content": "else if ${1:condition}\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Else if",
      "matches": {
        "elif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1d0664562355f6ff6d5ed1c9e18865e2": {
      "content": "echo CHtml::checkBox('${1:name}', ${2:false}, array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhcb": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d0df7243795004ff3c4ec4f8c3a0346": {
      "content": "assert_redirected_to ${1:model}_path(${0:@$1})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "artp": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d16a6a40f529747a7857b82e7610c26": {
      "content": "border-break: close;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbk:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d196849b330766731b9d1917066a909": {
      "content": "| camelcase",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "camelcase": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d200b62d1b01cded4513be67fa38860": {
      "content": "overflow: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d205713d044af5924d9b0e2ad1c4186": {
      "content": "font-family: ${1:\"Times New Roman\",Georgia,Serif};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff": true,
        "font-family": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1d260db4920d42a3d11f42df93799f83": {
      "content": "justify-content space-evenly",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d284b42e7f48c72b267e011be8aa160": {
      "content": "border-top-right-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtri:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d2cdf8cf3b985e6a22639e92a814aae": {
      "content": "| slice: ${1:at}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slice_single": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d334ea9686bf4aef20c79c7a954b9f4": {
      "content": "# Cookbook File resource\ncookbook_file ${1:\"/path/to/file\"} do # The remote path where the file will reside\n\t${2:#}backup ${3} # How many backups of this file to keep. Set to false  if you want no backups\n\t${4:#}group ${5} # The group owner of the file (string or id)\n\t${6:#}mode ${7} # The octal mode of the file - e.g. 0755\n\t${8:#}owner ${9} # The owner for the file\n\t${10:#}source ${11} # The basename of the source file\n\t${12:#}cookbook ${13} # The cookbook this file is stored in\n\t${14:#}${15: action :create} # Create this file (Default)\n\t${16:#}${17: action :create_if_missing} # Create only if it doesn't exist yet\n\t${18:#}${0: action :delete} # Delete this file\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cookbook_file": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d392b2348f810dfd9df816dc0f00334": {
      "content": "static ${1}: &'static str = \"${0}\";",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "static string declaration",
      "matches": {
        "ss": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d3d27b1748e1a4f7700c85cdac09a33": {
      "content": "_${1}_${2}",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": "_italic_",
      "matches": {
        "italic": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1d3ec83aebb75bd708736edb7a7b8fc1": {
      "content": "white-space-collapse: normal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d3ecbea1f0356224887154eb0a90ed7": {
      "content": "value=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "value": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d41ce58b6e5304b58a39405c10b5132": {
      "content": "<dl>${1:TARGET}</dl>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1d44c6737a6cb83d0f79c043a149eda0": {
      "content": "onBeforeMount(() => {${1}})",
      "doc": "Vue onBeforeMount Lifecycle hook",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle Hooks - onBeforeMount",
      "matches": {
        "v3onbeforemount": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "1d4502460b49bed24a0faf4a888813a4": {
      "content": "zip(${1:enums}) { |${2:row}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "zip": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d4e9bc41498840bec16b1441bc2b2bc": {
      "content": "methods: {\n\tbeforeEnter(el) {\n\t\tconsole.log('beforeEnter');\n\t},\n\tenter(el, done) {\n\t\tconsole.log('enter');\n\t\tdone();\n\t},\n\tafterEnter(el) {\n\t\tconsole.log('afterEnter');\n\t},\n\tenterCancelled(el, done) {\n\t\tconsole.log('enterCancelled');\n\t},\n\tbeforeLeave(el) {\n\t\tconsole.log('beforeLeave');\n\t},\n\tleave(el, done) {\n\t\tconsole.log('leave');\n\t\tdone();\n\t},\n\tafterLeave(el) {\n\t\tconsole.log('afterLeave');\n\t},\n\tleaveCancelled(el, done) {\n\t\tconsole.log('leaveCancelled');\n\t}\n}",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vanim:js:method": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d57090eb8746daec6ecab3350f10a9f": {
      "content": "{\n\t\"type\": \"collection\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_collection": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d5d4dbe5412f05e13b3117a6ade2ce3": {
      "content": "protected type ${1}(${2}) is\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "protected type",
      "matches": {
        "protected_type": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1d5d7c303cf6b23908574a26db0a3bd3": {
      "content": "{% ifchanged %}$1{% endifchanged %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifchanged": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1d5f821ec6a130ab2a2d8dc362591418": {
      "content": "$this->redirect($this->generateUrl('$1', $2));",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 redirect",
      "matches": {
        "redir": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1d63b558bf5a3eb4924d1bcbb9e6d731": {
      "content": "font-smooth: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d6baea3b4404aa992015308824ce47e": {
      "content": "_.defaultsDeep(${object}, ${sources})",
      "doc": "_.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n// => { 'a': { 'b': 2, 'c': 3 } }\n\nThis method is like `_.defaults` except that it recursively assigns\ndefault properties.\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-defaultsdeep",
      "matches": {
        "lodash defaultsdeep": true
      },
      "source": "javascript/lodash"
    },
    "1d6e6cbeb4d1809ba7f5ea074059ea77": {
      "content": "border-color: #${1:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdc": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d706cd55d83ae188de8cf8938605afb": {
      "content": "_.nthArg(${n})",
      "doc": "var func = _.nthArg(1);\nfunc('a', 'b', 'c', 'd');\n// => 'b'\n\nvar func = _.nthArg(-2);\nfunc('a', 'b', 'c', 'd');\n// => 'c'\n\nCreates a function that gets the argument at index `n`. If `n` is negative,\nthe nth argument from the end is returned.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-ntharg",
      "matches": {
        "lodash ntharg": true
      },
      "source": "javascript/lodash"
    },
    "1d834fc8908920a31bd882e5acdb37d6": {
      "content": "v:version > ${1} || (v:version == $1 && has('patch${2}'))",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "vim-version-check",
      "matches": {
        "version": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1d876a5dd7bdf17c258fee581cf2e9df": {
      "content": "require('dotenv').config()",
      "doc": "As early as possible in your application, require and configure dotenv.",
      "filetype": "dotenv",
      "grammar": "lsp",
      "label": "dotenv-require",
      "matches": {
        "dotenv require": true
      },
      "source": "javascript/dotenv"
    },
    "1d8a2450a44ddd659047c70fef171562": {
      "content": "respond_to do |wants|\n\twants.${1:html}${2: { $0 }}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "respond_to",
      "matches": {
        "rest": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1d8ae847e48de0bfc908f442aa814dd6": {
      "content": "\\\\newcommand{\\\\${1:cmd}}[${2:opt}]{${3:realcmd}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\newcommand",
      "matches": {
        "nc": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d8de7b19f74166c04412dfa23e27435": {
      "content": "echo CHtml::activeListBox(${1:model}, '${2:attribute}', array(${3}),array('${4:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhalb": true
      },
      "source": "vim-snippets/snippets"
    },
    "1d9a9c5ec1002d6eeabcf2ce68bf5598": {
      "content": "{% trans %}${0}{% endtrans %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trans": true
      },
      "source": "vim-snippets/snippets"
    },
    "1da3b4fdacccd2f364633be3e939180d": {
      "content": "if (${1}) begin\n\t${2}\nend\nelse begin\n\t${3}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "1da8b109e83d31be0d3fa390d4843fa2": {
      "content": "visibility collapse",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "1da8d0b0310a2d9212f6b7a2a349e843": {
      "content": "place-items: ${1:stretch} ${2:stretch};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi+": true
      },
      "source": "vim-snippets/snippets"
    },
    "1da9ff812c49d7f3cbc59798bfabd910": {
      "content": "enum ${1:name} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enum": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1db0eab72229ce3b6ba117aed54256ec": {
      "content": "&#x2325;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "option": true
      },
      "source": "vim-snippets/snippets"
    },
    "1db15f3a5f03fc09755a8b2bb153093c": {
      "content": "_.isError(${value})",
      "doc": "_.isError(new Error);\n// => true\n\n_.isError(Error);\n// => false\n\nChecks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n`SyntaxError`, `TypeError`, or `URIError` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-iserror",
      "matches": {
        "lodash iserror": true
      },
      "source": "javascript/lodash"
    },
    "1db6809bdb360cade898b6346113570a": {
      "content": "function ${1:foo}(node, ${2:parameters}) {\n\t// the node has been mounted in the DOM\n\treturn {\n\t\tdestroy() {\n\t\t\t// the node has been removed from the DOM\n\t\t}\n\t};\n}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-action-parameters",
      "matches": {
        "svactionp": true,
        "svelte action parameters": true
      },
      "source": "javascript/svelte"
    },
    "1db75b2c3584b3f3b86d7820d7ccc765": {
      "content": "page-break-inside avoid",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbi:av": true
      },
      "source": "vim-snippets/snippets"
    },
    "1db92250a94e2bdcea42fb41638fc899": {
      "content": "\\begin{ttfamily}\n\t${1:TARGET}\n\\end{ttfamily}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{ttfamily} \\ttfamily": true,
        "ttfamily": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1db9a300ece7f8177904ca2ee04fdb37": {
      "content": "#ifdef ${1:FOO}\n\t${2:#define }\n#endif",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifdef": true
      },
      "source": "vim-snippets/snippets"
    },
    "1dc0590542e18149987d7608e879eed6": {
      "content": "&#x2326;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "delete": true
      },
      "source": "vim-snippets/snippets"
    },
    "1dc4d988cc06cdf1d885237f0aa8e868": {
      "content": "else {\n\t${0}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "else {...}",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "1dcc5b222aeb31ee06b18ae78f93ae56": {
      "content": "{% url $1 as $2 %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "url": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1dd777323a5e7bb6c3910159ec8f4d46": {
      "content": "t.timestamps\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create timestamps columns",
      "matches": {
        "tctss": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1dded7b3909094b7a1f0b7641e54f34e": {
      "content": "No Operation",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "No Operation",
      "matches": {
        "nop": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1de3eff13948389ecdc0316d7d9f1afe": {
      "content": "border-right: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdr": true
      },
      "source": "vim-snippets/snippets"
    },
    "1de7b00465638303fd5d6564651f09ee": {
      "content": "padding ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "1de8c7f34f3dbf0659fc03f3a90c62c5": {
      "content": "<th class=\"${1}\">${0}</th>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th.": true
      },
      "source": "vim-snippets/snippets"
    },
    "1de8e99213aaa52869c59c68eeadf3c0": {
      "content": "internal bool ${1} { get; protected set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb&|": true
      },
      "source": "vim-snippets/snippets"
    },
    "1dedc7ca255caf1e7e79cc9f4010937e": {
      "content": "add_subdirectory(${0:src})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "subdir": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e127eb3a491b3424b46461104f17b4c": {
      "content": "try:\n  ${1:pass}\nexcept ${2:#:ExceptionClass}:\n  ${3:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "try: ... except ...: ...",
      "matches": {
        "tryexcept": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1e149cc023d382fe15cb80aad58a2959": {
      "content": "t.column ${1:title}, :${2:string}\nmccc$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Migration Create Column Continue (mccc)",
      "matches": {
        "mccc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1e2014d57597cfe7edc852b708e4e00e": {
      "content": "spec:\n  type: \"{{ .Values.$1.service.type }}\"\n  clusterIP: \"{{ .Values.$1.service.clusterIP }}\"\n{{- if .Values.$1.service.externalIPs }}\n  externalIPs:\n{{ toYaml .Values.$1.service.externalIPs | indent 4 }}\n{{- end }}\n{{- if .Values.$1.service.loadBalancerIP }}\n  loadBalancerIP: \"{{ .Values.$1.service.loadBalancerIP }}\"\n{{- end }}\n{{- if .Values.$1.service.loadBalancerSourceRanges }}\n  loadBalancerSourceRanges:\n{{ toYaml .Values.$1.service.loadBalancerSourceRanges | indent 4 }}\n{{- end }}\n{{- if and (semverCompare \">=1.7-0\" .Capabilities.KubeVersion.GitVersion) (.Values.$1.service.externalTrafficPolicy) }}\n  externalTrafficPolicy: \"{{ .Values.$1.service.externalTrafficPolicy }}\"\n{{- end }}\n{{- if and (semverCompare \">=1.7-0\" .Capabilities.KubeVersion.GitVersion) (.Values.$1.service.healthCheckNodePort) }}\n  healthCheckNodePort: {{ .Values.${1:value_key}.service.healthCheckNodePort }}\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "service_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e227dc4e5ccc098b67cf8177f1683a5": {
      "content": "$('${1:selector}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jj": true
      },
      "source": "snippets/coffee"
    },
    "1e233ab50b1b365e0ce06803d7146312": {
      "content": "for ${1:name} in ${2:array}\n\t${3}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fora": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e2c0eebe46820d0e726f41d249aa4f3": {
      "content": "place-items end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e2ff8c95c7e5cf766ace85398c5aee7": {
      "content": "\\begin{${1:#:type}}\n\t${2:TARGET}\n\\end{$1}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin": true,
        "begin": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1e3067666ae3db09c901b95b032e6088": {
      "content": "kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: {{ template \"${2}.$1.fullname\" . }}\n  labels:\n\tapp: {{ template \"${2:chartName}.name\" . }}\n\tchart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n\trelease: \"{{ .Release.Name }}\"\n\theritage: \"{{ .Release.Service }}\"\nspec:\n  accessModes:\n\t- {{ .Values.$1.persistence.accessMode | quote }}\n  resources:\n\trequests:\n\t  storage: {{ .Values.$1.persistence.size | quote }}\n{{- if .Values.$1.persistence.storageClass }}\n{{- if (eq \"-\" .Values.$1.persistence.storageClass) }}\n  storageClassName: \"\"\n{{- else }}\n  storageClassName: \"{{ .Values.${1:value_key}.persistence.storageClass }}\"\n{{- end }}\n{{- end }}\n{{- end }}\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "PersistentVolumeClaim_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e3277a8940de855702c3c4e8cd726dd": {
      "content": "display: compact",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:cp": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e49e155cc0b7357140acb915421a9e3": {
      "content": "${1}.propTypes = {\n\t${2}: PropTypes.${2}\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "propTypes",
      "matches": {
        "pt": true
      },
      "source": "snippets/javascript"
    },
    "1e525bba31d4129f5660ae1a8aaf5c8d": {
      "content": "getSnapshotBeforeUpdate = (prevProps, prevState) => {\n\t$0\n}\n",
      "doc": "Called right before mutations are made (e.g. before the DOM is updated)",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "getSnapshotBeforeUpdate",
      "matches": {
        "gsbu": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "1e53720821ee8ac0ee73b4c6c22c09b6": {
      "content": "import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n\nconst styles = StyleSheet.create({})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativeFunctionalExportComponentWithStyles",
      "matches": {
        "rnfes": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "1e553416a733ca75678b1c33ee44bb9f": {
      "content": "<input type=\"month\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:month": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e5cd51ad6406eafd1162828ba7969d2": {
      "content": "list-style: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lis": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e5d171338e3c1ca2aa38e391bc2a0c8": {
      "content": "unloadMovie(${1:#:target});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "um": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1e61ae58ae9a387c8d1e7301d7ee1a26": {
      "content": "${1:deferred}.state()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dstate": true
      },
      "source": "snippets/coffee"
    },
    "1e6b6de8219a436c21828f15ac267f8b": {
      "content": "parser.add_argument(\"${0:arg}\", nargs=\"${1:*}\", default=${2:None}, help=\"${3:Help text}\")",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "addnarg": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e7cd38fd9f7adbc454e8b94a3af5035": {
      "content": "expect(() => {\n\t$0\n}).toThrow($1);",
      "doc": "expects that the method will throw an error",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tothrow",
      "matches": {
        "jest expect tothrow": true,
        "tt": true
      },
      "source": "javascript/jest"
    },
    "1e7d7483dc4323e54d73ae3b98b12cda": {
      "content": "<pre>{{${1:model} | async | json}}</pre>$0",
      "doc": "Angular pre debug | async | json",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "pre-w-async-json",
      "matches": {
        "a-preja": true,
        "angular pre async json": true
      },
      "source": "javascript/angular"
    },
    "1e812d70348f1cdf27e18f7e22336541": {
      "content": "_.cloneDeep(${value})",
      "doc": "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// => false\n\nThis method is like `_.clone` except that it recursively clones `value`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-clonedeep",
      "matches": {
        "lodash clonedeep": true
      },
      "source": "javascript/lodash"
    },
    "1e91afb89ab99f196ecd8f5f2c922e5b": {
      "content": "PropTypes.objectOf($0),",
      "doc": "An object with property values of a certain type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeObjectOf",
      "matches": {
        "ptoo": true
      },
      "source": "vscode-react/snippets"
    },
    "1e91e1f0e9a744556fc1a49212456d7e": {
      "content": "scope=\"${1:row}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scope": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e97fd496036baf14abe4479850c6f1d": {
      "content": "fn ${1:args} -> ${0} end",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e99be054ebf680eb0fd7cd49f456b5e": {
      "content": "interface ${1} extends ${2} {\n\t${3}: ${4:any};\n\t${0}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "interface extends",
      "matches": {
        "intx": true
      },
      "source": "vim-snippets/snippets"
    },
    "1e9d2a1baaa966d88841cc5f3f4f42b1": {
      "content": "resize both",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ea4f9ca0119ad17923a49f73ecf72cd": {
      "content": "expand(${1:array}${2:, }${0:newSize});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "expand": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ead989ef1168f98fb242b608c914c34": {
      "content": "NO-LOCK",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nl": true
      },
      "source": "vim-snippets/snippets"
    },
    "1eb0db95bd6e9b3f26e834357ab54d87": {
      "content": "organization = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "organization": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1eb47e57da1a27626a898a94fc8c95b7": {
      "content": "get ${1:#:NAME}(): ${2:#:TYPE} {\n  ${3:#:TARGET}\n}\nset $1(${4:value}: $2) {\n  ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "accessor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1ec143a8cf3a02d1123b70da7859afdc": {
      "content": "test \"${1:test_name}\", %{${2:arg: arg}} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "testa": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ecbc7b1807fd9dfcd7bd3a866d49d62": {
      "content": "text-align-last: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ecde13795ed8cc736fab3d53a5da053": {
      "content": "| img_tag: '${1:alt}', '${2:class}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img_tag_param": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ed3bc83f7c6e53453fdbf8576d5bc47": {
      "content": "font-size: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fz": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ed65e9e27232d70a39b09df0728b3ff": {
      "content": "<input type=\"date\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:date": true
      },
      "source": "vim-snippets/snippets"
    },
    "1edfb79cd60531ea1eaa972977ad4151": {
      "content": "java.util.",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "j.u": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ee6561d76b40912972180920a36c935": {
      "content": "isSomeString!${1:S}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isstr": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ee68929592c9a3d9bc96d8a7d1434fa": {
      "content": "init${1:#:?}(${2:#:arguments}) {\n    ${0:TARGET}\n}\n${9}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "init": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1ee6d80075e320a74dae08e25ead3f7f": {
      "content": "co________:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "co________:",
      "matches": {
        "co_": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1ef0bafb541c5fcf2ba000a940442000": {
      "content": "display: grid",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:g": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ef6bbf77a988696ff43d58b34d8e489": {
      "content": "page-break-after right",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "1ef97c3d9e2fa2bc016a473ae3e8ee5e": {
      "content": "@doc \"\"\"${0:TARGET}\"\"\"",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "@doc \"\"\"...\"\"\"",
      "matches": {
        "doc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1efc358d3e5dd24ef11c4aa122ac7c3d": {
      "content": "PropTypes.string,",
      "doc": "String prop type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-string",
      "matches": {
        "prop-types string": true,
        "pts": true
      },
      "source": "javascript/prop-types"
    },
    "1efeb3971709e181d4ea6410190ab93b": {
      "content": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
      "doc": "Iterating over property names of iterable objects",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "forOf",
      "matches": {
        "fof": true
      },
      "source": "vscode-javascript/snippets"
    },
    "1f01ebacb81ed813d27e375abd7cfa8c": {
      "content": "if (${1})\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifs": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f0254b1bea04d437c8f3fd7dd859ade": {
      "content": "text-height: text-size;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f06b7a6e81277cfcb7f203fc5b52437": {
      "content": "to!int(${1:str});\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "toi": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f0f8594440f955b8924ae3fce9148a2": {
      "content": "PropTypes.element.isRequired,",
      "doc": "React element prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeElementRequired",
      "matches": {
        "ptelr": true
      },
      "source": "vscode-react/snippets"
    },
    "1f1487153d3acc43471598bd1dcf74c2": {
      "content": "#!/usr/bin/env node",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "snippets/javascript"
    },
    "1f18ec146876e5699c78b109371fc2e6": {
      "content": "${1:FIELDNAME} = models.FilePathField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "FilePathField",
      "matches": {
        "mfilepath": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1f20133ff0f4f4e62e287fe68a934e4a": {
      "content": "PropTypes.object.isRequired,",
      "doc": "Object prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeObjectRequired",
      "matches": {
        "ptor": true
      },
      "source": "vscode-react/snippets"
    },
    "1f2237c5917b752b6fe81c940e84b1d3": {
      "content": "@if ($1)\n\t${2:${VISUAL}}\n@else\n\t${3:${VISUAL}}\n@endif",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@if @else structure",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1f223cd3de4d8b897eedeb6a7e59995c": {
      "content": "{% block ${1:#:name} %}\n\t${0:TARGET}\n{% endblock %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% block ... %} ... {% endblock %}",
      "matches": {
        "bl": true,
        "block": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1f27b7557d95ae6ecf4c06cf38aaa878": {
      "content": "on:${1:eventname}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-on-event-forward",
      "matches": {
        "svelte on event foward": true,
        "svon-foward": true
      },
      "source": "javascript/svelte"
    },
    "1f2a7baf7c47a4c6622d737f2ee26e6b": {
      "content": "empty-cells hide",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f397319210f918428089664d59e345c": {
      "content": "<dt id=\"${1}\">${0}</dt>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dt#": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f3c7858c14520aae6a136edc21ce05f": {
      "content": "<sup>${1:TARGET}</sup>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sup": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1f3e6ec119d5f39e140299097d9d2b6b": {
      "content": "_.min(${array})",
      "doc": "_.min([4, 2, 8, 6]);\n// => 2\n\n_.min([]);\n// => undefined\n\nComputes the minimum value of `array`. If `array` is empty or falsey,\n`undefined` is returned.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-min",
      "matches": {
        "lodash min": true
      },
      "source": "javascript/lodash"
    },
    "1f437730ce1dc1c77b9812ea9e5c7357": {
      "content": "cor.test(${1:x}, ${0:y})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cor": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f4da62f4c176dc44b09d5e4b0c7ef88": {
      "content": "{% filter $1 %}\n\t$2\n{% endfilter %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filter": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1f4eee1b69531dce1be680f64468c7c0": {
      "content": "alias ${1:b} = ${2:a};\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "al": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f5680841c7b596f3f9f76b537ace2ea": {
      "content": "${1|transition,in,out|}:${2:name}|${3:local}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-transition-local",
      "matches": {
        "svelte transition local": true,
        "svtl": true
      },
      "source": "javascript/svelte"
    },
    "1f6d85b9ab1817f00ec83dc292973310": {
      "content": "${1:private/public }${2:static }${3:String} ${4:str}${5: =}${0:value};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "var": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f7e2d738c08ec1340df9d29d1811a37": {
      "content": "- (${1:id})${2:method}\n{\n\t[super $2];${0}\n\treturn self;\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f8532c799b705a937b92eb787b67001": {
      "content": "${1:YYYY}-${2:MM}-${3:DD} commodity ${4:Commodity}",
      "doc": "",
      "filetype": "beancount",
      "grammar": "snu",
      "label": "declare commodity",
      "matches": {
        "commodity": true,
        "currency": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1f89c525652b133e2e3a12ecfdadf003": {
      "content": "${${0:0}:TARGET}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${*:TARGET}",
      "matches": {
        "T": true,
        "TARGET": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1f8fae60b7b8afc85bfae86f007a85b5": {
      "content": "(${1:first}/:${2:name})(${0})",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "/:": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f9131f619f393b904a4d8a70be44482": {
      "content": "_.words(${string}, ${pattern})",
      "doc": "_.words('fred, barney, & pebbles');\n// => ['fred', 'barney', 'pebbles']\n\n_.words('fred, barney, & pebbles', /[^, ]+/g);\n// => ['fred', 'barney', '&', 'pebbles']\n\nSplits `string` into an array of its words.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-words",
      "matches": {
        "lodash words": true
      },
      "source": "javascript/lodash"
    },
    "1f940331ffc1b8a69b68fba7faf35021": {
      "content": "font-variant: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fv": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f9aac7639f0de126f4dab204c6859a6": {
      "content": "render nothing: ${0:true}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rn": true
      },
      "source": "vim-snippets/snippets"
    },
    "1f9e2b3df0db6913e8f095e40675582b": {
      "content": "${1:FIELDNAME} = models.ManyToManyField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "ManyToManyField",
      "matches": {
        "m2m": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1fa06c4df425fa6616f3069a0b9c6a0e": {
      "content": "panic(\"${0}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "panic(\"...\")",
      "matches": {
        "panic": true,
        "pn": true
      },
      "source": "gosnippets/snippets"
    },
    "1fa6c33a93e34bd34833e0dd9260f148": {
      "content": "&nbsp;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nbs": true
      },
      "source": "vim-snippets/snippets"
    },
    "1faacc1e6bbaeb89cd3080d9700e1fcb": {
      "content": "<c:param name=\"${1}\" value=\"${0}\" />",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cparam": true
      },
      "source": "vim-snippets/snippets"
    },
    "1facaf71042b4898fd688264e4ed9f39": {
      "content": "expect(${1:target}).not.toBeVisible()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect not to be visible (coffee)",
      "matches": {
        "notv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1fb2f74a2843733471f1f91d4858f60d": {
      "content": "overflow: ${1:visible/hidden/scroll/auto};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "overflow: type (overflow)",
      "matches": {
        "overflow": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "1fc009753186495990bae6ee59cf102b": {
      "content": "case ${1} is\n\twhen ${2} => ${3};${0}\nend case;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1fc3f32e2f59500abdc345e3b7564356": {
      "content": "<ul>\n\t${0}\n</ul>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ul": true
      },
      "source": "vim-snippets/snippets"
    },
    "1fce8af83062f1a7ca12a2af2737ac9b": {
      "content": "class ${1:#:Name} ${2::} ${3:Parent}${4:,} ${5:Interface} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "class {}",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1fd052f10a426f415588158e79e0178b": {
      "content": "std::deque<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deque": true
      },
      "source": "vim-snippets/snippets"
    },
    "1fde7dffb78d08e88b20ad25c2d9e1fd": {
      "content": "nfp(${2:value}, ${3:left}${4:, }${0:right});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nfp": true
      },
      "source": "vim-snippets/snippets"
    },
    "1feb4f7064efb1998175935ffd995ac2": {
      "content": "if (${1}) then\n\t${2}\nend if",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "if then",
      "matches": {
        "ift": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "1ffe26e45cf04bbd94c1ec6bd788fd8f": {
      "content": "outline-width: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "outline-width": true,
        "ow": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "20002bdc7368cc3b8b7823826cc48341": {
      "content": "${1:FIELDNAME} = forms.DateField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "DateField",
      "matches": {
        "fdate": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "20028d4f325c2fcbfd12451378210d20": {
      "content": "#!/bin/zsh",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "2011e79b89b3608ae506ab7007900a33": {
      "content": "white-space-collapse: break-all",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:ba": true
      },
      "source": "vim-snippets/snippets"
    },
    "2014e4d9dc76d8520b33ed6c154fcb6a": {
      "content": "border: ${1:0};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border",
      "matches": {
        "bd": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "201736c57ceaf548f899a1fc7d953396": {
      "content": "${1:ModelName}::model()->deleteByPk(${2:pk}, ${3:condition}, array('${4:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ydelbp": true
      },
      "source": "vim-snippets/snippets"
    },
    "2018f6c5b7fac9933c844deb181844cc": {
      "content": "{{- if .Values.artifactory.enabled -}}\n  apiVersion: v1\n  kind: ConfigMap\n  metadata:\n\tname: {{ template \"${2:chartName}.fullname\" . }}-${1:value_key}-config\n\tlabels:\n\t  app: {{ template \"${2}.name\" . }}\n\t  chart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\t  heritage: {{ .Release.Service }}\n\t  release: {{ .Release.Name }}\n  data:\n\t${3:nameOfConfigFile}.conf: |\n\t  # data goes here\n{{- end -}}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "configMap_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "20196f762bec1bf8ef2cc30c5e712cf5": {
      "content": "type ${1} is ${2}\n\twith Default_Value => ${3};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "type with default value",
      "matches": {
        "tyd": true
      },
      "source": "vim-snippets/snippets"
    },
    "201d24e759c7a366d897258d4519f810": {
      "content": "console.warn(${0:TARGET});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "console-warn": true,
        "cw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "202662aba95ad7daa562ef87f44c4341": {
      "content": "place-content: end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "202acd23b4d97efc79dda4cd147252bc": {
      "content": "try {\n\t${1:${VISUAL}}\n} catch(${2:Exception} ${3:e}) {\n\t${4}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "203a92e40d84871fed0c880e47ef5164": {
      "content": "print!(\"${1}\");",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "print!",
      "matches": {
        "pri": true
      },
      "source": "vim-snippets/snippets"
    },
    "203ee9905ae790b4bbc497ed443a4003": {
      "content": "[${0:foo} autorelease];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "arel": true
      },
      "source": "vim-snippets/snippets"
    },
    "20437ed6b0a7e7a98553f95aec1ccd5f": {
      "content": "$.unique(${1:array})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "uniq": true
      },
      "source": "snippets/javascript"
    },
    "20445b90dbb4195e1f000e2dd66619da": {
      "content": "gem '${1:paperclip}', git: \"${2:git://github.com/thoughtbot/paperclip.git}\"${3:, branch: \"${4:rails3}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "gem :git",
      "matches": {
        "gemg": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "204b638ec611b8474bd810b212baa109": {
      "content": "link rel=\"stylesheet\" href=\"${1:style.css}\" type=\"text/css\" media=\"${2:all}\"",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "css": true
      },
      "source": "vim-snippets/snippets"
    },
    "204d295226c3a80133d5498dce75bedc": {
      "content": "cursor: help;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:he": true
      },
      "source": "vim-snippets/snippets"
    },
    "2057531bab7e2ad77f57892686fab1cc": {
      "content": "if !defined(${1:Resource}[\"${2:name}\"]) {\n\t${0}\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifnd": true
      },
      "source": "vim-snippets/snippets"
    },
    "205958cf20918c94222960d7601a6ccd": {
      "content": "\\\\usepackage[${1:options}]{${2:package}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\usepackage",
      "matches": {
        "up": true
      },
      "source": "vim-snippets/snippets"
    },
    "2063ba4a638f4c20242374ae650aca14": {
      "content": "{\n\t\"type\": \"header\",\n\t\"content\": \"${1}\",\n\t\"info\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_header": true
      },
      "source": "vim-snippets/snippets"
    },
    "20699b20ff26e1b433fe09a8182eeb12": {
      "content": "shorten(${0:array});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "shorten": true
      },
      "source": "vim-snippets/snippets"
    },
    "206b355832e54b4a6e92e907902db92a": {
      "content": "import { EntityMetadataMap } from '@ngrx/data';\n\nconst entityMetadata: EntityMetadataMap = {\n  ${1:Model1}: {},${0}\n};\n\nexport const entityConfig = {\n  entityMetadata\n};",
      "doc": "NgRx Data Entity Metadata",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrx-data-entity-metadata",
      "matches": {
        "a-ngrx-data-entity-metadata": true,
        "angular ng rx data entity metadata": true
      },
      "source": "javascript/angular"
    },
    "20726f71aba5ef4e9eade377896c3a57": {
      "content": "import { PreloadingStrategy, Route } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\nexport class PreloadSelectedModulesList implements PreloadingStrategy {\n\tpreload(route: Route, load: Function): Observable<any> {\n\t\treturn route.data && route.data['${1:preload}'] ? load() : of(null);\n\t}\n}\n$0",
      "doc": "Angular opt-in preload strategy",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Opt-In Preload Strategy",
      "matches": {
        "a-preload-opt-in-strategy": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "2074ee8668e319b7429e7096ee5cd5c0": {
      "content": "import Vue from 'vue';\nimport VueRouter from 'vue-router';\n\nVue.use(VueRouter);\n\nexport const router = new VueRouter({\n\tbase: '/',\n\tmode: 'history',\n\troutes: [\n\t\t{ path: '/path', component: component }\n\t]\n});",
      "doc": "Base for Vue Router",
      "filetype": "vue-script-router",
      "grammar": "lsp",
      "label": "Vue Router",
      "matches": {
        "vrouter": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "2076e8e34baeaca6df5da81f4377e80a": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"less\" scoped>\n\n</style>",
      "doc": "Base for Vue File with PostCSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component with LESS",
      "matches": {
        "vbase-less": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "207ce6037278e0a1ba51a84e2e520af6": {
      "content": "use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Template;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Sensio\\..\\Template",
      "matches": {
        "usetemplate": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "207d8ddf84ce0abce67e07e6bff2f7ca": {
      "content": "_.replace(${string}, ${pattern}, ${replacement})",
      "doc": "_.replace('Hi Fred', 'Fred', 'Barney');\n// => 'Hi Barney'\n\nReplaces matches for `pattern` in `string` with `replacement`.\n\n**Note:** This method is based on\n[`String#replace`](https://mdn.io/String/replace).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-replace",
      "matches": {
        "lodash replace": true
      },
      "source": "javascript/lodash"
    },
    "20838ecdc9890bb92ecc0e7e3dd6c99e": {
      "content": "(define-syntax (${1})\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "define-syntax",
      "matches": {
        "defs": true
      },
      "source": "vim-snippets/snippets"
    },
    "2087d5e7eba6cc01aba10edc42849a87": {
      "content": "_.curry(${func}, ${arity})",
      "doc": "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curry(abc);\n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(1)(_, 3)(2);\n// => [1, 2, 3]\n\nCreates a function that accepts arguments of `func` and either invokes\n`func` returning its result, if at least `arity` number of arguments have\nbeen provided, or returns a function that accepts the remaining `func`\narguments, and so on. The arity of `func` may be specified if `func.length`\nis not sufficient.\n\nThe `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for provided arguments.\n\n**Note:** This method doesn't set the \"length\" property of curried functions.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-curry",
      "matches": {
        "lodash curry": true
      },
      "source": "javascript/lodash"
    },
    "209043b7a56d92a17f88e00ff5debb6e": {
      "content": "(letfn [(${1:name}) [${2:args}]\n\t${0:code})])",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "letfn": true
      },
      "source": "vim-snippets/snippets"
    },
    "209146cf68a00518e7c3e9d1cf10c6fa": {
      "content": "class $1 extends StatefulWidget {\n\t@override\n\t_$1State createState() => _$1State();\n}\nclass _$1State extends State<$1> {\n\t@override\n\tWidget build(BuildContext context) {\n\t\treturn Container(\n\t\t\t$2\n\t\t);\n\t}\n}",
      "doc": "",
      "filetype": "dart-flutter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stful": true
      },
      "source": "vim-snippets/snippets"
    },
    "20920bea4620e908e05ccb3b6c1e9ebb": {
      "content": "public bool ${1} { get; protected set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb+|": true
      },
      "source": "vim-snippets/snippets"
    },
    "209d09b1ebaf5d57c655c3af9d1a50b6": {
      "content": "console.error(${0:TARGET});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ce": true,
        "console-error": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "20a1ff86e9d1b79d5b908b503056434f": {
      "content": "(:refer-clojure :exclude [${0}])",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "refer": true
      },
      "source": "vim-snippets/snippets"
    },
    "20adfcf7518b7830335a9c1318c8b1fa": {
      "content": "text-emphasis dot",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "20be43974f28ccc31b3d06341543b640": {
      "content": "def __getattr__(self, name):\n\t${1:pass}\ndef __setattr__(self, name, value):\n\t${2:pass}\ndef __delattr__(self, name):\n\t${3:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "methods for customizing attribute access",
      "matches": {
        "attr": true
      },
      "source": "vim-snippets/snippets"
    },
    "20c2df87fe346df8f5668a21683f30d7": {
      "content": "def ${1:name}(${0:arg}) =\n\tif($2) $2\n\telse $1($2)",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rec": true
      },
      "source": "vim-snippets/snippets"
    },
    "20d002ef15e5dbf96b34a1057614b4c3": {
      "content": "$_POST['${1}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "post",
      "matches": {
        "post": true
      },
      "source": "vim-snippets/snippets"
    },
    "20d3fdff340cfdb1976fcbd2dad3f763": {
      "content": "${1:expression} while ${2:condition};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xwh": true
      },
      "source": "vim-snippets/snippets"
    },
    "20d9e4a9a6f6ea91c86712be1919bc9f": {
      "content": "max-height: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mah": true
      },
      "source": "vim-snippets/snippets"
    },
    "20dac8cb9db14e235585c932aec58044": {
      "content": "grid-auto-rows: min-content;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar:mic": true
      },
      "source": "vim-snippets/snippets"
    },
    "20f61b4158348dff0dc7c3aae09e44b0": {
      "content": "<xsl:variable select=\"${1:*}\" />",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "select",
      "matches": {
        "variable": true
      },
      "source": "vim-snippets/snippets"
    },
    "20f6e041435322b4c00f194d45fcb03a": {
      "content": "margin-left: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ml": true
      },
      "source": "vim-snippets/snippets"
    },
    "20f8272b5ea3c9e82aad5d13661876e6": {
      "content": "white-space-collapse: break-strict;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:bs": true
      },
      "source": "vim-snippets/snippets"
    },
    "20fd5ea4270101e676b99abdc54ae244": {
      "content": "add_dependencies(${1:target}\n\t${0:dep}\n)",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dep": true
      },
      "source": "vim-snippets/snippets"
    },
    "20ff20b56ec20f901d9b4bb0675b8346": {
      "content": "\"${1:key}\": \"${0:value}\",",
      "doc": "",
      "filetype": "json",
      "grammar": "snu",
      "label": "String",
      "matches": {
        "s": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "211ee87cb2801d0bfbc5ffce577f9faa": {
      "content": "it { should filter_param :${0:key} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isfp": true
      },
      "source": "vim-snippets/snippets"
    },
    "212c366767305c75bed7d0dea5d7a2a1": {
      "content": "text-height: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th": true
      },
      "source": "vim-snippets/snippets"
    },
    "212e712074ca095d76abb5716acc742a": {
      "content": "function ${1} return ${2} is\n\t(${3});${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "expression function",
      "matches": {
        "fune": true
      },
      "source": "vim-snippets/snippets"
    },
    "213b1e026b0cd99c518d29aadb4218cf": {
      "content": "font-stretch: extra-condensed;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:ec": true
      },
      "source": "vim-snippets/snippets"
    },
    "2141008b1c33fe3b3cbbf627f93664dc": {
      "content": "overflow-x: scroll",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "215a6e471d9524dc44876640bf3d3d5d": {
      "content": "main = do\n  ${0}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "main = do",
      "matches": {
        "main": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "215cd3d61c8c91cbb19b4c82b1be9e42": {
      "content": "fmt.Printf(\"%${1:s}\\n\", ${2:var})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Printf()",
      "matches": {
        "pf": true
      },
      "source": "vim-snippets/snippets"
    },
    "215e645889253d6eee8f59800f173c1c": {
      "content": "${1:map}.resource :${2:resource}${10: do |${11:$2}|\n\t$0\nend}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "map.resource",
      "matches": {
        "mapr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2178107bcc941e62de8afedc94b2e313": {
      "content": "function (${1:arguments}) {\n\t${0}\n}",
      "doc": "anonymous function",
      "filetype": "base",
      "grammar": "lsp",
      "label": "anonymous-function",
      "matches": {
        "base function anonymous": true
      },
      "source": "javascript/base"
    },
    "217b7986e4e97f61725a476c717967a4": {
      "content": "${1:FIELDNAME} = forms.FloatField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "FloatField",
      "matches": {
        "ffloat": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2180b56937c056bc92dfa071cc4f4b2c": {
      "content": "${1:obj}.get(${2:element index})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "get": true
      },
      "source": "snippets/coffee"
    },
    "218499d206fced6bb373a8eafc2ca3d1": {
      "content": "static_assert(${1:#:condition}, ${2:#:message});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "static_assert": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2194c7dfc070ca83fd6ca115b76b247a": {
      "content": "PropTypes.instanceOf($0),",
      "doc": "Is an instance of a class prop type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-instance-of",
      "matches": {
        "prop-types instanceof": true,
        "pti": true
      },
      "source": "javascript/prop-types"
    },
    "219a56a458cc9e1476b95d30dcd762d5": {
      "content": "console.log(`${1:object}`, ${1:object})",
      "doc": "Logs property with name.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleLogObject",
      "matches": {
        "clo": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "21a20388e1adf547360f8a94b20bee4f": {
      "content": "overflow-style: move;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:mv": true
      },
      "source": "vim-snippets/snippets"
    },
    "21a8a42c71c41817671291945760189f": {
      "content": "expect($1).toBeUndefined();$0",
      "doc": "expects the argument is undefined",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobeundefined",
      "matches": {
        "jest expect tobeundefined": true,
        "tbu": true
      },
      "source": "javascript/jest"
    },
    "21aa0ec61a8313c89060440836a76357": {
      "content": "expect(${1:}).to.equal(${0});",
      "doc": "",
      "filetype": "javascript-mocha",
      "grammar": "snu",
      "label": "expect(...).to.equal(...)",
      "matches": {
        "expe": true
      },
      "source": "vim-snippets/snippets"
    },
    "21ae15cf3c5e64a53838aa916c78c564": {
      "content": "while (${1}) {\n\t${2}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "while",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "21b4090a4ae95940bd1946fb443eee1a": {
      "content": "\\\\noindent\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\noindent",
      "matches": {
        "ni": true
      },
      "source": "vim-snippets/snippets"
    },
    "21c3401df2284547e3fd725406b61d88": {
      "content": "text-decoration line-through",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "21c39c56cab607558d18d11c2f918539": {
      "content": "\\begin{tabbing}\n\t${1:TARGET}\n\\end{tabbing}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{tabbing} \\tabbing": true,
        "tabbing": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "21c4b9bcb12db3b821c93ebaf7361e2f": {
      "content": "${1:function_name}() {\n\t${0:#function_body}\n}",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun-sh": true
      },
      "source": "vim-snippets/snippets"
    },
    "21c5a45964b56b77f45a3c4fece8c952": {
      "content": "<sub>${0}</sub>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sub": true
      },
      "source": "vim-snippets/snippets"
    },
    "21cf1512cd3d333ada8192a9c5220c9b": {
      "content": "border-top-right-radius ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtrrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "21d624bdf09b540aa62ff7af3bb0cf6a": {
      "content": "while(${1:#:condition})\n\t${2}\nendwhile()",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "while() endwhile()",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "21d71a2837623a964e67101570b4cd31": {
      "content": "$.ajaxStop(function () {\n\t${1:// handler for when all AJAX calls have been completed};\n});\n${0}",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxstop": true
      },
      "source": "snippets/javascript"
    },
    "21dbaef05d004f9a145e793c9048bf2a": {
      "content": "var ${1}: ${2:any} = ${3};\n${0}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts var",
      "matches": {
        "tvar": true
      },
      "source": "vim-snippets/snippets"
    },
    "21dce5d7fab4479d45b76896cf751310": {
      "content": "border-fit: repeat;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "21dece38f731efd7d11d26bed72d08fa": {
      "content": "\\\\lim_{{$1}} {{$2}} {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "limit",
      "matches": {
        "lim": true
      },
      "source": "vim-snippets/snippets"
    },
    "21e6aaf01af67b479daadb59e00b5946": {
      "content": "echo CHtml::form(array('${1}'), '${2:post}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhform": true
      },
      "source": "vim-snippets/snippets"
    },
    "21ec74bd55c8ca5ab925693d258143e2": {
      "content": "<body>\n   ${1:TARGET}\n</body>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "body": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "21f1ed35736bf41b3f6fed74136edd3c": {
      "content": "place-content end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "21f3e793a7952fd407c56a4bb3459c38": {
      "content": "flex-direction: row-reverse;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxd:rr": true
      },
      "source": "vim-snippets/snippets"
    },
    "21f557c0ee3e881337cc095629dc18a4": {
      "content": "$this->db->delete(${1:table}, ${2:where});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_db_delete": true
      },
      "source": "vim-snippets/snippets"
    },
    "22022d390e3f750d6829ac14738f4573": {
      "content": "(${1:#:condition}) ? ${2:#:a} : ${3:#:b}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "conditional": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "220281270623b3c7965400c995ec2a5d": {
      "content": "\\${2:#${0:optional}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${2:#optional}",
      "matches": {
        "2#": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2202b474b8f40acc2dcc06a1c4c574b2": {
      "content": "const {${2:propertyName}} = ${1:objectToDestruct};",
      "doc": "Creates and assigns a local variable using object destructing",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "destructingObject",
      "matches": {
        "dob": true
      },
      "source": "vscode-javascript/snippets"
    },
    "2202d02c31f4b170318e58f9719f73bb": {
      "content": "for (let ${1:i} = 0; $1 < ${2:#:Things}.length; ++$1) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "220c5b36a10dcb7eede6b68c12f77726": {
      "content": "<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jstl": true
      },
      "source": "vim-snippets/snippets"
    },
    "220d2d26b94cae0b9aa3bb92ff33aec9": {
      "content": "${1:component}.$set(${2: params});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-component-set",
      "matches": {
        "svcoms": true,
        "svelte component set": true
      },
      "source": "javascript/svelte"
    },
    "220e9b88182197026015005a0e7d26c4": {
      "content": "_.without(${array}, ${values})",
      "doc": "_.without([2, 1, 2, 3], 1, 2);\n// => [3]\n\nCreates an array excluding all given values using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.\n\n**Note:** Unlike `_.pull`, this method returns a new array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-without",
      "matches": {
        "lodash without": true
      },
      "source": "javascript/lodash"
    },
    "221a2c75efbfef3703b413b2e39ab912": {
      "content": "{| ${0} |}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "arec": true
      },
      "source": "vim-snippets/snippets"
    },
    "221b58c9639c7619dfa85704f3c919f3": {
      "content": "${1:FIELDNAME} = forms.NullBooleanField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "NullBooleanField",
      "matches": {
        "fnullbool": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "222d36d1b3a054e4a42bca99efdf515b": {
      "content": "${1:div}(:class=\"{ ${2:className}: ${3:data} }\")",
      "doc": "vue class binding",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Class Binding",
      "matches": {
        "vclass": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "223764e34b60bade6311185b81cb29b6": {
      "content": "static ${1:#:NAME}(${2:#:Args}) {\n  ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "static f(){}",
      "matches": {
        "static": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "223d17e679bd3c4bfd6057add580d378": {
      "content": "align-items: end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "223eff641acf8967c7163666ba433948": {
      "content": "% try:\n\t${1:${VISUAL}}\n% except${2:}:\n\t${0:pass}\n% endtry",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "22484348eab461134b6df53081ce8aa9": {
      "content": "text-shadow: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tsh": true
      },
      "source": "vim-snippets/snippets"
    },
    "22509fb663c5bfd1209e1590bfb8fb5e": {
      "content": "while ${1:condition}; do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "2253e76935be7fdeccc387590153bd04": {
      "content": "snippet ${1:trigger} \"${2:description}\"\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "snippets",
      "grammar": "snu",
      "label": "",
      "matches": {
        "snip": true
      },
      "source": "vim-snippets/snippets"
    },
    "225418ff174071aad0df8aa34ef437b9": {
      "content": "import React, { PureComponent } from 'react'\n\ninterface Props {\n\t\n}\n\nexport default class ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
      "doc": "Creates a React pure component class with ES7 module system and TypeScript interface",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typeScriptReactClassPureComponent",
      "matches": {
        "tsrpc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "225537c8ab939064eecc6cf7751d40b4": {
      "content": "{% lorem $1 %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lorem": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "226387de63a8a9435dea34893e53df8f": {
      "content": "cursor default",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "22640918506299c2a5917573d83861fa": {
      "content": "_.propertyOf(${object})",
      "doc": "var array = [0, 1, 2],\n    object = { 'a': array, 'b': array, 'c': array };\n\n_.map(['a[2]', 'c[0]'], _.propertyOf(object));\n// => [2, 0]\n\n_.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n// => [2, 0]\n\nThe opposite of `_.property`; this method creates a function that returns\nthe value at a given path of `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-propertyof",
      "matches": {
        "lodash propertyof": true
      },
      "source": "javascript/lodash"
    },
    "226cf0229631e179b8844777926963cb": {
      "content": "__FUNCTION__",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "FUN": true
      },
      "source": "vim-snippets/snippets"
    },
    "226e9808bb4fb4a67fb8e2fd9ddb02a0": {
      "content": "rgb(${1:255}, ${2:255}, ${3:255})$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "color rgb",
      "matches": {
        "rgb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2278fd9953896dedb4e935985da82562": {
      "content": "struct ${1} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "struct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2281d27ce15f7840d4aad8454ea5b5de": {
      "content": "property! ${0:name}",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rw!": true
      },
      "source": "vim-snippets/snippets"
    },
    "228522c00fe5b05a96ae6659d395fe05": {
      "content": "display alert \"${1:#:alert text}\"\n\t${2:#:message} \"${3:#:message text}\"\n\t${4:#:as warning}",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alert": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "228723ec8c4be9854a68f28c07927725": {
      "content": "let ${1:TARGET} in ${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "let..in",
      "matches": {
        "let": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "228c726cd44dc23d582291ef8bfe4586": {
      "content": "margin-right: ${1:20px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "margin-right: length (margin)",
      "matches": {
        "margin": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "228f9650820eb59f0e68b122372266e2": {
      "content": "_.intersectionBy(${arrays}, ${iteratee})",
      "doc": "_.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [2.1]\n\n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]\n\nThis method is like `_.intersection` except that it accepts `iteratee`\nwhich is invoked for each element of each `arrays` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:\n(value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-intersectionby",
      "matches": {
        "lodash intersectionby": true
      },
      "source": "javascript/lodash"
    },
    "2296159713e65ff85a556457f02f9ef0": {
      "content": "display dialog \"${1:#:text}\"\n\t${2:#:with icon}\n\tbuttons {\"${3:Cancel}\", \"${4:OK}\"}\n\tdefault button \"${4}\"\nset button_pressed to button returned of result\nif button_pressed is \"${4}\" then\n\t${5:#:TARGET}\nelse\n\t-- action for cancel button goes here\nend if",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "dialog",
      "matches": {
        "dialog_OK/Cancel": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "22a3669166db4d2746bba55297a91d58": {
      "content": "<%= cond do %>\n\t<% ${1} -> %>\n\t\t${2:${VISUAL}}\n\t<% true -> %>\n\t\t${0}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cond": true
      },
      "source": "vim-snippets/snippets"
    },
    "22a5945b87e9b02b4ec4ce3f31c500f3": {
      "content": "border-left: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdl": true
      },
      "source": "vim-snippets/snippets"
    },
    "22ae4215e7046cd6c150be010157eff8": {
      "content": "integer, dimension(${1::})${2:#:, allocatable} :: ${3}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "integer dimension",
      "matches": {
        "ind": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "22b3d5f84543b019e21f052ac442ec53": {
      "content": "clip auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cp:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "22b5692bfcb2331edd115bf5ce85d279": {
      "content": "enum_with_index.map { |${1:e}, ${2:i}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapwi-": true
      },
      "source": "vim-snippets/snippets"
    },
    "22b8dc86baf7364527891781452886b2": {
      "content": "${1:obj}.unbind('${2:event name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unbind": true
      },
      "source": "snippets/coffee"
    },
    "22bae06757536ef67a4024a4004ce5d3": {
      "content": "_.castArray(${value})",
      "doc": "_.castArray(1);\n// => [1]\n\n_.castArray({ 'a': 1 });\n// => [{ 'a': 1 }]\n\n_.castArray('abc');\n// => ['abc']\n\n_.castArray(null);\n// => [null]\n\n_.castArray(undefined);\n// => [undefined]\n\n_.castArray();\n// => []\n\nvar array = [1, 2, 3];\nconsole.log(_.castArray(array) === array);\n// => true\n\nCasts `value` as an array if it's not one.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-castarray",
      "matches": {
        "lodash castarray": true
      },
      "source": "javascript/lodash"
    },
    "22c41b6537b9c4d04b7241caf257e14f": {
      "content": "outline-style: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "os": true
      },
      "source": "vim-snippets/snippets"
    },
    "22cb8328921243ba8172e62a56651bc2": {
      "content": "border-corner-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdci:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "22d10f80618db3c47fb031ac175d6dab": {
      "content": "Url:autolink('${1:string}');",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_url_autolink": true
      },
      "source": "vim-snippets/snippets"
    },
    "22d676fb28c8a0cb9241d247aa2c93bd": {
      "content": "${1:obj}.queue(${2:name}${3:, newQueue})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "queue": true
      },
      "source": "snippets/javascript"
    },
    "22de108f114d6a0a8d51bf0d7cf1e6be": {
      "content": "Session::set(${1:key}, ${2:value});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_session_set": true
      },
      "source": "vim-snippets/snippets"
    },
    "22e7a1aec4b499893b3f7c3aa60516d0": {
      "content": "else if (${1:condition}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ei": true
      },
      "source": "vim-snippets/snippets"
    },
    "22ebcb7f3abba41431e9343f9c28863b": {
      "content": "${1:expression} if ${2:condition};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xif": true
      },
      "source": "vim-snippets/snippets"
    },
    "22ee301994c30d2f649a1c46353f19f9": {
      "content": "${1:fn}.bind(${2:this}, ${3:arguments})",
      "doc": "function bind",
      "filetype": "base",
      "grammar": "lsp",
      "label": "function-bind",
      "matches": {
        "base function bind": true
      },
      "source": "javascript/base"
    },
    "22f5ff132c9ac8e160c00a308c05de2d": {
      "content": "font-emphasize-style circle",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "23061cea2e4867b536017a64a58a9ed3": {
      "content": "\\\\lim_{${1:n \\\\to \\\\infty}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\lim_{}",
      "matches": {
        "lim": true
      },
      "source": "vim-snippets/snippets"
    },
    "2307af62bda3251cb376cb863a9c84b2": {
      "content": "while (${1:condition}) {\n\t${2:statement}\n}",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "while": true
      },
      "source": "vim-snippets/snippets"
    },
    "231a49e9603ad4475d4d0a3403d105c5": {
      "content": "#[ignore]",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "#[ignore]",
      "matches": {
        "ig": true
      },
      "source": "vim-snippets/snippets"
    },
    "2323c189e14614f7c3fe18d55491a0b0": {
      "content": "inline_template(\"<%= ${1} %>\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inline_template": true
      },
      "source": "vim-snippets/snippets"
    },
    "23259ae304955f16089bce62ee734c1c": {
      "content": "_.omitBy(${object}, ${predicate})",
      "doc": "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.omitBy(object, _.isNumber);\n// => { 'b': '2' }\n\nThe opposite of `_.pickBy`; this method creates an object composed of\nthe own and inherited enumerable string keyed properties of `object` that\n`predicate` doesn't return truthy for. The predicate is invoked with two\narguments: (value, key).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-omitby",
      "matches": {
        "lodash omitby": true
      },
      "source": "javascript/lodash"
    },
    "232a33ea7041faee13bdfe6de8f377a6": {
      "content": "<#macro ${1:macro_name} ${2:param1}>\n\t${0:${VISUAL}}\n</#macro>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#macro macro_name param1>...</#macro>",
      "matches": {
        "mac": true
      },
      "source": "vim-snippets/snippets"
    },
    "2335502ebe2c0ef0f7f90acf015e8447": {
      "content": "map(&:${1:id})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "map(&:sym_proc)",
      "matches": {
        "mp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "23357fa53ec1b37cfde576787f619b3c": {
      "content": "`${1:${TM_SELECTED_TEXT}}`$0",
      "doc": "Insert code",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert code",
      "matches": {
        "code": true
      },
      "source": "vscode-R/snippets"
    },
    "23362eb9a9cb7fa5ecfc3539e8256d90": {
      "content": "time:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "time": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2336a9cd405843092669c8a53484253d": {
      "content": "= render :partial => \"${1:item}\", :collection => ${0:@$1s}",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rpc": true
      },
      "source": "vim-snippets/snippets"
    },
    "234698e76c7fe3b98d3f347ad7fd3516": {
      "content": "(${1}) => {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "() => {}",
      "matches": {
        "afb": true
      },
      "source": "snippets/javascript"
    },
    "235441827a9558e39aeae114658f6203": {
      "content": "beforeUpdate () {\n\t${0};\n},",
      "doc": "beforeUpdate lifecycle method",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-lifecycle-beforeupdate",
      "matches": {
        "vbeforeupdate": true,
        "vue lifecycle beforeupdate": true
      },
      "source": "javascript/vue"
    },
    "235b3c6f353ff7503ad2e5d4f1a62b5b": {
      "content": "reject { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rej": true
      },
      "source": "vim-snippets/snippets"
    },
    "235be40021ec638bcc6a7d95600398df": {
      "content": "$this->renderPartial('${1:view}',array('${2:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yrp": true
      },
      "source": "vim-snippets/snippets"
    },
    "236c5aeb7e1497000fa18ca8d4f1e929": {
      "content": "list(${0:items})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "li": true
      },
      "source": "vim-snippets/snippets"
    },
    "2373d544d967a62efe9303ce951c4637": {
      "content": "use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Method;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Sensio\\..\\Method",
      "matches": {
        "usemethod": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2377c67216f5248f7570bd822f74f4c9": {
      "content": "@appear-cancelled=\"$1\"$0",
      "doc": "@appear-cancelled=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-appear-cancelled",
      "matches": {
        "appearcancelledevent": true,
        "vue appear-cancelled": true
      },
      "source": "javascript/vue"
    },
    "23793006a021f73096f6d26066a8c5bd": {
      "content": "match ${1:x} with\n| Some(${2:y}) -> ${3:()}\n| None -> ${4:()}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "pattern match on an option type",
      "matches": {
        "matcho": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "23843e3b178ba689902dbdea65b61d7f": {
      "content": "+ (${1:#:id})${0:#:method};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "InterfaceClassMethod",
      "matches": {
        "icm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "238eeaee011ba35d1adf1a849d697396": {
      "content": "${1:obj}.filter('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filter": true
      },
      "source": "snippets/javascript"
    },
    "239af26105d405f7242b1f2f62bd5ba5": {
      "content": "place-self: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "239b5ef9e3844cf838988e3f45332228": {
      "content": "let rec ${1:TARGET}\nin ${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "let rec .. in",
      "matches": {
        "letr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "23a6ec144775e1e3340ef302467de5ae": {
      "content": "elif [[ ${1:condition} ]]; then\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true
      },
      "source": "vim-snippets/snippets"
    },
    "23b5b6407d0e85f2ff76d628cf2af2f0": {
      "content": "Open Browser    ${1:${url}}    ${2:${browser=firefox}}    ${3:${alias=None}}    ${4:${remote_url=False}}    ${5:${desired_capabilities=None}}    ${6:${ff_profile_dir=None}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Open Browser",
      "matches": {
        "ob": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "23c59a092a9da5208e17eb1a6c4a8941": {
      "content": "text-align-last center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "23c7852b664469b2927cc4d68deca1e7": {
      "content": "t.datetime :${1:title}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcdt": true
      },
      "source": "vim-snippets/snippets"
    },
    "23da1cad9c32f51703bcffdc142350a7": {
      "content": "&#x2326;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "delete": true
      },
      "source": "vim-snippets/snippets"
    },
    "23dd2972d7c317060b57bdf71e2a04e5": {
      "content": "let ${1}\n    ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "let ... end",
      "matches": {
        "let": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "23e00399f625a6a2e55ece68706db5c3": {
      "content": "font-variant ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fv": true
      },
      "source": "vim-snippets/snippets"
    },
    "23e656e388860e2afee10c7027e67b34": {
      "content": "align-self center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "23eac7f80a2960ea48984bcdd2059610": {
      "content": "font ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "f": true
      },
      "source": "vim-snippets/snippets"
    },
    "23f18f3e7961cec8cfefdbe08b3231d7": {
      "content": "fill(${1:range}) { |${2:i}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fil": true
      },
      "source": "vim-snippets/snippets"
    },
    "23f42a415e56fc56a1f4557f8954f78e": {
      "content": "#include <stdio.h>\nint main(int argc, char* argv[])\n{\n    puts(\"hello, world!\");\n    return 0;\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "helloworld": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "23fc3cd1f602b28b1ad72fb925268ed5": {
      "content": "before_validation $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "before_validation",
      "matches": {
        "befv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "240bbcd86cc12f84178b77acb2653bc4": {
      "content": "pravFrame();",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "240caa3920465fd2d56a7df9d01da112": {
      "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { ${2:ComponentName}Component } from './${3:filename}.component';\n\n// Consider using this interface for all CanDeactivate guards,\n// and have your components implement this interface, too.\n//\n//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n//\n// export interface CanComponentDeactivate {\n// canDeactivate: () => any;\n// }\n\n@Injectable({providedIn: ${4:'root'}})\nexport class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {\n\tcanDeactivate(\n\t\tcomponent: ${2:ComponentName}Component,\n\t\tcurrentRoute: ActivatedRouteSnapshot, \n\t\tcurrentState: RouterStateSnapshot\n\t): Observable<boolean>|Promise<boolean>|boolean {\n\t\treturn false;$0\n\t}\n}",
      "doc": "Angular CanDeactivate guard",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-candeactivate-guard",
      "matches": {
        "a-guard-can-deactivate": true,
        "angular can deactivate guard": true
      },
      "source": "javascript/angular"
    },
    "2410faaa2e8383cea92d887fee3ab950": {
      "content": "<tt>${1}</tt>",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2412085f30d3855e0ddefc4950d6aa6d": {
      "content": "include(ExternalProject)\nExternalProject_Add(${1:googletest}\n  URL ${2:http://googletest.googlecode.com/files/gtest-1.7.0.zip}\n  URL_HASH SHA1=${3:f85f6d2481e2c6c4a18539e391aa4ea8ab0394af}\n  SOURCE_DIR \"${4:${CMAKE_BINARY_DIR}/gtest-src}\"\n  BINARY_DIR \"${0:${CMAKE_BINARY_DIR}/gtest-build}\"\n  CONFIGURE_COMMAND \"\"\n  BUILD_COMMAND     \"\"\n  INSTALL_COMMAND   \"\"\n  TEST_COMMAND      \"\"\n)",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Ext_url": true
      },
      "source": "vim-snippets/snippets"
    },
    "24142ed2cffd7d39dce117bbf2a1321a": {
      "content": "\\${4:#${0:optional}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${4:#optional}",
      "matches": {
        "4#": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "24253940458c42ba5a1577b81686b199": {
      "content": "where(${1:field}: ${0:value})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wf": true
      },
      "source": "vim-snippets/snippets"
    },
    "242d629864eb0fbf9f0d946e71363fb1": {
      "content": "public class ${1:MyException} : ${2:Exception}\n{\n\tpublic $1() { }\n\tpublic $1(string message) : base(message) { }\n\tpublic $1(string message, Exception inner) : base(message, inner) { }\n\tprotected $1(\n\t\tSystem.Runtime.Serialization.SerializationInfo info,\n\t\tSystem.Runtime.Serialization.StreamingContext context)\n\t\t\t: base(info, context) { }\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exc": true
      },
      "source": "vim-snippets/snippets"
    },
    "243c1ded3062a09f924f3f4cab6a7d64": {
      "content": "\\$_REQUEST['${1:#:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "request": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "243c370d2bedd933579586d5705183f8": {
      "content": "for ${1:name} in ${2:array}\n\tdo ($1) ->\n\t\t${0:// body}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forindo": true
      },
      "source": "snippets/coffee"
    },
    "243d0f1efee1770c68cecdce72f0bc24": {
      "content": "import { Route, Router } from 'svelte-routing'",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-routing-import",
      "matches": {
        "svelte import routing": true,
        "svroute": true
      },
      "source": "javascript/svelte"
    },
    "2448012fb5d59be3adec9ef6c8fd2e10": {
      "content": "import React,{ useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1:${TM_FILENAME_BASE}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n};\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a stateless React component with PropTypes and ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactHookProps",
      "matches": {
        "rhc": true
      },
      "source": "vscode-react/snippets"
    },
    "2457a6457533f7ee15cf349df6662f7f": {
      "content": "unless ${1} do\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "unless .. do .. end",
      "matches": {
        "unless": true
      },
      "source": "vim-snippets/snippets"
    },
    "24611858b2ab65a25ca1ae1633f432a2": {
      "content": "curvePoint(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${0:t});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "curvePoint": true
      },
      "source": "vim-snippets/snippets"
    },
    "246c71aa0fc66e8aac5bd77e5428876e": {
      "content": "{% block ${1} %}\n\t${0}\n{% endblock %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig block",
      "matches": {
        "block": true
      },
      "source": "vim-snippets/snippets"
    },
    "247d4cf64bb50205b6aeba5eb93fcb0b": {
      "content": "font-size: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fz": true
      },
      "source": "vim-snippets/snippets"
    },
    "24853144c21d44bbab362dcd051bdfc2": {
      "content": "NSString ${0}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nss": true
      },
      "source": "vim-snippets/snippets"
    },
    "24860f76901f18f4ab179a66328ddc21": {
      "content": "<li>${1:TARGET}</li>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "li": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2486aaefadc576bfc0115212d896d8d4": {
      "content": "class ${1:MODEL_NAME}DeleteView(DeleteView):\n\tmodel = $1\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Generic Delete View",
      "matches": {
        "deleteview": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2488e876ac952d85fd873638d09f327d": {
      "content": "assert_not_same ${1:unexpected}, ${2:actual}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asns": true
      },
      "source": "vim-snippets/snippets"
    },
    "248e128153c8332d8a56b71d66401524": {
      "content": "cursor: default;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "2499c0972d5d5500b8bd2995dc637be5": {
      "content": "= mail_to ${1:email_address}, ${2:name}, :subject => ${3}, :body => ${4}",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mts": true
      },
      "source": "vim-snippets/snippets"
    },
    "249bbc58421607deb3f3351bc633bfc0": {
      "content": "print 'Hello world!'",
      "doc": "",
      "filetype": "moon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "helloworld": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "24ab5efe6ae2fa4a1f2589c188299217": {
      "content": "{% when ${1:#:TARGET} %}\n  ${0}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "24b071821d3746e4412890ed2a6e7271": {
      "content": "<area shape=\"${1:rect}\" coords=\"${2}\" href=\"${3}\" alt=\"${4}\">\narea+",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "area+": true
      },
      "source": "vim-snippets/snippets"
    },
    "24b1aa444232757dcc8160b98c829ee7": {
      "content": "cursor ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur": true
      },
      "source": "vim-snippets/snippets"
    },
    "24baec2d60b3bd609a7f39768e894c1c": {
      "content": "${1:obj}.map (${2:index}, ${3:element}) ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "snippets/coffee"
    },
    "24c8ca2912104fc1c65bb72ff524c042": {
      "content": "gem '${1}', '${2} >= 1.0'",
      "doc": "",
      "filetype": "Gemfile",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gem": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "24ce88dcb727987f1760e30dacf3737a": {
      "content": "Page Should Not Contain Textfield    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Not Contain Textfield",
      "matches": {
        "psnct": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "24d79f69f6219f20a04a8022f050f500": {
      "content": "subject { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "subj": true
      },
      "source": "vim-snippets/snippets"
    },
    "24d84e8758750ad65cfc0654aab8267c": {
      "content": "assert_select '${1:path}', ${2:text}: '${3:inner_html}' ${4:do}\n\t${0}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "assert_select(..)",
      "matches": {
        "ass": true
      },
      "source": "vim-snippets/snippets"
    },
    "24df05ec3770445268a0351df666651e": {
      "content": "border-left-color: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blc": true,
        "border-left-color": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "24e5e07be5ced16bebb8bce527316ccc": {
      "content": "getSnapshotBeforeUpdate = (prevProps, prevState) => {\n\t$0\n}\n",
      "doc": "Called right before mutations are made (e.g. before the DOM is updated)",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-getsnapshotbeforeupdate",
      "matches": {
        "gsbu": true,
        "react getsnapshotbeforeupdate": true
      },
      "source": "javascript/react"
    },
    "24ef7d562b23c7b96f6338c64cf5136e": {
      "content": "_.isUndefined(${value})",
      "doc": "_.isUndefined(void 0);\n// => true\n\n_.isUndefined(null);\n// => false\n\nChecks if `value` is `undefined`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isundefined",
      "matches": {
        "lodash isundefined": true
      },
      "source": "javascript/lodash"
    },
    "24efc32c7bae5d52aa53e944d4223816": {
      "content": "_.mergeWith(${object}, ${sources}, ${customizer})",
      "doc": "function customizer(objValue, srcValue) {\n  if (_.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n\nvar object = { 'a': [1], 'b': [2] };\nvar other = { 'a': [3], 'b': [4] };\n\n_.mergeWith(object, other, customizer);\n// => { 'a': [1, 3], 'b': [2, 4] }\n\nThis method is like `_.merge` except that it accepts `customizer` which\nis invoked to produce the merged values of the destination and source\nproperties. If `customizer` returns `undefined`, merging is handled by the\nmethod instead. The `customizer` is invoked with six arguments:\n(objValue, srcValue, key, object, source, stack).\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-mergewith",
      "matches": {
        "lodash mergewith": true
      },
      "source": "javascript/lodash"
    },
    "24f0562f05577c38f009ed48782a9b32": {
      "content": "border-right-width ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrw": true
      },
      "source": "vim-snippets/snippets"
    },
    "250756149109fa8091c775998f054354": {
      "content": "$this->${1:method}()->shouldBeEqualTo(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldBeEqualTo('value')",
      "matches": {
        "sbequalto": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "251bd174713744360cd8845a1017e32c": {
      "content": "spyOn(${1:object}, \"${2:method}\").andCallThrough()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "spy on and call through (coffee)",
      "matches": {
        "sct": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2520e28ffafeaf73ba49803bc7bb6420": {
      "content": "it { should be_valid }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isbv": true
      },
      "source": "vim-snippets/snippets"
    },
    "252470262837864b92834db29b04ddcc": {
      "content": "font-stretch: semi-expanded;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "2526c67d88c6c8f6f9c5be0d33ad5a07": {
      "content": "<c:if test=\"${${1}}\">\n\t${0}\n</c:if>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cif": true
      },
      "source": "vim-snippets/snippets"
    },
    "2528ed7be036fb3cde7cbb761cd84f20": {
      "content": "white-space-collapse: normal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "252acd35fdab0d1b9bce1bb64c2b7d1f": {
      "content": "if ${1} then\n\t${2}\nelse\n\t${0}\nend if;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "252b4cbb583d7eb9041cc239c4c11709": {
      "content": "after_destroy :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mad": true
      },
      "source": "vim-snippets/snippets"
    },
    "252d3a1b14d2ae16436b3b558323770d": {
      "content": "if (${1:#:condition}) {\n\t${2:TARGET}\n} else {\n\t${3:#:code...}\n}\n${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "252e2e54beafdb4741eb8877b75dcfbf": {
      "content": "macro ${1}(${2})\n    ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "macro ... end",
      "matches": {
        "macro": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "25329d5ed04b21b8efc2a8c068e864dc": {
      "content": "<sup>${0}</sup>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sup": true
      },
      "source": "vim-snippets/snippets"
    },
    "2538ab8e7ca60768acd5d0ebb4ba88b2": {
      "content": "char ${1:m}${2: = \"}${0:char\"};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "char": true
      },
      "source": "vim-snippets/snippets"
    },
    "25455a46450a65740690e771a6dd8c9b": {
      "content": "text-transform: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "text-transform": true,
        "tt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "254d7083ff93ebfc2bfc3f8fbb16f366": {
      "content": "grid-row-gap: 0",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grg:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "255ca555f3c7b2b66968fbcefe8009c0": {
      "content": "font-style: oblique;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "255d6f1a7d20c84ec51d274d64ca43b2": {
      "content": "fwrite(${1:ARRAY}, sizeof(${2:TYPE}), ${3:N_MEMBERS}, ${4:FILE})",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "fwrite(......, file)",
      "matches": {
        "fwrite": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "256152b4d51ca82237a6aeb79aba891d": {
      "content": "border-radius: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "256219e996fec20bdd458555577d2a7f": {
      "content": "-export([${0:f/1}]).",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "-export": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2565c125c58cbed9c2ba439c6dff0eff": {
      "content": "import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport const ${1:${TM_FILENAME_BASE}} = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t${2:props}: ${3:PropTypes}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
      "doc": "Creates a React functional component with PropTypes with connected redux and ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactFunctionalCompomentReduxPropTypes",
      "matches": {
        "rfcreduxp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "256aaa777e484b1642a5e60a6280c1de": {
      "content": "on:${1:eventname}={${2:handler}}",
      "doc": "on event",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-on-event",
      "matches": {
        "svelte on event": true,
        "svon": true
      },
      "source": "javascript/svelte"
    },
    "25865566b687e47594e0b86f13c2da3f": {
      "content": "if ${1:true} do\n  ${2:ok}\nelse\n  ${3:ok}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "if .. do .. else .. end",
      "matches": {
        "ife": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "25903e218c21e24365653556d52fa3db": {
      "content": "public bool ${1}(${2})\n{\n\t${0:return false;}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb+": true
      },
      "source": "vim-snippets/snippets"
    },
    "259191c54d78675f8e494b0117d0861d": {
      "content": "max-height ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mah": true
      },
      "source": "vim-snippets/snippets"
    },
    "2595fbdcfb9ceaf4da4b8b7e11e5c831": {
      "content": "useImperativeHandle(\n\t${1:ref},\n\t() => {\n\t\t${2:handler}\n\t},\n\t[${3:input}],\n)",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-useimperativehandle",
      "matches": {
        "react useimperativehandle": true,
        "useimperativehandle": true
      },
      "source": "javascript/react"
    },
    "259801cbaef842a8e331c041316085d7": {
      "content": "outline none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "25991692f97279d31f7bc8ba83293797": {
      "content": "<p>${1}</p>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "25a0167277638732bf7ddd809c5e8146": {
      "content": "import styled from 'styled-components';",
      "doc": "import styled from 'styled-components'",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-import-styled-from-styled-components",
      "matches": {
        "imsc": true,
        "styled-components import styled": true
      },
      "source": "javascript/styled-components"
    },
    "25a3d737837996c3b9dc71f377a77eeb": {
      "content": "background-position: ${1:top left/top center/top right/center left/center center/center right/bottom left/bottom center/bottom right/x-% y-%/x-pos y-pos};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background-position:  position (background)",
      "matches": {
        "background": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "25a51e3a03cdd014c0ffd52131d4a0b8": {
      "content": "for ${1:element} in ${2:container}\n\t${0}\nend",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forin": true
      },
      "source": "vim-snippets/snippets"
    },
    "25a90ec204e58d000c0f6a4670fe0fb5": {
      "content": "${1:Figure}~\\\\ref{${2:fig:}}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "reference to a figure",
      "matches": {
        "figure": true
      },
      "source": "vim-snippets/snippets"
    },
    "25b1830313309889af9c4b4e6e56e8d8": {
      "content": "align-content: end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "25b8ce20d5977970eb3510e975c21688": {
      "content": "grid-gap ${1} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gg+": true
      },
      "source": "vim-snippets/snippets"
    },
    "25c2dfbc17228f9dd67646aaad15e43a": {
      "content": ":nth-child(${0})",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":nc": true
      },
      "source": "vim-snippets/snippets"
    },
    "25c6b513129ede1f6f2538f82616d096": {
      "content": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
      "doc": "DEPRECATED!!!. Invoked immediately before rendering when new props or state are being received.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentWillUpdate",
      "matches": {
        "cwup": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "25ce1923637c4c20b48ef37002d4457a": {
      "content": "const ${1:ref} = useRef(${2:initialValue})",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-useref",
      "matches": {
        "react useref": true,
        "useref": true
      },
      "source": "javascript/react"
    },
    "25d3ffaa582eb0a01ba1d2bdb761a56e": {
      "content": "overflow-style: marquee;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:mq": true
      },
      "source": "vim-snippets/snippets"
    },
    "25d72ba1f53128cbfa05bff93eb92896": {
      "content": "<input type=\"time\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:time": true
      },
      "source": "vim-snippets/snippets"
    },
    "25d80805d57e90580ec2ed49b103e645": {
      "content": "$scope.$on '${1:eventName}', (event, ${2:args}) ->\n\t${3}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$on": true
      },
      "source": "snippets/coffee"
    },
    "25d922d0a724f702389d8c29fda7be1b": {
      "content": "export const select${1:Feature}${2:Property} = createSelector(\n\tselect$1,\n\t(state: $1State, props) => ${3:selectLogic}\n);",
      "doc": "Creates an NgRx Selector using props",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "NgRx Create Selector w/ Props",
      "matches": {
        "a-ngrx-create-selector-props": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "25dadc14188ee0be862a451e072347ad": {
      "content": "\\begin{align*}\n\t${0:${VISUAL}}\n\\end{align*}",
      "doc": "",
      "filetype": "texmath",
      "grammar": "snu",
      "label": "Align without a number",
      "matches": {
        "alnn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "25e05488aa6e3b882354fb1a77a9cd34": {
      "content": "<bdo dir=\"rtl\">${0}</bdo>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdo:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "25ed1556639b05701b5366d64ea7e600": {
      "content": "transition(\n\tmode=\"out-in\"\n\t@before-enter=\"beforeEnter\"\n\t@enter=\"enter\"\n\n\t@before-leave=\"beforeLeave\"\n\t@leave=\"leave\"\n\t:css=\"false\"\n)",
      "doc": "transition component js hooks",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Transition Component with JavaScript Hooks",
      "matches": {
        "vanim": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "25f08db155f8f59d9eca0d86c263c444": {
      "content": "border-corner-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdci": true
      },
      "source": "vim-snippets/snippets"
    },
    "25f437d49daffa14d574a906faf19639": {
      "content": "PropTypes.element,",
      "doc": "React element prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeElement",
      "matches": {
        "ptel": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "25f8631d6a033c6bf53ad01175689d35": {
      "content": "it \"${1}\" $ property $\n\t$0",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "itp": true
      },
      "source": "vim-snippets/snippets"
    },
    "25fe4d69be383b2737a44b676ea85905": {
      "content": "{% for ${1:item} in ${2:sequence} %}\n\t$3\n{% else %}\n\t$4\n{% endfor %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "for/else",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "25fe4e1ab5ccf9983046adb53a476048": {
      "content": "from ${1:package} import ${0:module}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "from": true
      },
      "source": "vim-snippets/snippets"
    },
    "260145197b75d4843b0cc18da88cbdcc": {
      "content": "class ${1:name} extends ${2:base} {\n\tconstructor(${3:arguments}) {\n\t\tsuper(${3:arguments});\n\t\t${0}\n\t}\n}",
      "doc": "child class (ES6)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "child-class-es6-",
      "matches": {
        "base child class": true
      },
      "source": "javascript/base"
    },
    "2606c73ccab310c85c71bcc52dce2acb": {
      "content": "#!/usr/bin/env rdmd",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bang": true
      },
      "source": "vim-snippets/snippets"
    },
    "2606ccbdfe58841bfc50cf5cf940688f": {
      "content": "if (${1})\n\t${2:${VISUAL}}\nelse if (${3})\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifelif": true
      },
      "source": "vim-snippets/snippets"
    },
    "26073abc6d8ef268ae6c43f79a56ace8": {
      "content": "<Link to=\"${1:/blog}\">${2:Text}</Link>",
      "doc": "",
      "filetype": "gatsby",
      "grammar": "lsp",
      "label": "gatsby-link",
      "matches": {
        "gatsby link": true
      },
      "source": "javascript/gatsby"
    },
    "26091611d19666e9f4865d257a7204c3": {
      "content": "<command type=\"checkbox\" label=\"${1}\" icon=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "command:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "260cbf579e25b306eb281bf9b1fa68e7": {
      "content": "| money_without_trailing_zeros",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "money_without_trailing_zeros": true
      },
      "source": "vim-snippets/snippets"
    },
    "261235a6721b2d73ce943d5a549cafe6": {
      "content": "true",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "true",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "261a4c5b5e868168a202e927b8c54cb6": {
      "content": "${1|transition,in,out|}:${2:name}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-transition",
      "matches": {
        "svelte transition": true,
        "svt": true
      },
      "source": "javascript/svelte"
    },
    "262f3ba7c0621010859b52aa237445a8": {
      "content": "defer {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defer": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "26313e3cc924fc7e7dbb5120ef79268e": {
      "content": "(cond ((${1:predicate}) (${2:action}))\n\t((${3:predicate}) (${0:action})))",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cond": true
      },
      "source": "vim-snippets/snippets"
    },
    "2638937c276b0a4fa6d142ad07cb9c42": {
      "content": "if ${1:TARGET}\nthen ${2}\nelse ${3}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "if..then..else",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2646296be690463d7b4ba3720fe02f34": {
      "content": "font-stretch ultra-expanded",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:ue": true
      },
      "source": "vim-snippets/snippets"
    },
    "2646619ae690efe6d679751ab5e819ad": {
      "content": "border-top-width: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtw": true
      },
      "source": "vim-snippets/snippets"
    },
    "2647d43750f217c22015d497f048bab6": {
      "content": "@constructor",
      "doc": "",
      "filetype": "javascript-jsdoc",
      "grammar": "snu",
      "label": "@constructor",
      "matches": {
        "@constr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "264a6ff419e13d06e75e732cb24d5d50": {
      "content": "overflow ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov": true
      },
      "source": "vim-snippets/snippets"
    },
    "265362a1a917f66269b234fc521774ba": {
      "content": "border-length auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlt:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "266772d65415fb501b2f9e1a45590503": {
      "content": "for (${1:i} <- ${2:0} to ${3:obj}.length) {\n\t${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fori": true
      },
      "source": "vim-snippets/snippets"
    },
    "266c94bf08037d807aff99d074b3bd30": {
      "content": "input(v-model=\"${1:data}\" type=\"text\")",
      "doc": "v-model directive",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue v-model Directive",
      "matches": {
        "vmodel": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "26755051d272daa98be12b1ec0432f12": {
      "content": "text-outline ${1:0} ${2:0} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "to+": true
      },
      "source": "vim-snippets/snippets"
    },
    "268342d43a2a9005ac3077e9c28d60c1": {
      "content": "for ${1:I} in ${2} loop\n\t${0}\nend loop;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "for",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "268454c2eff72b4c5df4cd074193c741": {
      "content": "System.out.println(${0});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sout": true
      },
      "source": "vim-snippets/snippets"
    },
    "2686c37663a6a525cbe483e82b55169b": {
      "content": "print(${0:#:TARGET})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "print": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2687873dcdabb622b9c7feaa2d23cdb4": {
      "content": "{% if ${1:condition} %}\n\t${2}\n{% else %}\n\t${0}\n{% endif %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifelse": true
      },
      "source": "vim-snippets/snippets"
    },
    "2693f8abcdee82eec359bf8008d736b3": {
      "content": "protected bool ${1}(${2})\n{\n\t${0:return false;}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb|": true
      },
      "source": "vim-snippets/snippets"
    },
    "269a7accfe253224a5a6548f2774601a": {
      "content": "refactor(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "refactor conventional commit",
      "matches": {
        "refactor": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "269a7b64059fa9bbe0e71a8902b39b05": {
      "content": "<%= ${1:f}.check_box :${0:attribute} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffcb": true
      },
      "source": "vim-snippets/snippets"
    },
    "269f846ad21eba006c42dcd5e50e7cf4": {
      "content": "const ${1:function_name} = async (${2}) => {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "casf": true
      },
      "source": "snippets/javascript"
    },
    "26aaf3967e177d0a45904e94cfb39cea": {
      "content": "<%# ${1:TARGET} %>${2}",
      "doc": "",
      "filetype": "eruby",
      "grammar": "snu",
      "label": "<%# %>",
      "matches": {
        "comment": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "26ac9e139852c7fbcb654afa357c8a50": {
      "content": "grid-auto-columns: min-content",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac:mic": true
      },
      "source": "vim-snippets/snippets"
    },
    "26b41e4ebe03b3825ea45a70fd84386e": {
      "content": "${1:obj}.fadeIn 'slow/400/fast', ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadeinc": true
      },
      "source": "snippets/coffee"
    },
    "26c8994e3589b3991edd32f50214089c": {
      "content": "<menu type=\"toolbar\">\n\t${0}\n</menu>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "menu:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "26d08a2c253dd7dcdc9fabf9421f9d5c": {
      "content": "_.overSome(${predicates})",
      "doc": "var func = _.overSome([Boolean, isFinite]);\n\nfunc('1');\n// => true\n\nfunc(null);\n// => true\n\nfunc(NaN);\n// => false\n\nCreates a function that checks if **any** of the `predicates` return\ntruthy when invoked with the arguments it receives.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-oversome",
      "matches": {
        "lodash oversome": true
      },
      "source": "javascript/lodash"
    },
    "26d4fe1783ac28dee5cd4f5924daa2c9": {
      "content": "<xsl:copy-of select=\"${1:*}\" />",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "copy-of": true
      },
      "source": "vim-snippets/snippets"
    },
    "26dce97b7c9d5c6397422638ce5324bc": {
      "content": "{\n\t\"type\": \"html\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": \"<div>${0}</div>\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_html": true
      },
      "source": "vim-snippets/snippets"
    },
    "26de82c6c79676d3423771c84f76ecfc": {
      "content": "foreach (${3:var} ${2:item} in ${1:items})\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "foreach loop",
      "matches": {
        "foreach": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "26e4d75608a3f81759ff36292baaadaa": {
      "content": "content: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct": true
      },
      "source": "vim-snippets/snippets"
    },
    "26e6eed23fd97f423754a0d78eb227ef": {
      "content": "booktitle = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "booktitle": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "26ecda26ce80063f8bc6a2257555ef31": {
      "content": "<fieldset>\n\t${0}\n</fieldset>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fieldset": true
      },
      "source": "vim-snippets/snippets"
    },
    "26edf366268ed6f7389a8866dc7e3322": {
      "content": "alter table ${1:table} add (${2:column} ${0:type});",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "addcol": true
      },
      "source": "vim-snippets/snippets"
    },
    "26f22552f18a3eef591c6673ae255b2e": {
      "content": "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\n\t${4}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fori": true
      },
      "source": "vim-snippets/snippets"
    },
    "26f2b2bcb554c181f184afd48cc6c8e6": {
      "content": "each_value do |${1:val}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eavd": true
      },
      "source": "vim-snippets/snippets"
    },
    "26f516a3b292c5932c3005d8d7e643ac": {
      "content": "% while ${1:}:\n\t${2:}\n% endwhile",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "wh",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "26fb9944ee1f529102b4d39279fcb184": {
      "content": "subtype ${1} is ${2};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "subtype": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2706c8235b7d2ee58cbf0acbb2179ce2": {
      "content": "<ng-template [ngTemplateOutlet]=\"${1:outlet}\" [ngOutletContext]=\"${2:context}\"></ng-template>",
      "doc": "Angular ng-template",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ng-template",
      "matches": {
        "a-ng-template": true,
        "angular ng-template": true
      },
      "source": "javascript/angular"
    },
    "27099538fd96dfea0e6935df75341f68": {
      "content": "import PropTypes from 'prop-types'\n",
      "doc": "",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-types-import",
      "matches": {
        "impt": true,
        "prop-types import": true
      },
      "source": "javascript/prop-types"
    },
    "270aa1ace2457f9a7b69c47939f8fa5c": {
      "content": "${1:FIELDNAME} = models.ImageField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "ImageField",
      "matches": {
        "mimg": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "270b7328c62c4289fb01033d845fb661": {
      "content": "Mouse Down On Link    ${1:${locator}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Mouse Down On Link",
      "matches": {
        "mdol": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "270c028582d196c7994bfce2f0424478": {
      "content": "::before",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "::b": true
      },
      "source": "vim-snippets/snippets"
    },
    "270c1b8e248f4522fbee8655e80cbb5b": {
      "content": "if ${1} then\n\t${2:${VISUAL}}\nelse\n\t${0}\nend if;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "if ... else",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "270c6d262506086068148e5193d204fe": {
      "content": "System.err.printf(\"${1:Message}\", ${0:exception});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "errf": true
      },
      "source": "vim-snippets/snippets"
    },
    "270db8d62ad87462b7e8a97bc8765a25": {
      "content": "font-stretch extra-condensed",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:ec": true
      },
      "source": "vim-snippets/snippets"
    },
    "2720a08b2e4b7184fe75898d3e66d441": {
      "content": "_.noConflict()",
      "doc": "var lodash = _.noConflict();\n\nReverts the `_` variable to its previous value and returns a reference to\nthe `lodash` function.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-noconflict",
      "matches": {
        "lodash noconflict": true
      },
      "source": "javascript/lodash"
    },
    "2723f3a709af1abe7ed86dd383f135d2": {
      "content": "if (${1}) ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "272589b55ab7cbe7e251580683e246c9": {
      "content": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
      "doc": "Iterating over property values of iterable objects",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "forIn",
      "matches": {
        "fin": true
      },
      "source": "vscode-javascript/snippets"
    },
    "2729219e18bd5fea41fcba2d5c3236cf": {
      "content": "${0:sub_parser} = parser.add_subparsers().add_parser(\"${1:name}\")",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "addsp": true
      },
      "source": "vim-snippets/snippets"
    },
    "272ad8f2b63ffaf7ba098f3bfb1a7e64": {
      "content": "validates_associated :${1:attribute}${2:, on: :${3:create}, if: proc { |obj| ${5:obj.condition?} }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_associated if (vaif)",
      "matches": {
        "vaif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "272c0f98faa88c4ad16426ed03e9aeff": {
      "content": "func Example${1:Method}() {\n\t${0}\n\t// Output:\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "example": true
      },
      "source": "gosnippets/snippets"
    },
    "272ecbeb305a14440a0c1a05f78b3e37": {
      "content": "cursor: text",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "273218e4b760ab53a6fbff5ceeea58b0": {
      "content": "before_create :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbc": true
      },
      "source": "vim-snippets/snippets"
    },
    "2736cbfd52742c3c4c3bc7b87b6fa668": {
      "content": "type ${1:Interface} interface {\n\t${2:/* TODO: add methods */}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "interface I { ... }",
      "matches": {
        "interface": true
      },
      "source": "gosnippets/snippets"
    },
    "27371c9a6ce8a851540ac1a5f347a91f": {
      "content": "<h5 class=\"${1}\">${0}</h5>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h5.": true
      },
      "source": "vim-snippets/snippets"
    },
    "27526a502dc2ef025ff0789601aa02c1": {
      "content": "\\textsc{${1:TARGET}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\textsc": true,
        "textsc \\textsc{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2757e72761b9c907188527721396ac40": {
      "content": "---\nlayout: ${1}\ntitle: ${2}\ncategory: ${3}\n---\n${0}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "layout title category",
      "matches": {
        "---": true,
        "front-matter": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "27591bcf2c97b0aa0a0167b8dda8f31f": {
      "content": "\\subsection{${1}}\n${0:TARGET}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\subsection": true,
        "subsection \\subsection{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "276ab3cf6b6de57c6e6e1723a62ecd4b": {
      "content": "- (void)awakeFromNib\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wake": true
      },
      "source": "vim-snippets/snippets"
    },
    "276e8b4eabb3962cdd5c497770067d6f": {
      "content": "<dt class=\"${1}\">${0}</dt>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dt.": true
      },
      "source": "vim-snippets/snippets"
    },
    "276ff9edb8fcc60a75bab83d10d1fa7d": {
      "content": "padding: ${1:0} ${2:0} ${0:0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:3": true
      },
      "source": "vim-snippets/snippets"
    },
    "2773193bad5bb1759e55ecedc7f05c66": {
      "content": "const_cast<${1:unsigned}>(${2:expr})${3}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cca": true
      },
      "source": "vim-snippets/snippets"
    },
    "2773eb68fb8dc3e7986d9687deaf65a1": {
      "content": "_.hasIn(${object}, ${path})",
      "doc": "var object = _.create({ 'a': _.create({ 'b': 2 }) });\n\n_.hasIn(object, 'a');\n// => true\n\n_.hasIn(object, 'a.b');\n// => true\n\n_.hasIn(object, ['a', 'b']);\n// => true\n\n_.hasIn(object, 'b');\n// => false\n\nChecks if `path` is a direct or inherited property of `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-hasin",
      "matches": {
        "lodash hasin": true
      },
      "source": "javascript/lodash"
    },
    "277c0e7f03852fa5c3197ba1478a22bb": {
      "content": "pragma(msg, ${1:Warning});",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pms": true
      },
      "source": "vim-snippets/snippets"
    },
    "278926c0569a923aa0f77a17d241660f": {
      "content": "$.parseJSON(${1:data})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parsejson": true
      },
      "source": "snippets/javascript"
    },
    "278fd2600a9be19a09ef747cc22303a5": {
      "content": "case (${1:/* variable */})\n\t${2:/* value */}: begin\n\t\t${3}\n\tend\n\tdefault: begin\n\t\t${4}\n\tend\nendcase",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "2793038c79609c6501fc04d21c6cc706": {
      "content": "if (${1:/* condition */}) ${2};",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifi": true
      },
      "source": "vim-snippets/snippets"
    },
    "279409988ccae45457d44b813745fb2c": {
      "content": "<?php if (${1}): ?>\n\t${0:${VISUAL}}\n<?php endif; ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "<?php if (condition): ?> ... <?php endif; ?>",
      "matches": {
        "ifil": true
      },
      "source": "vim-snippets/snippets"
    },
    "2799f0402c33487dd5f145ac1ec36d02": {
      "content": "for(int ${2:i} = 0; $2 < ${1:count}; $2${3:++})\n{\n\t${4}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "279a0b8de5689e0564759e77e6e06dab": {
      "content": "import { Route, Switch, NavLink, Link } from 'react-router-dom'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React Browser Router - Route Combo",
      "matches": {
        "imbrc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "279af44eef968d7f24d144c30f4cc362": {
      "content": "${1:obj}.add('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "add": true
      },
      "source": "snippets/coffee"
    },
    "27a41db764863911adc10f9909d1f753": {
      "content": "<meter>${0}</meter>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "meter": true
      },
      "source": "vim-snippets/snippets"
    },
    "27ac879dc7234de7c37b678135e888e3": {
      "content": "return(${0})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ret": true
      },
      "source": "vim-snippets/snippets"
    },
    "27ad3ebdb82ecd11763a9f1b748f3d9e": {
      "content": "{{- if .Values.$1.enabled }}\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n  name: {{ template \"$2.$1.fullname\" . }}\nspec:\n  replicas: {{ .Values.$1.replicaCount }}\n  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}\n  template:\n\tmetadata:\n\t{{- if .Values.$1.podAnnotations }}\n\t  annotations:\n{{ toYaml .Values.$1.podAnnotations | indent 8 }}\n\t{{- end }}\n\t  labels:\n\t\tapp: {{ template \"$2.name\" . }}\n\t\tcomponent: \"{{ .Values.$1.name }}\"\n\t\trelease: {{ .Release.Name }}\n\t\t{{- if .Values.$1.podLabels }}\n{{ toYaml .Values.$1.podLabels | indent 8 }}\n\t\t{{- end }}\n\tspec:\n\t  {{- if .Values.imagePullSecrets }}\n\t  imagePullSecrets:\n{{ toYaml .Values.imagePullSecrets | indent 8 }}\n\t  {{- end }}\n\t  containers:\n\t\t- name: {{ template \"${2:chartName}.name\" . }}-{{ .Values.$1.name }}\n\t\t  image: \"{{ .Values.$1.image.repository }}:{{ .Values.$1.image.tag }}\"\n\t\t  imagePullPolicy: \"{{ .Values.$1.image.pullPolicy }}\"\n\t\t  args:\n\t\t  {{- range $key, $value := .Values.$1.extraArgs }}\n\t\t\t{{- if $value }}\n\t\t\t- --{{ $key }}={{ $value }}\n\t\t\t{{- else }}\n\t\t\t- --{{ $key }}\n\t\t\t{{- end }}\n\t\t  {{- end }}\n\t\t  livenessProbe:\n\t\t\thttpGet:\n\t\t\t  path: /healthz\n\t\t\t  port: 8080\n\t\t\t  scheme: HTTP\n\t\t\tinitialDelaySeconds: 30\n\t\t\ttimeoutSeconds: 5\n\t\t  ports:\n\t\t\t- name: http\n\t\t\t  containerPort: 8080\n\t\t\t  protocol: TCP\n\t\t  resources:\n{{ toYaml .Values.$1.resources | indent 12 }}\n\t{{- if .Values.$1.nodeSelector }}\n\t  nodeSelector:\n{{ toYaml .Values.$1.nodeSelector | indent 8 }}\n\t{{- end }}\n\t{{- if .Values.$1.tolerations }}\n\t  tolerations:\n{{ toYaml .Values.$1.tolerations | indent 8 }}\n\t{{- end }}\n\t{{- if .Values.$1.affinity }}\n\t  affinity:\n{{ toYaml .Values.${1:value_key}.affinity | indent 8 }}\n\t{{- end }}\n\t  terminationGracePeriodSeconds: 60\n{{- end }}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deploy_sample_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "27b40c2dff4d9d4ed770d18da96f4210": {
      "content": "const Global${1} = createGlobalStyle`\n  ${2}\n`;",
      "doc": "createGlobalStyle",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-create-global-style",
      "matches": {
        "scg": true,
        "styled-components createglobalstyle": true
      },
      "source": "javascript/styled-components"
    },
    "27c5dcba325d83a2bb00138f66f9ef5c": {
      "content": "<paramref name=\"${1:#:name}\"/>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<paramref name=\"\"/>",
      "matches": {
        "paramref": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "27d9f70e63f521839e3866f69f0d6e04": {
      "content": "data.frame(${1:}, header = TRUE)",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "df": true
      },
      "source": "vim-snippets/snippets"
    },
    "27e15cb42ca39d9a9428178a0d984eda": {
      "content": "<br>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "br": true
      },
      "source": "vim-snippets/snippets"
    },
    "27e6c47666d7de9955041bf6a3f2a569": {
      "content": "type\t\tzeroGradient;",
      "doc": "",
      "filetype": "openfoam",
      "grammar": "snu",
      "label": "",
      "matches": {
        "zg": true
      },
      "source": "vim-snippets/snippets"
    },
    "27e9ddef9eaf6c754520b735e3b8bf25": {
      "content": "_.zipObject(${props}, ${values})",
      "doc": "_.zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }\n\nThis method is like `_.fromPairs` except that it accepts two arrays,\none of property identifiers and one of corresponding values.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-zipobject",
      "matches": {
        "lodash zipobject": true
      },
      "source": "javascript/lodash"
    },
    "27edc2d3e913744f9e447a45c9209ccd": {
      "content": "background-origin: padding-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo:pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "27f6a5bb44be708c7ac1499a3a0f4ed0": {
      "content": "sort_by { rand }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ran": true
      },
      "source": "vim-snippets/snippets"
    },
    "27ff02c8f9e0b81881bcd194c819901b": {
      "content": "redirect_to(${2:${12:model}_path(${13:@}${14:$12})})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to (path)",
      "matches": {
        "rep": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "28008aa1b6c74c9345502d76df0f1d94": {
      "content": "-moz-border-image: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "2802dbffe39f94ecbb0d725329ef7a11": {
      "content": "alply(${1:array}, ${2:margin}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "al": true
      },
      "source": "vim-snippets/snippets"
    },
    "2806736ced579d386ef34ae131361034": {
      "content": "import PropTypes from 'prop-types'\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n\n",
      "doc": "Creates a React 17 Functional Component with ES7 module system with PropTypes",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_reactFunctionalComponentWithPropTypes",
      "matches": {
        "_rfcp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "2806c3821e290a50fce333023fab4a8f": {
      "content": "<h4 id=\"${1}\">${0}</h4>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h4#": true
      },
      "source": "vim-snippets/snippets"
    },
    "280d197a5c8b53e53af4a0f192c84160": {
      "content": "$$${1:#:expression}$$${2}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "$$ expression $$",
      "matches": {
        "$$": true,
        "mathenva": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "280f16e6fca914fa13fba5b092ff6b0e": {
      "content": "Mouse Down    ${${1:locator}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Mouse Down",
      "matches": {
        "md": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "281b314533ea30ed5c37bdcd3580a932": {
      "content": "text-decoration: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td": true
      },
      "source": "vim-snippets/snippets"
    },
    "282215781c212c72ce26762692eb7be7": {
      "content": "printfn \\$\"${0}\"",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pri": true
      },
      "source": "vim-snippets/snippets"
    },
    "28280e947f064d70c3c26f63482d02e5": {
      "content": "@serialField ${0:#:description}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "283051539795b82b7560a34caafef835": {
      "content": "PropTypes.bool,",
      "doc": "Bool prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeBool",
      "matches": {
        "ptb": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "28315410b105003a103b0fdd0226e88b": {
      "content": "lightSpecular(${1:v1}, ${2:v2}, ${0:v3});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lightSpecular": true
      },
      "source": "vim-snippets/snippets"
    },
    "2834ec03daa3398e7a0564d13eaf0285": {
      "content": "__PACKAGE__->get_${0:package_method}()",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pkget": true
      },
      "source": "vim-snippets/snippets"
    },
    "283939af7a139f42409bd5a802610fb8": {
      "content": "abstract class ${1:name}${2:(arg)}${3: extends }${4: with} {\n\t${5:override def toString = \"$1\"}\n\t${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "abstract": true
      },
      "source": "vim-snippets/snippets"
    },
    "283b19c854ecf0583ffac525ebefa7e7": {
      "content": "${1:map} ${2:fn} ${0:list}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ap": true
      },
      "source": "vim-snippets/snippets"
    },
    "283d42e07280a8b08761718537bf7f3b": {
      "content": "for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {\n\t${5}\n}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forr": true
      },
      "source": "vim-snippets/snippets"
    },
    "283e31b934b5c45d9a0cd16b65d6fbf3": {
      "content": "- if ${1:condition}.presence?\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifp": true
      },
      "source": "vim-snippets/snippets"
    },
    "284229157f00dfe777bc19deb09f6cfd": {
      "content": "elseif {${1}} {\n\t${0}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "2845e74350bc30460c3dbc716b80d221": {
      "content": "RAILS_DEFAULT_LOGGER.debug \"${1:message}\"$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "RAILS_DEFAULT_LOGGER.debug (rdb)",
      "matches": {
        "rdb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "28578cc7940137f42eb2f659aa948b01": {
      "content": "@while ${1:$i} ${2:>} ${3:0}\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "while": true
      },
      "source": "vim-snippets/snippets"
    },
    "2857e5625b22f0a9334def57a6aba53f": {
      "content": "<%= submit ${1:\"Submit\"} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "submit",
      "matches": {
        "sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "285e0343d232d4d44330116c90dd6a20": {
      "content": "echo CHtml::activeCheckBoxList(${1:model}, '${2:attribute}', array(${3}),array('${4:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhacbl": true
      },
      "source": "vim-snippets/snippets"
    },
    "286416a94fabc1f042af3a457c5bd75a": {
      "content": "#[derive(${1:Debug})]",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "#[derive(..)]",
      "matches": {
        "der": true
      },
      "source": "vim-snippets/snippets"
    },
    "2864ea1712203544833a3d3ee571447a": {
      "content": "function(${1}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "anf": true
      },
      "source": "snippets/javascript"
    },
    "28651f482c542652451779dd55f00184": {
      "content": "$.makeArray(${0:obj})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "makearray": true
      },
      "source": "snippets/coffee"
    },
    "286a85baa28a9a5e38d0884aa7340b0d": {
      "content": "const ${1:store} = writable(${2:initialValue});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-writeable",
      "matches": {
        "svelte writeable": true,
        "svw": true
      },
      "source": "javascript/svelte"
    },
    "286d87dfd5cb8291ee2b5643ffe96e5e": {
      "content": "process (${1})\nbegin\n\t${2}\nend process;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "286e2a130b00f6f5b82ff9b4f3483abb": {
      "content": "{% extends \"${1:base.html}\" %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "extends": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "287757f5fae423f9cca25d9fcc4ce45d": {
      "content": "@extend ${0:TARGET};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "@extend ...;",
      "matches": {
        "extend": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "287cd3232d58228a5ae9bf76702f3413": {
      "content": "import renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\n\nimport store from 'src/store'\nimport { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(\n\t\t<Provider store={store}>\n\t\t <${1:${TM_FILENAME_BASE}} {...defaultProps} />\n\t\t</Provider>,\n\t)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
      "doc": "Create test component",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_setupReactComponentTestWithRedux",
      "matches": {
        "_srtest": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "288042df84f27c7a6ec925eabcf96ee2": {
      "content": "assert_instance_of ${1:ExpectedClass}, ${2:actual_instance}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asio": true
      },
      "source": "vim-snippets/snippets"
    },
    "288e1c9089656205937e9cb913fdce72": {
      "content": "import { EntityMetadataMap } from '@ngrx/data';\n\nconst entityMetadata: EntityMetadataMap = {\n  ${1:Model1}: {},${0}\n};\n\nexport const entityConfig = {\n  entityMetadata\n};",
      "doc": "NgRx Data Entity Metadata",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "NgRx Data Entity Metadata",
      "matches": {
        "a-ngrx-data-entity-metadata": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "288eb000194265cd58a680612bc42008": {
      "content": "border-right-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdri:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "28966aefb398904247c24dc7bb85bcd9": {
      "content": "<footer id=\"${1}\">\n\t${0}\n</footer>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "footer#": true
      },
      "source": "vim-snippets/snippets"
    },
    "28a8bb0d11e360e46c5b0ca32fac2864": {
      "content": "$('<${1}/>'${2:, {}})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "snippets/coffee"
    },
    "28afc55298a8d6cfda7d0ca946f24002": {
      "content": "<input type=\"text\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:text": true
      },
      "source": "vim-snippets/snippets"
    },
    "28c0e34944741962005ea2e0c28eb86b": {
      "content": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
      "doc": "Creates a named function in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "namedFunction",
      "matches": {
        "nfn": true
      },
      "source": "vscode-javascript/snippets"
    },
    "28c4c9b4cfac1d43acd64fba3475d29c": {
      "content": "return true;",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rett": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "28cfa60f06864314c27b08cc7cb66e57": {
      "content": "border-color: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bc": true,
        "border-color": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "28d2028b62ddd8c348fc480495f71529": {
      "content": "\\\\begin{block}{${1:title}}\n\t${0:${VISUAL}}\n\\\\end{block}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "block environment",
      "matches": {
        "block": true
      },
      "source": "vim-snippets/snippets"
    },
    "28d2825d03d0aca5964cfe8cd3acabbb": {
      "content": "#define ${1}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "28ddea3de3c1d32db9afa410e293eef6": {
      "content": "class ${1:class_name};\n\t// data or class properties\n\t${0}\n\t// initialization\n\tfunction new();\n\tendfunction : new\nendclass : $1",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl": true
      },
      "source": "vim-snippets/snippets"
    },
    "28f505a420edd5c2c786c204d61f52bb": {
      "content": "public ${1:object} this[${2:int} index]\n{\n\tget { ${0} }\n\tset { ${0} }\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "index": true
      },
      "source": "vim-snippets/snippets"
    },
    "28fb7ba2ce8f7a846738c59a23d51591": {
      "content": "${1}: ${0:any}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts create field",
      "matches": {
        "+": true
      },
      "source": "vim-snippets/snippets"
    },
    "2903ff60e46ef2148e380c21a5164de7": {
      "content": "|> List.map (fun ${1} -> ${0})",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lmap": true
      },
      "source": "vim-snippets/snippets"
    },
    "29094e6a1c56aea92cc49d1340742582": {
      "content": "class ${1:name} {\n\tconstructor(${2:arguments}) {\n\t\t${0}\n\t}\n}",
      "doc": "class (ES6)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "class-es6-",
      "matches": {
        "base class": true
      },
      "source": "javascript/base"
    },
    "29127e42cee3b2b57f8a7d0e04fed2c8": {
      "content": "import (\n  \"${1:fmt}\"\n)\n${0:TARGET}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "im": true,
        "import": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "291321e1b43c4759f913d64de421c7fb": {
      "content": "cursor: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "291ebf6b7bc016b60af9bfe182c315e2": {
      "content": "Return From Keyword    ${1:${optional return value}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Return From Keyword",
      "matches": {
        "rfk": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "291f50a65670548380fde0f9e09d9f54": {
      "content": "Rails.logger.${1:debug} ${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "log": true
      },
      "source": "vim-snippets/snippets"
    },
    "29237827900372cd40a19908a1b4e18c": {
      "content": "{VISUAL}",
      "doc": "",
      "filetype": "snippets",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v": true
      },
      "source": "vim-snippets/snippets"
    },
    "2926f131eae7682f527d7ddc00183a78": {
      "content": "unimplemented!()",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "unimplemented!()",
      "matches": {
        "unim": true
      },
      "source": "vim-snippets/snippets"
    },
    "292752f9138fee40aa55294f49e67a15": {
      "content": "Page Should Contain Link    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Contain Link",
      "matches": {
        "pscl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2929095557bf38a2d2cc1862db4b7637": {
      "content": "errors.Wrap(${1:err}, \"${2:message}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "errors.Wrap",
      "matches": {
        "ew": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "29316b20788c4683481811c97dcbbd97": {
      "content": "- (NSString${1: *)}${1:#:thing};\n- (void)set${1}:(NSString${2: *})${2};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "istr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2932ce3b9e3108b926d96ac0f70f1c18": {
      "content": "for ${1} (${2:#:expression}){\n\t${3:TARGET}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fore": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "29362352e586ed73a05f4e900f851970": {
      "content": "Execute Async Javascript    ${1:${code line 1}}    ${2:${code line 2}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Execute Async Javascript",
      "matches": {
        "eaj": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "293aa8bd8f4c0c23427ea67216c3a93f": {
      "content": "console.warn(${0});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.warn",
      "matches": {
        "cw": true
      },
      "source": "snippets/javascript"
    },
    "294084d021f5e40245ebcb81013d61f5": {
      "content": "Dir.glob(${1:'dir/glob/*'}) { |${2:file}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "Dir.global() { |file| .. }",
      "matches": {
        "Dir": true
      },
      "source": "vim-snippets/snippets"
    },
    "294699129d5a29f57297ad49505f9ac5": {
      "content": "expression()",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "294b6e23309892e3d2854e1cd3b42b2d": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>",
      "doc": "Base for Vue File with no styles",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component with No Style",
      "matches": {
        "vbase-ns": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "29544db70b96652f5a6713ab35f14018": {
      "content": "border-fit: overwrite",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:ow": true
      },
      "source": "vim-snippets/snippets"
    },
    "295aa666fab4117faf0037d79816be12": {
      "content": "map do |${1:e}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapd": true
      },
      "source": "vim-snippets/snippets"
    },
    "2966e72e9e14f046caaf5d9a42b49514": {
      "content": "const ${1:NAME} ${2:Type} = ${0:0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "const XXX Type = ...",
      "matches": {
        "con": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "2976ce6b4d78fe42b78105f32c4f1f4d": {
      "content": "_.method(${path}, ${args})",
      "doc": "var objects = [\n  { 'a': { 'b': _.constant(2) } },\n  { 'a': { 'b': _.constant(1) } }\n];\n\n_.map(objects, _.method('a.b'));\n// => [2, 1]\n\n_.map(objects, _.method(['a', 'b']));\n// => [2, 1]\n\nCreates a function that invokes the method at `path` of a given object.\nAny additional arguments are provided to the invoked method.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-method",
      "matches": {
        "lodash method": true
      },
      "source": "javascript/lodash"
    },
    "2977cf3b6a3b4bfb89a9e5c7d50134b8": {
      "content": "page-break-after: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba": true
      },
      "source": "vim-snippets/snippets"
    },
    "29806c5c4a6c25db71be37890582e5c1": {
      "content": "${1:FIELDNAME} = models.FloatField(${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "float": true
      },
      "source": "vim-snippets/snippets"
    },
    "2996531d3ba60ea23f93c217f2c4902a": {
      "content": "require('dotenv').config({ debug: ${1|true,false|} })",
      "doc": "You may turn on logging to help debug why certain keys or values are not being set as you expect.",
      "filetype": "dotenv",
      "grammar": "lsp",
      "label": "dotenv-debug",
      "matches": {
        "dotenv debug": true
      },
      "source": "javascript/dotenv"
    },
    "299cccb0cef3eae4b5b0632fcf680f50": {
      "content": "[class]=\"${1:expression}\"",
      "doc": "Angular [class] binding",
      "filetype": "html",
      "grammar": "lsp",
      "label": "class",
      "matches": {
        "a-class": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "299e3440b17bca5299e2fe409fb61185": {
      "content": "\\${4}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${4}",
      "matches": {
        "4": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "29aabf77e1805ed6d03d19be56119feb": {
      "content": "${1:http}.HandleFunc(\"${2:/}\", func(w http.ResponseWriter, r *http.Request) {\n  ${0:fmt.Fprintf(w, \"hello world\")}\n})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "mux.HandleFunc(...)",
      "matches": {
        "hhf": true
      },
      "source": "gosnippets/snippets"
    },
    "29b9ad9457e84b91b397718081012082": {
      "content": "add:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "add": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "29be1255a793eebcd960ce3aea0caf44": {
      "content": "background none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "29bf47e4b1c581c375cf608af391f731": {
      "content": "font-size-adjust: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fza:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "29c21f14ccba5b44a830da9553d8ddf9": {
      "content": "from pudb.remote import set_trace\nset_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pudbr": true
      },
      "source": "vim-snippets/snippets"
    },
    "29ca69abcd9fd363baf050a48ab1b3eb": {
      "content": "border-right-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdri": true
      },
      "source": "vim-snippets/snippets"
    },
    "29ce2b39becb69d9c1ae95a2d1e66305": {
      "content": "expand.grid(${1:...}, ${2:KEEP.OUT.ATTRS = ${3:TRUE}}, ${4:stringsAsFactors = ${5:TRUE}})",
      "doc": "Expand grid",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "exp",
      "matches": {
        "exppand": true
      },
      "source": "vscode-R/snippets"
    },
    "29ce9d83a25b7ee0e16ff751c6441704": {
      "content": "if ${1} then\n\t${2}\nend if;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "29d23e3cb6d7e9381cd2b2ba56a3eaa2": {
      "content": "tapply(${1:vector}, ${2:index}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tapply": true
      },
      "source": "vim-snippets/snippets"
    },
    "29d790c97aa1058972166fde07d5078b": {
      "content": "@include('${1}')",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@include",
      "matches": {
        "include": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "29e5dfb76b9a44a6fa16d173053bb32e": {
      "content": "reversed",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reversed": true
      },
      "source": "vim-snippets/snippets"
    },
    "29e94cbdd7eb83bc80ce741b434b4873": {
      "content": "${1:public} void set${3:}(${2:String} ${0:}){\n\tthis.$4 = $4;\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/snippets"
    },
    "29eb90b75f1b6a1752d0452c727c78e5": {
      "content": "PropTypes.any,",
      "doc": "Any prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeAny",
      "matches": {
        "ptany": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "29f664c621c1fbc2262dfa52325f5198": {
      "content": "pointLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${0:nz});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pointLight": true
      },
      "source": "vim-snippets/snippets"
    },
    "29f69290fb2f650ec4a03e37c981e648": {
      "content": "background-break continuous",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a03ce875076e96468a12ed51ce153f5": {
      "content": "border-bottom-width: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbw": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a0b9c0f472a8296c87708fa1d79ccd2": {
      "content": "fmt.Println(\"${1:${VISUAL}}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Println(...)",
      "matches": {
        "fn": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "2a120f498738b591c095a3d11d8dcd88": {
      "content": "${1:obj}.filter(function (${2:index}) {\n\t${3}\n})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filtert": true
      },
      "source": "snippets/javascript"
    },
    "2a13487433c7298a842bff402c02b78b": {
      "content": "echo CHtml::scriptFile('${0:url}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhjsf": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a1761c7c4a60db51e42f0cac45ee49a": {
      "content": "box-shadow ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a1e6920390bcaf0c4b05b4ce13b6511": {
      "content": "${1:public|internal} class ${2:name} ${0:extends } {\n\tpublic function $2 (\t) {\n\t\t(\"start\");\n\t}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a27070491e58b41c261b4455f30ab2c": {
      "content": "validates :${0:attribute}, presence: true",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vp": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a277301f85a114b418f4acb4d55190b": {
      "content": "${1:function_name}() {\n\t${0:# function_body}\n}",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a299e1f41e4b8a5a7c83fff3c75cd9d": {
      "content": "while ${1:cond}{\n\t${0}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a31b1c06ca0138018e01c428eee21df": {
      "content": "[[NSUserDefaults standardUserDefaults] objectForKey:${1:key}];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "ReadDefaultsValue",
      "matches": {
        "rdef": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2a320ac389fa1e0a7548f531e8cb66e2": {
      "content": "${1:obj}.dblclick (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dblclick": true
      },
      "source": "snippets/coffee"
    },
    "2a32a1d619fb6eb98ae9820addee8b55": {
      "content": "/******************************************************************************/\nPROCEDURE ${1:ProcName}:\n\t${0}\nEND PROCEDURE. /* $1 */\n/******************************************************************************/",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "proc": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a343a66600e3fec2a13df1365d66328": {
      "content": "$.isNumeric(${1:value})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isnum": true
      },
      "source": "snippets/coffee"
    },
    "2a3a115a34fb348a8a79d4a0701021e7": {
      "content": "<ng-container $0></ng-container>",
      "doc": "Angular ng-container",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ng-container",
      "matches": {
        "a-ng-container": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "2a4f0ae7206f6051cde5b5dc810f669c": {
      "content": "echo CHtml::activeDropDownList(${1:model}, '${2:attribute}', array(${3}),array('${4:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhaddl": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a50f2ed0a3598a558b6d4b9c78a3e01": {
      "content": "for ${1:name} in [${2:start}...${3:finish}]\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forrex": true
      },
      "source": "snippets/coffee"
    },
    "2a6739e1de119fbeabfcc9c5f205a25b": {
      "content": "<%namespace file=\"${0:name}\" />",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "namespace": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a71a29f815b34718ac6302b2df978d9": {
      "content": "const (\n\t${1:NAME1} = iota\n\t${0:NAME2}\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "constants with iota",
      "matches": {
        "co": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a829482b3d4b5719ea97866660808cb": {
      "content": "${1}:\ndeclare\n\t${2}\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "declare named block",
      "matches": {
        "declare_named": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2a8a3242224d9b2d4e05046de5634502": {
      "content": "| newline_to_br",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "newline_to_br": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a8acbf11fa22213d07c2e8693de1945": {
      "content": "&#x2191;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "up": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a8d83d37e1a64eaed9497ac09421665": {
      "content": "func Benchmark${1} (${2:b *testing.B}) {\n  for i := 0; i < ${3:b.N}; i++ {\n    ${4}\n  }\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func Benchmark... (b *testing.B) { ... }",
      "matches": {
        "funcbench": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2a971aa8aef286f35036d9025eb80d97": {
      "content": "sort { |a, b| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sor": true
      },
      "source": "vim-snippets/snippets"
    },
    "2a9cee446e61f6e7fa5ca2ef21a02606": {
      "content": "match(${1:str}, ${0:regexp});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "match": true
      },
      "source": "vim-snippets/snippets"
    },
    "2aa046a09d9b839a332f0c36ab27a7a1": {
      "content": "white-space-collapse: loose",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "2aa270d1ff32118f40565c4237716fdd": {
      "content": "font-weight bolder",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:br": true
      },
      "source": "vim-snippets/snippets"
    },
    "2aa2c97ac639b40629744544bbdb1a6e": {
      "content": "printf(\"${1:%s}\\n\"${2});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "2aae4da5be266c0cee1722b4a6c77af7": {
      "content": "=head2 ${1:MethodName}\n${0:Summary...}\n=cut",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "psubi": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ab028c6f00d5066f303515739d21576": {
      "content": "import * as ${1} from '${2:$1}';",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "import * as xyz from 'xyz'",
      "matches": {
        "imas": true
      },
      "source": "snippets/javascript"
    },
    "2abaf1f0fcc8dc8cf0417f0ad2e5fe7d": {
      "content": "expect(${1:target})$0;",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect (js)",
      "matches": {
        "ex": true
      },
      "source": "vim-snippets/snippets"
    },
    "2abdee5ec9a46e5a3236ff910ef5444e": {
      "content": "var ${1:var} = struct{\n\t${2:name} ${3:type}\n}{\n\t$2: ${4:value},\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Grouped globals with anonymous struct",
      "matches": {
        "gg": true
      },
      "source": "vim-snippets/snippets"
    },
    "2abf2c610b1038cca88977ea622224a3": {
      "content": "image::${1:example.jpg}[${2:Description},align=\"center\"]\n${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "Centered image::file[desc]",
      "matches": {
        "imagecenter": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2abfeabc9acecb0d9337ba7b55e3bfb3": {
      "content": "given ${1:$var} {\n  when ${2:condition} {\n\t  ${3:# code block ...}\n  }\n  ${4}\n  default {\n\t  ${5}\n  }\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ac8da8a87b9383f9715dd1a3d937a17": {
      "content": "<grammar> grammar{\n\tE<${1}>\n\t\t: [${2}] ${3}\n\t\t;\n}",
      "doc": "",
      "filetype": "kp19pp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grammar": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2aca4dcaba254f9c7c83cfe81317ff3a": {
      "content": "enter-class=\"$1\"$0",
      "doc": "enter-class=''. Expects: string.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-enter-class",
      "matches": {
        "enterclass": true,
        "vue enter-class": true
      },
      "source": "javascript/vue"
    },
    "2acc8df00118cd6660ffd50158b5a03e": {
      "content": "box-shadow ${1:0} ${2:0} ${3:0} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh+": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ad996467a497f7302c952fbe37be433": {
      "content": "${1:fn} : ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}\n$1 ${6} =\n\t${0}",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn3": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ae1bb511c9d4efc47504db9ef8cb808": {
      "content": "interface ${1} {\n\t${2}: ${3:any};\n\t${0}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "interface",
      "matches": {
        "int": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ae3eaf35b206ab5a3f91a1d5f1a604e": {
      "content": "series = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "series": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2ae5e24ec45fd861792f631b00487d8a": {
      "content": "@import '${0}'",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "2aee86bc3d3d8434f5a2e7c95e8a081e": {
      "content": "$.isWindow(${1:obj})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iswin": true
      },
      "source": "snippets/coffee"
    },
    "2af24d44e958b76706d9350dee8e98ed": {
      "content": "max-width: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maw": true,
        "max-width": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2af7dc73820376d81c4d151b686f49e1": {
      "content": "mdply(${1:matrix}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "md": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b06b4aade1da19d8a71f5ac8fb448b2": {
      "content": "else\n{\n\t${VISUAL}$1\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "else (el)",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2b1329ae0d59e34b2908dde1de7630cd": {
      "content": "number.truncate()",
      "doc": "number.truncate(): Schema\n\nTransformation that coerces the value to an integer by stripping off the digits\nto the right of the decimal point.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "number-truncate",
      "matches": {
        "yup number truncate": true
      },
      "source": "javascript/yup"
    },
    "2b2824fa0f8ab343390868d136fb7dd7": {
      "content": "continue;",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "co": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2b30fbac8ce77bece5b29ebaad784ac1": {
      "content": "@error \"${1}\" ${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@e": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b31e0b0ceb909134cc4d987bf4018c2": {
      "content": "justify-content flex-start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b34c190f68694990800c93dc9b9001a": {
      "content": "_.gt(${value}, ${other})",
      "doc": "_.gt(3, 1);\n// => true\n\n_.gt(3, 3);\n// => false\n\n_.gt(1, 3);\n// => false\n\nChecks if `value` is greater than `other`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-gt",
      "matches": {
        "lodash gt": true
      },
      "source": "javascript/lodash"
    },
    "2b3cc88605640bd43f5dc84a896ae826": {
      "content": "${1:Listing}~\\\\ref{${2:list}}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "reference to a listing",
      "matches": {
        "listing": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b429893dd63e87f56fa61466133dbb6": {
      "content": "place-items: end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b45ed1abcaffc0e0ba82a1a47458297": {
      "content": "[| ${0:TARGET} |]",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "array literal [| |]",
      "matches": {
        "arl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2b4615e01b265a9234eaca15b0e6feef": {
      "content": "number.max()",
      "doc": "number.max(limit: number | Ref, message?: string | function): Schema\n\nSet the maximum value allowed. The ${max} interpolation can be used in the\nmessage argument.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "number-max",
      "matches": {
        "yup number max": true
      },
      "source": "javascript/yup"
    },
    "2b4a6f1abd49d572f067c9df79a3461f": {
      "content": "begin\n\t${0}\nend;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "beg": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b4aba8fb5ce6f7dca3b9fe4ee63fea1": {
      "content": "#lang web-server/insta",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#wi": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b5124543c639b49552f9182e1ce63b3": {
      "content": "top: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b54c45310458ad2d14039d4fec14b0f": {
      "content": "${1:obj}.focusIn (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "focusin": true
      },
      "source": "snippets/coffee"
    },
    "2b568c9d63267c377bdd0362557cad6d": {
      "content": "write(*,*) '$1 = ', $1",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dpr": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b5b2706bf547527642f4e24ede9863f": {
      "content": "| concat: ${1:array}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "concat": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b6b77ec7bd08b75d624cf6a9974b761": {
      "content": "friend",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fr": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b6c6713f5b78c31743b66c75bf2c9a8": {
      "content": ":only-child",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":oc": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b763116fa0c165d496a75c6041ebf90": {
      "content": "_.inRange(${number}, ${start}, ${end})",
      "doc": "_.inRange(3, 2, 4);\n// => true\n\n_.inRange(4, 8);\n// => true\n\n_.inRange(4, 2);\n// => false\n\n_.inRange(2, 2);\n// => false\n\n_.inRange(1.2, 2);\n// => true\n\n_.inRange(5.2, 4);\n// => false\n\n_.inRange(-3, -2, -6);\n// => true\n\nChecks if `n` is between `start` and up to, but not including, `end`. If\n`end` is not specified, it's set to `start` with `start` then set to `0`.\nIf `start` is greater than `end` the params are swapped to support\nnegative ranges.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-inrange",
      "matches": {
        "lodash inrange": true
      },
      "source": "javascript/lodash"
    },
    "2b77a38809f318200c1fe251951ec215": {
      "content": "assert_rjs :${1:replace}, '${0:dom id}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asrj": true
      },
      "source": "vim-snippets/snippets"
    },
    "2b888ab8a7e7b7dfe91af943dea2ac6a": {
      "content": "for (${1:#:var}; ${2:#:condition}; ${3:#:effect}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "for () {}",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2b90e084e8998abc6202f8f132b4f16e": {
      "content": "$.proxy(${1:function}, ${2:this})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "proxy": true
      },
      "source": "snippets/javascript"
    },
    "2b977978a4a71fc77a05bcd848cafbee": {
      "content": "{@value ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{value": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2b9c3b59e218016f786318faa12627c5": {
      "content": "expect($1).toBeInstanceOf($0);",
      "doc": "expects the argument is less than",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobeinstanceof",
      "matches": {
        "jest expect tobeinstanceof": true,
        "tbi": true
      },
      "source": "javascript/jest"
    },
    "2ba5aea436c6355e1a83281419d7205f": {
      "content": ".. code:: ${1:type}\n\t${0:write some code}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cod:": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ba6d7491bdeb43e032f7eae755f271c": {
      "content": "t.integer :${1:title}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tci": true
      },
      "source": "vim-snippets/snippets"
    },
    "2baa7a24680bd63e2855546d6b347976": {
      "content": "text-indent -9999px",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ti:-": true
      },
      "source": "vim-snippets/snippets"
    },
    "2bb3241e5f5d44c07207fdcf998a57a1": {
      "content": "- (void)addObjectTo${1:#:Things}:(${2:#:id})anObject\n{\n\t[${3}} addObject:anObject];\n}\n- (void)insertObject:($2)anObject in$1AtIndex:(unsigned int)i\n{\n\t[${3} insertObject:anObject atIndex:i];\n}\n- (${2})objectIn${1}AtIndex:(unsigned int)i\n{\n\treturn [${3} objectAtIndex:i];\n}\n- (unsigned int)indexOfObjectIn${1}:(${2})anObject\n{\n\treturn [${3} indexOfObject:anObject];\n}\n- (void)removeObjectFrom${1}AtIndex:(unsigned int)i\n{\n\t [${3} removeObjectAtIndex:i];\n}\n- (unsigned int)countOf${1}\n{\n\treturn [${3} count];\n}\n- (NSArray${4: *}${1}\n{\n\treturn ${3}\n}\n- (void)set${1}:(NSArray${4: *})new${1}\n{\n\t[${3} setArray:new${1}];\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "KVCArry",
      "matches": {
        "karray": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2bb65acae438c956d9a4c512b98dd106": {
      "content": "defp ${1:name}(${2:args}) when ${3:guard}, do: ${4}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dfpw": true
      },
      "source": "vim-snippets/snippets"
    },
    "2bb9dda3949ce6705a899e75e50b0568": {
      "content": "[${1:#:id}]: https://${2:#:url} \"${3:#:title}\"",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "[id]: url \"title\"",
      "matches": {
        "idurl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2bbf51988ddc9b4c5f45b991f9c9c576": {
      "content": "else if ${1:condition}\n\t${2}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true
      },
      "source": "vim-snippets/snippets"
    },
    "2bbfe783685f8cc17a13f34c7df35efa": {
      "content": "${1:FIELDNAME} = models.FileField(upload_to=${2:path/for/upload}${0:, max_length=100})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "file": true
      },
      "source": "vim-snippets/snippets"
    },
    "2bc4ea2724ea30ed32d95c6b362a86f2": {
      "content": "render partial: '${0:item}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rp": true
      },
      "source": "vim-snippets/snippets"
    },
    "2bd24693cad6fba50e0e585599454d6a": {
      "content": "Yii::app()->params['${0}']",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ypar": true
      },
      "source": "vim-snippets/snippets"
    },
    "2bd44b44b3c8840f2d5ace949286c054": {
      "content": "${1} : out std_logic;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ost": true
      },
      "source": "vim-snippets/snippets"
    },
    "2bda629e2af214f81aaca8f312ddf82d": {
      "content": "switch(${1:/* variable */})\n{\n\tcase ${2:/* variable case */}:\n\t\t${3}\n\t\t${4:break;}${5}\n\tdefault:\n\t\t${6}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "2bdae6bc8143599c9d199378e7c517df": {
      "content": "\t  {{- if .Values.imagePullSecrets }}\n\t  imagePullSecrets:\n{{ toYaml .Values.imagePullSecrets | indent 8 }}\n\t  {{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imagePullSecrets_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "2bea1921d75ba9bccb20edffc8a9514c": {
      "content": "describe('${1:Name of the group}', () => {\n\t$0\n});",
      "doc": "creates a describe block",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-describe",
      "matches": {
        "desc": true,
        "jest describe": true
      },
      "source": "javascript/jest"
    },
    "2beb5f8e164dfa9a97ec72f90d144746": {
      "content": "justify-self: stretch",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "2bf25869503c062325e3c9a8ce3fcb5a": {
      "content": "import { connect } from 'react-redux'\n",
      "doc": "Import connect from Redux",
      "filetype": "redux",
      "grammar": "lsp",
      "label": "redux-import-connect",
      "matches": {
        "redux import connect": true
      },
      "source": "javascript/redux"
    },
    "2c00cbad2bd4966dc432c4e229c95ee2": {
      "content": "case ${1:/* variable case */}:\n\t${2}\n\t${3:break;}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c041ac242fdc6d0e2fb73ad5fa88479": {
      "content": "$this->render('${1:view}',array('${2:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yr": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c08eb4893b03dbf6762c604046cd956": {
      "content": "image(${1:img}, ${2:x}, ${3:y}${4:, }${5:width}${6:, }${0:height});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "image": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c0a0b6b47dffd7be6f4d35a9a88b8a8": {
      "content": "import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LogInterceptor implements HttpInterceptor {\n\tconstructor() {}\n\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\tconst started = Date.now();\n\t\treturn next.handle(req).pipe(\n\t\t\ttap(event => {\n\t\t\t\tif (event instanceof HttpResponse) {\n\t\t\t\t\tconst elapsed = Date.now() - started;\n\t\t\t\t\tconsole.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}",
      "doc": "Angular HttpInterceptor for Logging HttpClient",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular HttpInterceptor for Logging",
      "matches": {
        "a-http-interceptor-logging": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "2c0e05cd0897464035090ed418c9433a": {
      "content": "height ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c0eb8ccc40fcffee473a1104613b625": {
      "content": "stopAllSounds();",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ss": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2c124c477c019107cf5d12ede0c55d80": {
      "content": "inject(${1:init}) { |${2:mem}, ${3:var}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inj": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c13a9df8129797c206346fd8432ef35": {
      "content": "\\coordinate[${1}](${2:name}) ${3};${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\coordinate": true,
        "coordinate": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2c163d3a011c7d053599b0b3a3a1f274": {
      "content": "else {\n    ${0:TARGET}\n}${9}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2c1f525068c3b7eeaac8334e53007445": {
      "content": "for ${1:name} from ${2:start} til ${3:finish} by ${4:step}\n\t${5}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forrexb": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c1f96e81cd0d2c67c896d809795d76a": {
      "content": "border-top-left-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtli": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c280f5e22a67e2dc92721109e032772": {
      "content": "$.isEmptyObject(${1:obj})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isempty": true
      },
      "source": "snippets/coffee"
    },
    "2c29f7fb354cfb742ca67e0e640ca1c0": {
      "content": "display table-cell",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbc": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c32a73eb5abc7f7f2ba3e70c7a3b6f2": {
      "content": "console.groupCollapsed(\"${1:label}\");\n${0:${VISUAL}}\nconsole.groupEnd();",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.groupCollapsed",
      "matches": {
        "cgroupc": true
      },
      "source": "snippets/javascript"
    },
    "2c33b05323b94d214bd84236a9df6e81": {
      "content": "$this->shouldNotReturnAnInstanceOf($1);",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldNotReturnAnInstanceOf('Type')",
      "matches": {
        "snrinstance": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2c434a2e6a265dd1977766817891cbd7": {
      "content": "${1:void }${2:name}(${3}) {\n\t${4://if not void return null;}\n}\n${0}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c4670192ba9dc104d254cf1610cbcea": {
      "content": "_${1}_${2}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "_emphasis_",
      "matches": {
        "emphasis2": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2c481409d514a8aac42a0b3600f2c2b1": {
      "content": "font-effect engrave",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:eg": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c485c67f5bc30ac6e7622c3a6f13c5a": {
      "content": "align-self: flex-end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c50cc0127e55595042ba6758324c65c": {
      "content": "public class Application\n{\n\t${1:public} static int Main(string[] args)\n\t{\n\t\t${0}\n\t\treturn 0;\n\t}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "simc": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c50f1c6cb2623c258cf95c15013ebb3": {
      "content": "func Benchmark${1:Method}(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t${0:${VISUAL}}\n\t}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func BenchmarkXYZ(b *testing.B) { ... }",
      "matches": {
        "benchmark": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "2c5ba515f3ebf185c6847cb73fbdc7b4": {
      "content": "$this->${1:method}()->shouldContain(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldContain('value')",
      "matches": {
        "scontain": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2c5cbccf25903b5403dfce89323755fb": {
      "content": "list-style-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisi": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c6a63d6463bd84d75637584a28618b0": {
      "content": "<%= render partial: '${0:item}' %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rp": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c7d32e8db667aee754aa966fb63e582": {
      "content": "-> { ${0} }.must_be_silent",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbsi": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c7dbd67004f732a870e98c985fb7da7": {
      "content": "const [${1:isPresent}, ${2:safeToRemove}] = usePresence()",
      "doc": "usePresence()\nIf isPresent is false, it means that a component has been removed the tree, but AnimatePresence won't really remove it until safeToRemove has been called.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-presence",
      "matches": {
        "framer-motion use-presence": true,
        "use-presence": true
      },
      "source": "javascript/framer-motion"
    },
    "2c7f702e1827dce3e90ba7ebf55e780e": {
      "content": "dlply(${1:frame}, ${2:variables}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dl": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c8b30bb05aa9d7b3a31aced3c194e64": {
      "content": "border-style: dashed",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:ds": true
      },
      "source": "vim-snippets/snippets"
    },
    "2c8f5924107390fb295ecb212a259830": {
      "content": "\\fullcite{${1}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\fullcite": true,
        "fullcite": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2c95f10bf912606c55ee8de4bd835d20": {
      "content": "==== ${1} ====\n${2}",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "====": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2c993d71b92ff2574573dc8d98478715": {
      "content": "background-color: rgb(${1:255},${2:255},${3:255});$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background-color:  color-rgb (background)",
      "matches": {
        "background": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2c99f7f35b9198c22ec461c47246ba8f": {
      "content": "after_each(function()\n  ${0:TARGET}\nend)",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "after_each(func)",
      "matches": {
        "after_each": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2ca3e551b48c8873971bc1a7953f4970": {
      "content": "border-fit: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ca4fde750c272b9dd70aacd22bf5850": {
      "content": "{% requireGuest %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig requireguest",
      "matches": {
        "requireguest": true
      },
      "source": "vim-snippets/snippets"
    },
    "2cb407ecee185409974479e5d956358b": {
      "content": "$this->beConstructedWith($1);",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->beConstructedWith($arg)",
      "matches": {
        "cw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2cba93063e40eea60b82bc9ff3d363c0": {
      "content": "font: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "f": true,
        "font": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2cc21f6533c9dcc33ab1900e733c9972": {
      "content": "scope(exit) ${1:f.close();}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sce": true
      },
      "source": "vim-snippets/snippets"
    },
    "2cc4a580f09cc84c0bc76df8193cbb25": {
      "content": "NSMutableString ${0}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nsms": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ccdeb814bb4049a40c3e97d0432b611": {
      "content": "@include \"${1}\"${0}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "@include",
      "matches": {
        "inc": true
      },
      "source": "vim-snippets/snippets"
    },
    "2cd38aea39eb8b3d18938dcb558c1ee7": {
      "content": "extend Forwardable",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Forw-": true
      },
      "source": "vim-snippets/snippets"
    },
    "2cdb727cab6ffb657c81acf2c2233c63": {
      "content": "console.timeEnd(${1:object});",
      "doc": "Sets end point for execution time measurement",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consoletimeend",
      "matches": {
        "base console time end": true
      },
      "source": "javascript/base"
    },
    "2cdf79fb47dd2f41d44612b05a8d74c7": {
      "content": "<Helmet>\n${1:example}\n</Helmet>",
      "doc": "",
      "filetype": "react-helmet",
      "grammar": "lsp",
      "label": "react-helmet-component",
      "matches": {
        "react-helmet component": true
      },
      "source": "javascript/react-helmet"
    },
    "2ce1e81c01c3c73853dea091914efad7": {
      "content": "- (void)addObjectTo${1:#:Things}:(${2:#:id})anObject;\n- (void)insertObject:(${2})anObject in${1}AtIndex:(unsigned int)i;\n- (${2})objectIn${1}AtIndex:(unsigned int)i;\n- (unsigned int)indexOfObjectIn${1}:(${2})anObject;\n- (void)removeObjectFrom${1}AtIndex:(unsigned int)i;\n- (unsigned int)countOf${1};\n- (NSArray${3: *})${1};\n- (void)set${1}:(NSArray${3: *})new${1};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "InterfaceAccessorsForKVCArray",
      "matches": {
        "iarray": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2d083e71a558de630fc73120b7fa2b2d": {
      "content": "(- ${1}\n\t${0})",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "",
      "matches": {
        "-": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d0c2fd818fa39d952e2700c70d35406": {
      "content": "getter ${0:name}",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d0cdc2cbbaadc218c3b29c005fa1941": {
      "content": "int ${2:y} = threadIdx.y + blockIdx.y * blockDim.y;\nint ${3:z} = threadIdx.z + blockIdx.z * blockDim.z;",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Get current Y,Z index (2D)",
      "matches": {
        "iyz": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d0dba56fcacc5cdd8cfb1acd2b01428": {
      "content": "import React from 'react'\n\ninterface Props {\n\t\n}\n\nconst ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typeScriptReactArrowFunctionExportComponent",
      "matches": {
        "tsrafce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "2d1098305d6b8331b85dfa8589ee884e": {
      "content": "*ngIf=\"${1:expression}\"",
      "doc": "Angular *ngIf",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngIf",
      "matches": {
        "a-ngIf": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "2d1948dfe8ae7708cdbc8975fad30c0d": {
      "content": "\\\\begin{enumerate}[(a)]\n\t\\\\item ${0}\n\\\\end{enumerate}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "enumerate environment",
      "matches": {
        "enuma": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d20c157c77a76d8eb960c118a2dfd8b": {
      "content": "return false;",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "retf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2d25cad56e435fd38cf46d5bdf1687be": {
      "content": "$this->${1:method}()->shouldNotHaveKey(${2:'key'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotHaveKey('key')",
      "matches": {
        "snkey": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2d327be53b807d72b6b28269e5f93b5e": {
      "content": "\\fill[${1}] ${2};${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\fill": true,
        "fill": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2d464e2f05985c18635603b62c88429d": {
      "content": "empty-cells: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d54a6a55ca4fcaa44a1dd14dd1ca5b9": {
      "content": "background ${1} url(${2}) ${3:0} ${4:0} ${0:no-repeat}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg+": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d5526cd8300cf73baa193b27967b6b6": {
      "content": "assign ${1:#:name} = ${2:#:val};${3:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "assign ... = ...",
      "matches": {
        "as": true,
        "assign": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2d572eb3514b970d9a9f1d3192371da4": {
      "content": "echo CHtml::listBox('${1:name}', '${2:select}',array(${3}),array('${4:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhlb": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d5cc15583815b55b73055023d504bb0": {
      "content": "System.err.print(\"${0:Message}\");",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "err": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d618b0497f52214710625573ddbe33c": {
      "content": "table-layout: fixed;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbl:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d66c281a941d762b36a0b1bee6c0752": {
      "content": "<link rel=\"alternate\" href=\"${1:atom.xml}\" title=\"Atom\" type=\"application/atom+xml\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link:atom": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d81ab51d13bfd3854fc70bbfc2d3bad": {
      "content": "proc ${1:#:name}(${2}):${3:#:type} =\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "proct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2d8cd31c8866599f5111a6bc6fa3dcef": {
      "content": "wont_match /${0:regex}/",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wm": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d8e532adbc82ee41fe0fe2fd285dc90": {
      "content": "defined(${1:Resource}[\"${2:name}\"])",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defined": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d91fc5a9cb31b076718ad8a269e6c01": {
      "content": "firewall { \"${1:comment}\":\n\tproto\t=> ${2:tcp},\n\taction\t=> ${3:accept},\n\tport\t=> ${4},\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "firewall": true
      },
      "source": "vim-snippets/snippets"
    },
    "2d9c273701f4779f0ca8062f1b4273cd": {
      "content": "NSArray ${0}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nsa": true
      },
      "source": "vim-snippets/snippets"
    },
    "2da1877656dadbe42a4cad7bae9743eb": {
      "content": "${1:YYYY}-${2:MM}-${3:DD} pad ${4:BalanceAccount} ${5:PadAccount}",
      "doc": "",
      "filetype": "beancount",
      "grammar": "snu",
      "label": "pad",
      "matches": {
        "pad": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2daa99aef2d5f383d667c3d763dae0b1": {
      "content": "library ${1};\n${0}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lib": true
      },
      "source": "vim-snippets/snippets"
    },
    "2db038c6eee100d3bbf40c6c807d73a0": {
      "content": "#if ${1:SYMBOL}\n    ${0:TARGET}\n#endif",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifdef": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2db8f2f9cf4afe68de289acb4af15f53": {
      "content": "go func() {\n\t${1:${VISUAL}}\n}()\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "go func() { ... }()",
      "matches": {
        "gof": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "2db9dc23fc98af4406f384a75074c803": {
      "content": "@component('${1}')\n    ${2}\n@endcomponent",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@component ... @endcomponent",
      "matches": {
        "compo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2dbd2b5a1d875e7d6f3e9e7472675ed6": {
      "content": "if !exists(\"g:${1:MyUltraImportantVar}\")\n\tlet g:$1 = ${2:\"${3:<tab>}\"}\nendif",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "Global / configuration variable",
      "matches": {
        "gvar": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2dbe3f4c1a9d842855fcd4bff7fb5dc5": {
      "content": "${1:expression} foreach @${2:array};\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "Loop one-line (xforeach)",
      "matches": {
        "xfore": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2dbf6f5bcce9ce8a10b808a1e5705c21": {
      "content": "@opaque ${1:type_name} :: ${2:type}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "op": true
      },
      "source": "vim-snippets/snippets"
    },
    "2dc01316cc6780c227877afcff6f66e4": {
      "content": "echo CHtml::activeTextField(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhatf": true
      },
      "source": "vim-snippets/snippets"
    },
    "2dcc3dede8473d58fd75da1d77c32522": {
      "content": "text-justify: tibetan",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "2dcd1424a113ce1b577508c3b025288c": {
      "content": "<%= render file: \"${1:file}\"${0} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rf": true
      },
      "source": "vim-snippets/snippets"
    },
    "2dcee2851c771231a43ef8735da5ad77": {
      "content": "each_char {|${1:#:variable}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each_char": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2dcf2387dccbc1b37c0bd223862d70fe": {
      "content": "const ${1:sequence} = async () => {\n  await ${2:animateControls}.start({ ${5:opacity: 1} })\n}",
      "doc": "sequence for animation controls",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-sequence",
      "matches": {
        "framer-motion sequence": true,
        "sequence": true
      },
      "source": "javascript/framer-motion"
    },
    "2dd0524164e84ed8a873a8b8098e5539": {
      "content": "unsigned int ${1:object}Count = [${2:array} count];\nfor (unsigned int index = 0; index < $1Count; index++) {\n\t${3:id} $1 = [$2 $1AtIndex:index];\n\t${0}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fora": true
      },
      "source": "vim-snippets/snippets"
    },
    "2dd2cd0a1830bb251ec7373544bd1522": {
      "content": "<thead>\n\t${0}\n</thead>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "thead": true
      },
      "source": "vim-snippets/snippets"
    },
    "2dd3afea541bde9c73a47406f0e7bc60": {
      "content": "public ${1:int} ${2} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p+": true
      },
      "source": "vim-snippets/snippets"
    },
    "2dd60292c0f4a9319602ee9635b186d8": {
      "content": "mattr_accessor :${0:attr_names}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mrw": true
      },
      "source": "vim-snippets/snippets"
    },
    "2dec88cf17b5fcd2d665fe61cff3210d": {
      "content": "@if(${1:condition})\n   ${2}\n@endif",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "if ... endif",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2dedf9682933b0b371fca8d62c88cca8": {
      "content": "${1:obj}.dequeue(${2:'queue name'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deq": true
      },
      "source": "snippets/coffee"
    },
    "2e0032006eaa28e7d1d9d82b5b5ba39e": {
      "content": "has_and_belongs_to_many :${1:object}${2:, join_table: \"${3:table_name}\", foreign_key: \"${4:$1_id}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "has_and_belongs_to_many (habtm)",
      "matches": {
        "habtm": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2e04fde8839236dc3f43668db0ae7493": {
      "content": "bulk collect into ${0}",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bc": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e0b3a48144a283d269deb873f8f0964": {
      "content": "printfn \"${1}\" ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e14aa8677ad2454f6571bf6634b0d78": {
      "content": "console.clear()",
      "doc": "Clears the console",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleClear",
      "matches": {
        "ccl": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "2e15bd3ef469a4500c51fe23dd52bd7a": {
      "content": "# Template resource\ntemplate ${1:\"/path/to/file\"} do # Path to the file\n\t${2:#}cookbook ${3:nil} # Specify the cookbook where the template is located, default is current cookbook\n\t${4:#}source ${5:nil} # Template source file. Found in templates/default for the cookbook\n\t${6:#}variables ${7} # Variables to use in the template\n\t${8:#}local ${9:false} # Is the template already present on the node?\n\t${10:#}backup ${11:5} # How many backups of this file to keep. Set to false if you want no backups.\n\t${12:#}owner ${13} # The owner for the file\n\t${14:#}group ${15} # The group owner of the file (string or id)\n\t${16:#}mode ${17} # The octal mode of the file (4-digit format)\n\t${18:#}content ${19:nil} # A string to write to the file. This will replace any previous content if set\n\t${20:#}${21:action :create} # Create the file (Default)\n\t${22:#}${23:action :delete} # Delete this file\n\t${24:#}${0:action :touch} # Touch this file (update the mtime/atime)\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "template": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e197a539dd35a3f5bf89f15da1ecbba": {
      "content": "${1:ModelName}::model()->exists(${2:condition}, array('${3:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yexists": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e19f12ce3003309ab27966ee5ecc1b1": {
      "content": "var (\n\t${1} ${2} = ${3}\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "variables declaration",
      "matches": {
        "vars": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e1e7f8084c46da5feb2f9e401cb0138": {
      "content": "use ${1:std::$2};",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "use ...;",
      "matches": {
        "use": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e21f84ad70a610423a8d1a244b0abc5": {
      "content": "<style lang=\"less\" scoped>\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with less scoped",
      "matches": {
        "style_with_less_scoped": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2e2852a486bd1207bebc178ae123df8e": {
      "content": "vertical-align sub",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:sub": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e338bcc2a1d43a456d4f1d0d6ff44cc": {
      "content": "fixed (${1:#:type}* ${2:#:var} = ${3:#:adress}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "fixed () {}",
      "matches": {
        "fixed": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2e340a4577b74465ab4ff6ea6daf58ab": {
      "content": "property? ${0:name}",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rw?": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e3f49bd7093d5723c58f321768f4efc": {
      "content": "try {\n    ${0:TARGET}\n} catch (${1:Exception} ${2:e}) {\n    ${3:Console.WriteLine(e.Message);}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "try {} catch () {}",
      "matches": {
        "try": true,
        "try_catch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2e45553ece65241f98ab0ecae25df64a": {
      "content": "<aside class=\"${1}\">\n\t${0}\n</aside>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aside.": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e536bff2642ff6fcf732c1cd0352753": {
      "content": "(defn ${1:name}\n\t\"${2:doc}\"\n\t[${3}]\n\t${0})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "defn function \"...\" [...] ...",
      "matches": {
        "defn-doc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2e54c626fb6c3ba8274195786e47bd90": {
      "content": "string.uppercase()",
      "doc": "string.uppercase(message?: string | function): Schema\n\nTransforms the string value to uppercase. If strict() is set it\nwill only validate that the value is uppercase.numberDefine a number schema. Supports all the same methods as mixed.let schema = yup.number();\n\nawait schema.isValid(10); // => true\nThe default cast logic of number is: parseFloat.Failed casts return NaN.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-uppercase",
      "matches": {
        "yup string uppercase": true
      },
      "source": "javascript/yup"
    },
    "2e56155e49aa2832ad0bd295559e352b": {
      "content": "justify-self: start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e5d436c9727af3143d9ba9ff46d94b9": {
      "content": "annote = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "annote": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2e5d5d1e5444b5b4f033a782df57c47a": {
      "content": "function (${1:int x}) => ${2}${3:;}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "funl": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e6a8e022c38ab642abfa6c62c716fc0": {
      "content": "nnoremap ${1} ${2}<CR>",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nn": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e722c9f23a27987443cf00a2cb46c7c": {
      "content": "[%header,format=csv]\n|===\n${0}\n|===",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "CSV table",
      "matches": {
        "csvtable": true,
        "tablecsv": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2e73b11c52c49bcc83c17fbef841554d": {
      "content": "repeat (${1}) begin\n\t${0}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rep": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e7e8b26cc1a572fe8cbdf5b45928149": {
      "content": "grid-auto-flow: ${1:row};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e837e8bee402ed6ef616326149e5900": {
      "content": "PImage(${1:width}, ${0:height});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pimage": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e8718659862fc800d7d1a7ff7e2f927": {
      "content": "waits($1);",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "waits (js)",
      "matches": {
        "wa": true
      },
      "source": "vim-snippets/snippets"
    },
    "2e906a6b8f279397b7ba52ddfaaedff2": {
      "content": "\\begin{mdseries}\n\t${1:TARGET}\n\\end{mdseries}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{mdseries} \\mdseries": true,
        "mdseries": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2e9505967eebc9aba97129e296d91ec6": {
      "content": "${1:obj}.hide('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hide": true
      },
      "source": "snippets/javascript"
    },
    "2ea903c35bd4baf8ae94afdcfa9fbcc7": {
      "content": "{% elif %}$1",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ielif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2eab17f624dce785434388eee2542552": {
      "content": "declare\n\t${1}\nbegin\n\t${0}\nend;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "declare block",
      "matches": {
        "declare": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2eabb8fdd332fd3412a00f6341cc2e08": {
      "content": "t.time :${1:title}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.time (tcti)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2eb56741536b74419f1645623037d4c5": {
      "content": "${1:obj}.submit (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "submit": true
      },
      "source": "snippets/coffee"
    },
    "2ec059f15f43fbebbf53d565f699f785": {
      "content": "orphans: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "orp": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ec49463228ea267bacf14ac65d25be3": {
      "content": "visibility: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ec74cc8272b4d658befa76efdc4bcd6": {
      "content": "DEFINE OUTPUT PARAMETER ${1:ParamName} AS ${0:ParamType}.",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "output": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ed0e6288248bc7b8f40d37c4a003732": {
      "content": "text-justify: inter-ideograph",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:ii": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ed9e4e5d95656b70c33bcf4c493885a": {
      "content": "${1:obj}.siblings('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sib": true
      },
      "source": "snippets/coffee"
    },
    "2ee38a459a1b0fedf9cb86bcfe9f9320": {
      "content": "for (${1:1}, ${2:10}) { |i|\n\t${0}\n}",
      "doc": "",
      "filetype": "supercollider",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ef3560aeaec7fe8e10a2278125537e2": {
      "content": "<!-- ${1} -->${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "//": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ef58c8e0c1f8dce59771674cf617abe": {
      "content": "<select name=\"${1}\" id=\"${2:$1}\">\n\t<option value=\"${3}\">${4:$3}</option>\n\topt+${0}\n</select>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "select+": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ef7a69214cfd44c2f79b0181b29dc3f": {
      "content": "try\n\t${0:TARGET}\non error\n\t-- error handling\nend try",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2f058926dc2db6c8b62f0ca8572a6e55": {
      "content": "lambda { |${1:args}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lam": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f131a7f520b94d86a0a27d0486ba307": {
      "content": "_.pick(${object}, ${paths})",
      "doc": "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pick(object, ['a', 'c']);\n// => { 'a': 1, 'c': 3 }\n\nCreates an object composed of the picked `object` properties.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-pick",
      "matches": {
        "lodash pick": true
      },
      "source": "javascript/lodash"
    },
    "2f16919cd3175f50a1762a1a54dc64a6": {
      "content": "import { connect } from 'react-redux'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import redux statement",
      "matches": {
        "redux": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "2f270c3dcb1f160695b9d98627ea2552": {
      "content": "limit: ${1:5}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "limit": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f33d9f85d6b39effdd8d70dd2e5cc54": {
      "content": "noiseSeed(${0:x});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "noiseSeed": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f3aaba57165af13053f18ce21ce039c": {
      "content": "$this->input->post(\"${1:index}\");${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_input-post": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f3db497df557b54dbcbce889d780544": {
      "content": "PropTypes.objectOf($0),",
      "doc": "An object with property values of a certain type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-object-of",
      "matches": {
        "prop-types objectof": true,
        "ptoo": true
      },
      "source": "javascript/prop-types"
    },
    "2f419714b9f418bed1dbf8430e4aefbe": {
      "content": "$this->form_validation->set_rules(\"${1:field}\", \"${2:label}\", \"${3:trim|required}\");${4}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_validation-set_rules": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f428c7b97ff81cf4a6d2de7f908784e": {
      "content": "border: ${1:1px} ${2:solid} #${3:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border:   size style color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2f48be0e2fb7ee0f50d15710c75c2ad0": {
      "content": "sort_by {|${1:#:variable}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sort_by": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "2f4c058569bef2a29d4ea467c3df68d8": {
      "content": "right auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f4d3beceda496ea3edfb66198d76507": {
      "content": "console.log(${0});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.log",
      "matches": {
        "cl": true
      },
      "source": "snippets/javascript"
    },
    "2f54e683fa5fe6af86cfbd74847cf3db": {
      "content": "import React, { Component } from 'react'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React component class with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassExportComponent",
      "matches": {
        "rce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "2f56f9b2f8a1daab05c3a15044118475": {
      "content": "<noscript>\n\t${0}\n</noscript>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "noscript": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f57c955c4eb90cea0ece839630ffc5c": {
      "content": "stringformat:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stringformat": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2f65e9caeff9e03c84739c82e1d5fbac": {
      "content": "import { mapActions } from 'vuex';\n\nexport default {\n\tmethods: {\n\t\t...mapActions([\n\t\t\t${1:'nameOfAction'}, //also supports payload `this.nameOfAction(amount)` \n\t\t])\n\t},\n};",
      "doc": "mapactions inside a vue component",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue MapActions",
      "matches": {
        "vmapactions": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "2f706f96d0c6331320508358d302def8": {
      "content": "__FILE__",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "FILE": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f712ce339d22d263b85331c27879a11": {
      "content": "page-break-before: always;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f7919443f016e4c42f1da18fa6b2346": {
      "content": "text-emphasis: after",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f7946f35037899fa88d287620028a3b": {
      "content": "expect(${1:target}).toBeNull();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to be null (js)",
      "matches": {
        "en": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f7a36f6797fa9dce1dd708df5ea0b41": {
      "content": "const ${1:actionName} = (${2:arg}) => {\n\treturn {\n\t\ttype: ${3:VISUAL},\n\t\t$2\n\t};\n};",
      "doc": "",
      "filetype": "javascript-redux",
      "grammar": "snu",
      "label": "",
      "matches": {
        "act": true
      },
      "source": "snippets/javascript"
    },
    "2f7a40c97db94dfbc4e4972b7e6e6e7b": {
      "content": "_.isArrayBuffer(${value})",
      "doc": "_.isArrayBuffer(new ArrayBuffer(2));\n// => true\n\n_.isArrayBuffer(new Array(2));\n// => false\n\nChecks if `value` is classified as an `ArrayBuffer` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isarraybuffer",
      "matches": {
        "lodash isarraybuffer": true
      },
      "source": "javascript/lodash"
    },
    "2f7ae3c6653a5694a66de7e7a7cddab8": {
      "content": "glm(${1:formula}, ${2:family = {3:gaussian}}, ${4:data})",
      "doc": "Generalized Linear Models",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "glm",
      "matches": {
        "glm": true
      },
      "source": "vscode-R/snippets"
    },
    "2f85cd665e466c83164652010350732d": {
      "content": "if ${1:condition}, do: ${0}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "if .. do: ..",
      "matches": {
        "if:": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f9564c895cef096d6511e361591febf": {
      "content": "_.flattenDeep(${array})",
      "doc": "_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]\n\nRecursively flattens `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-flattendeep",
      "matches": {
        "lodash flattendeep": true
      },
      "source": "javascript/lodash"
    },
    "2f96b3988a049a17cc42ece1bb10a482": {
      "content": "specular(${1:value1}, ${2:value2}, ${3:value3}${4:, }${0:alpha});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "specular": true
      },
      "source": "vim-snippets/snippets"
    },
    "2f99e05b48d4fb7fba2597b1c45912f9": {
      "content": "define([\"${1:#dependencies1}\"], function (${2:#dependencies2}) {\n\treturn ${0:TARGET};\n});",
      "doc": "",
      "filetype": "javascript-requirejs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "snippets/javascript"
    },
    "2fb2759d4723e025edd4393e264a7fe2": {
      "content": "text-decoration: ${1:none/underline/overline/line-through/blink};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "text-decoration: none:underline:overline:line-through:blink (text)",
      "matches": {
        "text": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2fb68d96ee4db5a72897fcbf173b11a7": {
      "content": "${1:obj}.delay('${2:slow/400/fast}'${3:, 'queue name'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "delay": true
      },
      "source": "snippets/javascript"
    },
    "2fb8a40ee1faa26c4d161973ec0302ed": {
      "content": "package\n{\n\timport org.flixel.*\n\tpublic class ${1:ClassName} extends ${2:FlxSprite}\n\t{\n\t\tpublic function $1(${3: X:Number, Y:Number}):void\n\t\t{\n\t\t\tsuper(X,Y);\n\t\t\t${4}\n\t\t}\n\t\toverride public function update():void\n\t\t{\n\t\t\tsuper.update();\n\t\t\t${0}\n\t\t}\n\t}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "FlxSprite": true
      },
      "source": "vim-snippets/snippets"
    },
    "2fc84fe6e848cf359e29feadeff4a6d0": {
      "content": "import React from 'react'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React",
      "matches": {
        "imr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "2fca9ad93169332d4c6cfedcc148999b": {
      "content": "assertArrayEquals(\"${1:Failure message}\", ${2:expecteds}, ${3:actuals});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aae": true
      },
      "source": "vim-snippets/snippets"
    },
    "2fd048e90110966a6cc028240d822a0f": {
      "content": "echo CHtml::cssFile('${1:url}','${0:media}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhcssf": true
      },
      "source": "vim-snippets/snippets"
    },
    "2fd1051c8c5103bb4fc82969ada1cb1b": {
      "content": "expect($1).toEqual($0);",
      "doc": "expects the first argument to be equal with the second one",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-toequal",
      "matches": {
        "jest expect toequal": true,
        "te": true
      },
      "source": "javascript/jest"
    },
    "2fd360f3f88606cf44e74268e4fc2b55": {
      "content": "<div class=\"${1}\">\n\t${0}\n</div>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "div.": true
      },
      "source": "vim-snippets/snippets"
    },
    "2fd4790552a72d2adb39adc266ae796d": {
      "content": "sort(reverse=${1:False}, case_sensitive=${2:False}, attribute=${3:None})",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "sort an iterable",
      "matches": {
        "sort": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2fdd95606afee451c8ce9b5ae04c5dba": {
      "content": "word-wrap suppress",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "2fe1ab59d957b2f77ba9c063c0b4155f": {
      "content": "fprintf(${1:stderr}, \"${2:%s}\\n\"${3});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fpr": true
      },
      "source": "vim-snippets/snippets"
    },
    "2fe57db8039489b41b62fc7813cd8173": {
      "content": "void loop()\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loop": true
      },
      "source": "vim-snippets/snippets"
    },
    "2fe9111cdd15aa33897af1cdd691e495": {
      "content": "def ${1:mname}(self, ${2:arg}):\n\t${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defm": true
      },
      "source": "vim-snippets/snippets"
    },
    "2ff121d8d625bd4301beea696b0a4b44": {
      "content": "http.createServer($1).listen($2);",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "http.createServer",
      "matches": {
        "hcs": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "2ff373c18a161d20394ff94e60994b4d": {
      "content": "_.commit()",
      "doc": "var array = [1, 2];\nvar wrapped = _(array).push(3);\n\nconsole.log(array);\n// => [1, 2]\n\nwrapped = wrapped.commit();\nconsole.log(array);\n// => [1, 2, 3]\n\nwrapped.last();\n// => 3\n\nconsole.log(array);\n// => [1, 2, 3]\n\nExecutes the chain sequence and returns the wrapped result.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-commit",
      "matches": {
        "lodash commit": true
      },
      "source": "javascript/lodash"
    },
    "2ff3898eec6f3927c3c2828cd282dd65": {
      "content": "console.dir(${0:obj});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.dir",
      "matches": {
        "cdir": true
      },
      "source": "snippets/javascript"
    },
    "300b87f38bfe750d8c1565495e37e1d6": {
      "content": "<menu>\n\t${0}\n</menu>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "menu": true
      },
      "source": "vim-snippets/snippets"
    },
    "3029882f5768f5150caf62c8a17e3a8b": {
      "content": "<div class=\"${1}\">${2:TARGET}</div>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "divclass": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "302b035a233df198024d8f8992fdd58d": {
      "content": "expect($1).toMatchObject($0);",
      "doc": "returns true if the argument matches the second object",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tomatchobject",
      "matches": {
        "jest expect tomatchobject": true,
        "tmo": true
      },
      "source": "javascript/jest"
    },
    "302ba9669ad7cfb917996fdbb692a710": {
      "content": "expect(${1:target}).not.toContain(${2:value})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect not to contain (coffee)",
      "matches": {
        "notc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "30345ab91ec3cef34ec3aa8ecde77a46": {
      "content": "use Doctrine\\Common\\Collections\\ArrayCollection;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Doctrine\\..\\ArrayCollection",
      "matches": {
        "usearray": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3039ce6bb7b635dd26f9a83986ff22bb": {
      "content": "/* ------------------------------------------------------------------------- */",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sep": true
      },
      "source": "vim-snippets/snippets"
    },
    "303b7ac8cdbffdf3826d1ed9c1ab3515": {
      "content": "data() {\n\treturn {\n\t\t${1:key}: ${2:value}\n\t}\n},",
      "doc": "Vue Component Data",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-data",
      "matches": {
        "vdata": true,
        "vue data": true
      },
      "source": "javascript/vue"
    },
    "303fe8ecf09cfcd16fc11e628013d87b": {
      "content": "respond_to",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "respond_to",
      "matches": {
        "rst": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "304389700e7594ac18ad69d39df381d7": {
      "content": "t.timestamp :${1:title}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.timestamp (tcts)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "304468ab8bac71f53f16ef27dc1883f5": {
      "content": "protected",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "po": true
      },
      "source": "vim-snippets/snippets"
    },
    "304f19614888e374c78245dcde0fd62f": {
      "content": "text-outline: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "to": true
      },
      "source": "vim-snippets/snippets"
    },
    "30586a14f1d82e9e61db40a84e83e408": {
      "content": "text-align-last auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "305ab6a7454aaa7e5cbfed300b4b4957": {
      "content": "import { withTheme } from 'styled-components';",
      "doc": "import { withTheme } from 'styled-components'",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-import-with-theme-from-styled-components",
      "matches": {
        "imsct": true,
        "styled-components import withtheme": true
      },
      "source": "javascript/styled-components"
    },
    "305da1710e91b70ace460f4e44adc1dc": {
      "content": "const ${1:name} = ref(${2:initialValue})",
      "doc": "Vue Ref",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Composition API - Vue ref",
      "matches": {
        "v3ref": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "3060b0ef6c94cc306b3b3690e784cb65": {
      "content": "order('${0:field}')",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oa": true
      },
      "source": "vim-snippets/snippets"
    },
    "3064b09e99e41cab6959ff584fa5d1fb": {
      "content": "import",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "3067335bd9b39379cb18e51617f08690": {
      "content": "_.clone(${value})",
      "doc": "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar shallow = _.clone(objects);\nconsole.log(shallow[0] === objects[0]);\n// => true\n\nCreates a shallow clone of `value`.\n\n**Note:** This method is loosely based on the\n[structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\nand supports cloning arrays, array buffers, booleans, date objects, maps,\nnumbers, `Object` objects, regexes, sets, strings, symbols, and typed\narrays. The own enumerable properties of `arguments` objects are cloned\nas plain objects. An empty object is returned for uncloneable values such\nas error objects, functions, DOM nodes, and WeakMaps.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-clone",
      "matches": {
        "lodash clone": true
      },
      "source": "javascript/lodash"
    },
    "306810abeddf207597668522d69133ec": {
      "content": "#!/usr/bin/env zsh\n$0",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "#!/usr/bin/env zsh",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3069f56b21db3f8155d6ac6ad5f05f60": {
      "content": "list-style-type none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "306ce1797dca65a02f5ac1e37e0b9954": {
      "content": "justify-content: flex-end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "30712c8c4841cbe5ef3a9bbea88cf049": {
      "content": "#error ${0:#:message}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "err": true,
        "error": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "30787ba20a8ec037ecda411f4a46ed6b": {
      "content": "resize: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz": true
      },
      "source": "vim-snippets/snippets"
    },
    "3078e26c0fa7342099efbdf592a68ac5": {
      "content": "import React from 'react'\n\nfunction ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React Functional Component with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactFunctionalExportComponent",
      "matches": {
        "rfce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "3083b227a5c322793086f5512e8c076f": {
      "content": "margin-right: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mr:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "3084086c60657cfb52e42bd34b5eec5f": {
      "content": "_.some(${collection}, ${predicate})",
      "doc": "_.some([null, 0, 'yes', false], Boolean);\n// => true\n\nvar users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.some(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `_.matchesProperty` iteratee shorthand.\n_.some(users, ['active', false]);\n// => true\n\n// The `_.property` iteratee shorthand.\n_.some(users, 'active');\n// => true\n\nChecks if `predicate` returns truthy for **any** element of `collection`.\nIteration is stopped once `predicate` returns truthy. The predicate is\ninvoked with three arguments: (value, index|key, collection).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-some",
      "matches": {
        "lodash some": true
      },
      "source": "javascript/lodash"
    },
    "30849ad217cb91e94d59b2dc433bc636": {
      "content": "require 'test/unit'\nrequire '${1:library_file_name}'\nclass Test${2:$1} < Test::Unit::TestCase\n\tdef test_${3:case_name}\n\t\t${0}\n\tend\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tc": true
      },
      "source": "vim-snippets/snippets"
    },
    "3095af3faa595af52a1637defc4fc0b3": {
      "content": "if ${1:let} ${2:name} = ${3:expression} else {\n    ${0:TARGET}\n}${9}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "if let/case ... { ... }",
      "matches": {
        "optional": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3095c5a86bffc9ed424061184c0fd865": {
      "content": "<input type=\"number\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:number": true
      },
      "source": "vim-snippets/snippets"
    },
    "309d8a0e8388dfae20f58f244d62eabc": {
      "content": "open('${1:path/or/url/or/pipe}', '${2:w}') { |${3:io}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ope": true
      },
      "source": "vim-snippets/snippets"
    },
    "30a052646688a429eebf8acddf166baf": {
      "content": "white-space pre-line",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:pl": true
      },
      "source": "vim-snippets/snippets"
    },
    "30a6b4e732db8fe6849db9078d7cf065": {
      "content": "struct ${1:#:name} {\n    ${2:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "struct {}",
      "matches": {
        "struct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "30b4b96198e93182cba048b860e494ac": {
      "content": "$.queue(${1:element}${2:, name}${3:, newQueue})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "queuee": true
      },
      "source": "snippets/javascript"
    },
    "30c5de2bfbe8a7124f9ba45282c308d3": {
      "content": "PropTypes.bool.isRequired,",
      "doc": "Bool prop type required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-bool-required",
      "matches": {
        "prop-types bool required": true,
        "ptbr": true
      },
      "source": "javascript/prop-types"
    },
    "30d180bf2f4a8b8a904e04a6bdd247eb": {
      "content": "grid-auto-flow: row dense",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:rd": true
      },
      "source": "vim-snippets/snippets"
    },
    "30da0fa51fc602630959ffcf8100afc3": {
      "content": "{% namespace \"${1}\" %}\n\t${0}\n{% endnamespace %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig namespace",
      "matches": {
        "namespace": true
      },
      "source": "vim-snippets/snippets"
    },
    "30efcffdeb6c96f9d2738c74f391cde7": {
      "content": "plot(${1:x}, ${0:y})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pl": true
      },
      "source": "vim-snippets/snippets"
    },
    "30f39eb7d33770ea32517842d5e52232": {
      "content": "switch ${1:object}\n\twhen ${2:value}\n\t\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "swi": true
      },
      "source": "snippets/coffee"
    },
    "30f8c23a6357575518ee808ec0c16851": {
      "content": "message(SEND_ERROR \"${1}\")",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "message(SEND_ERROR \"...\")",
      "matches": {
        "send_error_message": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "30fb6d755e7b91a0144d926ee2bf36dd": {
      "content": "<Head>\n${1:content}\n</Head>",
      "doc": "",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-head",
      "matches": {
        "next head": true
      },
      "source": "javascript/next"
    },
    "3102dbf2db754b64f3a2b3e6758a8ed9": {
      "content": "sap.ui.layout.HorizontalLayout.extend(\"$1\", {\n    metadata: {\n\tproperties: {\n\t  \t$2\n\t},\n\taggregations: {\n\t\t$3\n\t},\n\tevents: {\n\t\t$4\n\t}\n    },\n   init: function(){\n\t$5\n    },\n    renderer: \"$6\"\n});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "extendHorizontalL": true
      },
      "source": "vim-snippets/snippets"
    },
    "3106461b3421c5eb3f171ee05ecca379": {
      "content": "java.io.",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "j.i": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "310e75ecd5af8385b4219a2751a23c76": {
      "content": "border-right-style: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "3111f07748e9494e91dc109a7aa535fe": {
      "content": "<nuxt-child $1/>$0",
      "doc": "",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-child",
      "matches": {
        "nuxt child": true
      },
      "source": "javascript/nuxt"
    },
    "311289d32621c1875a13e906221274e2": {
      "content": "bottom: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b": true
      },
      "source": "vim-snippets/snippets"
    },
    "3116e85ca5fbc06f0c445992a69f8dc9": {
      "content": "return ${0};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ret": true
      },
      "source": "vim-snippets/snippets"
    },
    "312030ec3a42ae1bb1afa5c6d190b7f1": {
      "content": "componentWillUpdate: (nextProps, nextState) ->\n\t$1",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define componentWillUpdate",
      "matches": {
        "componentWillUpdate": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "312031b1a0aad33b977904565e251e98": {
      "content": "font-emphasize-style ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems": true
      },
      "source": "vim-snippets/snippets"
    },
    "312133d902e0e57ebacabedc3510ff6b": {
      "content": "useDebugValue(${1:value});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "useDebugValue",
      "matches": {
        "used": true
      },
      "source": "snippets/javascript"
    },
    "312685366072c7de109ad47dae0eedb7": {
      "content": "case ${1} is\n\twhen ${2} => ${3};${0}\nend case;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "case",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "312d521d707c101b9caaae96cfacb604": {
      "content": "const { $1 } = this.state",
      "doc": "Creates and assigns a local variable using state destructing",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "destructState",
      "matches": {
        "cs": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "31487bc6387d4911cd85c168d75a791b": {
      "content": "{% else %}$1",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ielse": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "314ade04147eb9f2fc16dcb22840b0e5": {
      "content": "mixed.isValid()",
      "doc": "mixed.isValid(value: any, options?: object): Promise<boolean>\n\nReturns true when the passed in value matches the schema. isValid\nis asynchronous and returns a Promise object.Takes the same options as validate().",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-is-valid",
      "matches": {
        "yup mixed isvalid": true
      },
      "source": "javascript/yup"
    },
    "314cc5ecd10927a4aa79e785161a6374": {
      "content": "${1:deferred}.fail(${2:callbacks})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dfail": true
      },
      "source": "snippets/javascript"
    },
    "314f602a7a30009c7cbe8a97487e9ab7": {
      "content": "grid-row-gap: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grg": true
      },
      "source": "vim-snippets/snippets"
    },
    "3150487929ce20cd64c85b26482f2017": {
      "content": "overflow-x: visible",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "316e7f708c9d98be8c0b22cb144296bf": {
      "content": "export const ${1} = styled.${2}`\n  ${3}\n`;",
      "doc": "Export styled-component",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-export-styled-component",
      "matches": {
        "exsc": true,
        "styled-components export component": true
      },
      "source": "javascript/styled-components"
    },
    "317060e9e48e4a5548eb3b6dc9da7a74": {
      "content": "<style lang=\"sass\" scoped>\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with sass scoped",
      "matches": {
        "style_with_sass_scoped": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "31756ab36c03f38160c3d5733af20af2": {
      "content": "_.constant(${value})",
      "doc": "var objects = _.times(2, _.constant({ 'a': 1 }));\n\nconsole.log(objects);\n// => [{ 'a': 1 }, { 'a': 1 }]\n\nconsole.log(objects[0] === objects[1]);\n// => true\n\nCreates a function that returns `value`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-constant",
      "matches": {
        "lodash constant": true
      },
      "source": "javascript/lodash"
    },
    "317e2ff4dea3595a45feb806d6f157b1": {
      "content": "content: attr(${0})",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "317f525b665d05eadbb7904d5446b466": {
      "content": "/// ${1:description}\n///\n/// ${2:Params:  ${3:param} = ${4:param description}\n///\t\t\t $5}\n///\n/// ${6:Returns: ${7:return value}}\n///\n/// ${8:Throws:  $9Exception $10}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "function ddoc block (fdoc)",
      "matches": {
        "fdoc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "318563c483bfcab37c9483dae028b9db": {
      "content": "\\begin{lrbox}\n\t${1:TARGET}\n\\end{lrbox}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{lrbox} \\lrbox": true,
        "lrbox": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3187df1b16f4f9321be3ca7c05bfc2d4": {
      "content": "appear-to-class=\"$1\"$0",
      "doc": "appear-to-class=''. Expects: string.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-appear-to-class",
      "matches": {
        "appeartoclass": true,
        "vue appear-to-class": true
      },
      "source": "javascript/vue"
    },
    "318a4fb5502a87370e2c9a8819f70580": {
      "content": "if ${1} then\n\t${2:${VISUAL}}\nelse\n\t${0}\n${0}",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "318aba94c9df9f49af0d6fc96e2758ae": {
      "content": "unless ${1:condition}\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unless": true
      },
      "source": "vim-snippets/snippets"
    },
    "3190f467fb07f7b421a489ebdaa10d5a": {
      "content": "grid-gap: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gg": true
      },
      "source": "vim-snippets/snippets"
    },
    "319dbfdff766e55453e5b760a5f1ccc3": {
      "content": "begin ${0:TARGET} end",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "begin ... end",
      "matches": {
        "beg": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "31a4841ce34638199604a914d5e0f839": {
      "content": "if err != nil {\n\treturn ${1:nil}, err\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err != nil { return [...], err }",
      "matches": {
        "errn,": true
      },
      "source": "gosnippets/snippets"
    },
    "31a7fe733ff9d35822a276d813b9c5b4": {
      "content": "var_export(${1}, true)",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inspect": true,
        "var_export": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "31b2c6b43a4f7b9974a2fc628b20e902": {
      "content": "<script charset=\"${1:UTF-8}\">\n${2:TARGET}\n</script>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scriptcharset": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "31ba35336732aa21393273195549213e": {
      "content": "_.split(${string}, ${separator}, ${limit})",
      "doc": "_.split('a-b-c', '-', 2);\n// => ['a', 'b']\n\nSplits `string` by `separator`.\n\n**Note:** This method is based on\n[`String#split`](https://mdn.io/String/split).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-split",
      "matches": {
        "lodash split": true
      },
      "source": "javascript/lodash"
    },
    "31c07d0fa530caf758ad369bc6e43170": {
      "content": "renderXml(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "renx": true
      },
      "source": "vim-snippets/snippets"
    },
    "31d4ec9dd11246889ad9f0b5ef758292": {
      "content": "${1:public} ${2:void} ${3}(${4})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m": true
      },
      "source": "vim-snippets/snippets"
    },
    "31d516bbdf3728ea91b8c8ea7ad3a407": {
      "content": "${1:import org.scalatest.Suite}\n${0:import org.scalatest.FunSuite}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scalatest": true
      },
      "source": "vim-snippets/snippets"
    },
    "31d6ed83138032eb6ba4471f710f3015": {
      "content": "PropTypes.node,",
      "doc": "Anything that can be rendered: numbers, strings, elements or an array",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeNode",
      "matches": {
        "ptnd": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "31d822e21188d8107b91417d6570eeac": {
      "content": "always_comb begin ${1:: statement_label}\n\t${0}\nend $1",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alc": true
      },
      "source": "vim-snippets/snippets"
    },
    "31db1adc7242ee61c3f024c70b5dd481": {
      "content": "mount { \"${1:destination path}\":\n\tensure\t=> ${2:mounted},\n\tdevice\t=> \"${0:device name or path}\",\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mount": true
      },
      "source": "vim-snippets/snippets"
    },
    "31df086c330381066d36de6c376c1c8d": {
      "content": "position: absolute",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "31e1c32f97a48ee1bc66a9f1ffd85071": {
      "content": "version(${1:/*version name*/})\n{\n\t${VISUAL}$2\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "version (version)",
      "matches": {
        "version": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "31f4ffaa085890eb3bb961fbe6e49a10": {
      "content": "<%= ${1:f}.submit \"${0:submit}\" %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffs": true
      },
      "source": "vim-snippets/snippets"
    },
    "31f74ca841ff4b10d714766d23b7313f": {
      "content": "each_line {|${1:#:variable}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each_line": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "31fc7efebfb3270a8e018d1024331179": {
      "content": "docs(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "docs conventional commit",
      "matches": {
        "docs": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "320af10852051a4f9f39565c30ad74e1": {
      "content": "${1:obj}.before('${2:Some text <b>and bold!</b>}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "before": true
      },
      "source": "snippets/javascript"
    },
    "320b00eeba2a0171750e991017b68514": {
      "content": "display: table-cell;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbc": true
      },
      "source": "vim-snippets/snippets"
    },
    "320e2bf740d2a03a96ee1cc6c2423570": {
      "content": "case $${1:variable} {\n\tdefault: { ${0} }\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "32123425ef43b1a163ecae1a1c74a265": {
      "content": "[${1:#:link}](mailto:${2:#:email})${3}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "[link](email)",
      "matches": {
        "linkemail": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "321e19744c04bd0af11c13fac38cc750": {
      "content": "border-fit: scale;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "3220c2422ff08c8482b4cfb997a12a9d": {
      "content": "${1:callbacks}.locked()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Clocked": true
      },
      "source": "snippets/coffee"
    },
    "3228849679beaee9a72b5fc3e3352359": {
      "content": "ellipse(${1:x}, ${2:y}, ${3:width}, ${0:height});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ellipse": true
      },
      "source": "vim-snippets/snippets"
    },
    "322909b895d0668d94365840211c69b8": {
      "content": "content counters(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:cs": true
      },
      "source": "vim-snippets/snippets"
    },
    "322c2920353b5f9cd1313234e2efbe78": {
      "content": "accepts_nested_attributes_for :${0:association}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ana": true
      },
      "source": "vim-snippets/snippets"
    },
    "322de02353bc7504fc00b3f350ddd0b4": {
      "content": "package ${1} is\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "package {NAME} is {...} end",
      "matches": {
        "package": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3231b52036c8b1c5aa47050d57b8c597": {
      "content": "nfc(${1:value}${2:, }${0:right});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nfc": true
      },
      "source": "vim-snippets/snippets"
    },
    "3232138507eea3f6f364f1d42a582824": {
      "content": "validates_uniqueness_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:must be unique}\", if: proc { |obj| ${6:obj.condition?} }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_uniqueness_of if (vuif)",
      "matches": {
        "vuif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "32389487a04ec0c889cddf6b8355d934": {
      "content": "$this->assertContainsOnlyInstancesOf(${1:Example}::class, ${2:$haystack});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertContainsOnlyInstancesOf(Example::class, $haystack)",
      "matches": {
        "asconoi": true
      },
      "source": "vim-snippets/snippets"
    },
    "323f024995df730ffca6db81a6d0701d": {
      "content": "const ${1:mixinName} = {\n\tmounted() {\n\t\tconsole.log('hello from mixin!')\n\t},\n}\nconst ${2:Component} = Vue.extend({\n\tmixins: [$1]\n})",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vmixin": true
      },
      "source": "vim-snippets/snippets"
    },
    "323f14e3e2c2c8eece008e22f1287122": {
      "content": "for (${2:i} = 0; i < ${1:n}; ${3:++i}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "for",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "3244c65b2f4a0cbba0d68c3b60efe3df": {
      "content": "{% capture ${1:variable} %}${0}{% endcapture %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "capture": true
      },
      "source": "vim-snippets/snippets"
    },
    "324761324e7c5896213f183b64cc7c91": {
      "content": "protected bool ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb|": true
      },
      "source": "vim-snippets/snippets"
    },
    "324bf62c76ff931558dc0b8b26ced027": {
      "content": "switch (${1:/* variable */}) {\n\tcase ${2:/* variable case */}:\n\t\t${3}\n\t\t${4:break;}${5}\n\tdefault:\n\t\t${6}\n}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "324c5ed206ef592aa577af2346bb8d1a": {
      "content": "$this->assertEquals(${1:$expected}, ${2:$actual});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertEquals($a, $b)",
      "matches": {
        "ase": true
      },
      "source": "vim-snippets/snippets"
    },
    "324f757ff5a74c74271a5fd2223d40cd": {
      "content": "PropTypes.exact({\n\t$0\n}).isRequired,",
      "doc": "An object with warnings on extra properties required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeExactRequired",
      "matches": {
        "ptexr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "32574bfd2eef61ecf319fb21beeb1fa5": {
      "content": "margin-top: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "margin-top": true,
        "mt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "326302aaf274c2efe19521a570410d1a": {
      "content": "__PACKAGE__->${1:package_method}(${0:var})",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pkgmv": true
      },
      "source": "vim-snippets/snippets"
    },
    "3265568061c2f4a7370632b4e140fafa": {
      "content": "padding 0",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "326702a64fdf6c204c59f366a8712280": {
      "content": "detect { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "det": true
      },
      "source": "vim-snippets/snippets"
    },
    "326aa27779ecb92c66385f870b806fb8": {
      "content": "(if (not ${1})\n\t(let (${2})\n\t\t${3})\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifnl": true
      },
      "source": "vim-snippets/snippets"
    },
    "327979d5052da3cf845e3024d0770649": {
      "content": "grid-column-end: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gce": true
      },
      "source": "vim-snippets/snippets"
    },
    "3279aea80834ee50892039f9d5b52145": {
      "content": "#!/usr/bin/env rdmd",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "32832044eb5d6f0d99a1cb099f8461bc": {
      "content": "${1:Class}.prototype.${2:method} = function(${3:arguments}) {\n\t${0}\n};",
      "doc": "prototype method",
      "filetype": "base",
      "grammar": "lsp",
      "label": "prototype-method",
      "matches": {
        "base prototype method": true
      },
      "source": "javascript/base"
    },
    "328aec28a1848bdcc5736faf0970e9e8": {
      "content": "<a name=\"${1}\">${2:TARGET}</a>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aname": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "328b7632fcaef42833e0b972f15bab8e": {
      "content": "after_save $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "after_save",
      "matches": {
        "afts": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "328e4e3cb2eb41c84dc4d18b1beb1356": {
      "content": "import thunk from 'redux-thunk'",
      "doc": "Import thunk from redux-thunk",
      "filetype": "redux-thunk",
      "grammar": "lsp",
      "label": "redux-thunk-import",
      "matches": {
        "redux-thunk import": true
      },
      "source": "javascript/redux-thunk"
    },
    "32901245a50dd92de873a8eb72205fd2": {
      "content": "_.fromPairs(${pairs})",
      "doc": "_.fromPairs([['a', 1], ['b', 2]]);\n// => { 'a': 1, 'b': 2 }\n\nThe inverse of `_.toPairs`; this method returns an object composed\nfrom key-value `pairs`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-frompairs",
      "matches": {
        "lodash frompairs": true
      },
      "source": "javascript/lodash"
    },
    "329289ceec6831aca23fdcff82944289": {
      "content": "\\\\item[${1:description}] ${0:item}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "description \\item",
      "matches": {
        "itd": true
      },
      "source": "vim-snippets/snippets"
    },
    "32a035a60396cbcc13809425b7e2d1de": {
      "content": "expect($1).toHaveLength($0);",
      "doc": "expects the object to have length",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tohavelength",
      "matches": {
        "jest expect tohavelength": true,
        "thl": true
      },
      "source": "javascript/jest"
    },
    "32a6d03310fa09644949ea00027a650c": {
      "content": "console.info(${1:object})",
      "doc": "Displays a message in the console but also displays a blue information icon along with the logged message",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleInfo",
      "matches": {
        "cin": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "32a7f92013297f4a9fe1274c7d6b4b2f": {
      "content": "void main(string[] args)\n{\n\t${VISUAL}${0: /*code*/}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "Main",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "32ad981c8465672c1a71599dbf67f775": {
      "content": "grid-gap: ${1} ${2};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gg+": true
      },
      "source": "vim-snippets/snippets"
    },
    "32afedea299bd8e4663391ff419cd3b9": {
      "content": "_.remove(${array}, ${predicate})",
      "doc": "var array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n\nconsole.log(array);\n// => [1, 3]\n\nconsole.log(evens);\n// => [2, 4]\n\nRemoves all elements from `array` that `predicate` returns truthy for\nand returns an array of the removed elements. The predicate is invoked\nwith three arguments: (value, index, array).\n\n**Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\nto pull elements from an array by value.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-remove",
      "matches": {
        "lodash remove": true
      },
      "source": "javascript/lodash"
    },
    "32b293f14b9c459ddd4e4e5297989f8d": {
      "content": "import { Injectable } from '@angular/core';\nimport {\n  EntityCollectionServiceBase,\n  EntityCollectionServiceElementsFactory\n} from '@ngrx/data';\nimport { ${1:Model} } from '${2:../core}';\n\n@Injectable({ providedIn: ${3:'root'} })\nexport class ${1:Model}Service extends EntityCollectionServiceBase<${1:Model}> {\n  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {\n    super('${1:Model}', serviceElementsFactory);\n  }\n}",
      "doc": "NgRx Data Entity Collection Data Service",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "NgRx Data Entity Collection Data Service",
      "matches": {
        "a-ngrx-data-entity-collection-data-service": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "32b58a24b2225053733c797ac87a1656": {
      "content": "c(${0:items})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "c": true
      },
      "source": "vim-snippets/snippets"
    },
    "32b622af4b03a29216ec7e61782d3a98": {
      "content": "validates_confirmation_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:should match confirmation}\", if: proc { |obj| ${5:obj.condition?} }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_confirmation_of if (vcif)",
      "matches": {
        "vcif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "32c47ceabf336cfe2f77a699553cfe34": {
      "content": "font-emphasize-style disc",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:ds": true
      },
      "source": "vim-snippets/snippets"
    },
    "32ca40c150b51e0feb021229b9eff299": {
      "content": "else begin\n\t${0}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "32d16553b3f58a3cbe326a92afd7b5b0": {
      "content": "$.ajaxPrefilter (${1:options}, ${2:originalOptions}, jqXHR) ->\n\t${0: // Modify options, control originalOptions, store jqXHR, etc}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxprefilter": true
      },
      "source": "snippets/coffee"
    },
    "32d6d7143ab513f235520de44c06158c": {
      "content": "type ${1} = ${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "32d7bc281f76931e2b898134837f2867": {
      "content": "<form action=\"${1}\" method=\"${2:post}\">\n\t${0}\n</form>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "form": true
      },
      "source": "vim-snippets/snippets"
    },
    "32e7f7d0c46700a5642f9dfad56654bb": {
      "content": "border-bottom-left-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbli:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "32e912994ee9ef4ea05e61e539214789": {
      "content": "echo CHtml::asset('${0:path}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhass": true
      },
      "source": "vim-snippets/snippets"
    },
    "32eaaf7321781b453db9f89499aaa2f1": {
      "content": "if ${1:condition}:\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "32ebebfdc446a2409a6c2903a262ee65": {
      "content": "${1:map}.with_options ${2:controller}: '${3:thing}' do |$3|\n\t${0}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapwo": true
      },
      "source": "vim-snippets/snippets"
    },
    "32f9cab7363259df2e300e0f5cfdf2df": {
      "content": "font-style: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "330c54d62e8984c125c699dbbb6a7214": {
      "content": "box-shadow: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh": true
      },
      "source": "vim-snippets/snippets"
    },
    "330f4c5de8584bf813af0fa01ead3e98": {
      "content": "print_r(${0}, 1);",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prs": true
      },
      "source": "vim-snippets/snippets"
    },
    "3311e32ac4779bd82218fe6399ec0a57": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"sass\" scoped>\n\n</style>",
      "doc": "Base for Vue File with PostCSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component with SASS",
      "matches": {
        "vbase-sass": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "331ffdcdb41daad0f07cef545f89eec1": {
      "content": "(cond\n\t[(${1}) ${2}]\n\t[else ${0}])",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "conde": true
      },
      "source": "vim-snippets/snippets"
    },
    "33202d022a660b65f721f659f8ae9236": {
      "content": "if __name__ == '__main__':\n\t${0:main()}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifmain": true
      },
      "source": "vim-snippets/snippets"
    },
    "3327e4b70079ba4eb4a4a01f761d3a05": {
      "content": "${1} Send ${2} to ${1}, if ${1} supports it}${3}\nif ([${1:self} respondsToSelector:@selector(${2:someSelector:})])\n{\n    [${1} ${3}];\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "res": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "332f16bacef9acc51b5e36981e6c36b3": {
      "content": "delay(${1});",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dl": true
      },
      "source": "vim-snippets/snippets"
    },
    "333278b902da6e015532873917ed6f75": {
      "content": "[${1}](${2}){\n\t${3}\n};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lld": true
      },
      "source": "vim-snippets/snippets"
    },
    "3333d4678f032a253c34a7fd61ccc532": {
      "content": "{% blocktrans %}\n    ${VISUAL}\n{% endblocktrans %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blocktrans": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3333e0e6c3cd842bf7387d4ebdc07624": {
      "content": "<ol type=\"A\">${1:TARGET}</ol>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "olA": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "33340f9b50fca77c56b223c9dcc62071": {
      "content": "import { mapState } from 'vuex';\n\nexport default {\n\tcomputed: {\n\t\t...mapState([\n\t\t\t${1:'nameOfState'},\n\t\t])\n\t},\n};",
      "doc": "map getters inside a vue component",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue MapState",
      "matches": {
        "vmapstate": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "3335bf5d13ca4976a879bf5bf85665af": {
      "content": "elif ${1:condition}:\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ei": true
      },
      "source": "vim-snippets/snippets"
    },
    "334ce40c40a85644fcc443971be8f553": {
      "content": "emissive(${1:value1}, ${2:value2}, ${0:value3});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "emissive": true
      },
      "source": "vim-snippets/snippets"
    },
    "334ee2d95f610c5a0d0e1a8448b8f0fe": {
      "content": "for (${1:Class} *${2:some$1} in ${3:array}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forin": true
      },
      "source": "vim-snippets/snippets"
    },
    "33506add506a57556509a84b4cce4016": {
      "content": "<style lang=\"scss\">\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with scss",
      "matches": {
        "style_with_scss": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3367675b36b75190e07d67f5be5f46ba": {
      "content": "/**\n * ${1:description}\n *\n * @${0}\n */\n${2:protected} $${3:foo};\npublic function get${4:$3}()\n{\n\treturn $this->$3;\n}\npublic function set$4(${5:$4 }$${6:$3})\n{\n\t$this->$3 = $$6;\n\treturn $this;\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ags": true
      },
      "source": "vim-snippets/snippets"
    },
    "336a6ccedb426db83a665b4c36d2e527": {
      "content": "{% set ${1:#:var} %}\n\t${0:TARGET}\n{% endset %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% set ... %} ... {% endset %}",
      "matches": {
        "setblock": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "337da8123db93cbe24e124dca9aa1a2f": {
      "content": "grid-gap: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gg": true
      },
      "source": "vim-snippets/snippets"
    },
    "337db5eb022db11264c565316c65b12e": {
      "content": "${1:map}.catch_all \"*${2:anything}\", controller: \"${3:default}\", action: \"${4:error}\"\n",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "map.catch_all",
      "matches": {
        "mapca": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "337e295ca7168c9a4965fb13534f10a0": {
      "content": "<form class=\"${1}\" action=\"${2}\" method=\"${3:post}\">\n\t${0}\n</form>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "form.": true
      },
      "source": "vim-snippets/snippets"
    },
    "3388e43cb6f35d219bcaeed731df3dc1": {
      "content": "<!--${1:TARGET}-->${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comment": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "338ce2ba972268fddcc25f10cb326e94": {
      "content": "each_with_index {|${1:#:variable}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each_with_index": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "338d0579c3e9870d5cca240307c53226": {
      "content": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
      "doc": "Basic render.",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-component-render",
      "matches": {
        "react component render": true,
        "ren": true
      },
      "source": "javascript/react"
    },
    "338eaed670c9ca452e8aa448961d78bc": {
      "content": "include ${1:classname}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc": true
      },
      "source": "vim-snippets/snippets"
    },
    "3399160fbd38349b2c38a33325535cbd": {
      "content": "constructor(${1:params}) {\n\t${0}\n}",
      "doc": "Add default constructor in a class in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "constructor",
      "matches": {
        "con": true
      },
      "source": "vscode-javascript/snippets"
    },
    "339bb519adbee0aef292feca580cf8c7": {
      "content": "<${1:}>\n\t${2}\n</$1>",
      "doc": "",
      "filetype": "xml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "339e785262fc8572733fef27359ce870": {
      "content": "arr",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "Array",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "339eb8943b1728ad82724b53de896abe": {
      "content": "const ${1:ref} = useRef(${2:initialValue})",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useRef",
      "matches": {
        "useRef": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "33a22df20ad8907625bfd076f05fe25e": {
      "content": "${1:FIELDNAME} = models.IntegerField(${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "int": true
      },
      "source": "vim-snippets/snippets"
    },
    "33a6df7c92cbf7815578a9f65afde2d2": {
      "content": "watch(() => ${1:foo}, (newValue, oldValue) => {\n\t${2}\n})",
      "doc": "Vue Composition api - watcher single source",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Composition API - watch - single source",
      "matches": {
        "v3watch": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "33b826ed80736fd573bc6bdfde287be6": {
      "content": "try {\n    ${1:#:TARGET}\n} catch (${2:...}) {\n    ${3}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "try catch",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "33bbedc32b1725a38b4df8b004a733d7": {
      "content": "margin: ${1:20px} ${2:0px} ${3:40px} ${4:0px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "margin: T R B L (margin)",
      "matches": {
        "margin": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "33c1fd3889b502677337b3c6480b76a8": {
      "content": "accept ${1}(${2}) do\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "accept",
      "matches": {
        "acc": true
      },
      "source": "vim-snippets/snippets"
    },
    "33c23d57252e6984990f052f706d3e43": {
      "content": "| remove: '${1:string}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "remove": true
      },
      "source": "vim-snippets/snippets"
    },
    "33ce54afe15e826128389bceacb4e59e": {
      "content": "list-style: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list-style": true,
        "ls": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "33d1364a4c8807bec4d46ad950e07f66": {
      "content": "redirect_to",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to",
      "matches": {
        "re": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "33d2e24c8fb055edee7f771bc060aa33": {
      "content": "_.flatMapDepth(${collection}, ${iteratee}, ${depth})",
      "doc": "function duplicate(n) {\n  return [[[n, n]]];\n}\n\n_.flatMapDepth([1, 2], duplicate, 2);\n// => [[1, 1], [2, 2]]\n\nThis method is like `_.flatMap` except that it recursively flattens the\nmapped results up to `depth` times.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-flatmapdepth",
      "matches": {
        "lodash flatmapdepth": true
      },
      "source": "javascript/lodash"
    },
    "33daf6a80238668d43178706b5a62532": {
      "content": "PropTypes.any.isRequired,",
      "doc": "Any prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeAnyRequired",
      "matches": {
        "ptanr": true
      },
      "source": "vscode-react/snippets"
    },
    "33e18fe72a69cd2cb049da57ca2ca126": {
      "content": "{{- range $key, $value := .Values.udp }}\n  - name: \"{{ $key }}-udp\"\n\tport: {{ $key }}\n\tprotocol: UDP\n\ttargetPort: \"{{ $key }}-udp\"\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "portUDP_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "33e3c5cdef7003b261abbdfaa235f964": {
      "content": "setImmediate(() => {\n\t${0}\n});",
      "doc": "setImmediate",
      "filetype": "base",
      "grammar": "lsp",
      "label": "setimmediate",
      "matches": {
        "base set immediate": true
      },
      "source": "javascript/base"
    },
    "33ee1f5ec9ae0299d836bce000a36d84": {
      "content": "key = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "key": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "33f4e1a166888f008fa4c9cdf1b7c240": {
      "content": "${1:FIELDNAME} = models.IPAddressField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "IPAddressField",
      "matches": {
        "mip": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3402971efb82812b9df5c2b15f937508": {
      "content": "-include(\"${1:file}\").",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc": true
      },
      "source": "vim-snippets/snippets"
    },
    "34064ec89ede136b0d4ab41dc846d99d": {
      "content": "text-outline none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "to:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "3414a1110f81aa6688b578065697326c": {
      "content": "unsigned int\t${1:object}Count = [${2:array} count];\nfor(unsigned int index = 0; index < ${1}Count; index += 1)\n{\n\t${3:id}\t${1} = [${2} objectAtIndex:index];\n\t${0}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forarray": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "341d11f17d5637958db9029ca8728058": {
      "content": "import { ${1:Observable} } from 'rxjs';\n$0",
      "doc": "RxJs import",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "rxjs-import",
      "matches": {
        "a-rxjs-import": true,
        "angular import rx js": true
      },
      "source": "javascript/angular"
    },
    "3433b4b50035b50fc7e486350337c389": {
      "content": "<% if ${1} %>\n\t${0:${VISUAL}}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "343588b0c0ff4d4db88633a7e7f28509": {
      "content": "border-width: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdw": true
      },
      "source": "vim-snippets/snippets"
    },
    "344b2d567851de2910dcffa4b6347ffa": {
      "content": "\\cite{${1}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\cite": true,
        "cite": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "344ca03633f0383cd2efa39954d08e35": {
      "content": "import { Component } from '@angular/core';\n\n@Component({\n\tselector: '${1:prefix-app}',\n\ttemplate: `\n\t\t<router-outlet></router-outlet>\n\t\t`\n})\nexport class ${2:App}Component { }\n$0",
      "doc": "Angular App root component",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-root-component",
      "matches": {
        "a-component-root": true,
        "angular root component": true
      },
      "source": "javascript/angular"
    },
    "344d44cf9a71ea3543491a00459e6fd8": {
      "content": "{% macro ${1:name}(${2:args}) %}\n\t$3\n{% endmacro %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "macro",
      "matches": {
        "macro": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "345069098507fe3c642d73872b4c2c59": {
      "content": "{% requireLogin %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig requirelogin",
      "matches": {
        "requirelogin": true
      },
      "source": "vim-snippets/snippets"
    },
    "3466d35b9d127d107e0d69b14f81c181": {
      "content": "<nuxt-link to=\"$1\">$2</nuxt-link>$0",
      "doc": "",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-linkto",
      "matches": {
        "nuxt linkto": true
      },
      "source": "javascript/nuxt"
    },
    "3477081840e2dfc208f6e4ea4908d13a": {
      "content": "text-transform none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "347f6c0d9315398dd1b5721cb61c1805": {
      "content": "process (${1:clk}, ${2:nrst})\nbegin\n\tif ($2 = '${3:0}') then\n\t\t${4}\n\telsif rising_edge($1) then\n\t\t${5}\n\tend if;\nend process;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prcr": true
      },
      "source": "vim-snippets/snippets"
    },
    "3483d9efdc487ee23a4949cc8295a300": {
      "content": "else if (${1:#:condition}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "else if () {}",
      "matches": {
        "elif": true,
        "elseif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "34866122d68f1b8144ece73b8c3bfa7f": {
      "content": "default :\n\t${1}\nbreak;",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "default": true
      },
      "source": "vim-snippets/snippets"
    },
    "348bb6df1830b0d83b54d10e0012bf0f": {
      "content": "do {\n\t${1}\n} while(${2});",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dowh": true
      },
      "source": "vim-snippets/snippets"
    },
    "34a461098620fbf01a3e272d443d4ff2": {
      "content": "mixed.validate()",
      "doc": "mixed.validate(value: any, options?: object): Promise<any, ValidationError>\n\nReturns the value (a cast value if isStrict is false) if the value is valid, and returns the errors otherwise.\nThis method is asynchronous and returns a Promise object, that is fulfilled with the value, or rejected\nwith a ValidationError.The options argument is an object hash containing any schema options you may want to override\n(or specify for the first time).Options = {\n  strict: boolean = false;\n  abortEarly: boolean = true;\n  stripUnknown: boolean = false;\n  recursive: boolean = true;\n  context?: object;\n}\n\nstrict: only validate the input, and skip and coercion or transformation\nabortEarly: return from validation methods on the first error rather\nthan after all validations run.\nstripUnknown: remove unspecified keys from objects.\nrecursive: when false validations will not descend into nested schema\n(relevant for objects or arrays).\ncontext: any context needed for validating schema conditions (see: when())\nschema.validate({ name: \"jimmy\", age: 24 }).then(function(value) {\n  value; // => { name: 'jimmy',age: 24 }\n});\n\nschema.validate({ name: \"jimmy\", age: \"hi\" }).catch(function(err) {\n  err.name; // => 'ValidationError'\n  err.errors; // => ['age must be a number']\n});\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-validate",
      "matches": {
        "yup mixed validate": true
      },
      "source": "javascript/yup"
    },
    "34b07b4e24548f75bfcb6dc77977ccb9": {
      "content": "<%= link \"${1:Submit}\", to: ${2:\"/users\"}, method: ${3::delete} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "link",
      "matches": {
        "lin": true
      },
      "source": "vim-snippets/snippets"
    },
    "34b17d1d9248370bbb0f6ac99db691a5": {
      "content": "resize vertical",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "34bd1aed3f7ad64e46c8e07167771dd8": {
      "content": "place-content: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc": true
      },
      "source": "vim-snippets/snippets"
    },
    "34c0bbeae0de26d800c352baa883dfa5": {
      "content": "border-style: double;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:db": true
      },
      "source": "vim-snippets/snippets"
    },
    "34c6e848548f1fd0605d054794cd626d": {
      "content": "place-content: space-between;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "34c8d48036c69db0cb66b5e42bb42462": {
      "content": "<span id=\"${1}\">${0}</span>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "span#": true
      },
      "source": "vim-snippets/snippets"
    },
    "34cac5584d7343d991f21a7b3e65d602": {
      "content": "belongs_to",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "belongs_to",
      "matches": {
        "bt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "34cb80c52fe140ec0f16233931225606": {
      "content": "loess(${1:yCol} ~ {2:xCol}, data = ${3:data}, subset = ${4:subset}, weights = ${5:weights}, span = ${6:span},\ndegree = ${7:degree}, na.action = {8:na.action})",
      "doc": "Local polynomial regression",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "loess",
      "matches": {
        "loess": true
      },
      "source": "vscode-R/snippets"
    },
    "34d1c6baf1d1df8f58cbd7559a6c144e": {
      "content": "${1:app}.put('${2:route}', ${3:handler});",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eput": true
      },
      "source": "snippets/javascript"
    },
    "34d28814b4d75975ee3e66685aa7f188": {
      "content": "= render :partial => \"${1:item}\", :object => ${0:@$1}",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rpo": true
      },
      "source": "vim-snippets/snippets"
    },
    "34d2d096daf9b1cf280bbae9799077b6": {
      "content": "before_validation_on_create $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "before_validation_on_create",
      "matches": {
        "befvoc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "34d35b678388f5982b2d725eac96a9da": {
      "content": "grid-gap: 0",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gg:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "34e022b51a9e2906cdb78da93ab4ed8a": {
      "content": "continue",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "continue",
      "matches": {
        "cn": true
      },
      "source": "vim-snippets/snippets"
    },
    "34e68d656e17f38514662a05a0c07632": {
      "content": "__import__('wdb').set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wdb": true
      },
      "source": "vim-snippets/snippets"
    },
    "34f97907e074a367edd7a3e35f0756f8": {
      "content": "${1:void} ${2:function_name}(${3})\n{\n\t${4}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "34fcd0ce842935687314ba8e875cf8db": {
      "content": "fisher.test(${1:x}, ${0:y})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fis": true
      },
      "source": "vim-snippets/snippets"
    },
    "350374acd3eef012ba2163aaaebeb1df": {
      "content": "find do |${1:e}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "find": true
      },
      "source": "vim-snippets/snippets"
    },
    "350d68cca869fc177b6cd639e0fb6b8d": {
      "content": "def ${1:name} do\n  ${2:TARGET}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "def .. do .. end",
      "matches": {
        "def": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3515b02245eebd4c5a00a64b84d31a42": {
      "content": "$this->db->delete(\"${1:table}\", \"${2:where}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_db-delete": true
      },
      "source": "vim-snippets/snippets"
    },
    "351bfdee77f7509b4952d44518dcd403": {
      "content": "float none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "351c641c8facdd6e1de9def72717e1cd": {
      "content": "-webkit-border-radius: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrz:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "35232ca82a5d3a278c88e6c4e1989488": {
      "content": "${1:FIELDNAME} = models.TextField(${0:blank=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "text": true
      },
      "source": "vim-snippets/snippets"
    },
    "35256d12e7f21f53e66922db8a7d6022": {
      "content": "std::map<${1:Key}, ${2:T}> ${3};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/snippets"
    },
    "352642f96543330782ecfa921ea2a235": {
      "content": "validates :${1:attribute}, length: { in: ${2:3}..${0:20} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vl": true
      },
      "source": "vim-snippets/snippets"
    },
    "352ade45d580c13f2fbac0b87b8474c7": {
      "content": "${1:obj}.toggle('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "togsh": true
      },
      "source": "snippets/javascript"
    },
    "353b0e7afa86c978db6d9673bb3d08e6": {
      "content": "<input v-model.number=\"${1:numData}\" type=\"number\" step=\"1\" />",
      "doc": "v-model directive number input",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue v-model Number Directive",
      "matches": {
        "vmodel-num": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "353c631a314c6061dc33e11ef3ae45eb": {
      "content": "if ${1:condition} then ${2:value} else ${3:other}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifte": true
      },
      "source": "vim-snippets/snippets"
    },
    "35436c759050fcefc83951ab2d4ab6ce": {
      "content": "namespace ${1:#:Name} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "namespace {}",
      "matches": {
        "name": true,
        "namespace": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "354fe71abd41ae4916e900389975dc2e": {
      "content": "#if ${1}\n${0}\n#endif",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3554eb5dd2e74eab2b2f7cf73e9b260e": {
      "content": "echo CHtml::imageButton('${1:src}',array('${2:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhimgb": true
      },
      "source": "vim-snippets/snippets"
    },
    "3558178254e4a5f29aee6d4e951ee03f": {
      "content": "continue",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "continue",
      "matches": {
        "cn": true
      },
      "source": "gosnippets/snippets"
    },
    "356b8dd377ef680fbbda490f78cb0b77": {
      "content": "Set<${1:Object}> ${2:set} = new HashSet<$1>();${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d.hs": true
      },
      "source": "vim-snippets/snippets"
    },
    "356c8c9f351027f4fc304861d0a24bed": {
      "content": "include_once '${1:#:file}';${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inco": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "357e6edd9a8e806e8a04ce0988e467e6": {
      "content": "flex-basis: ${0:auto};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxb": true
      },
      "source": "vim-snippets/snippets"
    },
    "358123acba7655b2624d894f697d9be4": {
      "content": "t.${1:string} :${2:title}${3:, null: false}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mnc": true
      },
      "source": "vim-snippets/snippets"
    },
    "3583a4e6ebfdd5c4a1c8216db55e33c1": {
      "content": "<area shape=\"rect\" coords=\"${1}\" href=\"${2}\" alt=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "area:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "35897820a9843064512091edc9254d6b": {
      "content": "${fn:trim(${0:string})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trim": true
      },
      "source": "vim-snippets/snippets"
    },
    "358e99c8c89028280396c5acaa82fe89": {
      "content": "import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "import-react-memo-prop-types",
      "matches": {
        "imrmp": true,
        "react import memo proptypes": true
      },
      "source": "javascript/react"
    },
    "359523144f37c701f7f00fc5f5ffde1b": {
      "content": "fallthrough",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fallthrough",
      "matches": {
        "ft": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "3596b704473557f77409d1e98f6eed2e": {
      "content": "\\frac{${1}}{${2}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\frac": true,
        "frac \\frac{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "359a4f7e1e9f5071fa217ee9fc9d481e": {
      "content": "useMemo(() => ${1:function}, ${2:input})",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useMemo",
      "matches": {
        "useMemo": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "359c29e164f20b4ef2bad9645e2847f3": {
      "content": "mailto:${1:alice@example.com}[${2:Alice}]${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "mailto link",
      "matches": {
        "mailto": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "359db7b8e46b5be4efbee5d6cc73b6b9": {
      "content": "[routerLink]=\"['/${1:routePath}']\" routerLinkActive=\"${2:router-link-active}\" $0",
      "doc": "Angular routerLink",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrouterlink",
      "matches": {
        "a-routerlink": true,
        "angular ng router link": true
      },
      "source": "javascript/angular"
    },
    "359f098e843ef09c460dd345fb2d9d98": {
      "content": "$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$retVal = (condition) ? a : b",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "35a6a937788461a5bf60081cea3d86c4": {
      "content": "#!/usr/bin/env python3",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "35b0be95bd0ccb6cf6e5cd9abaf42a00": {
      "content": "watchEffect(() => {\n\t${1}\n})",
      "doc": "Run a function immediately while reactively tracking its dependencies, and re-run it whenever the dependencies have changed.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v3watcheffect",
      "matches": {
        "vue v3 watcheffect": true
      },
      "source": "javascript/vue"
    },
    "35bc99baa4609d20c54693485f1d565a": {
      "content": "Run Keyword If Any Tests Failed    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword If Any Tests Failed",
      "matches": {
        "rkiatf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "35ccb428f3d8dd1dd17bf976b7f805a9": {
      "content": "_.flattenDepth(${array}, ${depth})",
      "doc": "var array = [1, [2, [3, [4]], 5]];\n\n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n\n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]\n\nRecursively flatten `array` up to `depth` times.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-flattendepth",
      "matches": {
        "lodash flattendepth": true
      },
      "source": "javascript/lodash"
    },
    "35d08fdeae0275b252bc6fc48e745de5": {
      "content": "{ path: '${1:path}', component: ${2:Name}Component },",
      "doc": "Angular eager route path",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-eager-route-path",
      "matches": {
        "a-route-path-eager": true,
        "angular eager route path": true
      },
      "source": "javascript/angular"
    },
    "35d6876f1e7484e31cc2b0594ca70f9b": {
      "content": "\\\\citep{${1}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\citep",
      "matches": {
        "citep": true
      },
      "source": "vim-snippets/snippets"
    },
    "35da71ebf4175710cd04a366a27569a1": {
      "content": "<#local\n\t${1:variable_name} = ${0:value${VISUAL}}\n/>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#local <#-- multiple lines --> />",
      "matches": {
        "locm": true
      },
      "source": "vim-snippets/snippets"
    },
    "35de0ae1b9da0af813c625d968cf07fe": {
      "content": "${1}defined('${2}')${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "35e3546e0a916a6717d2be25c5dd69e7": {
      "content": "_.sortedIndexOf(${array}, ${value})",
      "doc": "_.sortedIndexOf([4, 5, 5, 5, 6], 5);\n// => 1\n\nThis method is like `_.indexOf` except that it performs a binary\nsearch on a sorted `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sortedindexof",
      "matches": {
        "lodash sortedindexof": true
      },
      "source": "javascript/lodash"
    },
    "35e974303f4830a9d92e2da56f7169ba": {
      "content": "beforeMount () {\n\t${0};\n},",
      "doc": "beforeMount lifecycle method",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle beforeMount",
      "matches": {
        "vbeforemount": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "35f0d7dbb88f26b37a77316b5c79d463": {
      "content": "${1:obj}.load('${2:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\tfunction (responseText, textStatus, xhr) {\n\t\t${0:// success callback}\n\t}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loadf": true
      },
      "source": "snippets/javascript"
    },
    "35f5bc6c818f0dd5cb2fff3ba20132d2": {
      "content": "${1:funname} <- \t\t\t# ${2:}\n\tfunction\n(\n \t${3:}\n)\n{\n  ${4:}\n}",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "36017a4690decd396981e5696c91b485": {
      "content": "letter-spacing: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lts": true
      },
      "source": "vim-snippets/snippets"
    },
    "3604ac316064d9ee362687b47d9efda6": {
      "content": "_.sortedIndex(${array}, ${value})",
      "doc": "_.sortedIndex([30, 50], 40);\n// => 1\n\nUses a binary search to determine the lowest index at which `value`\nshould be inserted into `array` in order to maintain its sort order.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sortedindex",
      "matches": {
        "lodash sortedindex": true
      },
      "source": "javascript/lodash"
    },
    "3605cfe965f0920ae0a5cf6eb7e2818d": {
      "content": "signal ${1} : std_logic_vector (${2} downto 0);",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sv": true
      },
      "source": "vim-snippets/snippets"
    },
    "3609ff52cc386b9f11c210efca382525": {
      "content": "// Don't FUCKING touch this.",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "idfk": true
      },
      "source": "vim-snippets/snippets"
    },
    "360a61f3379e5f77ed47629e1d57947c": {
      "content": "when others => ${1};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "when others",
      "matches": {
        "wheo": true
      },
      "source": "vim-snippets/snippets"
    },
    "3620623e362ff3dc8774455bb4c434e9": {
      "content": "#ifndef $1\n#define ${1:SYMBOL} ${2:value}\n#endif /* ifndef $1 */",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ndef": true
      },
      "source": "vim-snippets/snippets"
    },
    "362e58214e3fabfb132a7cf758fda81c": {
      "content": "${1:model/screen}${2:X}(${3:x}, ${4:y}, ${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "coord": true
      },
      "source": "vim-snippets/snippets"
    },
    "363d50c7498d98af01161957e2685f61": {
      "content": "@moduledoc ~S\"\"\"\n${0}\n\"\"\"",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mdocs": true
      },
      "source": "vim-snippets/snippets"
    },
    "363d97cc54ffbbee9c989672850b5466": {
      "content": "for ${1:key}, ${2:value} of ${3:object}\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "foro": true
      },
      "source": "snippets/coffee"
    },
    "364b37829d49fa6dbeacf34c62a31ddd": {
      "content": "(${1:#:Args}) => { ${0:#:TARGET} }",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "() => {}",
      "matches": {
        "arrow-function": true,
        "function-arrow": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "365272edac141f14311d3bf829199c6a": {
      "content": "switch ${1:object}\n\twhen ${2:value}\n\t\t${3:# body...}\n\telse\n\t\t$0",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Switch",
      "matches": {
        "swi": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "36534c043c635183b4b3c4500f624556": {
      "content": "(def ${0})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "3654eddceed3feadf4128efbed59a023": {
      "content": "${1:obj}.prepend('${2:Some text <b>and bold!</b>}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prepend": true
      },
      "source": "snippets/javascript"
    },
    "3658b0d46e7d6d20abfda6f315363b21": {
      "content": "composed_of",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "composed_of",
      "matches": {
        "co": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3663eec8101476ba8effc2cfb6cbb09e": {
      "content": "text-emphasis before",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "366b66cf5184ae04850bd5b335887ef8": {
      "content": "else\n\t${0}",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "else",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "36728523423de292aa437068cf78170a": {
      "content": "Require all granted",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "require": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "36803414fd7648a8b117b35f896d14d4": {
      "content": "${1:obj}.pushStack(${2:elements})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pushstack": true
      },
      "source": "snippets/coffee"
    },
    "36842843d8399466e5e77031da0095da": {
      "content": "import ${1:defaultMember}, { ${2:MEMBERS} } from \"${0:TARGET}\";",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "import defaultMember, { member, ... } from \"module-name\";",
      "matches": {
        "import-default-member": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3698258efc2acc1d05212015bca7432e": {
      "content": "echo \"${0:TARGET}\" 1>&2\nexit 1",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "abort": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "36ae2e5167993e4ac9ede82275baf207": {
      "content": "list-style-type: circle",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "36b0553f9b3dc5885023408ce3760998": {
      "content": "reg [${1}:${2:0}] ${3:name} [${4:0}:${5}];${6:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "reg [] name []",
      "matches": {
        "regm": true,
        "regmemory": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "36b1d089929cc66a0cb26258dfe29c5b": {
      "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}\n",
      "doc": "Creates a React Arrow Function Component with ES7 module system with PropTypes",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-arrow-function-component-proptypes",
      "matches": {
        "rafcp": true,
        "react component arrow function proptypes": true
      },
      "source": "javascript/react"
    },
    "36bd5ed6c74fb7685ae740b09635e32f": {
      "content": "scope(failure) ${1}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scf": true
      },
      "source": "vim-snippets/snippets"
    },
    "36d72117e1e3fbce9f7aa258384e6594": {
      "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "docxf": true
      },
      "source": "vim-snippets/snippets"
    },
    "36d8950b4f7461997bb65500892f4d35": {
      "content": "justify-content end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "36e09d4a32e07925af8fb8161e12b055": {
      "content": "describe '${1:description}', ->\n\t$0",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Describe (coffee)",
      "matches": {
        "des": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "36e220a4d4224cb94bca3f5a8b004446": {
      "content": "align-content: start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "36e221dcc9741e2077893ffb67daaea0": {
      "content": "<div [ngSwitch]=\"${1:conditionExpression}\">\n\t<div *ngSwitchCase=\"${2:expression}\">${3:output}</div>\n\t<div *ngSwitchDefault>${4:output2}</div>\n</div>",
      "doc": "Angular ngSwitch",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngswitch",
      "matches": {
        "a-ngswitch": true,
        "angular ng switch": true
      },
      "source": "javascript/angular"
    },
    "36e238d3d4d3abc13836541d8a17f8ee": {
      "content": "border-right-style: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "border-right-style": true,
        "brs": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "36e2e4db8bba1b6379491f5c27d4570f": {
      "content": "white-space pre-wrap",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:pw": true
      },
      "source": "vim-snippets/snippets"
    },
    "36edd475d1b5c8d4b773f31e8da970aa": {
      "content": "import React, { ReactElement } from 'react'\n\ninterface Props {\n\t\n}\n\nfunction ${1:${TM_FILENAME_BASE}}({}: Props): ReactElement {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React Functional Component with ES7 module system and TypeScript interface",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typeScriptReactFunctionalExportComponent",
      "matches": {
        "tsrfce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "36f6fc85301c5dc129ad84cb21ec27bb": {
      "content": "| url_param_escape",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "url_param_escape": true
      },
      "source": "vim-snippets/snippets"
    },
    "36f9cabf7aec0fc8ca159394ebfc850e": {
      "content": "require 'ruby-debug'; debugger",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "debug18": true
      },
      "source": "vim-snippets/snippets"
    },
    "3709fad016413eebc1bbbf4180b67b35": {
      "content": "<%= ${1} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "=": true
      },
      "source": "vim-snippets/snippets"
    },
    "370e4e21322ce53e5a9ca0d46018a1fc": {
      "content": "font-stretch: extra-condensed",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:ec": true
      },
      "source": "vim-snippets/snippets"
    },
    "37146a7c36cd024392d680e2caec191f": {
      "content": "componentWillReceiveProps: (nextProps) ->\n\t$1",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define componentWillReceiveProps",
      "matches": {
        "componentWillReceiveProps": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3719943d73552a52cdd009f7cb9ea1ee": {
      "content": "apiVersion: v1\nkind: Service\nmetadata:\n{{- if .Values.$1.service.annotations }}\n  annotations:\n{{ toYaml .Values.$1.service.annotations | indent 4 }}\n{{- end }}\n  labels:\n{{- if .Values.$1.service.labels }}\n{{ toYaml .Values.$1.service.labels | indent 4 }}\n{{- end }}\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n  name: {{ template \"${2:chartName}.${1:value_key}.fullname\" . }}\n# spec\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "service_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "3719d0a5584a497858582fbdd365010e": {
      "content": "module ${1:(* Name *)} : ${2:(* SIG *)} = struct\n\t${3:(* BODY *)}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "module with signature",
      "matches": {
        "Mod": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3731311cb333b072c9ce8fb1a5a7a60e": {
      "content": "Options ${1:#:All} ${2:#:ExecCGI} ${3:#:FollowSymLinks} ${4:#:Includes} ${5:#:IncludesNOEXEC} ${6:#:Indexes} ${7:#:MultiViews} ${8:#:SymLinksIfOwnerMatch}",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "opt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "373da94b8fc21d11523abed8d6cfb606": {
      "content": "number.moreThan()",
      "doc": "number.moreThan(min: number | Ref, message?: string | function): Schema\n\nValue must be strictly greater than min. The ${more} interpolation can be used in the\nmessage argument.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "number-more-than",
      "matches": {
        "yup number morethan": true
      },
      "source": "javascript/yup"
    },
    "37405f553e1d3f41223178bb371183bf": {
      "content": "${0:obj}.toArray()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "toarr": true
      },
      "source": "snippets/javascript"
    },
    "37426e79ab2933153df56339969a1ea9": {
      "content": "display inline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "3744941014e2b3003edaf5533f1b3e50": {
      "content": "background-position: ${1:0} ${0:0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgp": true
      },
      "source": "vim-snippets/snippets"
    },
    "37480927ea58d40ea6d74f5183eee061": {
      "content": "(** ${1:odoc} *)",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "odoc",
      "matches": {
        "oo": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "37491e075afa188d125272be0d862a40": {
      "content": "${fn:length(${0:collection_or_string})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "length": true
      },
      "source": "vim-snippets/snippets"
    },
    "374a28e39da1d826222d0437eec86129": {
      "content": "defer ${0:func}()",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "defer",
      "matches": {
        "df": true
      },
      "source": "vim-snippets/snippets"
    },
    "374a3998a9e4d49dfd8d8011b2fa8354": {
      "content": "switch ( ${1:#:condition} ) {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "374fa2e366ca3e1cf7673f7fe9174b88": {
      "content": "accept ${1}(${2}) do\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "accept": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "375aa59b7d81c4dfc519a550e50ddae0": {
      "content": "validate({ params, query, store }) {\n\t${1:data}\n},",
      "doc": "Validate is called every time before navigating to a new route.",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-validate",
      "matches": {
        "nuxt validate": true
      },
      "source": "javascript/nuxt"
    },
    "375dc407d898c9d2c9242da3cadadd29": {
      "content": "\\\\begin[${1:author}]{${2:thm}}\n\t${0:${VISUAL}}\n\\\\end{$2}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "thm (or arbitrary) environment with optional argument",
      "matches": {
        "thm": true
      },
      "source": "vim-snippets/snippets"
    },
    "37606e2571f02974b4aa414f20697d5a": {
      "content": "test \"${1}\" <| \\_ -> $0",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "376fb173fa609efb69d47f5ff287db89": {
      "content": "\\\\frac{d}{dt} {$1} {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "time derivative",
      "matches": {
        "ddt": true
      },
      "source": "vim-snippets/snippets"
    },
    "3771b38be11b77b3c55d8806cf38cfea": {
      "content": "implicit none\n\t${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "impl": true
      },
      "source": "vim-snippets/snippets"
    },
    "3771c1170d5640711e5b91a0396437e0": {
      "content": "{\n\tpath: '${1:path}', \n\tloadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})\n},$0",
      "doc": "Angular lazy route path",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Lazy Route Path",
      "matches": {
        "a-route-path-lazy": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "3774c08b53561af175aad7c80b84fbe7": {
      "content": "/*\n *\t${0: comment ...}\n */",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/snippets"
    },
    "3789022f3b199d9a2e0eae31c14b19ab": {
      "content": "place-self: stretch;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "378ce796cf41bcf05e1e5bf155dbd619": {
      "content": "expect(${1:target}).not.toBeDefined();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to be defined (js)",
      "matches": {
        "notd": true
      },
      "source": "vim-snippets/snippets"
    },
    "37973352a6367d55a8beda9488d82c14": {
      "content": "${1:int} ${2:#:Name} { get${3:;} ${4:#:private }set${5:;} }${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prop": true,
        "property": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "379a6f05cf1d87b5719371364321423b": {
      "content": "/*! \\brief ${1:Brief function description here}\n *\n *  ${2:Detailed description of the function}\n *\n * \\param $3 ${4:Parameter description}\n * \\return ${5:Return parameter description}\n */\n${6:void} ${7:function_name}(${8:Type} ${3:Parameter})\n{\n\t${9}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dfun1": true
      },
      "source": "vim-snippets/snippets"
    },
    "37a07781eb006e5f1c190d9739f35271": {
      "content": "bind:group={${1:variable}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-bind-group",
      "matches": {
        "svbind-group": true,
        "svelte bind group": true
      },
      "source": "javascript/svelte"
    },
    "37a2914777e6e12b0b58742ae7dd321c": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style scoped>\n\n</style>",
      "doc": "Base for Vue File with CSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-single-file-component-with-css",
      "matches": {
        "vue base css": true
      },
      "source": "javascript/vue"
    },
    "37ac5dc0a32d211c603f0835ea30b348": {
      "content": "grep(${1:pattern}, ${2:x}, ${3:ignore.case = ${4:FALSE}}, ${5:perl = ${6:FALSE}}, ${7:fixed = ${8:TRUE}})",
      "doc": "Grep logical",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "grepl",
      "matches": {
        "grepl": true
      },
      "source": "vscode-R/snippets"
    },
    "37ad61911c9ae93b1e76208bce59a103": {
      "content": "for ${1:#:var} in ${2:#:list}\n  ${0:TARGET}\nendfor",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "for in endfor",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "37b4f8cfdf426017c4c933e3e3d7a6e8": {
      "content": "justify-self: end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "37b545e417f0c5e1a751921d846a40bb": {
      "content": "_.invokeMap(${collection}, ${path}, ${args})",
      "doc": "_.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n// => [[1, 5, 7], [1, 2, 3]]\n\n_.invokeMap([123, 456], String.prototype.split, '');\n// => [['1', '2', '3'], ['4', '5', '6']]\n\nInvokes the method at `path` of each element in `collection`, returning\nan array of the results of each invoked method. Any additional arguments\nare provided to each invoked method. If `path` is a function, it's invoked\nfor, and `this` bound to, each element in `collection`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-invokemap",
      "matches": {
        "lodash invokemap": true
      },
      "source": "javascript/lodash"
    },
    "37b6f7ad602b7c054acb4472952d8708": {
      "content": ".. seealso:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "seealso",
      "matches": {
        "seealso": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "37bac4113a5315496bac34f9630bfae5": {
      "content": "border-left: ${1:1px} ${2:solid} #${3:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdl+": true
      },
      "source": "vim-snippets/snippets"
    },
    "37baf278145827ca410cb9e732fc2e6d": {
      "content": "if (${1:condition}) {\n   ${2:selected}\n}",
      "doc": "Code snippet for 'if' conditional",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "if",
      "matches": {
        "if": true
      },
      "source": "vscode-R/snippets"
    },
    "37bf9f6f910229ccfce0ad7787f53bc1": {
      "content": "border-style: outset;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "37bfcd4277960239506a5c82b0cca043": {
      "content": "![${1:alttext}](${2:/images/image.jpg} \"${3:title}\")",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "![\"": true
      },
      "source": "vim-snippets/snippets"
    },
    "37c3413094ab88baed2c58dbfcef8cce": {
      "content": "align-content: space-evenly;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "37d752646fb238456aa520c03f610f22": {
      "content": "each do |${1:#:variable}|\n  ${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "37e1c595e6ed1190912ea6516d4a8761": {
      "content": "${1:obj}.show('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "show": true
      },
      "source": "snippets/javascript"
    },
    "37eb3cb57564fc02962be2e106061ffd": {
      "content": "assert ${1:test}, '${2:Failure message.}'",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as": true
      },
      "source": "vim-snippets/snippets"
    },
    "37ec9bfc0be6d26a4eecf9ee2397317b": {
      "content": "type ${1} = { ${0} }",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rec": true
      },
      "source": "vim-snippets/snippets"
    },
    "37ee5a29adccf2345d3f4e41ec65dd2b": {
      "content": "require('dotenv').config({ encoding: '${1:latin1}' })",
      "doc": "You may specify the encoding of your file containing environment variables.",
      "filetype": "dotenv",
      "grammar": "lsp",
      "label": "dotenv-encoding",
      "matches": {
        "dotenv encoding": true
      },
      "source": "javascript/dotenv"
    },
    "37f2218e7b3618e8d0f8f8e9ed986d7e": {
      "content": "for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {\n\t${3:std::cout << *$1 << std::endl;}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "itera": true
      },
      "source": "vim-snippets/snippets"
    },
    "37f544b00b3641a1fe2b87b38fc5e8fa": {
      "content": "[${1}]",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        ".": true
      },
      "source": "vim-snippets/snippets"
    },
    "37fda2615ce023c1b2aa96942a80516a": {
      "content": "empty-cells: hide;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "380329dee56a59501ccdaf46820d5487": {
      "content": "font-size-adjust: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fza:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "380edf95d5bdc6a0a80b5389c0adcc23": {
      "content": "loadImage(${0:filename});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loadImage": true
      },
      "source": "vim-snippets/snippets"
    },
    "380fb266f4912bc869761e61453a2da7": {
      "content": "| lstrip",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lstrip": true
      },
      "source": "vim-snippets/snippets"
    },
    "3822c08e2cd2342a0ba93ee656ac3202": {
      "content": "data() {\n\treturn {\n\t\t${1:key}: ${2:value}\n\t}\n},",
      "doc": "Vue Component Data",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Data",
      "matches": {
        "vdata": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "3825da0d5320c7511aac9237718eba9b": {
      "content": "message(\"${1}\")",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "message(\"...\")",
      "matches": {
        "message": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3828edbd17ffaaa3c1740a52960b5d86": {
      "content": "spyOn(${1:object}, '${2:method}').and.returnValue(${3:arguments});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "spy on and return (js)",
      "matches": {
        "sr": true
      },
      "source": "vim-snippets/snippets"
    },
    "383b4ce233c3330c1e1e2b7e9b36b05b": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\nexport default {\n\tsetup () {\n\t\t${0}\n\n\t\treturn {}\n\t}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
      "doc": "Base for Vue File Composition API with SCSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component Composition API",
      "matches": {
        "vbase-3": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "3849f8ee744bc97cf3ef1f09c4054db8": {
      "content": "text-wrap: normal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "3856e60d60b3d56fa2f59909d8e716ce": {
      "content": "((${1:arguments}) => {\n\t${0}\n})(${2});",
      "doc": "immediately-invoked function expression (IIFE)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "immediately-invoked-function-expression-iife-",
      "matches": {
        "base function immediate": true
      },
      "source": "javascript/base"
    },
    "38590daf38827e7a99e5fe7a4c35412b": {
      "content": "case ${1:something} of\n\t${2} -> ${0}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "3865e3c565802b2575534d6404301432": {
      "content": "#ifndef ${1:#:SYMBOL}\n    #define $1\n    ${0:TARGET}\n#endif /* end of include guard */",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "#ifndef ... #define ... #endif",
      "matches": {
        "include-guard": true,
        "once": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "386721516956ccc4f77d1f01b8ea020f": {
      "content": "z-index ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "z": true
      },
      "source": "vim-snippets/snippets"
    },
    "3868cd0ec9df6f7a7a7ef131567f90b2": {
      "content": "border-style inset",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "386fb4cd8af4d5400742167dc01ac793": {
      "content": "let(:${1:object}) { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "3876148192f7bafe2ba66322329c1fb4": {
      "content": "list-style-type decimal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:dc": true
      },
      "source": "vim-snippets/snippets"
    },
    "38761affa2d6e6304ce8d3e92c45577f": {
      "content": "${1}:\nfor ${2} of ${3} loop\n\t${0}\nend loop $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "named for each",
      "matches": {
        "named_for_each": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "387771cef110b4a3b1fe5e5eb3f9fafc": {
      "content": "string.url()",
      "doc": "string.url(message?: string | function): Schema\n\nValidates the value as a valid URL via a regex.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-url",
      "matches": {
        "yup string url": true
      },
      "source": "javascript/yup"
    },
    "388385dad2c63e418736d89ad4670560": {
      "content": "const { $1 } = this.props",
      "doc": "Creates and assigns a local variable using props destructing",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "destructProps",
      "matches": {
        "cp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "3894a73c4f76e0c505218616be36565f": {
      "content": "${1:obj}.last('${1:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "last": true
      },
      "source": "snippets/javascript"
    },
    "38960c6b30c635b4686434d226a8d096": {
      "content": "set -eu",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "safe": true
      },
      "source": "vim-snippets/snippets"
    },
    "38a00b8dc6d8243688d0dccd8a0d3bad": {
      "content": "collect { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "col": true
      },
      "source": "vim-snippets/snippets"
    },
    "38a19b80eeba29818705102a0f7553dd": {
      "content": "${1:ModelName}::model()->countBySql(${2:sql},array('${3:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ycountbs": true
      },
      "source": "vim-snippets/snippets"
    },
    "38a7e7b3b4a41c6b7925ac5e329e1ba1": {
      "content": "${1:String} ${2:var}${3: = null}${4};",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v": true
      },
      "source": "vim-snippets/snippets"
    },
    "38aa2765d92437d58e3900badd4e8afa": {
      "content": "margin-bottom ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb": true
      },
      "source": "vim-snippets/snippets"
    },
    "38aa7f041d63c6d380949634fcd4dd14": {
      "content": "#include <${1:stdio}.h>",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#inc, #include": true,
        "inc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "38ac0666609a07526cc40213427a6b69": {
      "content": "${1:obj}.ajaxSend (${1:request, settings}) ->\n\t${2:// error callback}\n${0}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxsend": true
      },
      "source": "snippets/coffee"
    },
    "38bbb815e62423388da1c55fce5d771f": {
      "content": "[cols=\"${1}\", options=\"header\"]\n|===\n|${2:row1-col1}\n${0}\n|===",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "table",
      "matches": {
        "table": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "38c410da80145096cfc40585418a9f11": {
      "content": "<dd>${1:TARGET}</dd>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "38d533983625dd318f23ce08001bf545": {
      "content": "${0:// Parameters are the same for glGenBuffers}\ngl.glDeleteBuffers(${1:4}, ${2:bufferObjects});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl delete buffers",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "38dfc8ef8ead1c4377b30c0643ed8703": {
      "content": "[${1:id}]: https://${2:url} \"${3:title}\"",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[:\"": true
      },
      "source": "vim-snippets/snippets"
    },
    "38e45a2106927cb980e726d67dc01def": {
      "content": "${1:obj}.resize(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "resize": true
      },
      "source": "snippets/javascript"
    },
    "38ea70bf2fc5a5f75a6c3d57753393b4": {
      "content": "text-height: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th": true
      },
      "source": "vim-snippets/snippets"
    },
    "38eb13b047a60a2def52eb1464f08fe0": {
      "content": "typedef struct packed {\n    ${2:TARGET}\n} ${1:name} ;",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "struct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "38ee1aa891b684735de807293e0ba3b0": {
      "content": "for=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "38f2f3140d59e1454fd9a6eb551c5b53": {
      "content": "{% import ${0:module} %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "import": true
      },
      "source": "vim-snippets/snippets"
    },
    "38ff02014f056bcfe2969fefce485eae": {
      "content": "adply(${1:array}, ${2:margin}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ad": true
      },
      "source": "vim-snippets/snippets"
    },
    "38ff4d6905fd274d087e3076002a3df1": {
      "content": "beforeUpdate(() => {\n\t${1:// content here}\n});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-before-update",
      "matches": {
        "svelte lifecycle before update": true,
        "svlfbu": true
      },
      "source": "javascript/svelte"
    },
    "390ab3ed95125ae8cb1d42a5bc266e90": {
      "content": "$this->widget('CLinkPager', array('pages'=>$pages,'header'=>'${0}'}))",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ylinkpager": true
      },
      "source": "vim-snippets/snippets"
    },
    "390c910937289cb7cbb9fcae2667e727": {
      "content": "do {\n\t${2}\n} while (${1:/* condition */});",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "390e7449c88106ed7253568c2e1aab2c": {
      "content": "${1:expr}? ${2:true} : ${0:false}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xif": true
      },
      "source": "vim-snippets/snippets"
    },
    "3919def0f7ab2a13f85d337d6732b513": {
      "content": "quantile(${1:x}, ${2:probs = ${3:seq(0, 1, 0.25)}}, ${4:na.rm = ${5:FALSE}}, ${6:names = ${7:TRUE}}, ${8:type = ${9:7}}, ${10:...})",
      "doc": "Quantile",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "qua",
      "matches": {
        "quantile": true
      },
      "source": "vscode-R/snippets"
    },
    "391befc12ad103a065cc63b3f8ae64a8": {
      "content": "type ${1} = ${0};",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ty": true
      },
      "source": "vim-snippets/snippets"
    },
    "391e2b1a5d769416169cc6166937d5c8": {
      "content": "_.ceil(${number}, ${precision})",
      "doc": "_.ceil(4.006);\n// => 5\n\n_.ceil(6.004, 2);\n// => 6.01\n\n_.ceil(6040, -2);\n// => 6100\n\nComputes `number` rounded up to `precision`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-ceil",
      "matches": {
        "lodash ceil": true
      },
      "source": "javascript/lodash"
    },
    "392abbda4e9cae04d52bc87f8b1ae834": {
      "content": "${1:obj}.unbind('${2:event name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unbind": true
      },
      "source": "snippets/javascript"
    },
    "392b9afe5084cded0adc3ca84e45b7de": {
      "content": "<%= link_to \"${1:Link text...}\", ${0:model}s_path %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lipp": true
      },
      "source": "vim-snippets/snippets"
    },
    "3935848d5a2d5da663fe347cf7db8912": {
      "content": "border-top-color: #${1:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-top-color: color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "39368f867f24a007a41ea2b7ff94597f": {
      "content": "import ${1:String}\n${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "import",
      "matches": {
        "imp": true,
        "import": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3937a44a56c659b9d7f27ee31ea2e1d6": {
      "content": "export default class ${1:className} {\n\t$0\n};\n",
      "doc": "Export default class in ES6 syntax",
      "filetype": "base",
      "grammar": "lsp",
      "label": "exportclass",
      "matches": {
        "base export class": true
      },
      "source": "javascript/base"
    },
    "393c60112cd34ca3bdada91ba7128f94": {
      "content": "for each (${1:var} in ${2:object}){\n\t${0}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "enumerate values",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "394660058e46bf637ba5aad8fdacbdc7": {
      "content": "_.isSafeInteger(${value})",
      "doc": "_.isSafeInteger(3);\n// => true\n\n_.isSafeInteger(Number.MIN_VALUE);\n// => false\n\n_.isSafeInteger(Infinity);\n// => false\n\n_.isSafeInteger('3');\n// => false\n\nChecks if `value` is a safe integer. An integer is safe if it's an IEEE-754\ndouble precision number which isn't the result of a rounded unsafe integer.\n\n**Note:** This method is based on\n[`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-issafeinteger",
      "matches": {
        "lodash issafeinteger": true
      },
      "source": "javascript/lodash"
    },
    "394dee54fbcbf2bf85fa64c8e6aa680c": {
      "content": "desc '${1:Task description}'\ntask ${2:task_name: [:dependent, :tasks]} do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tas": true
      },
      "source": "vim-snippets/snippets"
    },
    "394df52f9f8e3e621188a34d233b287d": {
      "content": "double precision :: ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "double": true
      },
      "source": "vim-snippets/snippets"
    },
    "3950c90e36de8cd5e9d0b80d936f223c": {
      "content": "do begin\n\t${0}\nend while (${1});",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dowh": true
      },
      "source": "vim-snippets/snippets"
    },
    "39510b77f3f41b80d1983efbad56a935": {
      "content": "<style>\n\t${1:/* your styles go here */}\n</style>",
      "doc": "add styles to your svelte file",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-style-tag",
      "matches": {
        "svelte style": true,
        "svstyle": true
      },
      "source": "javascript/svelte"
    },
    "3951413aef03351e5be46e40deb1c5f6": {
      "content": "elseif (${1:#:condition}) {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elseif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "396146ee3bf13b39c5ff0435c240f18c": {
      "content": "### OSX ###\n*.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \r\nIcon\n# Thumbnails\n._*\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# Nuxt build\n.nuxt\n\n# Nuxt generate\ndist",
      "doc": "gitignore file",
      "filetype": "ignore",
      "grammar": "lsp",
      "label": "Gitignore",
      "matches": {
        "gitignore": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "3963b30d26d29e12b7203d04df80c1a2": {
      "content": "console.warn(${1:object});",
      "doc": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleWarn",
      "matches": {
        "cwa": true
      },
      "source": "vscode-javascript/snippets"
    },
    "396bbb1699197bfa20beb6a738d09cfd": {
      "content": "NSMutableDictionary ${0}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nsmd": true
      },
      "source": "vim-snippets/snippets"
    },
    "396e01861fe115f6e38c3ed2ae032fca": {
      "content": "if ${1:condition}\n\t${2}\nelse\n\t${3}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "3977ae66cf7b5eca4502d6d2de923726": {
      "content": "switch ${1:#:object}\n  when ${2:#:value}\n    ${0:TARGET}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "swi": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3984432511d85ae2dae84cb0bb8e2c13": {
      "content": "expect(${1:target}).toBeFalsy()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to be falsy (coffee)",
      "matches": {
        "ef": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3988d9a85d96c910bbf83fd7d5bb8d93": {
      "content": "printNum(${1:#:level}, ${2:#:type});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3989266ad7fc5d4dc282cff2f19d0458": {
      "content": "<exception cref=\"${1:#:class}\">${2:#:description}</exception>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<exception cref=\"\"></exception>",
      "matches": {
        "exception": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "398e95d0aaf02fd6acd3009860b3650b": {
      "content": "\\textsl{${1:TARGET}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\textsl": true,
        "textsl \\textsl{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "39988bc40496d33efaa26a0f428cbb63": {
      "content": "shared_examples ${0:'shared examples name'}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "shared": true
      },
      "source": "vim-snippets/snippets"
    },
    "3998be361249559352d5eed80f195d15": {
      "content": "<fieldset>${1:TARGET}</fieldset>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fieldset": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "399c23c3eaf9f239c1a4e7f86c73fb64": {
      "content": "background-attachment: scroll;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bga:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "399d7990ac73fb3b61080460cd48e80a": {
      "content": "when others => ${1};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "when others",
      "matches": {
        "when_others": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "39a06a97622b0ae22add375bc8d34de0": {
      "content": "case ${1}\nwhen ${2}\n  ${3}\nelse\n  ${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "case ... when ... else ... end",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "39aac735103182f6f07dea4565b066b2": {
      "content": "text-indent: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ti": true
      },
      "source": "vim-snippets/snippets"
    },
    "39b104ad46df339740172e28186a9a1c": {
      "content": "write.csv(${1:x}, ${2:file = ${3:\"\"}}, ${4:append = ${5:FALSE}}, ${6:quote = ${7:TRUE}}, ${8:sep = ${9:\" \"}}",
      "doc": "Write csv",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "wric",
      "matches": {
        "write": true
      },
      "source": "vscode-R/snippets"
    },
    "39b4acf52a2bccb3b0ab38f39cba4e39": {
      "content": "attr_writer :${0:attr_names}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w": true
      },
      "source": "vim-snippets/snippets"
    },
    "39b4ea8ab444068017ef54b032a1005f": {
      "content": "<token_desc> token{\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "kp19pp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "token_desc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "39b7dee3ad78bffc0880b37399d68712": {
      "content": "background:${6: #${1:DDD}} url($2) ${3:repeat/repeat-x/repeat-y/no-repeat} ${4:scroll/fixed} ${5:top left/top center/top right/center left/center center/center right/bottom left/bottom center/bottom right/x-% y-%/x-pos y-pos};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background:  color image repeat attachment position (background)",
      "matches": {
        "background": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "39b8f4754c2dd0c1f2203043d98815a7": {
      "content": "to!string(${1:x});\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tos": true
      },
      "source": "vim-snippets/snippets"
    },
    "39bb44835890e5afb314bc6ec8b32991": {
      "content": "ERROR",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "err": true
      },
      "source": "vim-snippets/snippets"
    },
    "39c606c74fad81e4d5ae10a28cf74e9a": {
      "content": "\\${0:TARGET}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${0:TARGET}",
      "matches": {
        "0T": true,
        "0t": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "39cfbc00e5d446e96b9807c4f5b8e98d": {
      "content": "<progress>${0}</progress>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "progress": true
      },
      "source": "vim-snippets/snippets"
    },
    "39ec6b925e9753a3170849ae58d32979": {
      "content": "set_target_properties(${1:target}\n\t${2:properties} ${3:compile_flags}\n\t${0:\"-O3 -Wall -pedantic\"}\n)",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "props": true
      },
      "source": "vim-snippets/snippets"
    },
    "39edf0f9369fde750dbc4d12882e3f90": {
      "content": "#pragma mark ${0:-}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prag": true
      },
      "source": "vim-snippets/snippets"
    },
    "39ef02c5988ffaf78e6556756416b8a8": {
      "content": "\\\\{ ${0} \\\\}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\{ \\}",
      "matches": {
        "\\{": true
      },
      "source": "vim-snippets/snippets"
    },
    "39f51635fd4cc021ed0e213716b57078": {
      "content": "Throws:  $1Exception $2",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "Throws (Thr)",
      "matches": {
        "Thr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "39f7d2a591e73888a46f2e356d1043a5": {
      "content": "-ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=${0:100})'",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "op:ms": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a009794cc2d9acd6945a6bdd09f1f0d": {
      "content": "_.flowRight(${funcs})",
      "doc": "function square(n) {\n  return n * n;\n}\n\nvar addSquare = _.flowRight([square, _.add]);\naddSquare(1, 2);\n// => 9\n\nThis method is like `_.flow` except that it creates a function that\ninvokes the given functions from right to left.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-flowright",
      "matches": {
        "lodash flowright": true
      },
      "source": "javascript/lodash"
    },
    "3a0955fd9ce631d93d4f45cd92568c86": {
      "content": "{% from \"${1}\" import ${2} %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig from",
      "matches": {
        "from": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a0a8c861bf1adf8acfa8c7fc6d8c117": {
      "content": "runs(() => {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine-arrow",
      "grammar": "snu",
      "label": "runs (js)",
      "matches": {
        "ru": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3a0af34c0c7933b52ddca129e02bfdc3": {
      "content": "Yii::app()->clientScript->registerCssFile('${0:file}');",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yregcf": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a0f19559ff53e818807d485db33badc": {
      "content": "Wait Until Page Does Not Contain    ${1:${text}}    ${2:${timeout=None}}    ${3:${error=None}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Wait Until Page Does Not Contain",
      "matches": {
        "wupdnc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3a127ace1bab1649bc1bb65bd5cbf7e8": {
      "content": "else if ${1:condition}\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "snippets/coffee"
    },
    "3a1742c75520a37c71b0c90f0355a702": {
      "content": "random(${1:value1}${2:, }${0:value2});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "random": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a1ce0c3121043bfd8bb0e7101c520e3": {
      "content": "${1:auto} ${2:var} = ${0:1};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "var": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a26b1d9cdb8b5f0094a61c9d31375ae": {
      "content": "_.unary(${func})",
      "doc": "_.map(['6', '8', '10'], _.unary(parseInt));\n// => [6, 8, 10]\n\nCreates a function that accepts up to one argument, ignoring any\nadditional arguments.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-unary",
      "matches": {
        "lodash unary": true
      },
      "source": "javascript/lodash"
    },
    "3a276b6e9e7c11e18b1026d8c6eb7513": {
      "content": "border-collapse collapse",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdcl:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a29615c87455c13180570009b34cdfb": {
      "content": "content: counters(${0})",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:cs": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a29a499f2e18eecee1c57dba2485174": {
      "content": "expect(${1:target}).toContain(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to contain (js)",
      "matches": {
        "ec": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a2ca05f7c8171e9b4b226b34db8e265": {
      "content": "border-style: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "border-style": true,
        "bs": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3a2f7ec3916556235226a1ae9d8a59e4": {
      "content": "[SetUp]\npublic void SetUp() {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "testsetup": true,
        "tsu": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3a3811b97eef82a7028398784b25511a": {
      "content": "justify-items start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a39ad35ed6a066f9657a4e07e5e19a0": {
      "content": "let rec ${1} =\n\t${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fnr": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a3e6cf518d4e97a521c138c082c8abc": {
      "content": "componentDidMount() {\n\t$0\n}\n",
      "doc": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-componentdidmount",
      "matches": {
        "cdm": true,
        "react componentdidmount": true
      },
      "source": "javascript/react"
    },
    "3a408af7908c1f25d542c313f41692b4": {
      "content": "_.get(${object}, ${path}, ${defaultValue})",
      "doc": "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.get(object, 'a[0].b.c');\n// => 3\n\n_.get(object, ['a', '0', 'b', 'c']);\n// => 3\n\n_.get(object, 'a.b.c', 'default');\n// => 'default'\n\nGets the value at `path` of `object`. If the resolved value is\n`undefined`, the `defaultValue` is returned in its place.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-get",
      "matches": {
        "lodash get": true
      },
      "source": "javascript/lodash"
    },
    "3a4187a1595cf8ceb0d77bb48f785d0c": {
      "content": "assert_throws :${1:expected}, -> { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ast": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a42d0e37f461d12f37209294096184d": {
      "content": "assert_nothing_raised ${1:StandardError} do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asnrd": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a430deb33b2eb64094711784c08a55c": {
      "content": "when {\n\tanyOf '${1:anyOf}'\n}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whenanyOf": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a44c04b23c1d2feda3cc4ff2487d571": {
      "content": "display block",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a45e46a8fd68a17bd23ff09ed2c9f8f": {
      "content": "function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React 17 Functional Component with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_reactFunctionalExportComponent",
      "matches": {
        "_rfce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "3a4d902bc1e7e5b16220cbacc039cb0e": {
      "content": "<header id=\"${1}\">\n\t${0}\n</header>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "header#": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a50626a53888b651b13fab67bda92e5": {
      "content": "align-items: stretch;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a58c3c56325a78dd925d4ca9fadfa17": {
      "content": "size_t ${1:/*variable*/} = ${2:/*value*/};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "size_t (siz)",
      "matches": {
        "siz": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3a58e7ed9446972b62cd8dc65f378d10": {
      "content": "${1:app}.post('$2', $3);",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "express POST",
      "matches": {
        "epost": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3a5cd52209c3440799f29223857d603e": {
      "content": "let\n\t${1} = ${2}\nin\n\t${3}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a610199b21e4f658b0345a809e78f50": {
      "content": "border-right-style: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrs": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a6a1eef44188b86f41e3e8fda550996": {
      "content": ":key=\"${1:key}\"",
      "doc": "Expects: string. Children of the same common parent must have unique keys. Duplicate keys will cause render errors.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-key",
      "matches": {
        "key": true,
        "vue key": true
      },
      "source": "javascript/vue"
    },
    "3a6a6695997c72e66bacfb5de26e8ed9": {
      "content": "content: open-quote",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:oq": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a6c2086f57dcf09cf53019322c6c34f": {
      "content": "var $1 = new sap.ui.core.Icon({\n\t\t\t\tsrc :$2 , //sap.ui.core.URI\n\t\t\t\tsize :$3 , //sap.ui.core.CSSSize\n\t\t\t\tcolor :$4 , //sap.ui.core.CSSColor\n\t\t\t\thoverColor : $5 ,  // sap.ui.core.CSSColor\n\t\t\t\tactiveColor :$6 , //sap.ui.core.CSSColor\n\t\t\t\twidth :$7 , //sap.ui.core.CSSSize\n\t\t\t\theight : $8 ,//sap.ui.core.CSSSize\n\t\t\t\tbackgroundColor :$8 , //sap.ui.core.CSSColor\n\t\t\t\thoverBackgroundColor :$9 , //sap.ui.core.CSSColor\n\t\t\t\tactiveBackgroundColor :$10 , //sap.ui.core.CSSColor\n\t\t\t\tvisible :$11 , //boolean (default: true)\n\t\t\t\tdecorative : $12 ,//boolean (default: true)\n\t\t\t});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapicon": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a6e090a7b14c75892b41008f737c0f7": {
      "content": "(defrecord ${1:name} [${2:fields}]\n\t${3:protocol}\n\t${0:code})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defr": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a7b9efd2d3e8185167c7d1306943b90": {
      "content": "NSBezierPath *${1:#:path} = [NSBezierPath bezierPath];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bez": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3a85cee9cd1f1e098ed414272c9b3efa": {
      "content": "text-align: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a8bc0f0b493ecb14d22647e1233fad7": {
      "content": "test.each([${1:[1, 2], [2, 4]}])(\n\t'${2:double(%d)}',\n\t(${3:input, expected}) => {\n\t\t${0:expect(double(input)).toBe(expected);}\n\t}\n);",
      "doc": "creates an test block with different test data sets",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-test-each",
      "matches": {
        "jest test each": true,
        "teste": true
      },
      "source": "javascript/jest"
    },
    "3a9311960aed681e1dddd763d5835157": {
      "content": "switch (${1:/* variable */}) {\n\tcase ${2:/* variable case */}:\n\t\t${3}\n\t\t${4:break;}${5}\n\tdefault:\n\t\t${6}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a9785ec683cd5ecad9b7111ffcc348f": {
      "content": "line(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${0:z2});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "3D",
      "matches": {
        "line": true
      },
      "source": "vim-snippets/snippets"
    },
    "3a9a706521469febee2baa3e05b44243": {
      "content": "toggleHighQuality();",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tq": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3a9d837cabc6b68287aeb29fc808f83e": {
      "content": "exports.${1:member} = ${2:value};",
      "doc": "exports.member",
      "filetype": "base",
      "grammar": "lsp",
      "label": "exports-member",
      "matches": {
        "base exports member": true
      },
      "source": "javascript/base"
    },
    "3aa58691e00c9704a66d8c58a3ab06fb": {
      "content": "?assertExit(${1:Pattern}, ${0:Expression})",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asex": true
      },
      "source": "vim-snippets/snippets"
    },
    "3aae8fbf0d51759192105530d179e8fd": {
      "content": "vertical-align: middle",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ab3b6edbe13061d1b10ccf69a03345d": {
      "content": "place-items center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ab3edcaee264e65de152f6e3bbb06d1": {
      "content": "clear: ${1:left/right/both/none};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "clear: value (clear)",
      "matches": {
        "clear": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3ab7a550f4283a43a5f6df66f790a8f0": {
      "content": "lock (${1:this})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lock": true
      },
      "source": "vim-snippets/snippets"
    },
    "3abf3dd3880e81f8179233f79d0210eb": {
      "content": "# encoding: utf-8",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enc": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ac0858c4d0979ca80c891e6e3619a7e": {
      "content": "{% highlight ${1:#:TARGET} linenos %}\n  ${2:code}\n{% endhighlight %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "Line number",
      "matches": {
        "highlight_line": true,
        "hl_l": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3ac456d2680709f49220614bf5706839": {
      "content": "_.create(${prototype}, ${properties})",
      "doc": "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nfunction Circle() {\n  Shape.call(this);\n}\n\nCircle.prototype = _.create(Shape.prototype, {\n  'constructor': Circle\n});\n\nvar circle = new Circle;\ncircle instanceof Circle;\n// => true\n\ncircle instanceof Shape;\n// => true\n\nCreates an object that inherits from the `prototype` object. If a\n`properties` object is given, its own enumerable string keyed properties\nare assigned to the created object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-create",
      "matches": {
        "lodash create": true
      },
      "source": "javascript/lodash"
    },
    "3ac520b9a651c42ad7451621733868c6": {
      "content": "{|${1:#:var}|\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "{|var| ... }",
      "matches": {
        "blockvar": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3ac92ced28c1c8931c5b0a749eccde95": {
      "content": "background-break: continuous",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "3acc4ec7d3b9db1957bdc999241098d1": {
      "content": "(function(${1}) {\n  'use strict';\n  ${0:TARGET}\n})(${2});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iife": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3ad6040971e891425524f0d9dc4f3f6d": {
      "content": "for (let ${1:prop} of ${2:object}) {\n\t${0:$1}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "for (let prop of object}) { ... }",
      "matches": {
        "forl": true
      },
      "source": "snippets/javascript"
    },
    "3af1b223920e59ca5d4f88f7eb5a79aa": {
      "content": "${1:name} => ${0}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "=>": true
      },
      "source": "vim-snippets/snippets"
    },
    "3af2ca8cf5228e6cab2c9cb995d1270b": {
      "content": "${1:obj}.map(function (${2:index}, ${3:element}) {\n\t${0:// callback}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "snippets/javascript"
    },
    "3afe7b4c6ce32f73241d36fd0f5ac6a4": {
      "content": "<h6>${0}</h6>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h6": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b0677550f64594a29267f4bd24abb82": {
      "content": "[Obsolete(\"${1:#:description}\")]${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "obs dep deprecated": true,
        "obsolete": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3b0681ebfc4d889a01870594463a8447": {
      "content": "DirectoryIndex index.php index.html",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "directoryindex": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3b0c063336290f1af41c97cebf358127": {
      "content": "File.open('${1:path/to/file.dump}', 'wb') { |${2:file}| Marshal.dump(${3:obj}, $2) }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Md": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b0df8d4ae9e97de38dddfc935701cf3": {
      "content": "console.group('${1:label}');",
      "doc": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleGroup",
      "matches": {
        "cgr": true
      },
      "source": "vscode-javascript/snippets"
    },
    "3b0ebb968b179ee5dc05bbfc664330f3": {
      "content": "export const ${1} = styled(${2})`\n  ${3}\n`;",
      "doc": "Export styled-component from existing component",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-export-styled-component-from-existing-component",
      "matches": {
        "exscc": true,
        "styled-components export component from existing": true
      },
      "source": "javascript/styled-components"
    },
    "3b10299a2a63300c6e30cc8ad7e781fc": {
      "content": "_.values(${object})",
      "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.values(new Foo);\n// => [1, 2] (iteration order is not guaranteed)\n\n_.values('hi');\n// => ['h', 'i']\n\nCreates an array of the own enumerable string keyed property values of `object`.\n\n**Note:** Non-object values are coerced to objects.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-values",
      "matches": {
        "lodash values": true
      },
      "source": "javascript/lodash"
    },
    "3b1a2f0bca5a254308d5f5f2d671463f": {
      "content": "border-length: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlt:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b23072b4e992984fd8cc2c6269ec60e": {
      "content": "${1:obj}.focus (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "focus": true
      },
      "source": "snippets/coffee"
    },
    "3b239b269cfebd9b3a1631276232e274": {
      "content": "${1:#:object} = require('$1')",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3b33b3d040462e31d548956447497bf6": {
      "content": "try\n  ${1:TARGET}\nfinally\n  ${2}\nendtry",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "try ... finally ... endtry",
      "matches": {
        "tryf": true,
        "tryfinally": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3b36b3ad00fc4ed21980a3451bd7d7bb": {
      "content": "java.io.",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "j.i": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b3d165ae978ef88dccf72ab0f13e118": {
      "content": "mixed.transform()",
      "doc": "mixed.transform((currentValue: any, originalValue: any) => any): Schema\n\nAdds a transformation to the transform chain. Transformations are central to the casting process,\ndefault transforms for each type coerce values to the specific type (as verified by isType()).\ntransforms are run before validations and only applied when strict is true. Some types have built in transformations.Transformations are useful for arbitrarily altering how the object is cast, however, you should take care\nnot to mutate the passed in value. Transforms are run sequentially so each value represents the\ncurrent state of the cast, you can use the originalValue param if you need to work on the raw initial value.let schema = string().transform(function(value, originalvalue) {\n  return this.isType(value) && value !== null ? value.toUpperCase() : value;\n});\n\nschema.cast(\"jimmy\"); // => 'JIMMY'\nEach types will handle basic coercion of values to the proper type for you, but occasionally\nyou may want to adjust or refine the default behavior. For example, if you wanted to use a different\ndate parsing strategy than the default one you could do that with a transform.module.exports = function(formats = \"MMM dd, yyyy\") {\n  return date().transform(function(value, originalvalue) {\n    // check to see if the previous transform already parsed the date\n    if (this.isType(value)) return value;\n\n    // the default coercion failed so lets try it with Moment.js instead\n    value = Moment(originalValue, formats);\n\n    // if its valid return the date object, otherwise return an `InvalidDate`\n    return value.isValid() ? value.toDate() : new Date(\"\");\n  });\n};\nstringDefine a string schema. Supports all the same methods as mixed.let schema = yup.string();\n\nawait schema.isValid(\"hello\"); // => true\nBy default, the cast logic of string is to call toString on the value if it exists.\nempty values are not coerced (use ensure() to coerce empty values to empty strings).Failed casts return the input value.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-transform",
      "matches": {
        "yup mixed transform": true
      },
      "source": "javascript/yup"
    },
    "3b3fcd5a48ddd8784d04cc489ac6b932": {
      "content": "clear: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b3ffb33618918253d60c6ceb61faef0": {
      "content": "export async function getStaticProps(${1:context}) {\n  return {\n    props: {}, \n  }\n}",
      "doc": "If you export an async function called getStaticProps from a page, Next.js will pre-render this page at build time using the props returned by getStaticProps. The context parameter is an object containing the following keys: params, preview, previewData.",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-get-static-props",
      "matches": {
        "next getstaticprops": true
      },
      "source": "javascript/next"
    },
    "3b456218588b4e83c698186803699c4a": {
      "content": "[${1:link}](mailto:${2:email})${3}",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[@": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b48742f4287b5f4e11eb4f6f7706fc3": {
      "content": "{ path: '', pathMatch: 'full', redirectTo: '${1:path}' }$0",
      "doc": "Angular default route path",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-default-route-path",
      "matches": {
        "a-route-path-default": true,
        "angular default route path": true
      },
      "source": "javascript/angular"
    },
    "3b4ae65ab409e7e5205bb87708d76c3c": {
      "content": "lmObj <- lm(${1:yCol} ~ {2:xCol}, data = ${3:data}, subset = ${4:subset}, weights = ${5:weights}, na.action = ${6:na.action})\nsummary(lmObj)\nplot(lmObj, which=c(1)) # Plot residuals versus fitted",
      "doc": "Fit a linear model and create a plot",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Linear model with plot",
      "matches": {
        "lmplot": true
      },
      "source": "vscode-R/snippets"
    },
    "3b4fd2ae12d3a97316b1ef0fc25c5fff": {
      "content": "@article{${1:name},\n\tauthor={${2:author}},\n\ttitle={${3:title}},\n\tjournaltitle={${4:journal}},\n\tvolume={${5:NN}},\n\tnumber={${6:NN}},\n\tyear={${7:YYYY}},\n\tpages={${8:NN}--${9:NN}}\n}\n$0",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "Article reference",
      "matches": {
        "article": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3b5c33b7189e7fe19e6f279cabc25353": {
      "content": "$this->${1:method}()->shouldEqual(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldEqual('value')",
      "matches": {
        "sequal": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3b5de7b90e5161e131afa493431d266e": {
      "content": "var ${1:#:NAME}: ${2:#:TYPE} = ${0:#:TARGET};",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "var NAME: TYPE = expr;",
      "matches": {
        "var-with-type": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3b6e83f8513af6ec42fb8d5aba127440": {
      "content": "echo CHtml::image('${1:src}', '${2:alt}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhimg": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b6f709c421656feee55277e35a6fe56": {
      "content": "struct ${1:name} {\n\t${2:/* data */}\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "struct",
      "matches": {
        "st": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b7006bbe9dbf0b1d20c1a0efdca684c": {
      "content": "grid-row-gap: 0;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grg:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b71884a0ae84231563ed7348a94982a": {
      "content": "IBOutlet ${1}${2: *}${3};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "IBOutlet",
      "matches": {
        "ibo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3b722bbaea7b838413956001b033f9cb": {
      "content": "word-break: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b7619561641f7f71a8631cb89656e53": {
      "content": "$${1:#:arrayName} = array('${2}' => ${3} ${0});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "array": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3b79cfa35899cca24de37ae81adea6a5": {
      "content": "if ${1:#:condition}\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "if ... end",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3b7a4de2a051fdaf8f419778e5f23be5": {
      "content": "export default {\n\tstate: {\n\t\tvalue: 'my value'\n\t},\n\tgetters: {\n\t\tvalue: state => {\n\t\t\treturn state.value;\n\t\t}\n\t},\n\tmutations: {\n\t\tupdateValue(state, payload) {\n\t\t\tstate.value = payload;\n\t\t}\n\t},\n\tactions: {\n\t\tupdateValue({commit}, payload) {\n\t\t\tcommit('updateValue', payload);\n\t\t}\n\t}\n};",
      "doc": "vuex module",
      "filetype": "vue-script-vuex",
      "grammar": "lsp",
      "label": "Vuex Module",
      "matches": {
        "vmodule": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "3b7d5ef4dcdc698f82c71aabfd0809e3": {
      "content": "font-effect ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b85b09eb45311e40727c95dd349af15": {
      "content": "_.mapKeys(${object}, ${iteratee})",
      "doc": "_.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n  return key + value;\n});\n// => { 'a1': 1, 'b2': 2 }\n\nThe opposite of `_.mapValues`; this method creates an object with the\nsame values as `object` and keys generated by running each own enumerable\nstring keyed property of `object` thru `iteratee`. The iteratee is invoked\nwith three arguments: (value, key, object).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-mapkeys",
      "matches": {
        "lodash mapkeys": true
      },
      "source": "javascript/lodash"
    },
    "3b86ae6f36f35faae930daa077576c53": {
      "content": "class ${1:name} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3b95770a0fce12b8908dbcd759baa0a6": {
      "content": "background-repeat repeat",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "3b9fa15cf6f1b522a7f41ff0ba8ffa04": {
      "content": "justify-items: start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ba2432bbd38f4a5e1413ddbca69e9c3": {
      "content": "$this->db->select(${1:sql}, ${2:where});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_db_select": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ba4b0be3df11475d8725fe809b43d58": {
      "content": "<%= label ${1:f}, :${2:field}, \"${3:Label}\" %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "label",
      "matches": {
        "la": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ba8921541a810823cc015719ff7899f": {
      "content": "when {\n\ttag '${1:tag}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whentag": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ba92cc4e86bfb295de338babb113211": {
      "content": "expect($1).toBeCloseTo(${2:number}, ${3:delta});$0",
      "doc": "expects the first argument to be close to the second one base on the delta",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobecloseto",
      "matches": {
        "jest expect tobecloseto": true,
        "tbct": true
      },
      "source": "javascript/jest"
    },
    "3bae103dfd44405c81f66e56039c7c55": {
      "content": "render partial: '${1:item}', object: ${0:@$1}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rpo": true
      },
      "source": "vim-snippets/snippets"
    },
    "3bae1f226dc553797087f6de2412c100": {
      "content": "(unless=${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unless": true
      },
      "source": "vim-snippets/snippets"
    },
    "3baf233ec4346689c2e82553b5bca150": {
      "content": "yup.lazy()",
      "doc": "yup.lazy((value: any) => Schema): Lazy\n\nCreates a schema that is evaluated at validation/cast time. Useful for creating\nrecursive schema like Trees, for polymorphic fields and arrays.CAUTION! When defining parent-child recursive object schema, you want to reset the default()\nto undefined on the child otherwise the object will infinitely nest itself when you cast it!.let node = object({\n  id: number(),\n  child: yup.lazy(() => node.default(undefined))\n});\n\nlet renderable = yup.lazy(value => {\n  switch (typeof value) {\n    case \"number\":\n      return number();\n    case \"string\":\n      return string();\n    default:\n      return mixed();\n  }\n});\n\nlet renderables = array().of(renderable);\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "yup-lazy",
      "matches": {
        "yup lazy": true
      },
      "source": "javascript/yup"
    },
    "3bb1aa08e7f9d413b00437b68bd5df79": {
      "content": "hasOwnProperty(${0})",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "has": true
      },
      "source": "snippets/javascript"
    },
    "3bb40d2ab9e1e202ecdef14ed8a06f1b": {
      "content": "<input type=\"radio\" name=\"${1}\" value=\"value\">${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inputradio": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3bb685859248802cdf005568e4d6e107": {
      "content": "background-color: #${1:fff};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgc": true
      },
      "source": "vim-snippets/snippets"
    },
    "3bbdf964cd51a9e02a7c250d25c158b0": {
      "content": "let ${1} = ${2:${VISUAL}} in\n${0}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "3bc570dfe8a2c3952d5ddb508ff7fd66": {
      "content": "console.clear();",
      "doc": "Clears the console",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleClear",
      "matches": {
        "ccl": true
      },
      "source": "vscode-javascript/snippets"
    },
    "3bc698a9194cfbc376522b4d17144929": {
      "content": "v-cloak",
      "doc": "Does not expect expression",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-cloak",
      "matches": {
        "vcloak": true,
        "vue v-cloak": true
      },
      "source": "javascript/vue"
    },
    "3bcd9661970365ab763ac2c95575dd5d": {
      "content": "max-height: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mah": true
      },
      "source": "vim-snippets/snippets"
    },
    "3bcf6a9c5bc7357b3118da00cedd4727": {
      "content": "font-stretch: condensed;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "3bd6f3dea9d251f052ead23e835ee256": {
      "content": "clean:\n  rm -f ${0}",
      "doc": "",
      "filetype": "make",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clean:": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3be54c2d4216df2269214a5ad886d564": {
      "content": "<iframe src=\"${1}\"></iframe>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iframe": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3befc32aa9ae9d10d0360ffd2ed26848": {
      "content": "expect($1).toBeDefined();$0",
      "doc": "expects the argument is defined",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobedefined",
      "matches": {
        "jest expect tobedefined": true,
        "tbd": true
      },
      "source": "javascript/jest"
    },
    "3c0606d87ff28766dfc637d9b7ea2a9f": {
      "content": "order: ${0:0};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "or": true
      },
      "source": "vim-snippets/snippets"
    },
    "3c082ea02f4d0cf451c8fd8c40162d29": {
      "content": "${1:obj}.mouseout(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mout": true
      },
      "source": "snippets/javascript"
    },
    "3c084239132b9248c2100a0bacbc0f5e": {
      "content": "font-stretch: ultra-condensed;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:uc": true
      },
      "source": "vim-snippets/snippets"
    },
    "3c1d145ea0cf5cfef26ea43037b2d730": {
      "content": "import ipdb; ipdb.set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "import ipdb..",
      "matches": {
        "ipdb": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3c1e6bf7c1d4ca7a9048f53e11a377ff": {
      "content": "case '${1:case}':\n\t${0:${VISUAL}}\n\tbreak;",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "case 'xyz': ... break",
      "matches": {
        "case": true
      },
      "source": "snippets/javascript"
    },
    "3c233e0f07d80196db82c75fe13e5810": {
      "content": "mixed.default()",
      "doc": "mixed.default(): Any\n\nCalling default with no arguments will return the current default value",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-default",
      "matches": {
        "yup mixed default": true
      },
      "source": "javascript/yup"
    },
    "3c2bb232d7ceb16eece0250b0505f70e": {
      "content": "function mapDispatchToProps(dispatch) {\n\treturn {\n\t}\n\n}",
      "doc": "Adds the redux mapDispatchToProps function",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "dispatchRedux",
      "matches": {
        "disp": true
      },
      "source": "vscode-react/snippets"
    },
    "3c35b26a319249dcf2edab6eb7fd4e58": {
      "content": "${1:deferred}.done(${2:callbacks})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Ddone": true
      },
      "source": "snippets/javascript"
    },
    "3c41c527ae883184f7aecb6c0eec2b11": {
      "content": "namespace {\n\t${0}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ans": true
      },
      "source": "vim-snippets/snippets"
    },
    "3c4ae7316e0999e8a6805710ce5c0437": {
      "content": "wont_be ${0}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wb": true
      },
      "source": "vim-snippets/snippets"
    },
    "3c5029dba69053e2a31121b873071e0a": {
      "content": "<% ${0:} %>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<%": true
      },
      "source": "vim-snippets/snippets"
    },
    "3c5a0a7884165a13300db5c22a8bbb2e": {
      "content": "it \"${1}\" $\n\t$0",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "it": true
      },
      "source": "vim-snippets/snippets"
    },
    "3c6818a315718444f5856cbb36789aba": {
      "content": "switch (${1:expression}) {\n\tcase '${3:case}':\n\t\t${4}\n\t\tbreak;\n\t${0}\n\tdefault:\n\t\t${2}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "snippets/javascript"
    },
    "3c6b5a75c33a1160adb9f6c12374d0f3": {
      "content": "<LimitExcept ${1:POST GET}>\n\t${0:${VISUAL}}\n</LimitExcept>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "limitexcept": true
      },
      "source": "vim-snippets/snippets"
    },
    "3c6b658bb5f66b6ba99e292e017078e6": {
      "content": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
      "doc": "Invoked immediately before rendering when new props or state are being received. [DEPRECATION NOTE]: This method is deprecated in React 16.3",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentWillUpdate",
      "matches": {
        "cwup": true
      },
      "source": "vscode-react/snippets"
    },
    "3c71bf99a219cad2319bcdd5639d1fd1": {
      "content": "border-left-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdli": true
      },
      "source": "vim-snippets/snippets"
    },
    "3c7b60babbd89b4f8fb42998180f3f31": {
      "content": "(binding [*out* *err*]\n  (println ${0:TARGET}))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "warn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3c7da7ade3757fb3105d93d91a981fd5": {
      "content": "_.difference(${array}, ${values})",
      "doc": "_.difference([2, 1], [2, 3]);\n// => [1]\n\nCreates an array of `array` values not included in the other given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. The order and references of result values are\ndetermined by the first array.\n\n**Note:** Unlike `_.pullAll`, this method returns a new array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-difference",
      "matches": {
        "lodash difference": true
      },
      "source": "javascript/lodash"
    },
    "3c83c3d2a81d5bb316a1f1003b21047d": {
      "content": "${1:this}.get('${2:property}');",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "this.get('property');",
      "matches": {
        "eget": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3c864129700c190d6d22ec9623ebec4e": {
      "content": "bezierVertex(${1:cx1}, ${2:cy1}, ${3:cx2}, ${4:cy2}, ${5:x}, ${0:y});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bezierVertex": true
      },
      "source": "vim-snippets/snippets"
    },
    "3c98a62850e3003f154df4c3bfeaf7f2": {
      "content": "if ${1} then\n\t${2}\nelse\n\t${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "3c9a7d0f68abee0b54a7999030847ae5": {
      "content": "\\$this->",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ca3cbfb5818b50389b8c5c19d1742ee": {
      "content": "it('should $1', () => {\n\t$0\n})\n",
      "doc": "Testing `it` block",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "itBlock",
      "matches": {
        "tit": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "3cb2d2e8094f0e7a872170d04a9b07aa": {
      "content": "height: ${1:auto};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "height",
      "matches": {
        "h": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3cc35554ef43bc7443b3e655775659a3": {
      "content": "margin ${1:0} ${0:0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:2": true
      },
      "source": "vim-snippets/snippets"
    },
    "3cc616559b8b484ebd1afeebffb3638c": {
      "content": "date.max()",
      "doc": "date.max(limit: Date | string | Ref, message?: string | function): Schema\n\nSet the maximum date allowed, When a string is provided it will attempt to cast to a date first\nand use the result as the limit.arrayDefine an array schema. Arrays can be typed or not, When specifying the element type, cast and isValid\nwill apply to the elements as well. Options passed into isValid are passed also passed to child schemas.\nSupports all the same methods as mixed.let schema = yup.array().of(yup.number().min(2));\n\nawait schema.isValid([2, 3]); // => true\nawait schema.isValid([1, -24]); // => false\n\nschema.cast([\"2\", \"3\"]); // => [2, 3]\nYou can also pass a subtype schema to the array constructor as a convenience.array().of(yup.number());\n// or\narray(yup.number());\nThe default cast behavior for array is: JSON.parseFailed casts return: null;",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "date-max",
      "matches": {
        "yup date max": true
      },
      "source": "javascript/yup"
    },
    "3ccf9475ecf16517e3952befd4b162e2": {
      "content": "package main\nimport (\n  \"fmt\"\n)\nfunc main() {\n  fmt.Printf(\"Hello, world\\n\")\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "package main\\nimport fmt...",
      "matches": {
        "helloworld": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3cdde72997e05bebb1f6efe0b5cfdfdf": {
      "content": "var ${1:name}: ${2:Int}${0}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "var": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3ce5975c1ecb577503147c5ac4fa5f5e": {
      "content": "for ${1:item} in ${2:collection} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iter": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3ce9fe83788118574414e65e68032163": {
      "content": "empty-cells show",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "3cec65cc7935e9040e4ca566d09c557d": {
      "content": "props.${1};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "props",
      "matches": {
        "pp": true
      },
      "source": "snippets/javascript"
    },
    "3cee7ffd88880c2c5acd90ecb3bb11b2": {
      "content": ".. tip::\n\t${0:my tips}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tip:": true
      },
      "source": "vim-snippets/snippets"
    },
    "3cf0ac7c009132e6b4524cbe77ce27b9": {
      "content": "border-style: groove",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:g": true
      },
      "source": "vim-snippets/snippets"
    },
    "3cf15faa5c149afcf099df166a27c0cf": {
      "content": "const ${1:function_name} = (${2}) => {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "caf": true
      },
      "source": "snippets/javascript"
    },
    "3d04d48e8f822ea4e02ca7795f8b1ca8": {
      "content": "require('svelte/register');\nconst ${1:App} = require('${2:./App.svelte}').default;",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-register",
      "matches": {
        "svelte register": true,
        "svreg": true
      },
      "source": "javascript/svelte"
    },
    "3d138c8f84af674cdd635dfd15cd95e0": {
      "content": "class ${1} extends ${2} {\n\t${3}\n\tconstructor(public ${4}: ${5: any}) {\n\t\t${6}\n\t}\n\t${0}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts class extends",
      "matches": {
        "tclax": true
      },
      "source": "vim-snippets/snippets"
    },
    "3d279c7f7609cd8f01ca07130ef11f91": {
      "content": "${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}\n$1 ${5}= ${0}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn2": true
      },
      "source": "vim-snippets/snippets"
    },
    "3d34e7a07f819544b263b53d75d2ba2d": {
      "content": "computed: {\n\t${1:name}() {\n\t\treturn this.${2:data} ${0}\n\t}\n},",
      "doc": "computed value",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Computed",
      "matches": {
        "vcomputed": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "3d37e140b5235117793c33b75a6b9130": {
      "content": "import React, { PureComponent } from 'react'\nimport { Text, View } from 'react-native'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativePureComponent",
      "matches": {
        "rnpc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "3d4e90c647b02519d0a33414070ccec9": {
      "content": "place-content: flex-end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "3d5b8007d6789b38b9ab8710c2a71ab1": {
      "content": "public int ${1} { get; internal set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi+&": true
      },
      "source": "vim-snippets/snippets"
    },
    "3d6afa1da8269acde9a1b3e61bb7b592": {
      "content": "actions: {\n\t${1:updateValue}({commit}, ${2:payload}) {\n\t\tcommit('${1:updateValue}', ${2:payload});\n\t}\n}",
      "doc": "vuex action",
      "filetype": "vuex",
      "grammar": "lsp",
      "label": "vuex-action",
      "matches": {
        "vaction": true,
        "vuex action": true
      },
      "source": "javascript/vuex"
    },
    "3d71000ef87ecb2c253e92fe995c7dfd": {
      "content": "$this->shouldBe$1();",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldBeXYZ()",
      "matches": {
        "sbstate": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3d72e68c9bf630932d23f3ac877f0d34": {
      "content": "align-self: end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "3d73ebedb62ad775b947d33a1abc24a4": {
      "content": "PropTypes.any,",
      "doc": "Any prop type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-any",
      "matches": {
        "prop-types any": true,
        "ptany": true
      },
      "source": "javascript/prop-types"
    },
    "3d74c1d2e66ae3b0eba7688ea1c1c650": {
      "content": "background-origin: content-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo:cb": true
      },
      "source": "vim-snippets/snippets"
    },
    "3d7d6bdbad9265ba8bd57fc4931d1be7": {
      "content": "text-justify: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj": true
      },
      "source": "vim-snippets/snippets"
    },
    "3d90a03c84de381de140c46592340380": {
      "content": "\\\\lstinline|${1}| ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lsi": true
      },
      "source": "vim-snippets/snippets"
    },
    "3d9d0284816b569dae3274e4dd2c0171": {
      "content": "if !reflect.DeepEqual(${1:expected}, ${2:actual}) {\n\t_, file, line, _ := runtime.Caller(0)\n\tfmt.Printf(\"%s:%d:\\n\\n\\texp: %#v\\n\\n\\tgot: %#v\\n\\n\", filepath.Base(file), line, $1, $2)\n\tt.FailNow()\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "equals: test two identifiers with DeepEqual",
      "matches": {
        "eq": true
      },
      "source": "gosnippets/snippets"
    },
    "3da0223057dcfa554e871169810a7ecf": {
      "content": "saveFrame(\"${1:filename-####}${0:.ext}\");",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "saveFrame": true
      },
      "source": "vim-snippets/snippets"
    },
    "3da49956defa1cc856ce83fe61e56dac": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"postcss\" scoped>\n\n</style>",
      "doc": "Base for Vue File with PostCSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-single-file-component-with-postcss",
      "matches": {
        "vue base postcss": true
      },
      "source": "javascript/vue"
    },
    "3da9d534c5cfb5073c0335bf14e3928a": {
      "content": "scan(${1:/pattern/}) do |${2:match}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scad": true
      },
      "source": "vim-snippets/snippets"
    },
    "3db42ee1a172b216256980e7a0a6a1f4": {
      "content": "if err != nil {\n\tt.Errorf(\"${0:message}\")\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err != nil { t.Errorf(...) }",
      "matches": {
        "ter": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "3dba666637b785caaed197278d0925b9": {
      "content": "<link rel=\"stylesheet\" href=\"${1:style.css}\" type=\"text/css\" media=\"${2:all}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link:css": true
      },
      "source": "vim-snippets/snippets"
    },
    "3dbdb8a7619a1d6f933d7b2f21a236c0": {
      "content": "font-variant: normal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fv:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "3dc2b7972c42348a434d35f2f0b42803": {
      "content": "assert_difference '${1:Model}.${2:count}', ${3:1} do\n\t${0}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asd": true
      },
      "source": "vim-snippets/snippets"
    },
    "3dc43b406b7257e966fe0ec74749e815": {
      "content": "<c:import url=\"${1}\" />",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cimport": true
      },
      "source": "vim-snippets/snippets"
    },
    "3dc4bcc296fe922b622aec21016e4822": {
      "content": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
      "doc": "Invoked immediately after the component's updates are flushed to the DOM.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentDidUpdate",
      "matches": {
        "cdup": true
      },
      "source": "vscode-react/snippets"
    },
    "3dc876e285bf8288fd338f4413e49290": {
      "content": "list-style-type: lower-roman",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:lr": true
      },
      "source": "vim-snippets/snippets"
    },
    "3dc90e9baf6344881a5f7b3cbec67ecc": {
      "content": "where\n\t${1} = ${0}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "where": true
      },
      "source": "vim-snippets/snippets"
    },
    "3dcd7c1b19ebdb5a485f3ce91426056d": {
      "content": "IO.inspect ${0}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "IO.inspect",
      "matches": {
        "ins": true
      },
      "source": "vim-snippets/snippets"
    },
    "3dcdb3d3f32c77971daab6283536a77b": {
      "content": "else\n{\n\t${1:}\n}",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "3dd04f45bd3f867be7b1d593fa9e7360": {
      "content": "has ${1:attribute} => (\n\tis\t    => '${2:ro|rw}',\n\tisa \t=> '${3:Str|Int|HashRef|ArrayRef|etc}',\n\tdefault => sub {\n\t\t${4:defaultvalue}\n\t},\n\t${0:# other attributes}\n);",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "has": true
      },
      "source": "vim-snippets/snippets"
    },
    "3dd598294679df4c436affb3e6386f18": {
      "content": "background-size contain",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz:ct": true
      },
      "source": "vim-snippets/snippets"
    },
    "3de372a90b450b4bb010f464e2c84d57": {
      "content": "Session::display();",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_session_display": true
      },
      "source": "vim-snippets/snippets"
    },
    "3de9c45e82d43f8ea4fa05a212ced3cb": {
      "content": "class ${1:class_name}:\n\t\"\"\"${2:description}\"\"\"\n\tdef __init__(self, ${3:args}):\n\t\t${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clai": true
      },
      "source": "vim-snippets/snippets"
    },
    "3de9e7095fa68cf52019306337ee6354": {
      "content": "\\${1:#${0:optional}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${1:#optional}",
      "matches": {
        "1#": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3df2d4dfbe321644a44ec4f25430d7d7": {
      "content": "font-weight: lighter",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:lr": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e0515ecc72444ffa948467ab75a632a": {
      "content": "defrecord ${1:record_name}, ${0:fields}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defr": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e07dfc012a0b25cb7f5c72a0f5e0ffe": {
      "content": "var ${1:margin} = { top: ${2:10}, right: ${3:10}, bottom: ${4:10}, left: ${5:10} };\nvar ${6:width} = ${7:970} - $1.left - $1.right;\nvar ${8:height} = ${9:500} - $1.top - $1.bottom;\nvar ${10:svg} = d3.select(\"${11}\").append(\"svg\")\n  .attr(\"width\", $6 + $1.left + $1.right)\n  .attr(\"height\", $8 + $1.top + $1.bottom)\n    .append(\"g\")\n  .attr(\"transform\", \"translate(\" + $1.left + \",\" + $1.top + \")\")",
      "doc": "",
      "filetype": "javascript-d3",
      "grammar": "snu",
      "label": "",
      "matches": {
        "marginconvention": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e1474c1e54cfdd77b69727bc0ffdf46": {
      "content": "<xsl:text>${0}</xsl:text>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "text": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e2132cc37d49f157519610f7a1e76d1": {
      "content": "filter '${1:filterName}', (${2:injectables}) ->\n\t(input, ${3:args}) ->\n\t\t${4}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngmfi": true
      },
      "source": "snippets/coffee"
    },
    "3e231fe1f16589de3cbd0aa634b7caf2": {
      "content": "logger.warn",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "logger.warn",
      "matches": {
        "logw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3e252c5b026bb581367ef5642e5d019b": {
      "content": "border-bottom: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdb:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e2c21ebb8c34cc28dc0caf70be02ef0": {
      "content": "min-width: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "min-width": true,
        "miw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3e2da16b216279f0100834601fe71128": {
      "content": "if (${1}) {\n\t${2}\n}\nelse {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e3076a2d4cf14220e0981b88c9d70d5": {
      "content": "{%- comment -%}${0:${VISUAL}}{%- endcomment -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comment-": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e334a0a010147e8d5edb3a308610b98": {
      "content": "<ng-content select=\"${0:selector}\"></ng-content>",
      "doc": "Angular ng-content",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ng-content",
      "matches": {
        "a-ng-content": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "3e39df63fb769919249fb147ea382f8c": {
      "content": "\\begin{eqnarray*}\n\t${1:TARGET}\n\\end{eqnarray*}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{eqnarray*} \\eqnarray*": true,
        "eqnarray*": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3e44ae78fc1fb6d5207770de5e02ef23": {
      "content": "${1:promise}.then((${2:value}) => {\n\t${0}\n})",
      "doc": "Promise.then",
      "filetype": "base",
      "grammar": "lsp",
      "label": "promise-then",
      "matches": {
        "base promise then": true
      },
      "source": "javascript/base"
    },
    "3e4896490d38171a335be95a4f2fda9c": {
      "content": "${1:Table}~\\\\ref{${2:tab:}}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "reference to a table",
      "matches": {
        "table": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e4ff854865e57d1c70e7b0c9d61fab2": {
      "content": "_.lowerCase(${string})",
      "doc": "_.lowerCase('--Foo-Bar--');\n// => 'foo bar'\n\n_.lowerCase('fooBar');\n// => 'foo bar'\n\n_.lowerCase('__FOO_BAR__');\n// => 'foo bar'\n\nConverts `string`, as space separated words, to lower case.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-lowercase",
      "matches": {
        "lodash lowercase": true
      },
      "source": "javascript/lodash"
    },
    "3e5550ad236c0d4fe7d9efc88732e16d": {
      "content": "try:\n\t${1:pass}\nexcept ${2:#:ExceptionClass}:\n\t${3:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "try: ... except ...: ...",
      "matches": {
        "tryexcept": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3e5c7e32cfb9c1b5e99c912e9ad5d90e": {
      "content": "require_once '${1:#:file}';${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reqo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3e5dae6b0052432aea13e084538a358f": {
      "content": "grid-auto-rows: max-content",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar:mac": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e742b6d909b82e53e7cb1ec51655ad5": {
      "content": "_.isObject(${value})",
      "doc": "_.isObject({});\n// => true\n\n_.isObject([1, 2, 3]);\n// => true\n\n_.isObject(_.noop);\n// => true\n\n_.isObject(null);\n// => false\n\nChecks if `value` is the\n[language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\nof `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isobject",
      "matches": {
        "lodash isobject": true
      },
      "source": "javascript/lodash"
    },
    "3e791f48b5e88fb21e7e8bb4e94b6ec1": {
      "content": "if err != nil {\n\tpanic(${1})\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error panic",
      "matches": {
        "errp": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "3e7b0e9ef12af773247e9aa59accac66": {
      "content": "action:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "action:",
      "matches": {
        "action": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3e83556a4f08397e1d3b4f843022cac7": {
      "content": "margin: ${1:0} ${2:0} ${3:0} ${4:0};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:4": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e856212c19a7778a9d4c9092d778b36": {
      "content": "${1:deferred}.then(${2:doneCallbacks}, ${3:failCallbacks}, ${4:progressCallbacks})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dthen": true
      },
      "source": "snippets/coffee"
    },
    "3e860ab4561e7807a6cdce01a525fa5d": {
      "content": "atan(${0:rad});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "atan": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e900f590f76dc66d98b450efdfeaa90": {
      "content": "background-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgi": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e9105f6e88da5139948d1cdc7be5293": {
      "content": "{% endhtml %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endhtml",
      "matches": {
        "endhtml": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e970b97c05f48eda8b5e6ff8c0bb1bf": {
      "content": "must_equal ${0:other}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "me": true
      },
      "source": "vim-snippets/snippets"
    },
    "3e9757e761b5b269ddb5ab5c67050f12": {
      "content": "border-right-style: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrs": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ea02cb4e97777eb11fe342b2b0fa69c": {
      "content": "$.isArray(${1:obj})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isarr": true
      },
      "source": "snippets/coffee"
    },
    "3ea1033448859d58b58a1563248c239b": {
      "content": "t.boolean :${1:title}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcb": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ead7b6aa04797dc2ecddda95190297c": {
      "content": "margin-bottom: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "3eb52c99f053efb87b564dad954ab70a": {
      "content": "try:\n\t# Short option syntax: \"hv:\"\n\t# Long option syntax: \"help\" or \"verbose=\"\n\topts, args = getopt.getopt(sys.argv[1:], \"${1:short_options}\", [${2:long_options}])\nexcept getopt.GetoptError, err:\n\t# Print debug info\n\tprint str(err)\n\t${3:error_action}\nfor option, argument in opts:\n\tif option in (\"-h\", \"--help\"):\n\t\t${0}\n\telif option in (\"-v\", \"--verbose\"):\n\t\tverbose = argument",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "getopt": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ebacc06aa2a50ebb9a5856374b6160c": {
      "content": "align-content: stretch",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ebe181d94edd5c1a7d1b5e9eae82fe2": {
      "content": "${1:obj}.undelegate(${2:selector expression}, ${3:event}, ${4:handler})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "undele": true
      },
      "source": "snippets/coffee"
    },
    "3ec64cbb4d57bff3ff13250760fa11d0": {
      "content": "<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jstl:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ed02ee18d735630afb6e624d06e0d19": {
      "content": "float64",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "float64",
      "matches": {
        "f6": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ed29306482ea703773252774e0a469e": {
      "content": "number.positive()",
      "doc": "number.positive(message?: string | function): Schema\n\nValue must be a positive number.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "number-positive",
      "matches": {
        "yup number positive": true
      },
      "source": "javascript/yup"
    },
    "3ed3f3fef09aae8a6bcba0a302bdd1a4": {
      "content": "ddply(${1:frame}, ${2:variables}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dd": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ed6f925c4aae9f728b4ff8306cfac3e": {
      "content": "elsif ${1} then\n\t${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "elsif",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ed8cdb0442e498c5b0e20a401ee01a4": {
      "content": "{%- section '${1:snippet}' -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "section-": true
      },
      "source": "vim-snippets/snippets"
    },
    "3edb99991a8382abc0b314ed649151af": {
      "content": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportAs",
      "matches": {
        "exa": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "3ee331cdcf99bf0edab42fff2c638a7a": {
      "content": "grid-column-start ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gcs": true
      },
      "source": "vim-snippets/snippets"
    },
    "3eef3f74da4c62e8d30faeec56cedf91": {
      "content": "border-top: ${1:1px} ${2:solid} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdt+": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ef19ff88d807cbdccdf0e3122f06794": {
      "content": "<%= ${1} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rce": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ef8e7c27e03ac0bebd92a53ec11a9ad": {
      "content": "waits($1)",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "waits (coffee)",
      "matches": {
        "wa": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3efa55d604eebac9d74ae6173e94d2fd": {
      "content": "${fn:startsWith(${1:string}, ${0:prefix})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "startswith": true
      },
      "source": "vim-snippets/snippets"
    },
    "3efb60fb32162e7c9dd7c714e1465c0b": {
      "content": "_.pullAll(${array}, ${values})",
      "doc": "var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n\n_.pullAll(array, ['a', 'c']);\nconsole.log(array);\n// => ['b', 'b']\n\nThis method is like `_.pull` except that it accepts an array of values to remove.\n\n**Note:** Unlike `_.difference`, this method mutates `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-pullall",
      "matches": {
        "lodash pullall": true
      },
      "source": "javascript/lodash"
    },
    "3efe3a24943ab16cb10a8be8aea9ca76": {
      "content": "(${1:a}, ${2:b}, ${3:c}, ${0:d})",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tup3": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f056ddb508fd6ace1ae07967208e8c1": {
      "content": "private string ${1}(${2})\n{\n\t${0:return \"\";}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ms-": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f08beab4256712459f93b575139a44c": {
      "content": "${1:obj}.removeAttr('${2:attribute name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rema": true
      },
      "source": "snippets/coffee"
    },
    "3f21d25f5c58f31ff3c3eac88f9dcc03": {
      "content": "break",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "break",
      "matches": {
        "br": true
      },
      "source": "gosnippets/snippets"
    },
    "3f26ff721397d801c0c4f411ed871762": {
      "content": "cy.request({\n\tmethod: '${1:METHOD}',\n\turl: '${2:url}',\n\tbody: ${3:body}\n});",
      "doc": "Make an HTTP request.",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-request",
      "matches": {
        "cypress request": true
      },
      "source": "javascript/cypress"
    },
    "3f377a8c9b931adb72dfcd1d3e422b40": {
      "content": "text-shadow: ${1:0} ${2:0} ${3:0} #${4:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tsh+": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f394afc51835f16ed802c6f247659bd": {
      "content": "_Generic(${1:#:expression}, ${2:#:association-list})",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_Generic": true,
        "generic, select": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3f47058816d89fe4a03e305f179c1474": {
      "content": "beforeEach(() => {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine-arrow",
      "grammar": "snu",
      "label": "before each (js)",
      "matches": {
        "bef": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3f4c45691be09c7c8edfdefe1fd4b541": {
      "content": "@after-appear=\"$1\"$0",
      "doc": "@after-appear=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-after-appear",
      "matches": {
        "afterappearevent": true,
        "vue after-appear": true
      },
      "source": "javascript/vue"
    },
    "3f4dd0b9a02784e13c61524f2105001a": {
      "content": "{{#${1:value}}}\n${0:${VISUAL}}\n{{/$1}}",
      "doc": "",
      "filetype": "mustache",
      "grammar": "snu",
      "label": "# {{#value}} ... {{/value}}",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f50f93ca176a4e1a8bb1d3480b907a4": {
      "content": "alias ${0:module_name}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ali": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f521bb9a9fffa216035da2eb750d201": {
      "content": "font-family: ${1:Arial, \"MS Trebuchet\"}, ${2:sans-}serif;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "font-family:   family (font)",
      "matches": {
        "font": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3f531d0af56b380cc0b9dd4270794aea": {
      "content": "text-wrap: unrestricted;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f5509f3a1bd1c7a9c0103a5210c839f": {
      "content": "&#x21A9;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "return": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f5b527b9864aeea58bad11af5a12dcb": {
      "content": "border-top-width: ${1:1}px",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-top-width: size (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3f5f4426a5c4fda7bfc17b4ee6cac45b": {
      "content": "func Test${1:name}(t *testing.T) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "test function",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f63ca23ee4b45623d702e2f61e2a17a": {
      "content": "PropTypes.string,",
      "doc": "String prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeString",
      "matches": {
        "pts": true
      },
      "source": "vscode-react/snippets"
    },
    "3f73bf22ca83d522d9042c5be1f26a38": {
      "content": "height auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f7461901afe1ec2ac24cb705be93025": {
      "content": "-webkit-box-shadow: ${1:0} ${2:0} ${3:0} #${4:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:w+": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f7b82b80c190ce5d24ff521dd61d93c": {
      "content": "require '${1}'",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "require",
      "matches": {
        "req": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f82c1fe88f48c75e4b031c1f7d7d5d4": {
      "content": "divisibleby:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "divisibleby": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3f83b74f08b355473afdd285e1db0e56": {
      "content": "removetags:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "removetags": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3f881944a9ae3f0167d73f52c6e8bfc7": {
      "content": "def ${1:model_class_name}_params\n\tparams.require(:$1).permit()\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defparams": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f88699237e70ebd7e4354098fdb560f": {
      "content": "overflow-y: scroll",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f9058f35526fa7b651ca18e7d038d3f": {
      "content": "border-bottom-left-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbli": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f96dacc72bf9deccaea8fc1bc0f507d": {
      "content": "String",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "str": true
      },
      "source": "vim-snippets/snippets"
    },
    "3f9b07de5e037cba67e76bf2ab1f487d": {
      "content": "for [${1:str} in '${2:#:string list}']",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "for [string in \"A B C...\"]",
      "matches": {
        "fors": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3f9d5a566caede334b9b9b307c131f83": {
      "content": "set oldDelims to AppleScript's text item delimiters\nset AppleScript's text item delimiters to {\"${1:,}\"}\n${0:#:TARGET}\nset AppleScript's text item delimiters to oldDelims",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "delim": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3fa0549ca75fcf7e393cd45b4d823cc2": {
      "content": "dictsort(case_sensitive=${1:False}, by=${2:'key'})",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "sort and yield (key, value) pairs",
      "matches": {
        "dictsort": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3fa564ec56848e36ad687f9a857a3a48": {
      "content": ".footnote:[${1:footnotetext}]${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "footnote",
      "matches": {
        "footnote": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3fac944b7f1931bdcda414e0955e2a2d": {
      "content": "$.contains(${1:container}, ${0:contents});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "contains": true
      },
      "source": "snippets/javascript"
    },
    "3fb116d10edc217a8a06b98ce1ff3e8f": {
      "content": "white-space nowrap",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:nw": true
      },
      "source": "vim-snippets/snippets"
    },
    "3fb2b45e6a93c6d371dd4384b4a760fb": {
      "content": "try {\n\t${0:${VISUAL}}\n} catch(${1:Exception} ${2:e}) {\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "3fc5ff3873232ba9609f6fba505060c9": {
      "content": "width: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w": true,
        "width": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "3fc967b5efd1aae5edff50b8e79f541a": {
      "content": "_.uniq(${array})",
      "doc": "_.uniq([2, 1, 2]);\n// => [2, 1]\n\nCreates a duplicate-free version of an array, using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons, in which only the first occurrence of each element\nis kept. The order of result values is determined by the order they occur\nin the array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-uniq",
      "matches": {
        "lodash uniq": true
      },
      "source": "javascript/lodash"
    },
    "3fcc045462be494123ab71353f671e44": {
      "content": "trait ${1:name}${2: extends }${3: with} {\n\t${0:}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trait": true
      },
      "source": "vim-snippets/snippets"
    },
    "3fcf299bb9df1d90ec92b93c5ceaefe1": {
      "content": "{% autoescape ${0:xhtml_escape | None} %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "autoescape": true
      },
      "source": "vim-snippets/snippets"
    },
    "3fd52227a4a83a71306579cc29134298": {
      "content": "_.keyBy(${collection}, ${iteratee})",
      "doc": "var array = [\n  { 'dir': 'left', 'code': 97 },\n  { 'dir': 'right', 'code': 100 }\n];\n\n_.keyBy(array, function(o) {\n  return String.fromCharCode(o.code);\n});\n// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n\n_.keyBy(array, 'dir');\n// => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n\nCreates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the last element responsible for generating the key. The\niteratee is invoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-keyby",
      "matches": {
        "lodash keyby": true
      },
      "source": "javascript/lodash"
    },
    "3fd89214700fb243ffcee77a1f07a0dd": {
      "content": "import { View, Text } from 'react-native'\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_reactNativeFunctionalExportComponent",
      "matches": {
        "_rnfe": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "3fdb77789453c700d011521e793e371d": {
      "content": "center:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "center": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "3fe4ceb14bfca66eeadbe253790bfd62": {
      "content": "<% require 'pry'; binding.pry %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pry": true
      },
      "source": "vim-snippets/snippets"
    },
    "3fec143246df95057b8ad27e70e0fbae": {
      "content": "PFont ${1:font};\n$1 = loadFont(\"${0:FFScala-32.vlw}\");",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "font": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ff08b68dd7a87f29ecd192f484f94be": {
      "content": "if (${1}) {\n\t${2:${VISUAL}}\n} else {\n\t${0}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "if ... else ...",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "3ff11f6c2d434936b7a14da759c617d5": {
      "content": "_.bind(${func}, ${thisArg}, ${partials})",
      "doc": "function greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n\nvar object = { 'user': 'fred' };\n\nvar bound = _.bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n\n// Bound with placeholders.\nvar bound = _.bind(greet, object, _, '!');\nbound('hi');\n// => 'hi fred!'\n\nCreates a function that invokes `func` with the `this` binding of `thisArg`\nand `partials` prepended to the arguments it receives.\n\nThe `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for partially applied arguments.\n\n**Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\nproperty of bound functions.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-bind",
      "matches": {
        "lodash bind": true
      },
      "source": "javascript/lodash"
    },
    "3fff69cc8434cd6937f7cc5374b37313": {
      "content": "(deftest $1\n\t$0)",
      "doc": "",
      "filetype": "lfe",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "400108c044ab1a18eee19b818ffdb13e": {
      "content": "white-space: nowrap",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:nw": true
      },
      "source": "vim-snippets/snippets"
    },
    "4004e44997edc7f3009c75fbf277b53e": {
      "content": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
      "doc": "Executes the given function after the specified delay in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "setTimeOut",
      "matches": {
        "sto": true
      },
      "source": "vscode-javascript/snippets"
    },
    "40109d173e5ed275a0d7082d36d77c1f": {
      "content": "if ${1} then\n\t${0}\nend if;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "401a07fcd24ca06665ebb4374cb215e4": {
      "content": "import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: ${1:'root'} })\nexport class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {\n\tresolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {\n\t\treturn ${0};\n\t}\n}",
      "doc": "Angular Resolver",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-resolver",
      "matches": {
        "a-resolver": true,
        "angular resolver": true
      },
      "source": "javascript/angular"
    },
    "40202ca3d9b5ab2879c2d65d9b095d09": {
      "content": "_.takeRightWhile(${array}, ${predicate})",
      "doc": "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.takeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n\n// The `_.matches` iteratee shorthand.\n_.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.takeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n\n// The `_.property` iteratee shorthand.\n_.takeRightWhile(users, 'active');\n// => []\n\nCreates a slice of `array` with elements taken from the end. Elements are\ntaken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-takerightwhile",
      "matches": {
        "lodash takerightwhile": true
      },
      "source": "javascript/lodash"
    },
    "4024048ae8f11d08e4a7577a58b80401": {
      "content": "import { View, Text } from 'react-native'\n\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_reactNativeFunctionalComponent",
      "matches": {
        "_rnf": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "4024b5db73ed3498a075f3869f5fd534": {
      "content": "border-left-width: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blw": true,
        "border-left-width": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "402a63a6cca99045d051594f2ffef69b": {
      "content": "${1:obj}.val('${2:text}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "val": true
      },
      "source": "snippets/coffee"
    },
    "4031ad655308f6f270c3c41cc4a80a5a": {
      "content": "border-right-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-right-style: style (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4035af8521f3d76ec1c401b710aefbc6": {
      "content": "console.timeStamp(\"${1:label}\");",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.timeStamp",
      "matches": {
        "ctimestamp": true
      },
      "source": "snippets/javascript"
    },
    "404002ab2072948740dc8ab56a060a98": {
      "content": "validates_presence_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:can't be blank}\"}, if: proc { |obj| ${5:obj.condition?} }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_presence_of if (vpif) 2",
      "matches": {
        "vpif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4043f1396acd5638eb57a324ed7417ff": {
      "content": "display: -moz-inline-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:mib": true
      },
      "source": "vim-snippets/snippets"
    },
    "40452f6c54641feb0b953e80dc019846": {
      "content": "&#x21E7;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "shift": true
      },
      "source": "vim-snippets/snippets"
    },
    "4045eedf2704c8b72ed636b3b14e83ef": {
      "content": "*ngIf=\"${1:expression};else ${2:templateName}\"",
      "doc": "Angular *ngIfElse",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngifelse",
      "matches": {
        "a-ngifelse": true,
        "angular ng if else": true
      },
      "source": "javascript/angular"
    },
    "40470f5d6a848bb9068f3780dec77d59": {
      "content": "${1:deferred}.done(${2:callbacks})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Ddone": true
      },
      "source": "snippets/coffee"
    },
    "40474bf75774811f6e81f53b7337ed33": {
      "content": "align-items: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "4050502e281570569d9bd9136890e70e": {
      "content": "<!DOCTYPE html\nPUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doctypestrict": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4058297ce2e1965c201d0e9381997277": {
      "content": "${1} ? ${2} : ${3:nothing}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "ternary operator",
      "matches": {
        "tern": true
      },
      "source": "vim-snippets/snippets"
    },
    "405be4826423f929394867bc2c37e097": {
      "content": "console.timeEnd(`${1:object}`)",
      "doc": "Console time end wrapper",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleTimeEnd",
      "matches": {
        "cte": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "405d6058e191aff8525bdc45d226a9c1": {
      "content": "when (${1:${VISUAL}}) {\n\t${2} -> ${3}\n}",
      "doc": "",
      "filetype": "kotlin",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whe": true
      },
      "source": "vim-snippets/snippets"
    },
    "405ff7937a1d7d68b9d37c18ed22ad38": {
      "content": "== ${1:Title}\n${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "== heading on level 2",
      "matches": {
        "heading": true,
        "section": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4062c5680139e601581993d464edddfb": {
      "content": "printf(\"${1:#:string}\\n\"${2:, });",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "println": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4070b18fb0b86547bb055e43b1b60ca9": {
      "content": "{% include ${1:#:TARGET} %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "include": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4074edfcdbb25a32565415c43962a017": {
      "content": "_.extend(${object}, ${sources})",
      "doc": "function Foo() {\n  this.a = 1;\n}\n\nfunction Bar() {\n  this.c = 3;\n}\n\nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n\n_.assignIn({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n\nThis method is like `_.assign` except that it iterates over own and\ninherited source properties.\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-extend",
      "matches": {
        "lodash extend": true
      },
      "source": "javascript/lodash"
    },
    "40798083981445c05e853df31aa59c02": {
      "content": "around_create :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "marc": true
      },
      "source": "vim-snippets/snippets"
    },
    "408750e93d37047814a8f4ee9f10d2e9": {
      "content": "for {${1:set i 0}} {${2:\\$i < \\$n}} {${3:incr i}} {\n\t$4\n}\n",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "for... (for)",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4087a11dcd413101cce894b127de68da": {
      "content": "fn ${1:#:func_name}(${2:#:args}) -> ${3:#:()} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "fn () {}",
      "matches": {
        "fn-": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "40b1c1fe873fd2e82584daa0f5b7b0fa": {
      "content": "_.isObjectLike(${value})",
      "doc": "_.isObjectLike({});\n// => true\n\n_.isObjectLike([1, 2, 3]);\n// => true\n\n_.isObjectLike(_.noop);\n// => false\n\n_.isObjectLike(null);\n// => false\n\nChecks if `value` is object-like. A value is object-like if it's not `null`\nand has a `typeof` result of \"object\".",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isobjectlike",
      "matches": {
        "lodash isobjectlike": true
      },
      "source": "javascript/lodash"
    },
    "40c2bedff4982014c7fd31699bb0c3a9": {
      "content": "enum ${1:#:name} {\n    ${0:TARGET}\n};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "enum {}",
      "matches": {
        "enum": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "40c43a53eb9b874f0586ddb00bc9c82e": {
      "content": "${1:FIELDNAME} = models.PositiveSmallIntegerField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "PositiveSmallIntegerField",
      "matches": {
        "mpossmallint": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "40c6492f8151c449d7b54c379082d011": {
      "content": "defmodule ${1:AppName}Web.${2:ChannelName}Channel do\n\tuse $1Web, :channel\nend",
      "doc": "",
      "filetype": "phoenix",
      "grammar": "snu",
      "label": "",
      "matches": {
        "chan": true
      },
      "source": "vim-snippets/snippets"
    },
    "40c6df987e2b74908ef46112596f9331": {
      "content": "${1:obj}.after('${2:Some text <b>and bold!</b>}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "after": true
      },
      "source": "snippets/javascript"
    },
    "40c92f7f06ff31536443c05d86142d40": {
      "content": "${1:YYYY}-${2:MM}-${3:DD} * \"${5:Payee}\" \"${6:Narration}\"\n\t${9:Account} ${10:Amount} ${11:Commodity}\n\t${14:Account} ${15:#:Amount} ${16:#:Commodity}",
      "doc": "",
      "filetype": "beancount",
      "grammar": "snu",
      "label": "transaction",
      "matches": {
        "transaction": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "40d0a94477d4cf8fab41d4b5b31b9c9e": {
      "content": "__${1:init}__",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_": true
      },
      "source": "vim-snippets/snippets"
    },
    "40d48267271e4c74caa08bc5a8a73624": {
      "content": "${1:fn} : ${2:a} -> ${3:a}\n$1 ${4} =\n\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "40e061fa5884864fe95c052f75af2a2c": {
      "content": "if ( ${1:condition} ) {\n\t${2}\n}\nelse {\n\t${3}\n}",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "40e2155f5f25844432f3e41fbfeeb99f": {
      "content": "<xsl:call-template name=\"${1:template}\">\n\t<xsl:with-param name=\"${2:param}\">${3}</xsl:with-param>${4}\n</xsl:call-template>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "with-param",
      "matches": {
        "call-template": true
      },
      "source": "vim-snippets/snippets"
    },
    "40e75012751797f6117855d043eb96df": {
      "content": "${1:deferred}.then(${2:doneCallbacks}, ${3:failCallbacks}, ${4:progressCallbacks})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dthen": true
      },
      "source": "snippets/javascript"
    },
    "40f0e1dee8c5dd7b0e6118223523cdc3": {
      "content": "assert_redirected_to ${0:model}s_path",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "artpp": true
      },
      "source": "vim-snippets/snippets"
    },
    "40f1a803468b6e6e377492615a4a144e": {
      "content": "JSON.stringify ${1}, void, 2",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "str": true
      },
      "source": "vim-snippets/snippets"
    },
    "40f7ba58e767e4048255ba98c8db84c5": {
      "content": "# coding: utf-8\nrequire 'erb'\nputs ERB::Util.url_encode '${1}'",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "urlencode": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "40fe6e668afcfcdcdea1ba2ed2398286": {
      "content": "_.isSymbol(${value})",
      "doc": "_.isSymbol(Symbol.iterator);\n// => true\n\n_.isSymbol('abc');\n// => false\n\nChecks if `value` is classified as a `Symbol` primitive or object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-issymbol",
      "matches": {
        "lodash issymbol": true
      },
      "source": "javascript/lodash"
    },
    "4105daeca87c2e972c5020cafe5dfe47": {
      "content": "abstract ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ab": true
      },
      "source": "vim-snippets/snippets"
    },
    "410a5ed047fce918fd1e6f8cc8a51c6e": {
      "content": "bezierDetail(${0:detail});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bezierDetail": true
      },
      "source": "vim-snippets/snippets"
    },
    "410a896fa626b7b36906df64e9e13753": {
      "content": "fn ${1:#:func_name}(${2:#:args}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "fn () {}",
      "matches": {
        "fn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "410aebbdc0bb93a1a05488dd328e30d7": {
      "content": "for (${1:i} = ${2}; $1 < ${3}; ${4:$1 = $1 + 1})${0:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "for () begin ... end",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "41137614337ada61dedd27f72e07e3b5": {
      "content": "${1:FIELDNAME} = forms.MultipleChoiceField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "MultipleChoiceField",
      "matches": {
        "fmuchoice": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "411cd0daa8936acac7abdc654c98ebbc": {
      "content": "object.camelCase()",
      "doc": "object.camelCase(): Schema\n\nTransforms all object keys to camelCase",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "object-camel-case",
      "matches": {
        "yup object camelcase": true
      },
      "source": "javascript/yup"
    },
    "41311ba83d8f91b806dde67d901dd63f": {
      "content": "@inbook{${1:name},\n\tauthor={${2:author}},\n\ttitle={${3:title}},\n\tsubtitle={${4:subtitle}},\n\tbooktitle={${5:book}},\n\teditor={${6:editor}},\n\tyear={${7:YYYY}},\n\tlocation={${8:somewhere}},\n\tpublisher={${9:publisher}},\n\tpages={${10:NN}--${11:NN}}\n}\n$0",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "In Book reference",
      "matches": {
        "inb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "413a00900a92b700da7222316f94677a": {
      "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: '${1:selector-name}',\n\ttemplate: `$0`\n})\n\nexport class ${2:Name}Component implements OnInit {\n\tconstructor() { }\n\n\tngOnInit() { }\n}",
      "doc": "Angular component with an inline template",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Component with Inline Template",
      "matches": {
        "a-component-inline": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "414d5e4a4542265669d41db9a79b3988": {
      "content": "when ${1:condition}\n\t${0}",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when": true
      },
      "source": "vim-snippets/snippets"
    },
    "4151ce742452c3e0d4f7a6069511e795": {
      "content": "${1:obj}.prevAll('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "preva": true
      },
      "source": "snippets/javascript"
    },
    "41533eb9e2e04d519a8a6bd7999f2c85": {
      "content": "${1:FIELDNAME} = models.CommaSeparatedIntegerField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "CommaSeparatedIntegerField",
      "matches": {
        "mcoseint": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "41537650b742baa8d1e10b9c3da35187": {
      "content": "{% widthratio ${1:this_value} ${2:max_value} ${3:100} %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "widthratio": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4153fa9694f2342cdae8f52ace643bf0": {
      "content": "getters: {\n\t${1:value}: state => {\n\t\treturn state.${1:value};\n\t}\n}",
      "doc": "vuex getter",
      "filetype": "vue-script-vuex",
      "grammar": "lsp",
      "label": "Vuex Getters",
      "matches": {
        "vgetter": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "41556c73843099a54726151f5b52be2b": {
      "content": "import PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport const mapStateToProps = state => ({\n\n})\n\nexport const mapDispatchToProps = {\n \n}\n\nexport const ${1:hocComponentName} = (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n\nexport default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_hocComponentWithRedux",
      "matches": {
        "_hocredux": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "416db9a146276132cf03326293cdcdb1": {
      "content": "useEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:cleanup}\n\t}\n}, [${3:input}])",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useEffect",
      "matches": {
        "useEffect": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "41708cff0c82384d9fbd1a1f23b0f0b2": {
      "content": "<%= render partial: '${1:item}', status: ${0:500} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rps": true
      },
      "source": "vim-snippets/snippets"
    },
    "41753799f79ad3afb705acf513446c1f": {
      "content": "align-items: flex-end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "41851340aa67a2579766c099e4b25313": {
      "content": "grep(${1:pattern}, ${2:x}, ${3:ignore.case = ${4:FALSE}}, ${5:perl = ${6:FALSE}}, ${7:value = ${8:FALSE}}, ${9:fixed = ${10:TRUE}})",
      "doc": "Grep",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "grep2",
      "matches": {
        "grep": true
      },
      "source": "vscode-R/snippets"
    },
    "41855c267203d962711e768ba0eccd11": {
      "content": "cursor: hand;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:ha": true
      },
      "source": "vim-snippets/snippets"
    },
    "41901ef4d23e44faed93aeceb4c04654": {
      "content": "content: no-open-quote",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:noq": true
      },
      "source": "vim-snippets/snippets"
    },
    "41949eab5d08c52f3c84dffe827ecb5f": {
      "content": "repeat ${1} times}\n\t${0:TARGET}\nend repeat",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "rep",
      "matches": {
        "rept": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "41ad6f73fc0a35ffafdf2335dcce9fdd": {
      "content": "if ${1} then\n\t${2}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "41b28df6a789ec82455220c1cf72abbc": {
      "content": "${1:Title}\n=====${2:=}\n${0}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "=": true
      },
      "source": "vim-snippets/snippets"
    },
    "41b29e9b79cd3c2f5eb82ceac5836113": {
      "content": "\\$_SESSION['${1:#:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "session": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "41b79471ecc2af9cb8bc95a8a2ec22ad": {
      "content": "try {\n\t${0:${VISUAL}}\n} catch (${1:e}) {\n\t${2:/* handle error */}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "try { ... } catch(e) { ... }",
      "matches": {
        "try": true
      },
      "source": "snippets/javascript"
    },
    "41b797b7ff7d2b7e201eb4c3231ed922": {
      "content": "font-weight: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw": true
      },
      "source": "vim-snippets/snippets"
    },
    "41bf8a81c02d86c294d476f9bea30022": {
      "content": "if(${1:#:condition})\n\t${2}\nelse()\n\t${3}\nendif()",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "if() else() endif()",
      "matches": {
        "if_else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "41c22f8234491f661175e0f572c0f39f": {
      "content": "{@inheritDoc",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{inheritDoc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "41c83c97c59220919d3259466a3385ca": {
      "content": "import { StyleSheet, Text, View } from 'react-native'\n\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nconst styles = StyleSheet.create({})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_reactNativeFunctionalComponentWithStyles",
      "matches": {
        "_rnfs": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "41d8a5d9810dc59bb80a881fe9c1af05": {
      "content": "@font-face\n\tfont-family: ${1}\n\tsrc: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@f": true
      },
      "source": "vim-snippets/snippets"
    },
    "41db21e7a15b2d0295e6750072bbdf37": {
      "content": "else if (${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "else if ...",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "41ec4f167b99ed988c5180749ee33079": {
      "content": "height: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "41ed696dc8efa1fb9aa1d60749b10160": {
      "content": "|${1:title}|${2:title}|\n|---|---|\n|${3:value}|${4:value}${5:TARGET}|",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": "table template",
      "matches": {
        "table": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "41f3cb8ed869d46be4d621ba62650f6f": {
      "content": "place-items stretch",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "41f7765cc3759491a6576c5e3914df66": {
      "content": "echo CHtml::ajax(array(${0}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhaj": true
      },
      "source": "vim-snippets/snippets"
    },
    "41f8e4ee5de9a1ffd3ca30f5928dd2f2": {
      "content": "const dispatch = createEventDispatcher();",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-dispatch",
      "matches": {
        "svdp": true,
        "svelte dispatch": true
      },
      "source": "javascript/svelte"
    },
    "41ff688e6d687d3d1126581a8f06132d": {
      "content": "border-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "42009dcfb06c51a8348f9d743d7622cb": {
      "content": "this.route.paramMap\n\t.pipe(map(params => params.get('id')), tap(id => (this.id = +id)))\n\t.subscribe(id => {$1});\n$0",
      "doc": "Angular - subscribe to routing parameters",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Routing Params - Subscribe",
      "matches": {
        "a-route-params-subscribe": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "420505019d140fc757099cbb61f11761": {
      "content": "PropTypes.array,",
      "doc": "Array prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeArray",
      "matches": {
        "pta": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "4217e7ddd4588fe7c6ac677662565db2": {
      "content": "place-items start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "4218763779eeae6a1311283822917ffb": {
      "content": "::after",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "::a": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "421f8c8f708d7bb934397295767dab9d": {
      "content": "${fn:substringBefore(${1:string}, ${0:substr})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "substr:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "4221965aa80ae2be8e1074c37244c912": {
      "content": "_.isString(${value})",
      "doc": "_.isString('abc');\n// => true\n\n_.isString(1);\n// => false\n\nChecks if `value` is classified as a `String` primitive or object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isstring",
      "matches": {
        "lodash isstring": true
      },
      "source": "javascript/lodash"
    },
    "42221626359be80db035124781f75560": {
      "content": "[Conditional(\"${1:#:SYMBOL}\")]${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cond": true,
        "conditional": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "422251f0768ae8402c8a243508e1c245": {
      "content": "var ${1:my_object} = Object.defineProperties(\n\t${2:new Object()},\n\t{\n\t\t${3:property} : {\n\t\t\tget : function $1_$3_getter() {\n\t\t\t\t// getter code\n\t\t\t},\n\t\t\tset : function $1_$3_setter(value) {\n\t\t\t\t// setter code\n\t\t\t},\n\t\t\tvalue        : ${4:value},\n\t\t\twriteable    : ${5:boolean},\n\t\t\tenumerable   : ${6:boolean},\n\t\t\tconfigurable : ${0:boolean}\n\t\t}\n\t}\n);",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "props": true
      },
      "source": "snippets/javascript"
    },
    "422523758702333f6323a18a6255de8b": {
      "content": "enum ${1:#:name} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "enum {}",
      "matches": {
        "enum": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4228289f7bf7fd89618a695e8f53072e": {
      "content": "${1:callbacks}.add(${2:callbacks})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cadd": true
      },
      "source": "snippets/coffee"
    },
    "423a5b18f20a948069a11e66336a3f8b": {
      "content": "beforeRouteEnter(to, from, next) {\n\tnext(vm => {${1:}});\n},",
      "doc": "Vue Router component guards beforeRouteEnter",
      "filetype": "vue-script-router",
      "grammar": "lsp",
      "label": "Vue Router beforeRouteEnter",
      "matches": {
        "vbeforerouteenter": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "423fa25993f88e2c92c91eb249306bcc": {
      "content": "until ${1:#:condition} ; do\n\t${0:TARGET}\ndone",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "until": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4256a3d7c4396f8f8e8e92f3e258ecb6": {
      "content": "border-width: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "border-width": true,
        "bw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "42582e7422340a57cd07490ddae99038": {
      "content": "import PropTypes from 'prop-types';",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "import PropTypes",
      "matches": {
        "irp": true
      },
      "source": "snippets/javascript"
    },
    "425931a48f34530cdc23932a20d40f99": {
      "content": "font-family ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff": true
      },
      "source": "vim-snippets/snippets"
    },
    "42593be0230ad9157956ee95056ba580": {
      "content": "white-space-collapse break-strict",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:bs": true
      },
      "source": "vim-snippets/snippets"
    },
    "42602b022c2f040ee2ceb464be5c494f": {
      "content": "import ${0:Data.Text}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "42614453d13ba430761f3328be207b9a": {
      "content": "${1:obj}.mousemove(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mmove": true
      },
      "source": "snippets/javascript"
    },
    "426359fa378d78c36585e12c0d8ea16a": {
      "content": "${1:mutationName}() {\n\tthis.\\$store.commit('${1:mutationName}', ${2:payload})\n}",
      "doc": "commit to vuex store in methods for mutation",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-commit-vuex-store-in-methods",
      "matches": {
        "vcommit": true,
        "vue commit vuex store in methods": true
      },
      "source": "javascript/vue"
    },
    "4266489c676899b24d4c225910f966b1": {
      "content": "date:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "date": true
      },
      "source": "vim-snippets/snippets"
    },
    "4268aca0a70e14837d7feeeea46fa9ca": {
      "content": "process.stderr",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "stderr",
      "matches": {
        "stderr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "426a1efb2599c0922bc8f22d84ed89b4": {
      "content": "| split: '${1:,}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "split": true
      },
      "source": "vim-snippets/snippets"
    },
    "426e791846a0e04b39481074dc0745a4": {
      "content": "\\begin{equation*}\n\t${1:TARGET}\n\\end{equation*}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{equation*} \\equation*": true,
        "equation*": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "426fecea4a7d36fdf256bf627d83fa92": {
      "content": "grid-column-gap 0",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gcg:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "428228acceea553e3d8b5115a2e16fdf": {
      "content": "(doseq [${1:elem} ${2:coll}]\n\t${0:code})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doseq": true
      },
      "source": "vim-snippets/snippets"
    },
    "4283ac4d74ac0f312fc3c6a56c3a0c44": {
      "content": "<%= ${1:f}.hidden_field :${0:attribute} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffhf": true
      },
      "source": "vim-snippets/snippets"
    },
    "4284dec684b11f08bddc75662b3ac775": {
      "content": "break;",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "br": true
      },
      "source": "vim-snippets/snippets"
    },
    "42861258ba2fc4938e473abdcc921ff2": {
      "content": "with ${1}\ndo\n  ${2:TARGET}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "with .. do .. end",
      "matches": {
        "with": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "428a006f55d5b983fbabe439f0fa8d08": {
      "content": "use Symfony\\Component\\HttpFoundation\\Request;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Symfony\\..\\Request",
      "matches": {
        "usereauest": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "428ad234ed9452e663b1fa51576cc2fe": {
      "content": "<article>\n\t${0}\n</article>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "article": true
      },
      "source": "vim-snippets/snippets"
    },
    "42908fed7bd3cfd533f934f875443e44": {
      "content": "if {${1:condition}} {\n\t$2\n}\n",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "if... (if)",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "42966cdf72bc27a93ca6042936f8ee18": {
      "content": "assert_redirected_to ${2:${12:parent}_${13:child}_path(${14:@}${15:$12}, ${16:@}${17:$13})}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "assert_redirected_to (nested path)",
      "matches": {
        "artnp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "429963212fdc6f5850afec85795e12df": {
      "content": "grid-auto-flow dense",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "429c60c7cdaf0d3fd3f2af7b9cc8d82d": {
      "content": "t.timestamps\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.timestamps (tctss)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "42a1076276c12aa5d324c3dbb08b34ea": {
      "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n\"http://www.w3.org/TR/html4/strict.dtd\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "docts": true
      },
      "source": "vim-snippets/snippets"
    },
    "42a139e8d1bdb7b05a52bccc2ffe6460": {
      "content": "font-family ${0:Capitals,Impact},fantasy",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "42a173708a9a869a17401d2a7c3d32f7": {
      "content": "<script>\n${1:TARGET}\n</script>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "script": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "42a8aa8b96a12272abc35577ea998c3e": {
      "content": "return ${0}",
      "doc": "",
      "filetype": "kotlin",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ret": true
      },
      "source": "vim-snippets/snippets"
    },
    "42a8b14847fa16e205effe92e6f49671": {
      "content": "vertical-align: text-bottom",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:tb": true
      },
      "source": "vim-snippets/snippets"
    },
    "42adbe702fbcdd404291086896ae371b": {
      "content": "generic\n\ttype ${1} is ${2};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "generic type",
      "matches": {
        "gen": true
      },
      "source": "vim-snippets/snippets"
    },
    "42affba67f9c908a3cdfb0b6fc467b4a": {
      "content": "<header class=\"${1}\">\n\t${0}\n</header>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "header.": true
      },
      "source": "vim-snippets/snippets"
    },
    "42b2bc156ee32c90dee81b0dd37417e6": {
      "content": "$.isNumeric(${1:value})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isnum": true
      },
      "source": "snippets/javascript"
    },
    "42b6532eae7ce16d424fceeec70f90fa": {
      "content": "unsafe\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "unsafe",
      "matches": {
        "unsafe": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "42c023844291c9e1bb654cc4345e318f": {
      "content": "\"${1:key}\": ${0:value},",
      "doc": "",
      "filetype": "json",
      "grammar": "snu",
      "label": "Number",
      "matches": {
        "n": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "42c678a371825f7efdb117b46b0e43fe": {
      "content": "${1} {\n\t${2:${VISUAL}}\n}${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "selector { }",
      "matches": {
        ".": true
      },
      "source": "vim-snippets/snippets"
    },
    "42cfc1bfaedadc4fb4027da1d5d8aa00": {
      "content": "align-items: last baseline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:lb": true
      },
      "source": "vim-snippets/snippets"
    },
    "42d50141ca1a71964f541a6e826ae81b": {
      "content": "${1:fn} :: ${2:a} -> ${3:a}\n$1 ${4}= ${0}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "42daaaec3ebf60b6d09c864d9b3d7e0f": {
      "content": "${1:public} string ${2} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps": true
      },
      "source": "vim-snippets/snippets"
    },
    "42e0922536b337c19be4afa2e78e1007": {
      "content": "page-break-before auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "42e912848eead72d22d8a7ba1efddc35": {
      "content": "{% endnamespace %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endnamespace",
      "matches": {
        "endnamespace": true
      },
      "source": "vim-snippets/snippets"
    },
    "42e9bacb7c7f24a6d037680c75a83ba6": {
      "content": "use Symfony\\Component\\Validator\\Constraints as Assert;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Symfony\\..\\Constraints as Assert",
      "matches": {
        "useassert": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "42fa44f186a5910711359785fda6691e": {
      "content": "(\\\\${1:x} -> ${0:expression})",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "(\\": true
      },
      "source": "vim-snippets/snippets"
    },
    "43031606097380c4185d9d3abae1be05": {
      "content": "PropTypes.string,",
      "doc": "String prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeString",
      "matches": {
        "pts": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "430723f982fbe9860a8a011638b3c6d0": {
      "content": "import React from 'react'\nimport renderer from 'react-test-renderer'\n\nimport { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "setupReactTest",
      "matches": {
        "stest": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "430891bfba5cfd5ae60aa64cd1c5180c": {
      "content": "\\\\label{${1:eq:}${2:fig:}${3:tab:}${0}}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\label",
      "matches": {
        "lab": true
      },
      "source": "vim-snippets/snippets"
    },
    "4308d51162405eb9dbdb69e5500ebe47": {
      "content": "<%= form_for @changeset, ${1:\"/users\"}, fn f -> %>\n\t\t${0}\n\t<%= submit \"Submit\" %>\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "form_for",
      "matches": {
        "ff": true
      },
      "source": "vim-snippets/snippets"
    },
    "43195314e2c8ac42a9cb593a56f9d5b0": {
      "content": "bind:@\"${2:#:binding}\" toObject:${3:observableController} withKeyPath:@\"${4:keyPath}\" options:${5:nil}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bind": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4322b25459042606e5270561ff7cf927": {
      "content": "validates_acceptance_of :${1:terms}${2:${3:, accept: \"${4:1}\"}${5:, message: \"${6:You must accept the terms of service}\"}}, if: proc { |obj| ${7:obj.condition?} }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_acceptance_of if",
      "matches": {
        "vaoif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4328490ed6b4eac96a0c173595439642": {
      "content": "font-variant normal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fv:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "432eab8361078a0c87b44a395d00c5b6": {
      "content": "align-items: ${1:stretch};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai": true
      },
      "source": "vim-snippets/snippets"
    },
    "43313c363b2fb18ae20579bf157c6c5b": {
      "content": "box-sizing: border-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxz:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "43315348e47e335d66c9c8097bcad0bd": {
      "content": "name=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "name": true
      },
      "source": "vim-snippets/snippets"
    },
    "4341826a1c778d1be5b0742627aa450d": {
      "content": "default:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "default": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4341ac3fa3439f5da1cfcd8644e669e9": {
      "content": "border-bottom-style: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbs": true
      },
      "source": "vim-snippets/snippets"
    },
    "4343a5c97592030e5da6b5aab413f3cb": {
      "content": "{{- if .Values.$1.tolerations }}\n  tolerations:\n{{ toYaml .Values.${1:value_key}.tolerations | indent 8 }}\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tolerations_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "43494f26fbd960f45bb86d5609ba33b8": {
      "content": "border-top-right-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtri": true
      },
      "source": "vim-snippets/snippets"
    },
    "434f389336a0d8e7da4a83284e2eb2b8": {
      "content": "mutable",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mu": true
      },
      "source": "vim-snippets/snippets"
    },
    "4351ea3b476aab088cff03eb7ff6851e": {
      "content": "return ${1};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ret": true
      },
      "source": "vim-snippets/snippets"
    },
    "435cc75ce1f47679a0f229538dfffa30": {
      "content": "{% endmacro %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endmacro",
      "matches": {
        "endmacro": true
      },
      "source": "vim-snippets/snippets"
    },
    "435d6262cdb68b8d4e04eacc432ea76b": {
      "content": "{${0:}|${1:TARGET}|$0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "string literals {xxx| ... |xxx}",
      "matches": {
        "lit": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4378a6f5e7ae264378d66d6088dbce8c": {
      "content": "state = {\n\t${1}: ${2},\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "",
      "matches": {
        "st": true
      },
      "source": "snippets/javascript"
    },
    "438a9a49e3e480591ce45199882dfe90": {
      "content": "notFound(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rnf": true
      },
      "source": "vim-snippets/snippets"
    },
    "438dbcb43378e4e8ee97dca93788d5c1": {
      "content": "<?php\n\tnamespace Controllers;\n\tuse Core\\View;\n\tuse Core\\Controller;\n\tclass ${1:class_name} extends Controller\n\t{\n\t\tpublic function __construct()\n\t\t{\n\t\t\tparent::__construct();\n\t\t}\n\t\tpublic function index()\n\t\t{\n\t\t\t${2:}\n\t\t}\n\t}",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_controller": true
      },
      "source": "vim-snippets/snippets"
    },
    "4392c87d6ae675c27f0151007392a491": {
      "content": "appear-class=\"$1\"$0",
      "doc": "appear-class=''. Expects: string.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-appear-class",
      "matches": {
        "appearclass": true,
        "vue appear-class": true
      },
      "source": "javascript/vue"
    },
    "43942cff8d635680b4d69491c895c6c3": {
      "content": "$.proxy(${1:function}, ${2:this})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "proxy": true
      },
      "source": "snippets/coffee"
    },
    "439655f7788329653e5b27433009cb9f": {
      "content": "(dosync\n\t(ref-set ${1:ref} ${2:value}))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "(dosync (ref-set ...",
      "matches": {
        "ref-set": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "439870a6d92625a726892de6b8868b7a": {
      "content": "${1:obj}.data(${2:obj})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "data": true
      },
      "source": "snippets/javascript"
    },
    "43a00f0590bd1643c2a29cd321d1e2ee": {
      "content": "for ${1} in ${2}\n\t${0:${VISUAL}}\nendfor",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "for ... in loop",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "43a18d5f556c0c69457d655317d87ce4": {
      "content": "orphans: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "orp": true
      },
      "source": "vim-snippets/snippets"
    },
    "43b4658c99c5ec6821d273ac9cf2f5a5": {
      "content": "${1:deferred}.isResolved()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Disres": true
      },
      "source": "snippets/coffee"
    },
    "43c5d74a78b143d9849d3688fa7302b8": {
      "content": "{%- if ${1:condition} -%}\n\t${2}\n{%- else -%}\n\t${0}\n{%- endif -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifelse-": true
      },
      "source": "vim-snippets/snippets"
    },
    "43cbe605cfd311036e0e04e2ae195868": {
      "content": "${1} ? ${2} : ${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "43cf55f04fae8079a94961beaaa7804a": {
      "content": "left: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "l": true
      },
      "source": "vim-snippets/snippets"
    },
    "43d3193d8cbd533fd5cfa99bcf8b99d7": {
      "content": "else {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "43de9cc315127b055356c51391eafc98": {
      "content": "background-image: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "backimage": true,
        "bi": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "43e9d886fa7067d84c1468e44dc585b4": {
      "content": "useDebugValue(${1:value})",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useDebugValue",
      "matches": {
        "useDebugValue": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "43ea09634687c2495b07d262eca9b534": {
      "content": "${1:#:name}()\n{\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "func": true,
        "function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "43ec7b3b6c76b8196d2a4730743a7e46": {
      "content": "text-align-last: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "43efe47d2b1db5fd236ee3e6d3873354": {
      "content": "output${1:#: nbit} o_${2:name},",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "output [] o_,",
      "matches": {
        "O": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "43f03e3b056bdcb057afa451b579816d": {
      "content": "max(${0:array});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "array",
      "matches": {
        "max": true
      },
      "source": "vim-snippets/snippets"
    },
    "43f7ec012354b949ea30897847feb1ae": {
      "content": "place-self start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "4417d2b51d5e1900aeaa5fd10814e8d0": {
      "content": "test \"${1:test_name}\" do\n  ${2:TARGET}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "test .. do .. end",
      "matches": {
        "test": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "441c4fceb7afd22f98c4bd68cb4f7730": {
      "content": "I18n.t('${1:type.key}')",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "i18": true
      },
      "source": "vim-snippets/snippets"
    },
    "44317216138d28a7bb06aa4931ca4787": {
      "content": "return this.httpClient.get('${1:url}');$0",
      "doc": "Angular HttpClient.get",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "httpclient-get",
      "matches": {
        "a-httpclient-get": true,
        "angular http client get": true
      },
      "source": "javascript/angular"
    },
    "4435733ba10660db9d1c6b270e6a5723": {
      "content": "\\begin{picture}\n\t${1:TARGET}\n\\end{picture}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{picture} \\picture": true,
        "picture": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "443b3a2f9f515cb9a3feab792f365157": {
      "content": "<%= ${1:f}.input :${0:attribute} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffi": true
      },
      "source": "vim-snippets/snippets"
    },
    "443e2050614bd5a343663337181abcf8": {
      "content": "match ${1} {\n\t${2} => ${3}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "match pattern",
      "matches": {
        "mat": true
      },
      "source": "vim-snippets/snippets"
    },
    "44419f9d9d95d8274e70a08f03efbd8a": {
      "content": "using (${1:resource})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "usi": true
      },
      "source": "vim-snippets/snippets"
    },
    "4445cf8c4967807adfe5f927882072ee": {
      "content": "[SerializableAttribute]",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "serial": true,
        "serializable": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "44463c05413735a32ba293c3e398d111": {
      "content": "<param name=\"${1}\">${2:$1}</param>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<p": true
      },
      "source": "vim-snippets/snippets"
    },
    "444951b8eda17240068de2a266b8be14": {
      "content": "(fun ${1:x} -> ${2:TARGET})",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "(fun x -> ...)",
      "matches": {
        "fun": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "444a77d5a6dde6ef0d77812a6661c80e": {
      "content": "gl.glVertex2f(${1:0.0f}, ${0:0.0f});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl vertex 2f",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "444d4f188e68fe357d62db2e3505a484": {
      "content": "${1:actionName}() {\n\tthis.\\$store.dispatch('${1:actionName}', ${2:payload})\n}",
      "doc": "dispatch to vuex store in methods for action",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-dispatch-vuex-store-in-methods",
      "matches": {
        "vdispatch": true,
        "vue dispatch vuex store in methods": true
      },
      "source": "javascript/vue"
    },
    "4455585f8101a5de1effa5a7ea5eb192": {
      "content": "padding-top: ${1:20px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "padding-top: length (margin)",
      "matches": {
        "padding": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4459eabb6d585b98cdf5398685768c0d": {
      "content": "padding: ${1:0} ${2:0};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:2": true
      },
      "source": "vim-snippets/snippets"
    },
    "445e46bd1a234449efb1e1b7e4305f59": {
      "content": "border-style double",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:db": true
      },
      "source": "vim-snippets/snippets"
    },
    "4461df0eed7662c6fd0b80014335bc6c": {
      "content": "this.${1:refName}Ref = React.createRef()\n",
      "doc": "Create ref statement used inside constructor",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-createref",
      "matches": {
        "cref": true,
        "react createref": true
      },
      "source": "javascript/react"
    },
    "4463d1849d01ceb7f48133b48cbfa3d6": {
      "content": "router.beforeResolve((to, from, next) => {\n\t${1:next();}\n});",
      "doc": "Vue Router global guards beforeResolve",
      "filetype": "vue-script-router",
      "grammar": "lsp",
      "label": "Vue Router beforeResolve",
      "matches": {
        "vbeforeresolve": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "446a6476b603a7f018604ca97445347b": {
      "content": "| strip_html",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "strip_html": true
      },
      "source": "vim-snippets/snippets"
    },
    "4475b03349afcaaff8b6a90e1d4a15b9": {
      "content": "${1:obj}.stop('${2:queue}', ${3:false}, ${4:false})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stop": true
      },
      "source": "snippets/coffee"
    },
    "4479fde09c6857acefc196c85289d59e": {
      "content": "binary(${1:value}${2:, }${0:digits});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "binary": true
      },
      "source": "vim-snippets/snippets"
    },
    "447e6c2da39c6b1bc43157dbd1c55687": {
      "content": "render inline: \"${1:<%= 'hello' %>}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (inline) (ri)",
      "matches": {
        "ri": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4481b17c9990ae4180f63328e98cd268": {
      "content": "<% error_messages_for :${1:model} %>\n<%= form_for @${2:model} do |f| %>\n\t${0}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffe": true
      },
      "source": "vim-snippets/snippets"
    },
    "448b1fd0ae2932c89b5506b36ad6c8f6": {
      "content": "\\begin{column}{${1:#:width}${2:\\\\\\textwidth}}\n\t${0:#:body}\n\\end{column}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{column} \\column": true,
        "column": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "449250baff84ec7386d081a82b005425": {
      "content": "interface ${1:#:IName} ${2::} ${3:Parent} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "interface {}",
      "matches": {
        "interface": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4492a6b25a856e4c31a048ec32eb8d40": {
      "content": "PropTypes.object,",
      "doc": "Object prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeObject",
      "matches": {
        "pto": true
      },
      "source": "vscode-react/snippets"
    },
    "44977b6275161d76dc5653d5189a633e": {
      "content": "asin(${0:rad});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asin": true
      },
      "source": "vim-snippets/snippets"
    },
    "44a006136201586353f293e2b579b276": {
      "content": "def self.${1:class_method_name}\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defs": true
      },
      "source": "vim-snippets/snippets"
    },
    "44a5c0e7cddeff405a48b9d3df92d49f": {
      "content": "it('${1:should }', async () => {\n\t$0\n});",
      "doc": "creates an it block with async callback function",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-it-async",
      "matches": {
        "ita": true,
        "jest it async": true
      },
      "source": "javascript/jest"
    },
    "44b18145a4ed10ebb9c82368edb79ace": {
      "content": "_.zipObjectDeep(${props}, ${values})",
      "doc": "_.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n\nThis method is like `_.zipObject` except that it supports property paths.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-zipobjectdeep",
      "matches": {
        "lodash zipobjectdeep": true
      },
      "source": "javascript/lodash"
    },
    "44be3d677bf66d8fea8de06446d158ae": {
      "content": "@OneToOne\n${1}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oo": true
      },
      "source": "vim-snippets/snippets"
    },
    "44bf9413797c4001544b6379931a23de": {
      "content": "this.setState((state, props) => { return { $0 }})\n",
      "doc": "Performs a shallow merge of nextState into current state",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentSetStateFunc",
      "matches": {
        "ssf": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "44c404000fb1938cdaa00b70976b4105": {
      "content": "left: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "l": true
      },
      "source": "vim-snippets/snippets"
    },
    "44c7adf8efc02007149c8e3da0c01850": {
      "content": "module.exports = $1;",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "module.exports",
      "matches": {
        "ex": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "44d755abdc8eff2eafdc47b67bbcf924": {
      "content": "_.result(${object}, ${path}, ${defaultValue})",
      "doc": "var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n\n_.result(object, 'a[0].b.c1');\n// => 3\n\n_.result(object, 'a[0].b.c2');\n// => 4\n\n_.result(object, 'a[0].b.c3', 'default');\n// => 'default'\n\n_.result(object, 'a[0].b.c3', _.constant('default'));\n// => 'default'\n\nThis method is like `_.get` except that if the resolved value is a\nfunction it's invoked with the `this` binding of its parent object and\nits result is returned.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-result",
      "matches": {
        "lodash result": true
      },
      "source": "javascript/lodash"
    },
    "44d9e7ad7615bf31b88055b973a75649": {
      "content": "position relative",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "44e152081dc1b7612ccdfaa11c4bcda4": {
      "content": "private\n${0}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "priv": true
      },
      "source": "vim-snippets/snippets"
    },
    "44e55102083d93593ffee475c5ba6e95": {
      "content": "$this->${1:method}()->shouldNotBe${2:String|Array|Bool}();",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotBeString|Array|Bool()",
      "matches": {
        "snbscalar": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "44e5f775ecdb4dad28efd1917376cecd": {
      "content": "\\begin{quote}\n\t${1:TARGET}\n\\end{quote}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{quote} \\quote": true,
        "quote": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "44e66f78438e6b01e7f760d5794659d9": {
      "content": "#!/usr/bin/env Rscript",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "45000230983cfb4b7b60adcdc968ff31": {
      "content": "Wait Until Page Contains    ${1:${text}}    ${2:${timeout=None}}    ${3:${error=None}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Wait Until Page Contains",
      "matches": {
        "wupc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4503ffe70f305e7f99a009049b32e401": {
      "content": "<a href=\"${1}\">${2:TARGET}</a>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ahref": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "450b566853d1b66098fd9d452d826051": {
      "content": "validates_exclusion_of",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_exclusion_of",
      "matches": {
        "ve": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "450c2f006132f2a0fc277542b8944f50": {
      "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: '${1:selector-name}',\n\ttemplateUrl: '${2:name}.component.html'\n})\n\nexport class ${3:Name}Component implements OnInit {\n\tconstructor() { }\n\n\tngOnInit() { }$0\n}",
      "doc": "Angular component",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Component",
      "matches": {
        "a-component": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "450de6d8aaa76c1fb24c2ec55918fd0c": {
      "content": "letter-spacing: $1px;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "letter-spacing:   length-px (letter)",
      "matches": {
        "letter": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "450ee6c4d9b2a0ba7d0017573965b7ff": {
      "content": "mixins: [${1:mixinName}],",
      "doc": "vue use mixin",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Use Mixin",
      "matches": {
        "vmixin-use": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "452005a858a3741754955ecb44ba2e73": {
      "content": "mixed.describe()",
      "doc": "mixed.describe(): SchemaDescription\n\nCollects schema details (like meta, labels, and active tests) into a serializable\ndescription object.SchemaDescription {\n  type: string,\n  label: string,\n  meta: object,\n  tests: Array<{ name: string, params: object }>\n}\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-describe",
      "matches": {
        "yup mixed describe": true
      },
      "source": "javascript/yup"
    },
    "4524f663fc552071730e052290203bc9": {
      "content": "def ${1:method_name}${2:(${3:*args})}\n\t$0\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "def <name>...",
      "matches": {
        "\"\\b(de)?f\"": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "452d53f890a88602d7fda7557e83a1b5": {
      "content": "${1:obj}.prop('${2:property name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prop": true
      },
      "source": "snippets/javascript"
    },
    "452f77ec279b1fb36d6aaec3e2fdb299": {
      "content": "text-transform: lowercase;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "4530bcd18475e33c0bb984987097304e": {
      "content": "<article id=\"${1}\">\n\t${0}\n</article>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "article#": true
      },
      "source": "vim-snippets/snippets"
    },
    "45340cb382a9f9f85b6cfabe6c0c82fe": {
      "content": "import React, { Component } from 'react';",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "import React and Component",
      "matches": {
        "irc": true
      },
      "source": "snippets/javascript"
    },
    "45394553a5a2ab175ef459cba9233d73": {
      "content": "{% block ${1} %}\n\t${0}\n{% endblock %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig block",
      "matches": {
        "bl": true
      },
      "source": "vim-snippets/snippets"
    },
    "453b0e80df8f149158229f68f6b3e02f": {
      "content": "bottom auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "45413c7e100e43af478662357d22e2d7": {
      "content": "import React from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = (props) => (\n\t\t\t$0\n\t);\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a stateless React component without PropTypes and ES6 module system but with Implicit Return and props",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactStatelessImplicitReturn",
      "matches": {
        "rsi": true
      },
      "source": "vscode-react/snippets"
    },
    "454218af21b016d7ed7513c88f644f5b": {
      "content": "try\n\t${1:${VISUAL}}\ncatch\n\t${2:_:_} -> ${0:got_some_exception}\nend",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "4542bb9f378815ebff00c21a89932f2f": {
      "content": "<small>${1:TARGET}</small>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "small": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4547c7ad81d7f3d4b7fdadcfd7d25024": {
      "content": "bgcolor=\"${1}\"${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcolor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "45481e71c4cefa3090e39b79fb4835f9": {
      "content": "if ${1:#:condition}:\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "if ...: ...",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "455cac0fce3865defa16891eef65bf32": {
      "content": "{\n\t\"type\": \"product\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_product": true
      },
      "source": "vim-snippets/snippets"
    },
    "455d64b3223eafa0994a00dc70fa5319": {
      "content": "_.capitalize(${string})",
      "doc": "_.capitalize('FRED');\n// => 'Fred'\n\nConverts the first character of `string` to upper case and the remaining\nto lower case.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-capitalize",
      "matches": {
        "lodash capitalize": true
      },
      "source": "javascript/lodash"
    },
    "456669f43e7dc8762cb2b46489108d65": {
      "content": "line-height ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lh": true
      },
      "source": "vim-snippets/snippets"
    },
    "45674929a7d0de9a00d66fa3b27753a4": {
      "content": "validates :${1:attribute}, format: { with: /${0:regex}/ }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vf": true
      },
      "source": "vim-snippets/snippets"
    },
    "4569d6e76fda81405f833c26d665aadf": {
      "content": "dictsortreversed:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dictsortrev": true
      },
      "source": "vim-snippets/snippets"
    },
    "456d50eee8827437f1dff364dc578c31": {
      "content": "border-top-left-radius ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtlrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "457631b79073aa3f8c9d0d5b507c2456": {
      "content": "doctest ${1:filename}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "457bd1b7ae7200663bb46bded2c9c1c2": {
      "content": "\\$_POST['${1:#:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "post": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4580cdad81213e4d607ba5f739bba822": {
      "content": "text-emphasis none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "4585d9635d9b23fe9aaa3073f779231a": {
      "content": "<ul type=\"circle\">${1:TARGET}</ul>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ulcircle": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4586f51aac927003a2be0669cdbc18c0": {
      "content": "(fun ${1:x} -> ${2:x})",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "(fun x -> ..)",
      "matches": {
        "fun": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "458abcbd289225f9d078132e4e524e12": {
      "content": "file { \"${1:filename}\":\n\tensure  => ${2:present},\n\towner   => \"${3:root}\",\n\tgroup   => \"${4:root}\",\n\tmode    => \"${5:0644}\",\n\tsource  => \"puppet:///modules/${6:module}/${7:source}\",\n\tcontent => template(\"${8:module}/${9:template}\"),\n\talias   => \"${10:alias}\",\n\trequire => [ Package[\"${11:package}\"], File[\"${12:file}\"], ],\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "file": true
      },
      "source": "vim-snippets/snippets"
    },
    "458e2c50d6ecf34ef4b1d78b3a3fe656": {
      "content": "assertNotNull(\"${1:Failure message}\", ${2:object});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ann": true
      },
      "source": "vim-snippets/snippets"
    },
    "4590b878b048fbf16bd2a79d653793a7": {
      "content": "import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class ${2:Your}Interceptor implements HttpInterceptor {\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\treturn next.handle(req);\n\t}\n}",
      "doc": "Empty Angular HttpInterceptor for HttpClient",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular HttpInterceptor - Empty",
      "matches": {
        "a-http-interceptor": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "45983d925395b7ce93276d1546ab61ad": {
      "content": "border-top ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdt": true
      },
      "source": "vim-snippets/snippets"
    },
    "4599cb860329409ff4968670aa7a5e1c": {
      "content": "<AnimatePresence>\n    {${1:isVisible} && (\n      <motion.div\n        initial={{ ${3:style} }}\n        animate={{ ${4:style} }}\n        exit={{ ${5:style} }}\n      />\n    )}\n</AnimatePresence>",
      "doc": "AnimatePresence allows components to animate out when they're removed from the React tree.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-animate-presence",
      "matches": {
        "animate-presence": true,
        "framer-motion animate-presence": true
      },
      "source": "javascript/framer-motion"
    },
    "45a0b8d415f3328b89c14bf5bd76b8a7": {
      "content": "padding: 0",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "45a9f8a6a8d1ab3b376f66f62e900856": {
      "content": "border-top-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdti:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "45afcd36a8402ebbd1acb96106056a29": {
      "content": "function ${1}(${2}): ${3:any} {\n\t${0}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts function",
      "matches": {
        "tfun": true
      },
      "source": "vim-snippets/snippets"
    },
    "45b72e2e636c7ab220126eb7c9015b04": {
      "content": "@verbatim\n\t${0:$VISUAL}\n@endverbatim",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@verbatim directive",
      "matches": {
        "verbatim": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "45bbe4cec4ee2bb6c58740cd947a646b": {
      "content": "$t('$1', { $2: $3 })",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "transc": true
      },
      "source": "vim-snippets/snippets"
    },
    "45bc32f1f81cb07cef07132f79cb301c": {
      "content": "public class ${1:Hello} {\n  static public void main(String args[]) {\n    System.out.println(\"Hello, world!\");\n  }\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "helloworld": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "45bdadd5e1e69edd468e71a1fc80a7c7": {
      "content": "expect($1).toBeLessThanOrEqual($0);",
      "doc": "expects the argument is less than or equal",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobelessthanorequal",
      "matches": {
        "jest expect tobelessthanorequal": true,
        "tblte": true
      },
      "source": "javascript/jest"
    },
    "45c42d2bad465136427a36ea4bfbb76a": {
      "content": "|> Enum.each(fn ${1} -> ${0} end)",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "pipe to each",
      "matches": {
        ">e": true
      },
      "source": "vim-snippets/snippets"
    },
    "45ca95fa3bf6897b76df068032f6ed00": {
      "content": "place-content: end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "45cd5c7e06fb9bbbcf862a5bf76cc26d": {
      "content": "border-style: solid;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "45cfede61099a8e8f0fcf99b6ee1e62a": {
      "content": "word-wrap: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow": true
      },
      "source": "vim-snippets/snippets"
    },
    "45e491250f78426e7b9a8682cef59bd2": {
      "content": "outline-offset: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oo": true
      },
      "source": "vim-snippets/snippets"
    },
    "45ede4e943ecb92e05c22955ca1b1077": {
      "content": "!${1:url}(${2:title}):${0:link}!",
      "doc": "",
      "filetype": "textile",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img": true
      },
      "source": "vim-snippets/snippets"
    },
    "45edfc6e887268fc6fd0b70676fa309c": {
      "content": "$_SERVER['${1:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "S": true
      },
      "source": "vim-snippets/snippets"
    },
    "45ee949091c72de53497d1f7b801bc38": {
      "content": "'use strict';",
      "doc": "insert 'use strict' statement",
      "filetype": "base",
      "grammar": "lsp",
      "label": "insert-use-strict-statement",
      "matches": {
        "base use strict": true
      },
      "source": "javascript/base"
    },
    "46069a14a78a0909c887c4eec72eb37b": {
      "content": "max-height: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mah:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "460738a3f0496424e81a1e3ddc7759e0": {
      "content": "${fn:indexOf(${1:string}, ${0:substr})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "indexof": true
      },
      "source": "vim-snippets/snippets"
    },
    "4607f0af40ed552c122164761fbc90bb": {
      "content": "{% ssi ${0} %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ssi": true
      },
      "source": "vim-snippets/snippets"
    },
    "4609ed5509b716fb4835410ead2f37df": {
      "content": "function ${1} return ${2};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "function declaration",
      "matches": {
        "fund": true
      },
      "source": "vim-snippets/snippets"
    },
    "460ccef2355fa7ef94eae2c8f4c05407": {
      "content": "type=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "type": true
      },
      "source": "vim-snippets/snippets"
    },
    "460e45524298cc79a1d2cba5525c7d07": {
      "content": "min-width: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "miw": true
      },
      "source": "vim-snippets/snippets"
    },
    "4619b347f58f023dc5978d43510b5803": {
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "doc": "",
      "filetype": "xml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xml": true
      },
      "source": "vim-snippets/snippets"
    },
    "46206e6e0cdf19f514d3bbe155e2518c": {
      "content": "<script context=\"module\">\n\t${1:// your script goes here}\n</script>",
      "doc": "add a script with context=\"module\" to your svelte file",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-script-context",
      "matches": {
        "svelte script context": true,
        "svscriptc": true
      },
      "source": "javascript/svelte"
    },
    "4620cbcc41d027805f2ac1662b8c14d0": {
      "content": "saturation(${0:color});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "saturation": true
      },
      "source": "vim-snippets/snippets"
    },
    "4624f4ad70ae3f22460ca20faeca8f27": {
      "content": "${1:obj}.removeData('${2:key name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "remd": true
      },
      "source": "snippets/javascript"
    },
    "4625f1546bf4849f826067321da14e14": {
      "content": "repeat ${1:integer}; do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "repeat": true
      },
      "source": "vim-snippets/snippets"
    },
    "4627cd4a03aa3ab1205a4d5a38061889": {
      "content": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
      "doc": "",
      "filetype": "_",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lorem": true
      },
      "source": "vim-snippets/snippets"
    },
    "4627ff9633898b0f5ab9e275f98079c6": {
      "content": "echo(${0:#:TARGET})",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "echo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "462d61c13bdbe19d50716c08f49125f2": {
      "content": "% try:\n\t${1:}\n% except${2:}:\n\t${3:pass}\n% endtry",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "try",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "463174e797cdc819436157092e082d7f": {
      "content": "// ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comment": true
      },
      "source": "vim-snippets/snippets"
    },
    "463252e230433e0a1f090daa1f97265e": {
      "content": "const (\n\t${1:NAME} ${2:Type} = iota\n\t${0}\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "const ( ... = iota )",
      "matches": {
        "iota": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "463d548c291c8ce351ba50a1d12729f6": {
      "content": "This Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.\n${0}",
      "doc": "",
      "filetype": "_",
      "grammar": "snu",
      "label": "",
      "matches": {
        "MPL2": true
      },
      "source": "vim-snippets/snippets"
    },
    "4640513fb7b6113be00a5db7f254ba21": {
      "content": "${1:font} = loadFont(\"${0:FFScala-32.vlw}\");",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loadFont": true
      },
      "source": "vim-snippets/snippets"
    },
    "464897ef91c4eb046f23a05923e0e34c": {
      "content": "<#local ${1:variable_name} = ${0:value${VISUAL}} />",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#local variable_name = value />",
      "matches": {
        "loc": true
      },
      "source": "vim-snippets/snippets"
    },
    "46492ddee79eb45ee58b4e7b67bed8c5": {
      "content": "match ${1} with\n| ${2} -> ${0}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mat": true
      },
      "source": "vim-snippets/snippets"
    },
    "465d1e1b9d6e0e4946f4ee771702424d": {
      "content": "if $1 then\n\t$2\nelse\n\t$0\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "if/else statement",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "465ed571f6ef39d49497d4c112cca543": {
      "content": "{% from \"${1:template}\" import ${2:name}${3: as ${4:$2}} %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "from/import/as",
      "matches": {
        "from": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "46615b8feb448090cbcebc085ec9b4c4": {
      "content": "| first",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "first": true
      },
      "source": "vim-snippets/snippets"
    },
    "466b8c6e1c6b68365680bf1933eca198": {
      "content": "{#each ${1:items} as ${2:item}}\n\t${3: <!-- content here -->}\n{/each}",
      "doc": "each block",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-each-block",
      "matches": {
        "sveach": true,
        "svelte each": true
      },
      "source": "javascript/svelte"
    },
    "466e3f36b59f2b6bcc815da1c4fedfed": {
      "content": "(reduce ${1:(fn [p n] ${3})} ${2})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reduce": true
      },
      "source": "vim-snippets/snippets"
    },
    "46723e1ea6c4796ac6fbefdde624e1e7": {
      "content": "yup.reach()",
      "doc": "yup.reach(schema: Schema, path: string, value?: object, context?: object): Schema\n\nFor nested schemas yup.reach will retrieve a nested schema based on the provided path.For nested schemas that need to resolve dynamically, you can provide a value and optionally\na context object.let schema = object().shape({\n  nested: object().shape({\n    arr: array().of(object().shape({ num: number().max(4) }))\n  })\n});\n\nreach(schema, \"nested.arr.num\");\nreach(schema, \"nested.arr[].num\");\nreach(schema, \"nested.arr[1].num\");\nreach(schema, 'nested[\"arr\"][1].num');\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "yup-reach",
      "matches": {
        "yup reach": true
      },
      "source": "javascript/yup"
    },
    "4672c1f181408eac768de8eb0f91c85e": {
      "content": "immutable",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imm": true
      },
      "source": "vim-snippets/snippets"
    },
    "467d8c1e48285e34044ed7a10bf89a44": {
      "content": "{% elseif ${1:#:condition} %}\n  ${0:TARGET}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elseif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "46844425377d9ab67afb6ba569f7fec0": {
      "content": "${1}.defaultProps = {\n\t${2}: ${3}\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "defaultProps",
      "matches": {
        "dp": true
      },
      "source": "snippets/javascript"
    },
    "468a16bb55ce394a0ef8cba4a06fa838": {
      "content": "<ul>\n\t<li>${1}</li>\n\tli+${0}\n</ul>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ul+": true
      },
      "source": "vim-snippets/snippets"
    },
    "4698c1ef5adc9bd3349b8c33b72f3ed1": {
      "content": "print_r(${0});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "46a81eaddac7b0f55cf9e00db187eee3": {
      "content": "it(${1:#:message}, function()\n  ${0:TARGET}\nend)",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "it(message, func)",
      "matches": {
        "it": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "46bb61eca413b632937f364609dea13d": {
      "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanActivateChild {\n\tconstructor() { }\n\n\tcanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\t\treturn true;$0\n\t}\n}",
      "doc": "Angular CanActivateChild guard",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-canactivatechild-guard",
      "matches": {
        "a-guard-can-activate-child": true,
        "angular can activate child guard": true
      },
      "source": "javascript/angular"
    },
    "46bbdb1a85f9546802ada27baebd0fd9": {
      "content": "number.integer()",
      "doc": "number.integer(message?: string | function): Schema\n\nValidates that a number is an integer.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "number-integer",
      "matches": {
        "yup number integer": true
      },
      "source": "javascript/yup"
    },
    "46c5175a9de02e71ca380bebf9bd267d": {
      "content": "import React from 'react'\n\ninterface Props {\n\t\n}\n\nexport const ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
      "doc": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typeScriptReactArrowFunctionComponent",
      "matches": {
        "tsrafc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "46c6a68474f440e96482cb7f0ec963a2": {
      "content": "while ${1} loop\n\t${0:${VISUAL}}\nend loop;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "while",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "46dcf672babd5fe6f05cb369daeca15d": {
      "content": "crossref = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "crossref": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "46e0df7db7f2778760799428b3ef2a21": {
      "content": "import qualified ${1:Data.Text} as ${0:T}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "impq": true
      },
      "source": "vim-snippets/snippets"
    },
    "46e736f97b0f9388cbb96b4a50b5b32e": {
      "content": "${1:obj}.slideDown('${2:slow/400/fast}', ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sdownc": true
      },
      "source": "snippets/coffee"
    },
    "46f3b0f27bd747280b546f847ccee5af": {
      "content": "<pre>{{${1:model} | json}}</pre>$0",
      "doc": "Angular pre debug | json",
      "filetype": "html",
      "grammar": "lsp",
      "label": "pre w/ json",
      "matches": {
        "a-prej": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "46ff2372af397db09e02380288d0b55a": {
      "content": "${1:reg}_r <= $1_w;${2:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "_r <= _w;",
      "matches": {
        "regseq": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4704b06feee645eb732a6c50a482e5ba": {
      "content": "module.exports = {\n\t${1:member}\n};",
      "doc": "module exports object",
      "filetype": "base",
      "grammar": "lsp",
      "label": "module-exports-object",
      "matches": {
        "base module exports object": true
      },
      "source": "javascript/base"
    },
    "4715dfe33461d63e966b86314b97976f": {
      "content": "const [${2:propertyName}] = ${1:arrayToDestruct};",
      "doc": "Creates and assigns a local variable using array destructing",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "destructingArray",
      "matches": {
        "dar": true
      },
      "source": "vscode-javascript/snippets"
    },
    "472825647b5174eb46e6fd70d86da0dc": {
      "content": "else",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "472f703593fe86c77849a06debb00072": {
      "content": "inject(${1:init}) do |${2:mem}, ${3:var}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "injd": true
      },
      "source": "vim-snippets/snippets"
    },
    "4731a9b2a76210ab56995c5b400399d9": {
      "content": "remove_column :${1:table_name}, :${0:column_name}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mrc": true
      },
      "source": "vim-snippets/snippets"
    },
    "47417312ee3bc5a93925fb108939cc6c": {
      "content": "sample(${1:x}, ${2:size}, ${3:replace = ${4:FALSE}}, ${5:prob = ${6:NULL}})",
      "doc": "Sample",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "sam",
      "matches": {
        "sample": true
      },
      "source": "vscode-R/snippets"
    },
    "474380e522d45b9082a9fbe2a839eff9": {
      "content": "<input type=\"submit\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:submit": true
      },
      "source": "vim-snippets/snippets"
    },
    "4743a8e7269995effcc5a55b32212a9b": {
      "content": "@finally {\n\t${0:statements}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@finally": true
      },
      "source": "vim-snippets/snippets"
    },
    "4747541c55ad61aa67eacb73bc644264": {
      "content": "${1:f} = (${2:args}) ->\n  ${0:TARGET}",
      "doc": "",
      "filetype": "moon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "474c311301caab5da680e28c11570b23": {
      "content": "<%= if ${1} do %>\n\t${0:${VISUAL}}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "474ff9897437e398753c45e06e7a6a6f": {
      "content": "border-bottom-right-radius: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbrrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "47521a1fdbb42f88dfe9f1f109063946": {
      "content": "main :: IO ()\nmain = ${0:undefined}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "4766a88f59207bd22d18dc552b0386b3": {
      "content": "$.parseJSON(${1:data})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parsejson": true
      },
      "source": "snippets/coffee"
    },
    "4767cd7aae52eefe67406fa4c4752abf": {
      "content": "${1:#:subtitle}\n-----------------------------------",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "subtitle": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "476aea84a44c6738e0e4a94a666b0aa4": {
      "content": "{% paginate ${1:collection.products} by ${2:12} %}\n\t{% for ${3:product} in $1 %}\n\t\t${0}\n\t{% endfor %}\n{% endpaginate %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "paginate": true
      },
      "source": "vim-snippets/snippets"
    },
    "476d4d1d1efeb8bb532d8403baa73ac6": {
      "content": "memcpy(${1:DEST}, ${2:SRC}, ${3:NBYTES})",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "memcpy(dest, src, nbytes)",
      "matches": {
        "memcpy": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "476d9cb3fd9a333a4725ea587ca3e2a4": {
      "content": "align-items: baseline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "47740d251296d058eae12d2d98eeddfd": {
      "content": "for(;;)\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "forever (forever)",
      "matches": {
        "forever": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4781f5ee2b28c0f3458ed759db4ac3b4": {
      "content": "${1:obj}.die(${2:event}, ${3:handler})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "die": true
      },
      "source": "snippets/javascript"
    },
    "4790a66adffe41aa840bba4574cecd63": {
      "content": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!2": true
      },
      "source": "vim-snippets/snippets"
    },
    "4793da4edaf21c2f4ee501dbeae36329": {
      "content": "\\\\begin{listing}[language=${1:language}]\n\t${0:${VISUAL}}\n\\\\end{listing}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lst": true
      },
      "source": "vim-snippets/snippets"
    },
    "4798ad3f38e1f07e4d0d425ef7c24b9a": {
      "content": "reduce(${1:init}) { |${2:mem}, ${3:var}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "red": true
      },
      "source": "vim-snippets/snippets"
    },
    "479f86917a09a3bd4a7001e6726a1629": {
      "content": "_.includes(${collection}, ${value}, ${fromIndex})",
      "doc": "_.includes([1, 2, 3], 1);\n// => true\n\n_.includes([1, 2, 3], 1, 2);\n// => false\n\n_.includes({ 'a': 1, 'b': 2 }, 1);\n// => true\n\n_.includes('abcd', 'bc');\n// => true\n\nChecks if `value` is in `collection`. If `collection` is a string, it's\nchecked for a substring of `value`, otherwise\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nis used for equality comparisons. If `fromIndex` is negative, it's used as\nthe offset from the end of `collection`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-includes",
      "matches": {
        "lodash includes": true
      },
      "source": "javascript/lodash"
    },
    "47b103ded03631768edcbe3647820ecd": {
      "content": "${1:obj}.scroll(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scroll": true
      },
      "source": "snippets/javascript"
    },
    "47c8644fe4bfb129a3c268a88879881f": {
      "content": "${1:obj}.andSelf()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "andself": true
      },
      "source": "snippets/javascript"
    },
    "47cc4616ed4d9d2615a586be7271822f": {
      "content": "| downcase",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "downcase": true
      },
      "source": "vim-snippets/snippets"
    },
    "47cf0f3582e14046e7ee75a63fc0b137": {
      "content": "Should Be Equal    \"\\${${1:var}}\"    \"${2:expected value}\"    ${3:\"optional error msg\"}\t${4:ignore_case=True}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Should Be Equal",
      "matches": {
        "sbe": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "47cfe46fc10aae6843ecee7231dce293": {
      "content": "Serial.print(${1});",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sp": true
      },
      "source": "vim-snippets/snippets"
    },
    "47d4bd779b96688254aa2424d35c0e81": {
      "content": "repeat {\n\t${1}\n} ${2:while|until} ${3};",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rp": true
      },
      "source": "vim-snippets/snippets"
    },
    "47d92a1e6194ada0216dc41f71e21742": {
      "content": "${${0:0}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${..}",
      "matches": {
        "$": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "47dd062e8b3dc48e913f0b25be900926": {
      "content": "/**\n * @brief    ${1:function description}\n *\n * @details  ${2:detailed description}\n *\n * @param    ${3:param}\n *\n * @return   ${4:return type}\n */",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "/** @brief ...",
      "matches": {
        "doxy": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "47e13a3256a19a4f7561e8bb52f350a0": {
      "content": "throw new Error('${1:error message}')",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "terr": true
      },
      "source": "snippets/javascript"
    },
    "47ec5fc28c4621c0fcdc43cb85b75d32": {
      "content": "${1:void} ${2:function_name}(${3});",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fund": true
      },
      "source": "vim-snippets/snippets"
    },
    "47f2d8b18e791a2afa7c8469a9464abf": {
      "content": "render file: \"${1:filepath}\", use_full_path: ${2:false}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (file,use_full_path) (rfu)",
      "matches": {
        "rfu": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "47fd0a72814979c741e1aa3592c66487": {
      "content": "\\begin{tabular}{${1}}\n\t${2:TARGET}\n\\end{tabular}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{tabular} \\tabular": true,
        "tabular": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4800964c5ad10191e896343bc8031db1": {
      "content": "$this->assertTrue(${1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertTrue($a)",
      "matches": {
        "ast": true
      },
      "source": "vim-snippets/snippets"
    },
    "480208cbf3401c1e87ec4ecdcf4564d6": {
      "content": "&#x2305;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enter": true
      },
      "source": "vim-snippets/snippets"
    },
    "480d2e9fa26125d3dffe482db6c9a965": {
      "content": "border-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "4815bda4c2a585dcbb09bf8c52441b95": {
      "content": "defer ${1:func}(${2})\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "defer someFunction()",
      "matches": {
        "df": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "481b072ed4fb644adb2bf68fc95ca658": {
      "content": "grid-auto-columns: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac": true
      },
      "source": "vim-snippets/snippets"
    },
    "481c027b336f1efbae07793bc89143b2": {
      "content": "t.integer :lock_version, null: false, default: 0\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcl": true
      },
      "source": "vim-snippets/snippets"
    },
    "4822a63fe11aceb7cd47e9e77b0a484b": {
      "content": "overflow-style: marquee",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:mq": true
      },
      "source": "vim-snippets/snippets"
    },
    "4823faee804cca4882992c484ccf4506": {
      "content": "// import java.nio.IntBuffer;\n// import java.nio.FloatBuffer;\n// import com.sun.opengl.util.BufferUtil;\n// You might need to create four buffers to store vertext data, normal data, texture coordinate data, and indices in vertex arrays\nIntBuffer bufferObjects = IntBuffer.allocate(${1:4});\ngl.glGenBuffers($1, bufferObjects);\nint vertexCount = ${2:3};\nint numCoordinates = ${0:3};\n// vertexCount * numCoordinates\nFloatBuffer vertices = BufferUtil.newFloatBuffer(vertexCount * numCoordinates);\nfloat[] v = {0.0f, 0.0f, 0.0f,\n\t\t\t\t\t\t 1.0f, 0.0f, 0.0f,\n\t\t\t\t\t\t 0.0f, 1.0f, 1.0f};\nvertices.put(v);\n// Bind the first buffer object ID for use with vertext array data\ngl.glBindBuffer(GL.GL_ARRAY_BUFFER, bufferObjects.get(0));\ngl.glBufferData(GL.GL_ARRAY_BUFFER, vertexCount * numCoordinates * BufferUtil.SIZEOF_FLOAT, vertices, GL.GL_STATIC_DRAW);",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl gen buffers",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "4827f96c6a1613d400cbf88aed113630": {
      "content": "must_be_within_delta ${1:0.1}, ${2:0.1}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbwd": true
      },
      "source": "vim-snippets/snippets"
    },
    "483e5a59e12d39070fef39f6ed5ac17d": {
      "content": "${1:deferred}.notifyWith(${2:this}, ${3:args})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dnotifyw": true
      },
      "source": "snippets/coffee"
    },
    "483f28ee965bf9128f7660c2059fa0f5": {
      "content": "foreach (${1:#:var}; ${2:#:list}) {\n    ${3:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "foreach() {}",
      "matches": {
        "foreach": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4844eb6b74e93df4cfb93c018b8c0472": {
      "content": "protected body ${1} is\n\t${2}\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "protected body",
      "matches": {
        "protected_body": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4845272190357c8235289a2777705557": {
      "content": "resize: both;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "4849ced86b7a0190c2067acf4396bc7c": {
      "content": "filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=${1:100});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "op:ie": true
      },
      "source": "vim-snippets/snippets"
    },
    "484cb10b56fb7f8e01ff1ca9a6533ef8": {
      "content": "&#x2191;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "up": true
      },
      "source": "vim-snippets/snippets"
    },
    "4853b61d7fe68c00e50cd76f99e81f1d": {
      "content": "class ${1:#:ClassName} {\n\tvar _${2};\n\tfunction ${1}(${2}){\n\t\t_${2} = ${2};${0}\n\t}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "48611a2a680c6886d7f4ce8c0344d817": {
      "content": "pow(${1:num}, ${0:exponent});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pow": true
      },
      "source": "vim-snippets/snippets"
    },
    "486390e958eb5944f1a3d423157a44d1": {
      "content": "slot=\"$1\"$0",
      "doc": "slot=''. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-slota",
      "matches": {
        "slota": true,
        "vue slota": true
      },
      "source": "javascript/vue"
    },
    "4863c0d16eed37484fb0e668615742b7": {
      "content": "<li><a href=\"${2:#}\">${1}</a></li>\nlia+",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lia+": true
      },
      "source": "vim-snippets/snippets"
    },
    "4863e73b14ebdacd46cc1b5183f19c60": {
      "content": "<article class=\"${1}\">\n\t${0}\n</article>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "article.": true
      },
      "source": "vim-snippets/snippets"
    },
    "486fff890b72bebae0cf99272bdb433b": {
      "content": "<%= for ${1:item} <- ${2:$1s} ${3:@conn} do %>\n\t$0\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4872e6c4d696c1e9c7e624071695bce5": {
      "content": "$.type(${1:obj})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$type": true
      },
      "source": "snippets/javascript"
    },
    "4874254a00f2a1f5b9d0ed3fd0d34a0c": {
      "content": "get ${1:propertyName}() {\n\treturn this.${0};\n}",
      "doc": "Creates a getter property inside a class in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propertyGet",
      "matches": {
        "pge": true
      },
      "source": "vscode-javascript/snippets"
    },
    "48753d66c05234a350d16a9c63b5257b": {
      "content": "refute_kind_of ${1:UnexpectedKind}, ${2:actual_instance}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rfko": true
      },
      "source": "vim-snippets/snippets"
    },
    "487831090f5c45bba77f2fc0aef51284": {
      "content": "text-emphasis: circle",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "487b9b4393e3f11d4ee7812b1cebbc50": {
      "content": "<Proxy ${1:*}>\n\t${0:${VISUAL}}\n</Proxy>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "proxy": true
      },
      "source": "vim-snippets/snippets"
    },
    "48801faf2c22415a6459970d9dc85f86": {
      "content": "place-content: flex-start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "488d0c092aabdb0113ab1307db28fed5": {
      "content": "foreach_reverse(${1:elem}; ${2:range}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fer": true
      },
      "source": "vim-snippets/snippets"
    },
    "4891bc9b3f28e573d9fb1a6acc1cb6b4": {
      "content": "| upcase",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "upcase": true
      },
      "source": "vim-snippets/snippets"
    },
    "4891e7ea2a90b171157d04116c2ab72c": {
      "content": "border-bottom-color: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bbc": true,
        "border-bottom-color": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4894fb1db3c030a8681443e22a294589": {
      "content": "[${1:#:link_id}][]${2}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "[link][]",
      "matches": {
        "link": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "489ab72c0c23ee703bc71c0daad09fd0": {
      "content": "{%- elsif ${1:condition} -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elsif-": true
      },
      "source": "vim-snippets/snippets"
    },
    "48a1543dc1d43aa2ef55547ff1a841d3": {
      "content": "===========================\n${1:#:content_name}\n===========================\n.. contents:: contents_name\ntitle1\n====================================\nsubtitle1\n-----------------------------------\nsubtitle2\n-----------------------------------\nsubtitle3\n-----------------------------------\ntitle2\n====================================\nsubtitle1\n-----------------------------------\nsubtitle2\n-----------------------------------\nsubtitle3\n-----------------------------------\ntitle3\n====================================\nsubtitle1\n-----------------------------------\nsubtitle2\n-----------------------------------\nsubtitle3\n-----------------------------------",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "quickstart": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "48bc3fe1ed255f6e60d02d39aca9defd": {
      "content": "font-weight: ${1:normal/bold};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "font-weight: weight (font)",
      "matches": {
        "font": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "48c76f0d62d55f9212d81dac7396a42f": {
      "content": "<?php\n\tnamespace Models;\n\tuse Core\\Model;\n\tclass ${1:class_name} extends Model\n\t{\n\t\tfunction __construct()\n\t\t{\n\t\t\tparent::__construct();\n\t\t}\n\t}",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_model": true
      },
      "source": "vim-snippets/snippets"
    },
    "48c991221c463a9d02fb55eb43aaf3d1": {
      "content": "box-sizing: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxz": true
      },
      "source": "vim-snippets/snippets"
    },
    "48cbb706c10093b50f12f3b5101fcc16": {
      "content": "function! ${1:#:func_name}(${2}) abort\n  ${0:TARGET}\nendfunction",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "func endfunc",
      "matches": {
        "func": true,
        "function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "48cdb2fdfcd9bdabe69dd00e9e4712a5": {
      "content": "Page Should Not Contain Element    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Not Contain Element",
      "matches": {
        "psnce": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "48d082afedeaa022c18d448e3e4e3c3c": {
      "content": "| floor",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "floor": true
      },
      "source": "vim-snippets/snippets"
    },
    "48d8726eda3eb426e0b406f42197727c": {
      "content": "around_update :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maru": true
      },
      "source": "vim-snippets/snippets"
    },
    "48e17dbf642e891c45ced3c15b0223e0": {
      "content": "@change=\"${1:foo} = $event\"",
      "doc": "Vue Emit to Parent Component",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Emit to Parent",
      "matches": {
        "vemit-parent": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "48e5bb335f97e22f016987e5300d89eb": {
      "content": "if (${1:#:condition}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "if () {}",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "48e5bc5884baa01c4813fdded6e1e7c0": {
      "content": "${1:g}sub(${2:/pattern/}) { |${3:match}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sub": true
      },
      "source": "vim-snippets/snippets"
    },
    "48e8a077f2c9b5f8f98a7b64f471f321": {
      "content": "sub ${1:function_name} {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sub": true
      },
      "source": "vim-snippets/snippets"
    },
    "48ef08aa0ba46af8e7dd9e54de5a5fad": {
      "content": "va_list ${1:ap};\nva_start($1, ${2:LAST_ARG});\n${0}\nva_end($1);",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "va_start(va_list, last_arg); ... ; va_end()",
      "matches": {
        "va_list": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "48f00e6a52b0a1c045aaebb291c1f7ec": {
      "content": "list-style-position: outside;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisp:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "48ffeeb2d0f21e53ce77daad47b73412": {
      "content": "${1:deferred}.notifyWith(${2:this}, ${3:args})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dnotifyw": true
      },
      "source": "snippets/javascript"
    },
    "491ef8dcf25ba892ecba0d102fc52e7d": {
      "content": "${1:deferred}.isRejected()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Disrej": true
      },
      "source": "snippets/coffee"
    },
    "4923c78ee7f006b9c26b5a7935716652": {
      "content": "pub struct ${1} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "pub struct",
      "matches": {
        "pubstruct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "492f558949145e89d1c4ee2f3af355bc": {
      "content": "private ${1:void} ${2}(${3})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m-": true
      },
      "source": "vim-snippets/snippets"
    },
    "49309f1cb56128e063331e7c254ad3f9": {
      "content": "font-emphasize-style: disc;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:ds": true
      },
      "source": "vim-snippets/snippets"
    },
    "493263ebbb7bc2ceb676a52e746d0f45": {
      "content": "[routerLink]=\"['/${1:routePath}']\" routerLinkActive=\"${2:router-link-active}\" $0",
      "doc": "Angular routerLink",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngRouterLink",
      "matches": {
        "a-routerLink": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "493926db3195c3b12227390453a2e02b": {
      "content": "else {\n\t${0}\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "493b78cf9b551c61f6adea9b358e502e": {
      "content": "import React from 'react'\n\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
      "doc": "Creates a React Functional Component with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactFunctionalComponent",
      "matches": {
        "rfc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "4959b13a8920646965f4e0273c2ec0e1": {
      "content": "word-spacing ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wos": true
      },
      "source": "vim-snippets/snippets"
    },
    "495ae7636a0b2593edc50980c39e2d39": {
      "content": "try\n\t${1}\nwith ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "496660bbd47a0a19e87c508b385290ac": {
      "content": "const ${1:results} = await request(\n  ${2:url},\n  ${3:query},\n  ${4:variables}\n);",
      "doc": "",
      "filetype": "graphql-request",
      "grammar": "lsp",
      "label": "graphql-request-request-variables",
      "matches": {
        "graphql-request request variables": true
      },
      "source": "javascript/graphql-request"
    },
    "4975f9f5c078a9c6e71f92197f81c175": {
      "content": "_.runInContext(${context})",
      "doc": "_.mixin({ 'foo': _.constant('foo') });\n\nvar lodash = _.runInContext();\nlodash.mixin({ 'bar': lodash.constant('bar') });\n\n_.isFunction(_.foo);\n// => true\n_.isFunction(_.bar);\n// => false\n\nlodash.isFunction(lodash.foo);\n// => false\nlodash.isFunction(lodash.bar);\n// => true\n\n// Create a suped-up `defer` in Node.js.\nvar defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n\nCreate a new pristine `lodash` function using the `context` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-runincontext",
      "matches": {
        "lodash runincontext": true
      },
      "source": "javascript/lodash"
    },
    "497a5fbf1b8204690591ac8a5da0f631": {
      "content": "<section>\n\t${0}\n</section>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "section": true
      },
      "source": "vim-snippets/snippets"
    },
    "497e3f6f74716ac3d9eeba6404191377": {
      "content": "text-outline: ${1:0} ${2:0} #${3:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "to+": true
      },
      "source": "vim-snippets/snippets"
    },
    "49823aaeef027b82e7a7e28abb80b27e": {
      "content": "<meta ${0}>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "meta:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "4986dc4b81589616a759cca414800b14": {
      "content": "background ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg": true
      },
      "source": "vim-snippets/snippets"
    },
    "49874ba47c09c752eb91f71c318d35e3": {
      "content": "<%= ${0} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<%= %>",
      "matches": {
        "=": true
      },
      "source": "vim-snippets/snippets"
    },
    "49896aa7637409147c7861822b9adcc4": {
      "content": "import React from 'react'\nimport { View } from 'react-native'\n\ninterface ${1:${TM_FILENAME_BASE}}Props {\n\t\n}\n\nconst ${1:${TM_FILENAME_BASE}}: React.FC<${1:${TM_FILENAME_BASE}}Props> = (props) => {\n\treturn (\n\t\t<View>\n\t\t\t$0\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React Native Arrow Function Component with ES7 module system and named TypeScript interface",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typescriptReactNativeArrowFunctionComponentNamedProps",
      "matches": {
        "tsrnfi": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "49949e027adbf08cce7648a67ccced32": {
      "content": "namespace ${1:MyNamespace}\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "namespace": true
      },
      "source": "vim-snippets/snippets"
    },
    "499bdf6b6ff8a451de00aa424edf7515": {
      "content": "else {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else": true
      },
      "source": "gosnippets/snippets"
    },
    "49a01850c1469eab7c6fa5ce42a7fb29": {
      "content": "- (${1:id})${2:thing}\n{\n\treturn $2;\n}\n- (void)set$2:($1)${3:new$2}\n{\n\t[$3 retain];\n\t[$2 release];\n\t$2 = $3;\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "objacc": true
      },
      "source": "vim-snippets/snippets"
    },
    "49a476e4fe131f981ee90d346a6c98b2": {
      "content": "wants.${1:js|json|html}${2: { $0 }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "wants_format",
      "matches": {
        "wants": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "49a643ebb2d1f292a928b98ee8ccf33e": {
      "content": "{\n\t\"type\": \"richtext\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": \"<p>${0}</p>\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_richtext": true
      },
      "source": "vim-snippets/snippets"
    },
    "49a69d9c256922d390d375b87f86606e": {
      "content": "${1}:\nloop\n\t${0}\nend loop $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "named loop",
      "matches": {
        "nlo": true
      },
      "source": "vim-snippets/snippets"
    },
    "49ac9a989316bb446bf5ca789f604be1": {
      "content": "const ${1:name} = computed(() => {\n\treturn ${2}\n})",
      "doc": "Vue Composition api - computed",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Composition API - Computed",
      "matches": {
        "v3computed": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "49acc3549670ecbc1e06dbe931bc8c3d": {
      "content": "${1:callbacks}.remove(${2:callbacks})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Crem": true
      },
      "source": "snippets/javascript"
    },
    "49ad7759ab4413f35dc1b95a088382b3": {
      "content": ":before",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":b": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "49ada720fcd9586475fbf154220d4a12": {
      "content": "${1:#:set the_url to }choose URL showing ${2:Web} servers with editable URL",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "choose",
      "matches": {
        "choose_URL": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "49b4caed417c13971793c8ee95384957": {
      "content": "{% blockquote ${1:author}, ${2:title} %}\n${0:quote}\n{% endblockquote %}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blockquote-author": true
      },
      "source": "vim-snippets/snippets"
    },
    "49b7cab0f82281736c485b47b3f348f2": {
      "content": "#!/usr/bin/awk -f",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "#!/usr/bin/awk -f",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "49bd712068ea05a25fc26f1f40aafa2b": {
      "content": "function ${1}(${2})\n\t${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "function definition",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "49d7c18fd0eb906e72347a34d8582b16": {
      "content": "$this->${1:method}()->shouldStartWith(${2:'string'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldStartWith('string')",
      "matches": {
        "sstart": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "49d9fa38f393a2f5f5f2379e5ddb8ed8": {
      "content": "version(${1:Posix}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ver": true
      },
      "source": "vim-snippets/snippets"
    },
    "49da73e8b37df1daaa29c9581e144538": {
      "content": "class ${1:X()} {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "49e6e8c7e4e2f79ff5597a46ac38f44b": {
      "content": "BEGIN {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "begin": true
      },
      "source": "vim-snippets/snippets"
    },
    "49eb81bc7179872db6254a5b306ab87d": {
      "content": "${1:obj}.eq(${2:element index})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eq": true
      },
      "source": "snippets/coffee"
    },
    "49f3557363d867f86c83ab0920d5f78c": {
      "content": "{% extends \"${0:base.html}\" %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "extends": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a0051486450a11e680effb442c31293": {
      "content": "import (\n\t\"${1:package}\"\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "import",
      "matches": {
        "im": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a03af401da1a181c1b1be07be16601c": {
      "content": "<%= ${1:f}.radio_button :${2:attribute}, :${0:tag_value} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffrb": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a0437baadfa873db2ac2bb90f280d49": {
      "content": "split(\"${1:str}\"${2: , }${0:delimiter});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "split": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a04eb087c1abaa50c616df4276190a5": {
      "content": "<#\n.SYNOPSIS\n\t${1:Short Description}\n.DESCRIPTION\n\t${2:Full Description}\n.PARAMETER ${3:Param1}\n\t${4: $3 usage}\n.EXAMPLE\n\t${5:Example}\n.NOTES\n\t${6:notes}\n.LINK\n\t${7:online help}\n#>",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "help": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a0def38555aede40038e187c146f43b": {
      "content": "[#${2:Id}]\n== ${1:Title}\n${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "== heading on level 2 with anchor",
      "matches": {
        "heading-anchor": true,
        "section-anchor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4a0f84bba8d4b1259249979bfa5315ed": {
      "content": "_.isWeakMap(${value})",
      "doc": "_.isWeakMap(new WeakMap);\n// => true\n\n_.isWeakMap(new Map);\n// => false\n\nChecks if `value` is classified as a `WeakMap` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isweakmap",
      "matches": {
        "lodash isweakmap": true
      },
      "source": "javascript/lodash"
    },
    "4a131a674d0f8343b1626fd587ce6082": {
      "content": "{%- layout '${1:layout}' -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "layout-": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a1e10c53a34e8388bd656bdbe2f3e30": {
      "content": "func Test${1:Function}(t *testing.T) {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func TestXYZ(t *testing.T) { ... }",
      "matches": {
        "test": true
      },
      "source": "gosnippets/snippets"
    },
    "4a217aa37d7fb202d469c36b56486e6f": {
      "content": "protected ${1:void} ${2}(${3})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m|": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a2ae2e0bc59a69fd0fb80a922b16e6b": {
      "content": "${1} : in std_logic_vector (${2} downto 0);",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isv": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a3425e427acca13a955fe55755d9a12": {
      "content": "$this->${1:method}()->shouldNotBe(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotBe('value')",
      "matches": {
        "snbe": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4a35f2dc584c7b8f273236eab56290e2": {
      "content": "<%= collection_select(:${1:object}, :${2:method}, ${3:collection}, :${4:value_method}, :${5:text_method}, options = {${0:prompt: true}}) %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cs": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a394ad960867f7f7edc0be120c08180": {
      "content": "<code>${0}</code>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "code": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a3e8443494ae1ab88a4988e0b3fba32": {
      "content": "${1:deferred}.rejectWith(${2:this}, ${3:args})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Drejw": true
      },
      "source": "snippets/coffee"
    },
    "4a3ec52eb5d7fa380bea4088e0b90abb": {
      "content": "${1:public }function ${2:#:FunctionName}(${3})\n{\n\t${4:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "public function () {}",
      "matches": {
        "function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4a438112abe8b3355b2d26f2b5975156": {
      "content": "border-bottom-right-radius ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbrrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a55aa2d1ee166c31f30f529e73a6e02": {
      "content": "background-position: ${1:0} ${2:0};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgp": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a5f2c7d52ea58f482dcea56471a0449": {
      "content": "assert_redirected_to ${2:action: \"${1:index}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Test Assert Redirected To (art)",
      "matches": {
        "art": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4a63ca73885d4c46112739a16430ba08": {
      "content": "_.methodOf(${object}, ${args})",
      "doc": "var array = _.times(3, _.constant),\n    object = { 'a': array, 'b': array, 'c': array };\n\n_.map(['a[2]', 'c[0]'], _.methodOf(object));\n// => [2, 0]\n\n_.map([['a', '2'], ['c', '0']], _.methodOf(object));\n// => [2, 0]\n\nThe opposite of `_.method`; this method creates a function that invokes\nthe method at a given path of `object`. Any additional arguments are\nprovided to the invoked method.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-methodof",
      "matches": {
        "lodash methodof": true
      },
      "source": "javascript/lodash"
    },
    "4a7a0d5a20dff53e7526d56e0c4a59fc": {
      "content": "cmake_minimum_required(VERSION ${1:2.8.2})\nproject(${2:ProjectName})\nfind_package(${3:library})\ninclude_directories(${$3_INCLUDE_DIRS})\nadd_subdirectory(${0:src})\nadd_executable($2)\ntarget_link_libraries($2 ${$3_LIBRARIES})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "init": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a7c2b71c0074255223d314bd0291b17": {
      "content": "service '${1:serviceName}', (${2:injectables}) ->\n\t${3}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngms": true
      },
      "source": "snippets/coffee"
    },
    "4a817ea492bc32a4a6f78cb1e50202f8": {
      "content": "Yii::app()->user->",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yuser": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a890273e48bab12f377d8dbffb2a3ca": {
      "content": "(${1:#:condition}) ? ${2:#:a} : ${3:#:b}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "() ? a : b",
      "matches": {
        "ter": true,
        "ternary": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4a8a5a0678df6bea4cb2aac65339b927": {
      "content": "align-items: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a8b1a0ad8be0d1da7cc4273d6c1c7d7": {
      "content": "&#x232B;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "backspace": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a8b60e7f411917f484eadd186dedacd": {
      "content": "table-layout fixed",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbl:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "4a966c0703c614726a451b1ea9f3bb1f": {
      "content": "print(${1:#:string}}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "print",
      "matches": {
        "print": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4a9add60bc783dd1485e80c2391be4ee": {
      "content": "<%page args=\"${1:}\" />",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "page",
      "matches": {
        "page": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4aa775d97bbbf415b201e30a36be775b": {
      "content": "{% if $1 %}\n\t$2\n{% endif %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4aa8a61d0c9e23d7c552891b9ff7654c": {
      "content": "*${1:${TM_SELECTED_TEXT}}*$0",
      "doc": "Insert italic text",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert italic text",
      "matches": {
        "italic": true
      },
      "source": "vscode-R/snippets"
    },
    "4aad69eedbf5091ae85786408e1d48e6": {
      "content": "Ada.Text_IO.Put_Line(${1});${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "Ada.Text_IO.Put_Line",
      "matches": {
        "putl": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ab1c8653f49b3b86db182841c6a8035": {
      "content": "function ${1}(${2}) return ${3} is\n\t${4}\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "function",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ab8723c2307765877db17955db166bd": {
      "content": "$this->${1:method}()->shouldHaveCount(${2:7});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldHaveCount(7)",
      "matches": {
        "scount": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4ac5a2d00e518c6c32cfbedc7ff560c6": {
      "content": "unittest {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "un": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ace578d7ce3b8057eba85b7221f3b8d": {
      "content": "{% for ${1:item} in ${2} %}\n  ${0}\n{% end %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ad1a2bc24924f6aea01eb9b4db44db0": {
      "content": "[TearDown]\npublic void TearDown() {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "testteardown": true,
        "ttd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4ad74fc66093ad5cf65b5be243c56b03": {
      "content": "<option>${0}</option>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "optt": true
      },
      "source": "vim-snippets/snippets"
    },
    "4aed6e863ebe73ae2c2b5a91dae3a842": {
      "content": "<remarks>${1}</remarks>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<rem": true
      },
      "source": "vim-snippets/snippets"
    },
    "4af2bb5092c16098da880fb0601eecbb": {
      "content": "text-decoration: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td": true
      },
      "source": "vim-snippets/snippets"
    },
    "4af71c904caed78d68fcc3bc23e46a87": {
      "content": "protected int ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi|": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b0322be6f5b516dcbc8a88299132599": {
      "content": "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=${1:7,8,edge}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "meta:compat": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b0951d25732ddabb18af34dbea9ebb5": {
      "content": "${1:a} <- ${0:m a}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<-": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b0ba43df3bc0d951463d47239f367d0": {
      "content": "add_index :${1:table_name}, :${0:column_name}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mai": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b0be763af900d8b7dd7c6a05e682ee2": {
      "content": "printf(\"${1:} = %f\\n\", $1);",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prf": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b0f21a586b6dea7ec1e8e4f3c33d552": {
      "content": "'''${1}'''",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "'''": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4b1745c5289aa194e352ac60194446c6": {
      "content": "(defmulti ${1:name} \"${2:doc-string}\" ${0:dispatch-fn})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defmm": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b1f1d1e3a5ca44c4f97f9eca5e5bdf5": {
      "content": "PropTypes.shape({\n\t$0\n}).isRequired,",
      "doc": "An object taking on a particular shape required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeShapeRequired",
      "matches": {
        "ptshr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "4b41b4637db52333892a2709101bdca4": {
      "content": "!important",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "!": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b42e2731db7b857415e655a9b180d72": {
      "content": "\"${1:key}\": {\n\t${VISUAL}$0\n},",
      "doc": "",
      "filetype": "json",
      "grammar": "snu",
      "label": "Named object",
      "matches": {
        "no": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4b458e7b007eec50a2df70a9559e5aff": {
      "content": "expect(${1:target}).toBeUndefined();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to be defined (js)",
      "matches": {
        "eud": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b48b78c36e767efd14a17d4db402134": {
      "content": "has_one :${1:object}, dependent: :${0:destroy}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hod": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b4c3bdc991559bcda1b611160151386": {
      "content": "{% if ${1:#:condition} %}\n  ${0:TARGET}\n{% endif %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "if endif",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4b511686285ad08b07185deb4eac92db": {
      "content": "const ${1:ComponentName} = (${2:props}) => {\n\t${3:state}\n\treturn (\n\t\t<>\n\t\t\t${4}\n\t\t</>\n\t);\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "",
      "matches": {
        "raf": true
      },
      "source": "snippets/javascript"
    },
    "4b58ed13f93222068fc3913ef1e2f955": {
      "content": "border-left-width: ${1:1}px",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-left-width: size (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4b6038c92b4fbea26d9ef511c7ed619c": {
      "content": "page-break-before: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b609e365ee5d65ba6b5c9ff93e0dcf6": {
      "content": "&#x2193;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "down": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b60c46c083d672fdfcb08848a6d294c": {
      "content": "std::stack<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stack": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b63356daf25fe587229791da0b8dcc3": {
      "content": "set the_result to display dialog \"${1:#:text}\"\n\tdefault answer \"${2:#:type here}\"\n\t${3:#:with icon}\n\tbuttons {\"${4:Cancel}\", \"${5:OK}\"}\n\tdefault button \"${5}\"\nset button_pressed to button returned of the_result\nset text_typed to text returned of the_result\nif button_pressed is \"${5}\" then\n\t${6:#:TARGET}\nelse\n\t-- action for cancel button goes here\nend if",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "dialog",
      "matches": {
        "dialog_TextFierld": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4b68541cf78c175a72f6001d4d1320aa": {
      "content": "${1:/*condition*/} ? ${2:/*then*/} : ${3:/*else*/}$4",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "ternary operator (?:)",
      "matches": {
        "?:": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4b6d11f2656b118b07c62d10db40cfd8": {
      "content": "${1:controllerName} = (${2:scope}, ${3:injectables}) ->\n\t${4}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngc": true
      },
      "source": "snippets/coffee"
    },
    "4b7e903da4d0bb7ab58a34df64ecb8ca": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
      "doc": "Base for Vue File with SCSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-single-file-component",
      "matches": {
        "vue base": true
      },
      "source": "javascript/vue"
    },
    "4b7f03aed45f1466011bec46095ab50a": {
      "content": "if (${1:condition}) {\n   ${2:selected}\n} else {\n   \n}",
      "doc": "Code snippet for 'if-else' conditional block",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "if-else block",
      "matches": {
        "ifelse": true
      },
      "source": "vscode-R/snippets"
    },
    "4b894e7274e1f1427a782f713c4d59b5": {
      "content": "<p class=\"${1}\">${0}</p>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p.": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b956a0c26b75b85f547addb940f3495": {
      "content": "axios.interceptors.request.use(function (config) {\n\t${1:do something}\nreturn config;\n}, function (error) {\n\t${2:do something}\n$return Promise.reject(error);\n});",
      "doc": "You can intercept requests before they are handled by then or catch.",
      "filetype": "axios",
      "grammar": "lsp",
      "label": "axios-interceptors-request",
      "matches": {
        "axios interceptors request": true
      },
      "source": "javascript/axios"
    },
    "4b96970552c0537261d003be139c8e94": {
      "content": "page-break-after: left",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "4b9fd4177f75ca772e5a6094522dc0b2": {
      "content": "list-style-type: square",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ba233954bda109cf25760526e450dc9": {
      "content": "println(\"${1}\")\n${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "print line",
      "matches": {
        "prl": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ba44b850d015b500b57c035408f576e": {
      "content": "wont_be_empty",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wbe": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ba7af43768ce22e991c097bb24cb710": {
      "content": "::after",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "::a": true
      },
      "source": "vim-snippets/snippets"
    },
    "4bab5375bf038f19ace6308da3ac313e": {
      "content": "howpublished = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "howpublished": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4bbd6b82f3ae661210e8060bd74d3e23": {
      "content": "loadBytes(\"${0:filename}\");",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loadBytes": true
      },
      "source": "vim-snippets/snippets"
    },
    "4bc10f9884a2f993c25ccb0e47ac3787": {
      "content": "import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../../environments/environment';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n    environment.production ? [] : StoreDevtoolsModule.instrument()\n  ]\n})\nexport class $1StoreModule {}",
      "doc": "NgRx Store Module",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "NgRx Store Module",
      "matches": {
        "a-ngrx-store-module": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "4bc90d136e30dc5e47acca354964efa0": {
      "content": "try (${1:#:Resources}) {\n    ${0:TARGET}\n} catch (${2:Exception} ${3:e}) {\n    ${4:e.printStackTrace();}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try_resources": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4bc9ef4fbdd423e533cbce953396d46c": {
      "content": "list-style-type lower-roman",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:lr": true
      },
      "source": "vim-snippets/snippets"
    },
    "4bce647a245b4ffa0526aa6ac01afbad": {
      "content": "border-fit: stretch",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "4bda38fe3e83a7d903cc82f8d3ef180b": {
      "content": "System.Linq",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s.l": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4bea70515c3928fab80c2b185f5794bd": {
      "content": "NSMutableArray * array;",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ma": true
      },
      "source": "vim-snippets/snippets"
    },
    "4bea9a96ae80003a40057035419cdeb8": {
      "content": "while (${1}) ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "4bf4b9c433978b9a74a1076c83c0455c": {
      "content": "change_table :${1:table_name} do |t|\n\t${0}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mcht": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c3226905f0e7804f52643e94a23b98b": {
      "content": "\\\\DeclareMathOperator{${1}}{${2}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\DeclareMathOperator",
      "matches": {
        "dmo": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c3b08e23d2136ec974b9a38d2f4d027": {
      "content": "subject.${0:method}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s.": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c428c1cad0ce11db1a3069fef86b1ea": {
      "content": "console.log ${0}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "log": true
      },
      "source": "snippets/coffee"
    },
    "4c4a75688d7350b8f348f703ee99864a": {
      "content": "<!doctype html>\n<html lang=\"${1:en}\">\n    <head>\n        <meta charset=\"${2:utf-8}\">\n        <meta name=\"viewport\" content=\"${3:width=device-width, initial-scale=1}\">\n        <title>${4}</title>\n    </head>\n    <body>\n        ${5}\n    </body>\n</html>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "html5": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4c4f644f6a6bc4e84bf7229b8fb5efbe": {
      "content": "override def ${1:name}(${2:arg}) = ${0:}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovdef": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c51ce8b8605a789fa93c2bf16c4b21d": {
      "content": "return ${0};",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ret": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c63a484d1efbefb03e148810b9e518b": {
      "content": "case ${1} of\n\t${2} -> ${0}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c6a45c6302aaf43e143e18133eabdda": {
      "content": "logger.info",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "logger.info",
      "matches": {
        "logi": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4c6b17b465971f7ec7e7a192084f4698": {
      "content": "it('${1:should }', () => {\n\t$0\n});",
      "doc": "creates an it block",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-it",
      "matches": {
        "it": true,
        "jest it": true
      },
      "source": "javascript/jest"
    },
    "4c6de836956f5dfa68de18211c2d1380": {
      "content": "use GenServer\n@doc false\ndef start_link do\n\tGenServer.start_link(__MODULE__, ${1:Map.new})\nend\n@impl true\ndef init(state) do\n\t{:ok, state}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "basic genserver structure",
      "matches": {
        "genserver": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c6e68b0121889db880a070dede0620a": {
      "content": "augroup ${1:AU_NAME}\n\tautocmd!\n\t${0:${VISUAL}}\naugroup END",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "augroupvisual ... autocmd block with visual placeholder",
      "matches": {
        "auv": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c76fcc2465f4aa850cbd3a7367f96f0": {
      "content": "unless ${1:condition}\n\t$2\nelsif ${3:condition}\n\t$4\nelse\n\t$0\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unlesee": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c77ec17c8f845850fea755bcfdffee3": {
      "content": "border-bottom-right-image: continue",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbri:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c7a313c5e1e953427eaa0ec11724653": {
      "content": "int opApply(int delegate(ref ${1:/*iterated type/s*/}) dg)\n{\n\tint result = 0;\n\t${2:/*loop*/}\n\t{\n\t\tresult = dg(${3:/*arg/s*/});\n\t\tif(result){break;}\n\t}\n\treturn result;\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "opApply (opApply)",
      "matches": {
        "opApply": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4c7b44ba227963191cc69652da4406e3": {
      "content": "python3 << EOF\n${0}\nEOF",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "python3 <<EOF | EOF",
      "matches": {
        "py3": true,
        "python3": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4c8194a92bbcfbf59061e760f7694b9a": {
      "content": "Select (${1:condition})\nCase ${2:case1}:\n\t${3:; Case 1 code}\nCase Else:\n\t${0:; Else code}\nEndSelect",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "select": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c836c2a7ea0af8eb9cdf5ac498de640": {
      "content": "list-style-type: lower-roman;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:lr": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c859350f6ee00e16b8812eb9d907e21": {
      "content": "textLeading(${0:size});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "textLeading": true
      },
      "source": "vim-snippets/snippets"
    },
    "4c8869da7f15df58365dfe2b02b060e0": {
      "content": "{% gist ${0:gist_id} %}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gist-short": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ca18b422198f32da5beb3f40acf92a9": {
      "content": "flex-wrap: wrap;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxw:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ca565e8c7ba12fccbd6e625a37bb17a": {
      "content": "containers:\n  - name: {{ template \"${2:chartName}.name\" . }}-{{ .Values.$1.name }}\n\timage: \"{{ .Values.$1.image.repository }}:{{ .Values.$1.image.tag }}\"\n\timagePullPolicy: \"{{ .Values.${1:value_key}.image.pullPolicy }}\"\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "containers_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "4cb318ed4aed466b4aa2f180d7e1e3dd": {
      "content": "{% js %}\n\t${0}\n{% endjs %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig js",
      "matches": {
        "js": true
      },
      "source": "vim-snippets/snippets"
    },
    "4cb868e5ed8d59af8cac7091b0afd580": {
      "content": "_.intersection(${arrays})",
      "doc": "_.intersection([2, 1], [2, 3]);\n// => [2]\n\nCreates an array of unique values that are included in all given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. The order and references of result values are\ndetermined by the first array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-intersection",
      "matches": {
        "lodash intersection": true
      },
      "source": "javascript/lodash"
    },
    "4cbd40f5a0dc63abcf50d3836ea29216": {
      "content": "word-break: loose",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "4cbdfbb3376187ae10637fa5782a5d3d": {
      "content": "it('${1:description}', () => {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine-arrow",
      "grammar": "snu",
      "label": "it (js)",
      "matches": {
        "it": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4ccc7a47c09a08ba007163acc80495eb": {
      "content": "after_create :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "macr": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ccf2983b412e4c569f0f2fc88b15393": {
      "content": "text-indent ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ti": true
      },
      "source": "vim-snippets/snippets"
    },
    "4cd17e5f91fb5bdcd37dc2e0b5bd3ae5": {
      "content": "For ${1:n} = ${3:1} to ${2:count}\n\t${0:; code...}\nNext",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "4cd20aa8f016337444e567a5e5abc84e": {
      "content": "text(name: \"${1:BIOGRAPHY}\" , defaultValue: \"${2:default}\" , description: \"${3:Enter some information about the person}\")\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "paramtext": true
      },
      "source": "vim-snippets/snippets"
    },
    "4cd5de79702b4138412d33bf21709e27": {
      "content": "\\\\dot{{$1}} {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "dot",
      "matches": {
        "dot": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ce03a2a99665f4533dd7671b0cc26fd": {
      "content": "given ($${1:var}) {\n\t${2:# cases}\n\t${0:# default}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "given": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ced4d07ff67a67a89737e3411aeca21": {
      "content": "vertical-align: ${1:baseline/sub/super/top/text-top/middle/bottom/text-bottom/length/%};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "vertical-align: type (vertical)",
      "matches": {
        "vertical": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4ceebad79c0086624a420dff2f05d75c": {
      "content": "<?php foreach ($${1:vars} as $${2:$var}): ?>\n\t${0:${VISUAL}}\n<?php endforeach ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "?f": true
      },
      "source": "vim-snippets/snippets"
    },
    "4cfc8898045abe82eaa73e50e17de730": {
      "content": "display: table;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tb": true
      },
      "source": "vim-snippets/snippets"
    },
    "4cfe2e4d419f9bffeca0388032359d41": {
      "content": "free(${1:ptr});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fre": true
      },
      "source": "vim-snippets/snippets"
    },
    "4d03087dab37186372883574cfd3f3eb": {
      "content": "${1:args}: ${0:T}*",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "args": true
      },
      "source": "vim-snippets/snippets"
    },
    "4d09177d25312cdf18eb77ef9991fb29": {
      "content": "<link rel=\"${1}\" href=\"${2}\" title=\"${3}\" type=\"${4}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link": true
      },
      "source": "vim-snippets/snippets"
    },
    "4d095996ba14a98f528e00646e78c7cf": {
      "content": "justify-self: ${1:stretch};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js": true
      },
      "source": "vim-snippets/snippets"
    },
    "4d0c43760e94658662164a10355a20bd": {
      "content": "try {\n    ${0:TARGET}\n} finally {\n    ${1}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "try {} finally {}",
      "matches": {
        "try_f": true,
        "try_finally": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4d0d102d95c3f28ca334e9f51a04303c": {
      "content": "t.float :${1:title}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create float column",
      "matches": {
        "tcf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4d10a7469042fab958fac7e12dfd3d95": {
      "content": "import * as ${2:alias} from '${1:module}';$0",
      "doc": "Imports everything as alias from the module in ES6 syntax",
      "filetype": "base",
      "grammar": "lsp",
      "label": "importeverything",
      "matches": {
        "base import everything": true
      },
      "source": "javascript/base"
    },
    "4d1771aeae3f0dfab1976c4bf5390998": {
      "content": "list-style-type: ${1:lower-roman/upper-roman/lower-alpha/upper-alpha/lower-greek/lower-latin/upper-latin};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "list-style-type: roman-alpha-greek (list)",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4d19f440983a33196ab0030ab8f8c4fd": {
      "content": "#undef ${0:#:SYMBOL}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "und": true,
        "undef": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4d22a9b7412b646efa00ae591598950d": {
      "content": "\\${0:${0:default}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${0:default}",
      "matches": {
        "0:": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4d22d22ad97edb71a2412601cce04350": {
      "content": "var ${1:seq} =\n\tfrom ${2:item1} in ${3:items1}\n\tjoin ${4:item2} in ${5:items2} on $2.${6:prop1} equals $4.${7:prop2}\n\tselect ${8:$2.prop3}\n\twhere ${9:clause}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "LINQ syntax",
      "matches": {
        "from": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4d2688c9b9d3dae34f9536c31112a320": {
      "content": "pub fn new(${2}) -> ${1:Self} {\n\t$1 { ${3} }\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Constructor function",
      "matches": {
        "new": true
      },
      "source": "vim-snippets/snippets"
    },
    "4d2d5746e6d0e3701c72427629b68fc7": {
      "content": "if ${1:condition}\n\t${2:${VISUAL}}\nelse\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "4d39476fef8e7b7bc22204e0ff5c52d5": {
      "content": "assert_redirected_to ${1:parent}_${2:child}_path(${0:@$1})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "artnpp": true
      },
      "source": "vim-snippets/snippets"
    },
    "4d5427ec1389a436d9874aa3c5387ca6": {
      "content": "-include_lib(\"${1:lib}/include/${1}.hrl\").${2}",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "incl": true
      },
      "source": "vim-snippets/snippets"
    },
    "4d591387dffa73a924988c3378ad470e": {
      "content": "if ${1:condition} then\n\t${2:-- if condition}\nelse\n\t${0:-- else}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "4d6890e6c91113a5bcd6fe17c40c949d": {
      "content": "border-top: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdt:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "4d69dc31621fd011150953d445693456": {
      "content": "class ${1} extends ${2} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clax": true
      },
      "source": "snippets/javascript"
    },
    "4d8378eec6cd25982c8ba31817bd7e24": {
      "content": "{% block ${1:name} %}\n\t\t$2\n{% endblock $1 %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "block",
      "matches": {
        "block": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4d8c9755b707bdfbcd3537ae21e24957": {
      "content": "_.negate(${predicate})",
      "doc": "function isEven(n) {\n  return n % 2 == 0;\n}\n\n_.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n// => [1, 3, 5]\n\nCreates a function that negates the result of the predicate `func`. The\n`func` predicate is invoked with the `this` binding and arguments of the\ncreated function.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-negate",
      "matches": {
        "lodash negate": true
      },
      "source": "javascript/lodash"
    },
    "4d921e4500114af4a2cf410490a9578d": {
      "content": "${1:name} := ${0:value}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Variable declaration :=",
      "matches": {
        ":": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4da7d43941831a6113b4c0a32ca6bbb3": {
      "content": "${1:obj}.empty()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "empty": true
      },
      "source": "snippets/coffee"
    },
    "4dae3c8fe08e9bf800f4c4dfbd83cf5a": {
      "content": "subset(${1:array}, ${0:offset});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "subset": true
      },
      "source": "vim-snippets/snippets"
    },
    "4dae4b8fe10eae3b4de33c8290b91472": {
      "content": "align-items: flex-start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "4daf8c1330d3649701049d8ee8c9ac0d": {
      "content": "@extends('$1')",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@extends directive",
      "matches": {
        "extends": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4db2e91b173cc03acafc59d568b5bdd3": {
      "content": "position ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos": true
      },
      "source": "vim-snippets/snippets"
    },
    "4db4e5b3b553187f4ea1eb71bc2ca250": {
      "content": "Yii::app()->request->requestType",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yreqtype": true
      },
      "source": "vim-snippets/snippets"
    },
    "4db824013c0fd4ce288522a476e1a897": {
      "content": "string.trim()",
      "doc": "string.trim(message?: string | function): Schema\n\nTransforms string values by removing leading and trailing whitespace. If\nstrict() is set it will only validate that the value is trimmed.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-trim",
      "matches": {
        "yup string trim": true
      },
      "source": "javascript/yup"
    },
    "4dc3e81c1e8ffad6f30ca76235d1ea0d": {
      "content": "\\begin{align}\n\t${0:${VISUAL}}\n\\end{align}",
      "doc": "",
      "filetype": "texmath",
      "grammar": "snu",
      "label": "Align",
      "matches": {
        "al": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4dc7fbb63a032b3a8da154695e28b666": {
      "content": "getInitialState: ->\n\t${1:myvar}: ${2:myvalue}\n\t$3",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define getInitialState",
      "matches": {
        "getInitialState": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4dcd8f224042925872a2fc9441374040": {
      "content": "${1:obj}.die(${2:event}, ${3:handler})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "die": true
      },
      "source": "snippets/coffee"
    },
    "4dd1c5781ea5c4e5dbb96e9d13580be8": {
      "content": "page-break-inside: avoid;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbi:av": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ddfa21bc323ecbf2bd9a2f4f048a15b": {
      "content": "padding: ${1:20px} ${2:0px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "padding:   V H (padding)",
      "matches": {
        "padding": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4de67d55fcdf0dcfde588183514737d2": {
      "content": "unsigned int ${1:object}Count = [${2:array} count];\nfor (unsigned int index = 0; index < $1Count; index++) {\n\t${3:id} $1 = [$2 $1AtIndex:index];\n\t${0}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forarray": true
      },
      "source": "vim-snippets/snippets"
    },
    "4de9c5d8c901caf4dc37f536948441c2": {
      "content": "${1:move }|$2| { $3 }",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Closure, anonymous function (inline)",
      "matches": {
        "||": true
      },
      "source": "vim-snippets/snippets"
    },
    "4defd1241f8596dd2b1fe344968db0dd": {
      "content": "page-break-before always",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "4dfc9adb59c233d2948ee7b5fabdbaaa": {
      "content": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
      "doc": "Export named function in ES6 syntax",
      "filetype": "base",
      "grammar": "lsp",
      "label": "exportnamedfunction",
      "matches": {
        "base export named function": true
      },
      "source": "javascript/base"
    },
    "4e0060f5488d75dbe202de92f62e5e21": {
      "content": "import 'react-native'\nimport renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\n\nimport store from 'src/store'\nimport ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(\n\t\t<Provider store={store}>\n\t\t\t<${1:${TM_FILENAME_BASE}} {...defaultProps} />\n\t\t</Provider>,\n\t)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_setupReactNativeTestWithRedux",
      "matches": {
        "_snrtest": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "4e0e0a7d631352b978dd03c42742a81e": {
      "content": "set ${1:property}(${2:value}) {\n\t${0}\n}",
      "doc": "setter (ES6 syntax)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "setter-es6-syntax-",
      "matches": {
        "base setter": true
      },
      "source": "javascript/base"
    },
    "4e0e60ebb363dd0faf65ef06faf2a31f": {
      "content": "${1:name}.reduceLeft[${0:T}] {(",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "redl": true
      },
      "source": "vim-snippets/snippets"
    },
    "4e124d4c0f39310a977b297c3662d219": {
      "content": "render action: \"${1:action}\", layout: \"${2:layoutname}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (action,layout) (ral)",
      "matches": {
        "ral": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4e1279dd4814e257b4b51c49b318e8ab": {
      "content": "throw ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "thr": true
      },
      "source": "vim-snippets/snippets"
    },
    "4e167956a4fbd44224a02b4b37b66f5a": {
      "content": "__import__('rpdb').set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rpdb": true
      },
      "source": "vim-snippets/snippets"
    },
    "4e16f80842c91446c57ec5a104fb6cf7": {
      "content": "grid-auto-flow column dense",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:cd": true
      },
      "source": "vim-snippets/snippets"
    },
    "4e184b6e2e25d0c766bd3903cf7b6218": {
      "content": ".. note:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "note",
      "matches": {
        "note": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4e1caca2fd2381f4b6c74d2b7c1e732b": {
      "content": "var $1 = new sap.m.HBox({\n\t\t\tvisible : $2,\n\t\t\theight : $3,\n\t\t\twidth : $4,\n\t\t\tdisplayInline :$5,\n\t\t\tdirection :$6,\n\t\t\tfitContainer : $7,\n\t\t\trenderType : $8,\n\t\t\tjustifyContent :$9,\n\t\t\talignItems : $10,\n\t\t\titems:[]\n\t\t});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapmhbox": true
      },
      "source": "vim-snippets/snippets"
    },
    "4e28fe3901817c8355996d7b0f504de2": {
      "content": "align-content flex-end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "4e31be919844d63e3ae90934207f9332": {
      "content": "@private",
      "doc": "",
      "filetype": "javascript-jsdoc",
      "grammar": "snu",
      "label": "@private",
      "matches": {
        "@pri": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4e329f28709d5ceba5104445a14df32a": {
      "content": "newtype ${1:Type} =\n\t${2:$1} ${0:Int}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nty": true
      },
      "source": "vim-snippets/snippets"
    },
    "4e3ea777c5854608baace48fb8f35bb6": {
      "content": "package name {\n\t${1:public|internal|final} class ${2:name} ${0:extends } {\n\t\tprivate|public| static const FOO = \"abc\";\n\t\tprivate|public| static var BAR = \"abc\";\n\t\t// class initializer - no JIT !! one time setup\n\t\tif Cababilities.os == \"Linux|MacOS\" {\n\t\t\tFOO = \"other\";\n\t\t}\n\t\t// constructor:\n\t\tpublic function $2 (\t){\n\t\t\tsuper2();\n\t\t\ttrace(\"start\");\n\t\t}\n\t\tpublic function name (a, b...){\n\t\t\tsuper.name(..);\n\t\t\tlable:break\n\t\t}\n\t}\n}\nfunction A(){\n\t// A can only be accessed within this file\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "all": true
      },
      "source": "vim-snippets/snippets"
    },
    "4e4369ea03ae2cda59c2924ffacc102b": {
      "content": "@change=\"${1:foo} = $event\"",
      "doc": "Vue Emit to Parent Component",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Emit to Parent",
      "matches": {
        "vemit-parent": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "4e507ccac53f0a3d0addc733597d1503": {
      "content": "@if ${1:condition} {\n\t${0}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "4e59c932e885e9c7c0b48db257b205a8": {
      "content": ":${1:#:text}:\n: :\n: :\n: :",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "simple_table",
      "matches": {
        "table_simple": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4e6de99cc57e0b7e0952dbc1ff036c96": {
      "content": "(defproject ${1:aaa} \"0.1-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"https://github.com/${2}\"\n  :license {:name \"GNU GPL v3+\"\n            :url \"http://www.gnu.org/licenses/gpl-3.0.en.html\"}\n  :dependencies [[org.clojure/clojure \"1.7.0\"]]\n  :main ^:skip-aot ${3:aaa.core}\n  :target-path \"target/%s\"\n  :min-lein-version \"2.3.0\")",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defproejct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4e6f5135ffea1044a0f30e841fe4a41f": {
      "content": "real, dimension(${1::})${2:#:, allocatable} :: ${3}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "real dimension",
      "matches": {
        "red": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4e80828407aeb831c7458a47a159ee1a": {
      "content": "import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ${1:${TM_FILENAME_BASE}} = memo(function ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n})\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React Memo Function Component with ES7 module system with PropTypes",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactFunctionMemoComponentWithPropTypes",
      "matches": {
        "rmcp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "4e84d69a8778840b736669af79529a2a": {
      "content": "mixed.validateSyncAt()",
      "doc": "mixed.validateSyncAt(path: string, value: any, options?: object): any\n\nSame as validateAt but synchronous.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-validate-sync-at",
      "matches": {
        "yup mixed validatesyncat": true
      },
      "source": "javascript/yup"
    },
    "4e8702c812aaab9fe31e2f3bade157ea": {
      "content": "counter-increment: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "coi": true
      },
      "source": "vim-snippets/snippets"
    },
    "4e8894d5699dbe6ee3b08a8e15a20018": {
      "content": "interface ${1}{\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "it": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4e9e81bdb55f5722c4d2433e679b14ae": {
      "content": "[[NSColor ${0:blackColor}] set];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "color": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ea44ecdbd6a02cfb828118eb8e48a1c": {
      "content": "slice:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slice": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ea480863af00adb967ebc7881eb8928": {
      "content": ":- run_tests.\n:- halt.",
      "doc": "",
      "filetype": "prolog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "runtest": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4eaf635f4e10cf3329f240e00f10a605": {
      "content": "_.range(${start}, ${end}, ${step})",
      "doc": "_.range(4);\n// => [0, 1, 2, 3]\n\n_.range(-4);\n// => [0, -1, -2, -3]\n\n_.range(1, 5);\n// => [1, 2, 3, 4]\n\n_.range(0, 20, 5);\n// => [0, 5, 10, 15]\n\n_.range(0, -4, -1);\n// => [0, -1, -2, -3]\n\n_.range(1, 4, 0);\n// => [1, 1, 1]\n\n_.range(0);\n// => []\n\nCreates an array of numbers (positive and/or negative) progressing from\n`start` up to, but not including, `end`. A step of `-1` is used if a negative\n`start` is specified without an `end` or `step`. If `end` is not specified,\nit's set to `start` with `start` then set to `0`.\n\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-range",
      "matches": {
        "lodash range": true
      },
      "source": "javascript/lodash"
    },
    "4eb435f026a7a071f0492b0a63e363e1": {
      "content": "const ${1:context} = useContext(${2:contextValue})",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-usecontext",
      "matches": {
        "react usecontext": true,
        "usecontext": true
      },
      "source": "javascript/react"
    },
    "4eb5a6a742a528c6a98cf194c2d615b2": {
      "content": "\"blocks\": [\n\t{\n\t\t\"type\": \"${1}\",\n\t\t\"name\": \"${2}\",\n\t\t\"settings\": [\n\t\t\t${0}\n\t\t]\n\t}\n]",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_blocks": true
      },
      "source": "vim-snippets/snippets"
    },
    "4eb982b8e8eb5061597e6aa3cb1350c9": {
      "content": "PropTypes.bool,",
      "doc": "Bool prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeBool",
      "matches": {
        "ptb": true
      },
      "source": "vscode-react/snippets"
    },
    "4ece20b2afaffd237e3e956e643ae627": {
      "content": "function ${1:function_name}(${2:argument}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "func2",
      "matches": {
        "function2": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4ed51209d4f137e937a384f8a0c2e61b": {
      "content": "page-break-before left",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "4eda3f4eaff51fccd310100b89d94ce2": {
      "content": "<button type=\"submit\">${0}</button>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "button:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "4edc4f92061f17f88517d95b8c7edaca": {
      "content": "\\item ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "it": true,
        "item \\item": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4ee36fff60cc558b18d82b0c74bee113": {
      "content": "pub fn new(${1}) -> ${2:#:Name} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "pub fn new() {}",
      "matches": {
        "pubnew": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4ee630efdc0da2dec92a24b43916f3f1": {
      "content": "display: flex;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ee6ffd110e057b7e9556c61207a8b75": {
      "content": "io:format(\"${1:~w~n}\"${2:, []})",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ioformat": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4eee9cb1fc944af8f60a746d842f3fde": {
      "content": "\\begin{list}\n\t${1:TARGET}\n\\end{list}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{list} \\list": true,
        "list": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4ef0c277173a874b3abe4ebf7e81bb02": {
      "content": "${1:X} <- ${2:List}${3:, gen}",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "Generator Expression",
      "matches": {
        "gen": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4ef8f2e9dba39c59e3a18a38e9c50632": {
      "content": "${1:obj}.children('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "children": true
      },
      "source": "snippets/coffee"
    },
    "4efd4e81e31b980438689b8e09f1652d": {
      "content": "<bdo dir=\"${1:rtl}\">${2:TARGET}</bdo>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4f01d8a4e94ba7809ba8bd918f198d9e": {
      "content": "expect($1).toMatchSnapshot($0);",
      "doc": "returns true if the argument matches the most recent snapshot",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tomatchsnapshot",
      "matches": {
        "jest expect tomatchsnapshot": true,
        "tms": true
      },
      "source": "javascript/jest"
    },
    "4f05799d1ae8d5459f49e842a302ec4f": {
      "content": "@since ${0:#:version}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "since": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4f0619ba1b56423177fa60cebcd814ef": {
      "content": "PropTypes.shape({\n\t$0\n}),",
      "doc": "An object taking on a particular shape",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-shape",
      "matches": {
        "prop-types shape": true,
        "ptsh": true
      },
      "source": "javascript/prop-types"
    },
    "4f0c220e918ba9204b21d228a713e8a5": {
      "content": "_.times(${n}, ${iteratee})",
      "doc": "_.times(3, String);\n// => ['0', '1', '2']\n\n _.times(4, _.constant(0));\n// => [0, 0, 0, 0]\n\nInvokes the iteratee `n` times, returning an array of the results of\neach invocation. The iteratee is invoked with one argument; (index).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-times",
      "matches": {
        "lodash times": true
      },
      "source": "javascript/lodash"
    },
    "4f12f27435f01ea2cd863b99cb0d17aa": {
      "content": "${1:obj}.scrollLeft(${2:value})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scrolll": true
      },
      "source": "snippets/javascript"
    },
    "4f1337f6e29e72e10ab974fd1af21020": {
      "content": "pipe(${1:stream})${2}",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pipe": true
      },
      "source": "snippets/javascript"
    },
    "4f14123a333e8b17b7f06673fccc1690": {
      "content": "text-wrap: unrestricted",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f16f2c791c5bb52482a3e57b2b8b274": {
      "content": "if (${1:true})\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f2b0690d1a4abf6f5fc81c342b7ec7a": {
      "content": "\\\\begin{figure}[htpb]\n\\\\begin{center}\n\\\\begin{tikzpicture}[scale=${1:1}, transform shape]\n\t${2}\n\\\\end{tikzpicture}\n\\\\end{center}\n\\\\caption{${3}}%\n\\\\label{fig:${4}}\n\\\\end{figure}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "figure environment (tikzpicture)",
      "matches": {
        "tikz": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f2c1cdb91bfb65d9f2c10ee8e75dd6b": {
      "content": "grid-column-gap: 0;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gcg:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f35e5860cd71a5391971d8fff5fb182": {
      "content": "font-stretch: condensed",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f3a9f30c6621a07d93d1fe346b930a0": {
      "content": "| asset_url",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asset_url": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f3e21cee2dceeb18619088f5cf0c97f": {
      "content": "<area shape=\"circle\" coords=\"${1}\" href=\"${2}\" alt=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "area:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f4aef67dc10b748ea044d40e56d1140": {
      "content": "text-replace: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tr:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f518a8ff246203bc2230827cf923830": {
      "content": "import { StyleSheet, Text, View } from 'react-native'\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n\nconst styles = StyleSheet.create({})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_reactNativeFunctionalExportComponentWithStyles",
      "matches": {
        "_rnfes": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "4f58afeadaf7ef978ed40901b1b23774": {
      "content": "grid-template: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gt": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f5f1eda5d3c8cc83d9d133b599182df": {
      "content": "grid-auto-rows min-content",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar:mic": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f5f6b28dc7da9c0e1ce69be084e3dc0": {
      "content": "object\n\t${2:methods}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "obj",
      "matches": {
        "obj": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4f65da962fbe54f44ad1a4e56d0c928c": {
      "content": "Yii::log('${1:msg}', '${0:info}');",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ylog": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f70012c4541645c1daf93ed36a9aefb": {
      "content": "#![crate_name=${1:#:crate_name}]",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "crate": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4f71195e27706a09f4701cd994ef8132": {
      "content": "open(${1:11},file=${2},status=${3:#:old}${4:#:,position='append'})\n${5}\nclose($1)",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "open",
      "matches": {
        "op": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4f7c8c1fe2f58e8ffb09a6a036b33d5e": {
      "content": "${1:ModelName}::model()->updateByPk(${2:pk}, ${3:array('attributes')}, ${4:condition},array('${5:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yupdatebp": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f7ebb541b3d46fa9c8a2bceaa889527": {
      "content": "flunk '${1:Failure message.}'",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f806b3873f7f5c367ddf5d36c078a04": {
      "content": ":last-child",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":lc": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f85e1f3c965f2377f9cfe2b59227914": {
      "content": ":hover",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":h": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f8c81cf2a75b9d48d8165134e855b86": {
      "content": ".. danger::\n\t${0:ah!}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dan:": true
      },
      "source": "vim-snippets/snippets"
    },
    "4f951664e3df6196a9915ebec5ffbcc1": {
      "content": "#!/usr/bin/env lua\n$0",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "#!/usr/bin/env lua",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4f9d01afdffbc26bfd9edfd91063ebb5": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n\tsetup () {\n\t\t${0}\n\n\t\treturn {}\n\t}\n})\n</script>\n\n<style scoped>\n\n</style>",
      "doc": "Base for Vue File Composition API - Typescript",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component Composition API with Typescript",
      "matches": {
        "vbase-3-ts": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "4fa226d72e62c814d1ae1de9b3615d0d": {
      "content": "display: table-column;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbcl": true
      },
      "source": "vim-snippets/snippets"
    },
    "4fa2c8856ae4800869105b16b3e29a77": {
      "content": "if ${1:condition}\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "4fab9745d401ec43702dd34e05cc1e24": {
      "content": "import Vue from 'vue'\nimport ${1:HelloWorld} from './components/${1:HelloWorld}'\n\ndescribe('${1:HelloWorld}.vue', () => {\n\tit('${2:should render correct contents}', () => {\n\t\tconst Constructor = Vue.extend(${1:HelloWorld})\n\t\tconst vm = new Constructor().$mount()\n\t\texpect(vm.$el.querySelector('.hello h1').textContent)\n\t\t\t.to.equal(${3:'Welcome to Your Vue.js App'})\n\t})\n})",
      "doc": "unit test component",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-unit-test",
      "matches": {
        "vtest": true,
        "vue unit test": true
      },
      "source": "javascript/vue"
    },
    "4fb1b63b6bba8798c8053c3415e67f38": {
      "content": "\\${${0:interpolation${VISUAL}}!\"${1:default_string}\"\\}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "\"${interpolation!\"default_string\"}\"",
      "matches": {
        "intd": true
      },
      "source": "vim-snippets/snippets"
    },
    "4fb25470873cd56c446d686d4fbe83d3": {
      "content": "beforeCreate () {\n\t${0};\n},",
      "doc": "beforeCreate lifecycle method",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle beforeCreate",
      "matches": {
        "vbeforecreate": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "4fb4f37799dcc0abb71cb1e5867254ad": {
      "content": "$.getJSON '${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\t(data, textStatus, jqXHR) ->\n\t\t${0:// success callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "getjson": true
      },
      "source": "snippets/coffee"
    },
    "4fbabdce034c1b368c2787d99ab2b7be": {
      "content": "{% tablerow ${1:#:var} in ${2:#:list} %}\n  ${0:TARGET}\n{% endtablerow %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "tablerow in endtablerow",
      "matches": {
        "tablerow": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4fbd044333257ad0dea32089775e9f92": {
      "content": "|> Enum.reduce(${1:acc}, fn ${2}, ${3:acc} -> ${0} end)",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "pipe to reduce",
      "matches": {
        ">r": true
      },
      "source": "vim-snippets/snippets"
    },
    "4fbf89e52c1f8062b0191b61c1f2879e": {
      "content": "truncate(lenght=${1:79}, killwords=${2:False}, end=${3:'...''})",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "truncate",
      "matches": {
        "truncate": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "4fc9027c9222be1556806e4b88002b4a": {
      "content": "println('${1:#:name}, $1)",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "println('name, name)",
      "matches": {
        "pn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4fd741305d0d995974d20ee89c8a8d21": {
      "content": "@property (${1:retain}) ${2:NSSomeClass} ${3:*$2};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prop": true
      },
      "source": "vim-snippets/snippets"
    },
    "4fd901f2fb698df995ff4f1879a03053": {
      "content": "${1:obj}.wrap('${2:&ltdiv class=\"extra-wrapper\"&gt&lt/div&gt}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wrap": true
      },
      "source": "snippets/coffee"
    },
    "4fdedbf0f584451312e53c034554a7d5": {
      "content": "reg${1:#: nbit} ${2:reg}_r, $2_w;${3:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "reg [] _r, _w;",
      "matches": {
        "rw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "4fe01abc0b17d634fd5e614535ccd32b": {
      "content": "$.dequeue('${1:selector expression}'${2:, 'queue name'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deqq": true
      },
      "source": "snippets/coffee"
    },
    "4fe8db72ffec5c340f724e0f2a5c81fc": {
      "content": "<#if ${1:true}>\n\t${0:${VISUAL}}\n<#else>\n\t${2}\n</#if>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#if condition>...<#else>...</#if>",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "4feda4371775e49d621b11944a2bc9f6": {
      "content": "EntityDataModule.forRoot(${1:entityConfig}),",
      "doc": "Import NgRx Entity Data Module",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrx-data-import-entity-data-module",
      "matches": {
        "a-ngrx-data-entity-data-module-import": true,
        "angular ng rx data import entity module": true
      },
      "source": "javascript/angular"
    },
    "4fee32afa75a29d16baf4ae8bffd89ce": {
      "content": "expects($this->${1:once}())\n\t->method('${2}')\n\t->with(${3})\n\t->willReturn(${4});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "phpunit expects",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "4ff108b111610dfccd1c13ea26b26293": {
      "content": "quotes: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "500318c22f12f98b0a1de950467939af": {
      "content": "<<\"${0:TARGET}\">>",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "<<\"...\">>",
      "matches": {
        "bs": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5003527f6c83737f314fd8ab2c0b8bf0": {
      "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanActivate {\n\tconstructor() { }\n\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\t\treturn true;$0\n\t}\n}",
      "doc": "Angular CanActivate guard",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-canactivate-guard",
      "matches": {
        "a-guard-can-activate": true,
        "angular can activate guard": true
      },
      "source": "javascript/angular"
    },
    "5006a77f11e156919a66b3fec463a210": {
      "content": "for (${1} : ${2}) {\n    ${3:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fore": true,
        "foreach": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5008bf5665228a321a3ee9ef9b973838": {
      "content": "class ${1:MODEL_NAME}UpdateView(UpdateView):\n\tmodel = $1\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Generic Update View",
      "matches": {
        "updateview": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5010f088a600c087ee1de8e2c62a8dbd": {
      "content": "<%= stylesheet_link_tag \"${0}\" %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sslt": true
      },
      "source": "vim-snippets/snippets"
    },
    "501bd66d4e8a8dbcd8a166d15566bb0d": {
      "content": "<%namespace file=\"${1:name}\" />",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "namespace",
      "matches": {
        "namespace": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "501be78af700a3e4e09da85cc65824c7": {
      "content": "${1:fn} :: ${2:a} -> ${3:a}\n$1 ${4} = ${0:undefined}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "5021b5e42f17cd7fbf6121448739ea22": {
      "content": "let ${1:name}: ${2:Int}${0}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "503fd1918b08afc19e650a18a25dc33f": {
      "content": "for ${1:@array} -> ${2:$variable} {\n\t${3}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "505120bb371182b77a658ecbef736f01": {
      "content": "text-decoration: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "5051c5c647963b4e8ce9c6253817b13e": {
      "content": "@book{${1:LABEL},\n    author/editor = {${2}},\n    title = {${3}},\n    publisher = {${4}},\n    year = {${5}},\n    memo = {volume, series, address, edition, month, note},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@book": true,
        "book": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "505547a999d18fad83735e6eb1216e44": {
      "content": "<script src=\"${0}.js\" charset=\"utf-8\"></script>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scriptsrc": true
      },
      "source": "vim-snippets/snippets"
    },
    "5059a7a05da174afe7d1f9f10d5aed03": {
      "content": "background-attachment scroll",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bga:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "505bdc19ac0b04ec19a7262b02544d73": {
      "content": "align-items first baseline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:fb": true
      },
      "source": "vim-snippets/snippets"
    },
    "505cab3d0eaca74fcfe77e4f34860b9e": {
      "content": "text-replace ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tr": true
      },
      "source": "vim-snippets/snippets"
    },
    "506072889f150a3872c2e7737ff32c64": {
      "content": "import Vue from 'vue'\nimport ${1:VueCompositionApi} from '${2:@vue/composition-api}'\n\nVue.use(${1:VueCompositionApi})",
      "doc": "Import a plugin to main.js or plugins file",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Plugin import",
      "matches": {
        "vplugin": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "506874b5a06656870c77e14b21fb346c": {
      "content": "axios.post('${1:uri}', ${2:post})\n.then(function (response) {\n\t${3:success}\n})\n.catch(function (error) {\n\t${4:error}\n})",
      "doc": "Use Axios to make a post request - promise based",
      "filetype": "axios",
      "grammar": "lsp",
      "label": "axios-post-promise",
      "matches": {
        "axios post promise": true
      },
      "source": "javascript/axios"
    },
    "506c3a9090a2e3ae5c5c2742605a6d6f": {
      "content": "do while (${1:condition})\n\t$2\nend do",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dow": true
      },
      "source": "vim-snippets/snippets"
    },
    "50728762ef3d28e8fce167ec0772ebc9": {
      "content": "describe(${1:#:message}, function()\n  ${0:TARGET}\nend)",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "describe(message, func)",
      "matches": {
        "describe": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "50756d9ac86dfef2653e4bb331cb98dd": {
      "content": "${1:ptr} = realloc($1, ${2:size} * sizeof(${3:type}));",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rlc": true
      },
      "source": "vim-snippets/snippets"
    },
    "507dacea37ca08067b1926a0c8e47dbc": {
      "content": "border-style: hidden;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "508a6c4e6020f640a5f1265ff6dcc050": {
      "content": "background: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "508ba73e674a579c7bbddf7c171fb0f3": {
      "content": "import { useRouter } from 'next/router'",
      "doc": "",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-import-use-router",
      "matches": {
        "next import userouter": true
      },
      "source": "javascript/next"
    },
    "509a8f4633685c73fe169e180e5b0851": {
      "content": "${1:$TM_FILENAME_BASE}.propTypes = {\n\t$2\n};",
      "doc": "Creates empty propTypes declaration",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypes",
      "matches": {
        "rpt": true
      },
      "source": "vscode-react/snippets"
    },
    "509b13f6f122b1afcaf05d0562b92055": {
      "content": "sin(${0:rad});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sin": true
      },
      "source": "vim-snippets/snippets"
    },
    "509f3065879f0d08b8b3a9ce40df0934": {
      "content": "when ${1:#:condition}:\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "when ...: ...",
      "matches": {
        "when": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "509f546b9f11866aa05b9fff3b1ea5c8": {
      "content": "&#x2192;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "right": true
      },
      "source": "vim-snippets/snippets"
    },
    "50a50e4fab93b92fd7b9f06c74798302": {
      "content": "import React, { memo } from 'react'\n\ninterface Props {\n\t\n}\n\nexport default memo(function ${1:${TM_FILENAME_BASE}}({}: Props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n})\n",
      "doc": "Creates a React Memo Function Component with ES7 module system and TypeScript interface",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typeScriptReactFunctionMemoComponent",
      "matches": {
        "tsrmc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "50aff94f2dbe1ac357c3f808e0ddf7d7": {
      "content": "setup do\n\t$0\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "setup do..end",
      "matches": {
        "setup": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "50b5b4f3cec7f5c67c8ec6ee4993898d": {
      "content": "{{ ${1:#:TARGET} | ${2:#:filter} }}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "{{ | }}",
      "matches": {
        "filter": true,
        "{{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "50bec547eef37f4441beb173af57d24c": {
      "content": "border-bottom-right-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbri": true
      },
      "source": "vim-snippets/snippets"
    },
    "50c6b9ff19e306794dc5dab1364fd96f": {
      "content": "<div>\n\t${0}\n</div>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "div": true
      },
      "source": "vim-snippets/snippets"
    },
    "50c7b03df267f633264d03c9861a5d08": {
      "content": "class ${0:BlankSlate}\n\tinstance_methods.each { |meth| undef_method(meth) unless meth =~ /\\A__/ }\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "class BlankSlate .. initialize .. end",
      "matches": {
        "blankslate": true
      },
      "source": "vim-snippets/snippets"
    },
    "50c81e3bee9242b2206a34662e56ce23": {
      "content": "| asset_img_url: '${1:medium}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asset_img_url": true
      },
      "source": "vim-snippets/snippets"
    },
    "50ca1bdc391ecbf0602eb17f9f69b275": {
      "content": "_.overEvery(${predicates})",
      "doc": "var func = _.overEvery([Boolean, isFinite]);\n\nfunc('1');\n// => true\n\nfunc(null);\n// => false\n\nfunc(NaN);\n// => false\n\nCreates a function that checks if **all** of the `predicates` return\ntruthy when invoked with the arguments it receives.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-overevery",
      "matches": {
        "lodash overevery": true
      },
      "source": "javascript/lodash"
    },
    "50ca9e9d11c439c7cf60579560fd6260": {
      "content": "Ada.Text_IO.Put(${1});${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "Ada.Text_IO.Put",
      "matches": {
        "put": true
      },
      "source": "vim-snippets/snippets"
    },
    "50dbdf60cf78067f8c4740eec50037e1": {
      "content": "overflow-x scroll",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "50f1b48f890860d375e52d12c4341ba6": {
      "content": "align-items ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai": true
      },
      "source": "vim-snippets/snippets"
    },
    "50f85aadec5335dad3118eff07130e86": {
      "content": "<b>${0}</b>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b": true
      },
      "source": "vim-snippets/snippets"
    },
    "50facafa64357a7624038877245ed034": {
      "content": "switch(${1:/* variable */})\n{\n\tcase ${2:/* variable case */}:\n\t\t${3}\n\t\t${4:break;}${5}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switchndef": true
      },
      "source": "vim-snippets/snippets"
    },
    "50fd396982dfd0b93881c92055285c80": {
      "content": "extlookup(\"${1:variable}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "Simple extlookup",
      "matches": {
        "extlookup": true
      },
      "source": "vim-snippets/snippets"
    },
    "51007ef0e4e0901536ece692d9589900": {
      "content": "text-align-last ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal": true
      },
      "source": "vim-snippets/snippets"
    },
    "5103a1dd7d1e1eb8a2d65b0fb1a8d235": {
      "content": "else if(${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "51097d54e22dfcd793bdafdfc963a90c": {
      "content": "inout${1:#: nbit} io_${2:name},",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "inout [] io_,",
      "matches": {
        "IO": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5109f069ac0c727e34e1f79fe3986bbe": {
      "content": "expect(${1:target}).not.toMatch(${2:pattern});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to match (js)",
      "matches": {
        "notm": true
      },
      "source": "vim-snippets/snippets"
    },
    "510baf7b9694a04c9f1e8d403c3ba858": {
      "content": "mixed.strip()",
      "doc": "mixed.strip(stripField: boolean = true): Schema\n\nMarks a schema to be removed from an output object. Only works as a nested schema.let schema = object({\n  useThis: number(),\n  notThis: string().strip()\n});\n\nschema.cast({ notThis: \"foo\", useThis: 4 }); // => { useThis: 4 }\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-strip",
      "matches": {
        "yup mixed strip": true
      },
      "source": "javascript/yup"
    },
    "510c2b3fbed2e9d2cea6d034dc7f208b": {
      "content": "background-clip content-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:cb": true
      },
      "source": "vim-snippets/snippets"
    },
    "511ea0fb27a8489205996847668fe957": {
      "content": "border-corner-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtli:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "511ed9996597dcec0af9c0a12a63b642": {
      "content": "{msg desc=\"${1:description}\"}\n\t$0\n{/msg}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "Message",
      "matches": {
        "msg": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "512faa9d6c1f5cd63d6f7263ce69e37f": {
      "content": "\\\\paragraph{${1:paragraph name}}%\n\\\\label{par:${2:$1}}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\paragraph",
      "matches": {
        "par": true
      },
      "source": "vim-snippets/snippets"
    },
    "5138a628791f84249e78a192b41ba3b8": {
      "content": "$.cssHooks['${1:CSS prop}'] = {\n\tget: function (elem, computed, extra) {\n\t\t${2: // handle getting the CSS property}\n\t},\n\tset: function (elem, value) {\n\t\t${0: // handle setting the CSS value}\n\t}\n};",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "csshooks": true
      },
      "source": "snippets/javascript"
    },
    "513ebf0980b0e7a9e0671cf66904eaa9": {
      "content": "expect($1).rejects$0",
      "doc": "expect promise rejects to",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-expect-rejects",
      "matches": {
        "exprj": true,
        "jest expect rejects": true
      },
      "source": "javascript/jest"
    },
    "5144081be66accc07e10ca439c3b971c": {
      "content": "<remarks>${0:#:description}</remarks>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<remarks></remarks>",
      "matches": {
        "remarks": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "51520d2a6d297ea602b2602efb72c02a": {
      "content": "pipeline {\n\tagent any\n\tstages {\n\t\tstage('${1:Build}') {\n\t\t\tsteps {\n\t\t\t\tsh '${2:make}'\n\t\t\t}\n\t\t}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pipeline": true
      },
      "source": "vim-snippets/snippets"
    },
    "5153ecf1f8f6bdf8c2c1a5a17923136a": {
      "content": "import ${1:${2:Data}.${0:Text}}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "Simple import",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5157eb146c127fecb0ece18f8b559097": {
      "content": "Buffer${1:[T]}${0:()}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "buf": true
      },
      "source": "vim-snippets/snippets"
    },
    "5159acf62bfe5a85e45529ebf719b77a": {
      "content": "for (${1:auto} ${2:i} : ${3:container}) {\n\t${4}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "515b678d10ce7f43023f1aab877a166c": {
      "content": "title=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "title=": true
      },
      "source": "vim-snippets/snippets"
    },
    "515c3731965978ae7f7b84a3ddf3f1e7": {
      "content": "lng",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "Long",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "515f0750d81cfdfdc558f82ec8b11f9a": {
      "content": "let\n\t${1} =\n\t\t${2}\nin\n\t${0}",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "5168fe6041299939c2a3a4c9316015d6": {
      "content": "emit('${1:event_name}', ${2:args});",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "emit": true
      },
      "source": "snippets/javascript"
    },
    "516f4d398f56aa1f6000401a50556579": {
      "content": "\\\\${1:x} -> ${0:expression}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\": true
      },
      "source": "vim-snippets/snippets"
    },
    "51738d65de0f293e888416a43bbba159": {
      "content": "def ${1:__init__}(self, *args, **kwargs):\n    super(${0:ClassName}, self).$1(*args, **kwargs)",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dol": true
      },
      "source": "vim-snippets/snippets"
    },
    "5197bd58e95c8919f8e2ed8c7ba0057a": {
      "content": "has_many",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "has_many",
      "matches": {
        "hm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "51a14617c29c88c339b6492047dcef4f": {
      "content": "nf(${2:value}, ${3:left}${4:, }${0:right});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nf": true
      },
      "source": "vim-snippets/snippets"
    },
    "51a5368d789e670bb15fc90ccc511d60": {
      "content": "initial begin\n    ${0:TARGET}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "initial begin ... end",
      "matches": {
        "init": true,
        "initial": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "51ac0597b8386b111778b85f6edc5deb": {
      "content": "for (int ${1:i} = 0; $1 < ${2:10}; $1++)\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "for loop",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "51c5194b4241ec2d4322140b5e3ac4b3": {
      "content": "<a href=\"${1}\" target=\"_top\">${2:TARGET}</a>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ahref_top": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "51ce0cb2c2d3ecb91bc2106570f706b9": {
      "content": "\\textrm{${1:TARGET}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\textrm": true,
        "textrm \\textrm{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "51d5e19c6f4cc4d5fdfed9c9236cdaaa": {
      "content": "[[NSUserDefaults standardUserDefaults] objectForKey:${1:key}];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Read from defaults (getprefs)",
      "matches": {
        "getprefs": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "51da86714a860638a37cc4b6a05868f9": {
      "content": "switch ${1:var} {\n\t${3:pattern 1} {\n\t\t${0:#do something}\n\t}\n\tdefault {\n\t\t${2:#do something}\n\t}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sw": true
      },
      "source": "vim-snippets/snippets"
    },
    "51e01fd212f8b3a15e3fdea53fe746d0": {
      "content": "if ${1}\n    ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "if ... end",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "51e6fe218be9c287070287d8b0e01004": {
      "content": "import { NgModule } from '@angular/core';\n\nimport { ${1:Name}Component } from './${2:name}.component';\n\n@NgModule({\n\timports: [],\n\texports: [],\n\tdeclarations: [${1:Name}Component],\n\tproviders: [],\n})\nexport class ${1:Name}Module { }\n$0",
      "doc": "Angular Module",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Module",
      "matches": {
        "a-module": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "51f8c64a4185ad5d19f284787632a6bd": {
      "content": "${1:void} ${2:#:Method}(${3:#:arguments}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "method": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "51f8c941f47037a819e1c76c99ca583c": {
      "content": "refute_in_delta ${1:unexpected_float}, ${2:actual_float}, ${3:2**-20}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rfid": true
      },
      "source": "vim-snippets/snippets"
    },
    "51fb66071e311d77221b29a5c6b3f4c5": {
      "content": "def __init__(self, ${1:args}):\n\t${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defi": true
      },
      "source": "vim-snippets/snippets"
    },
    "5202cdfec92e9efc0dc2e9c9f98eccd6": {
      "content": "mixed.label()",
      "doc": "mixed.label(label: string): Schema\n\nOverrides the key name which is used in error messages.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-label",
      "matches": {
        "yup mixed label": true
      },
      "source": "javascript/yup"
    },
    "520a7cd26b7d812d8adeee474804f42a": {
      "content": "_.transform(${object}, ${iteratee}, ${accumulator})",
      "doc": "_.transform([2, 3, 4], function(result, n) {\n  result.push(n *= n);\n  return n % 2 == 0;\n}, []);\n// => [4, 9]\n\n_.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] }\n\nAn alternative to `_.reduce`; this method transforms `object` to a new\n`accumulator` object which is the result of running each of its own\nenumerable string keyed properties thru `iteratee`, with each invocation\npotentially mutating the `accumulator` object. If `accumulator` is not\nprovided, a new object with the same `[[Prototype]]` will be used. The\niteratee is invoked with four arguments: (accumulator, value, key, object).\nIteratee functions may exit iteration early by explicitly returning `false`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-transform",
      "matches": {
        "lodash transform": true
      },
      "source": "javascript/lodash"
    },
    "520ba3f45a42a62ad7afa55176bc0def": {
      "content": "@catch (${1:exception}) {\n\t${0:handler}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@catch": true
      },
      "source": "vim-snippets/snippets"
    },
    "5218a06b0244e5e3c07767a320a87553": {
      "content": "@media ${1:condition} {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "@media ...",
      "matches": {
        "media": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5220fcb02ebbea64c40368e30fd6dbb1": {
      "content": "PropTypes.object.isRequired,",
      "doc": "Object prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeObjectRequired",
      "matches": {
        "ptor": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "522a4d42a339c68adadb60ec2f0d01e5": {
      "content": "readinessProbe:\n  httpGet:\n\tpath: /go/api/v1/health\n\tport: 8153\n  initialDelaySeconds: {{ .Values.$1.healthCheck.initialDelaySeconds }}\n  periodSeconds: {{ .Values.$1.healthCheck.periodSeconds }}\n  failureThreshold: {{ .Values.$1.healthCheck.failureThreshold }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "readinessProbe_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "522dc350c3fc32784f20bee6c61fce04": {
      "content": "truncatewords:$1",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "truncatewords": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "522e9fffb6b9a86ea1dab9dea31337ca": {
      "content": "import ${1:Json.Encode} as ${2:Encode} exposing (${0:Value})",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "impae": true
      },
      "source": "vim-snippets/snippets"
    },
    "5233638b4c98287f1ca50b14a973d719": {
      "content": "font-stretch ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst": true
      },
      "source": "vim-snippets/snippets"
    },
    "5235796188ad6d45105da537c6937aa2": {
      "content": "let mut ${1} = ${2};",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "let mut variable declaration with type inference",
      "matches": {
        "letm": true
      },
      "source": "vim-snippets/snippets"
    },
    "5237afc41fa255c857fe054e06477aac": {
      "content": ".. sidebar:: ${1:Title}\n\t${0}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sid:": true
      },
      "source": "vim-snippets/snippets"
    },
    "523d7fdc83529ec75f998c7cdeca169d": {
      "content": "defer ${1:func}(${2})\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "defer someFunction()",
      "matches": {
        "df": true
      },
      "source": "gosnippets/snippets"
    },
    "524d94f1d03d7432a703e7ed0c8f5359": {
      "content": "[style.${1:property}]=\"${2:expression}\"",
      "doc": "Angular [style] binding",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "style",
      "matches": {
        "a-style": true,
        "angular style": true
      },
      "source": "javascript/angular"
    },
    "5258182cf5c9cffb6cc28032c459bca3": {
      "content": "^${1}^${2}",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": "^upper^",
      "matches": {
        "upper": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5263e52dc26383c74ad67409f30d6d54": {
      "content": "\\${4:${0:default}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${4:default}",
      "matches": {
        "4:": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "52672217858a9a9bcd8f972c29740c24": {
      "content": "{{ MEDIA_URL }}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mediau": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5267d8f190ea700e1b9370bcd2d278ed": {
      "content": "for ${1} of ${2} loop\n\t${0}\nend loop;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "for each",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "5269a2a9057f5378bbbf317152372975": {
      "content": "{{#unless ${1:value}}}\n${0:${VISUAL}}\n{{/unless}}",
      "doc": "",
      "filetype": "handlebars",
      "grammar": "snu",
      "label": "# {{#unless value}} ... {{/unless}}",
      "matches": {
        "ifn": true
      },
      "source": "vim-snippets/snippets"
    },
    "526f8d3b86feee5ae6f98b7c330c125d": {
      "content": "chore(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "chore conventional commit",
      "matches": {
        "chore": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "52771ffc4510fdeb379163dd95820757": {
      "content": "outline: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o": true
      },
      "source": "vim-snippets/snippets"
    },
    "527e8dc3846bc3ac7912daa5a5564d81": {
      "content": "padding: ${1:0} ${2:0} ${3:0} ${4:0};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:4": true
      },
      "source": "vim-snippets/snippets"
    },
    "527eecb71d5e2bce94f880ccd88c3be5": {
      "content": "\\\\[\n\t${0:${VISUAL}}\n\\\\]",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "unnumbered equation: \\[ ... \\]",
      "matches": {
        "\\": true
      },
      "source": "vim-snippets/snippets"
    },
    "528335bee79561a1c572a9fb5d70d935": {
      "content": "-webkit-box-shadow ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "528eb5c2870135dbfc8b58635c7cb7d0": {
      "content": "scrollbar-base-color:       ${1:#CCCCCC};${2:\nscrollbar-arrow-color:      ${3:#000000};\nscrollbar-track-color:      ${4:#999999};\nscrollbar-3dlight-color:    ${5:#EEEEEE};\nscrollbar-highlight-color:  ${6:#FFFFFF};\nscrollbar-face-color:       ${7:#CCCCCC};\nscrollbar-shadow-color:     ${9:#999999};\nscrollbar-darkshadow-color: ${8:#666666};}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "scrollbar",
      "matches": {
        "scrollbar": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "529cd9bd13475d1c3a29990039513cfd": {
      "content": "background-break: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk": true
      },
      "source": "vim-snippets/snippets"
    },
    "52a83dc21c851d036e5de4e17ba86a37": {
      "content": "${1:deferred}.notify(${2:args})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dnotify": true
      },
      "source": "snippets/javascript"
    },
    "52af5eb3ef7ac40dac7ecb7e46b1beb7": {
      "content": "{% endfor %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endfor",
      "matches": {
        "endfor": true
      },
      "source": "vim-snippets/snippets"
    },
    "52bbb05b70c9406766150047044966a3": {
      "content": "set ${1:propertyName}(${2:value}) {\n\t${0}\n}\n",
      "doc": "Creates a setter property inside a class in ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propertySet",
      "matches": {
        "pse": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "52c6aa37f875afe1d8f1f3a33e4d1c7e": {
      "content": "% for ${1:i} in ${2:iter}:\n\t${3:}\n% endfor",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "for",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "52cea2520bb852d8689dc83c6962a935": {
      "content": "string.required()",
      "doc": "string.required(message?: string | function): Schema\n\nThe same as the mixed() schema required, except that empty strings are also considered 'missing' values.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-required",
      "matches": {
        "yup string required": true
      },
      "source": "javascript/yup"
    },
    "52d05ccb538599d0f260714b1c283b72": {
      "content": "border-right-color: #${1:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-right-color: color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "52d6d98baaaa0f9f6e2e165b4ea94bfa": {
      "content": "<script type=\"${1}\" id=\"${2}\">\n\t${0}\n</script>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scriptt": true
      },
      "source": "vim-snippets/snippets"
    },
    "52def1e4fde8e3d3d1ca79c61ec03b0c": {
      "content": "<Link to=\"${1:/blog}\" activeStyle={{ ${2:color}: \"${3:red}\" }} >Text</Link>",
      "doc": "",
      "filetype": "gatsby",
      "grammar": "lsp",
      "label": "gatsby-link-activestyle",
      "matches": {
        "gatsby link activestyle": true
      },
      "source": "javascript/gatsby"
    },
    "52e1bad065093911f6a9e34572839e05": {
      "content": "word-wrap: suppress",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "52ed012cdf52058fa7668f5df7c8836f": {
      "content": "border-break ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbk": true
      },
      "source": "vim-snippets/snippets"
    },
    "52f56cc10cf91cea023cd19a3db51846": {
      "content": "<h1 id=\"${1}\">${0}</h1>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h1#": true
      },
      "source": "vim-snippets/snippets"
    },
    "52f9e769261830b386c108c158584759": {
      "content": "validates_format_of",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_format_of",
      "matches": {
        "vf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "52fd2f13f2fbd9b2ba409f0857b18cd0": {
      "content": "\\\\citeauthor{${1}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\citeauthor",
      "matches": {
        "citea": true
      },
      "source": "vim-snippets/snippets"
    },
    "53009a2e3b71958fc3458923d9a4a097": {
      "content": "[#${1:Id}] ${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "[#anchor] #text#, itemize, ...",
      "matches": {
        "anchorblock": true,
        "block-anchor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "530fb7bb6025aad80c4737e1100dcda2": {
      "content": "if(${1:true}) ${0};",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifi": true
      },
      "source": "vim-snippets/snippets"
    },
    "532153dff8a83c5aba07889be06664d8": {
      "content": "printf(\"${1:} = %d\\n\", $1);",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prd": true
      },
      "source": "vim-snippets/snippets"
    },
    "5321875c0d269b71e0e58507fc9ceca6": {
      "content": "@section('${1}', '${2}')",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@section",
      "matches": {
        "sec": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5321d4cbb03255dd206d47615caff310": {
      "content": "page-break-inside: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbi:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "53265d5662d8521e4ed51234fc8ebf3e": {
      "content": "componentWillMount() {\n\t${1}\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "componentWillMount",
      "matches": {
        "cwm": true
      },
      "source": "snippets/javascript"
    },
    "5329f06c97b1e431c696abfb83557ae4": {
      "content": "if (${1:true}) {\n  ${2}\n} else {\n  ${0}\n}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "532e64371000c98a2c69f91b9c8a95ec": {
      "content": "${1:obj}.toggle  (${2:e}) ->\n\t${3:// event handler}\n, ($2) ->\n\t${4:// event handler}\n${0}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tog": true
      },
      "source": "snippets/coffee"
    },
    "533261add896a166227d0f9e13d5f321": {
      "content": "${1:obj}.insertBefore('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "insb": true
      },
      "source": "snippets/coffee"
    },
    "5340f083d0d3ed1002499d801547f802": {
      "content": "import React, { useState, useEffect } from 'react'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React, {useState, useEffect}",
      "matches": {
        "imrse": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "5346feb4ff0996b1f02bd0dbe70ba2d1": {
      "content": "type = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "type": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "534ad57cd3086eb5ec4217b35dd4e832": {
      "content": "rug(${1:jitter(${2:x})})",
      "doc": "",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "rug",
      "matches": {
        "rug": true
      },
      "source": "vscode-R/snippets"
    },
    "534e6bc76addfece294024be6fdcda0b": {
      "content": "${1:FIELDNAME} = models.DecimalField(max_digits=${2}, decimal_places=${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "decimal": true
      },
      "source": "vim-snippets/snippets"
    },
    "53516794052e1003056f3f769481e33e": {
      "content": "page-break-after: left;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "536091b900b53083fb77c2ad5017de74": {
      "content": "object\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "object",
      "matches": {
        "obj": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "536d4cd6b9b90005ab21e45f93e62170": {
      "content": "font-size: ${1:100%};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "font-size: size (font)",
      "matches": {
        "font": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5370071400bfa8482dbffc5fd2d702a2": {
      "content": "typeof ${0}",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "typeof",
      "matches": {
        "tpf": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "53707c52d6cdf58f155b8fb8d26c36b6": {
      "content": "package { \"${1:package name}\":\n\tensure\t=> ${0:present},\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "package": true
      },
      "source": "vim-snippets/snippets"
    },
    "53740ce3a518f13b240e783349606974": {
      "content": "assert_equal ${1:expected}, ${2:actual}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ase": true
      },
      "source": "vim-snippets/snippets"
    },
    "53743938547a5233bedec01f75a76602": {
      "content": "{% render '${1:snippet}', ${2:variable}: ${0:value} %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "renderwith": true
      },
      "source": "vim-snippets/snippets"
    },
    "5379b106da87bb691d132f4aaba71e28": {
      "content": "cy.server();",
      "doc": "Start a server to begin routing responses to cy.route() and to change the behavior of network requests.",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-server",
      "matches": {
        "cypress server": true
      },
      "source": "javascript/cypress"
    },
    "537e3a4ba49975f678f73f254e26e0dd": {
      "content": "white-space-collapse ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc": true
      },
      "source": "vim-snippets/snippets"
    },
    "5382e8ed902ac8299462cd171850ca98": {
      "content": "_.isFinite(${value})",
      "doc": "_.isFinite(3);\n// => true\n\n_.isFinite(Number.MIN_VALUE);\n// => true\n\n_.isFinite(Infinity);\n// => false\n\n_.isFinite('3');\n// => false\n\nChecks if `value` is a finite primitive number.\n\n**Note:** This method is based on\n[`Number.isFinite`](https://mdn.io/Number/isFinite).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isfinite",
      "matches": {
        "lodash isfinite": true
      },
      "source": "javascript/lodash"
    },
    "538bed7e71e92daa79a7b5179ce8a0ce": {
      "content": "INITIAL ${0:?}",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ini": true
      },
      "source": "vim-snippets/snippets"
    },
    "538cad9f179762ed142cbc31259d41ca": {
      "content": "setter! ${0:name}",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w!": true
      },
      "source": "vim-snippets/snippets"
    },
    "538d48f8924bd8b371d507389ed7e5ed": {
      "content": "switch ($${1:variable}) {\n\tcase '${2:value}':\n\t\t${3}\n\t\tbreak;\n\t${0}\n\tdefault:\n\t\t${4}\n\t\tbreak;\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "switch($var) { case 'xyz': ... default: .... }",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "538eec08c3f612e6cb93696ba054f390": {
      "content": "\\\\begin{enumerate}\n\t\\\\item ${0}\n\\\\end{enumerate}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "enumerate environment",
      "matches": {
        "enum": true
      },
      "source": "vim-snippets/snippets"
    },
    "5395ce04d1bf280874a182e346d4ecbb": {
      "content": "${1:FIELDNAME} = models.BigIntegerField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "BigIntegerField",
      "matches": {
        "mbigint": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "539c47b5d6cba070c2e6bfd4c1120f17": {
      "content": "# Directory resource\ndirectory ${1:\"/path/to/dir\"} do # The path to the directory\n\t${2:#}group ${3} # The group owner of the directory (string or id)\n\t${4:#}mode ${5} # The octal mode of the directory, eg 0755\n\t${6:#}owner ${7} # The owner for the directory\n\t${10:#}recursive ${11:false} # When deleting the directory, delete it recursively. When creating the directory, create recursively (ie, mkdir -p)\n\t${12:#}${13:action :create} # Create this directory (Default)\n\t${14:#}${0:action :delete} # Delete this directory\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "directory": true
      },
      "source": "vim-snippets/snippets"
    },
    "53a101e05c22ffe75d756430e8bfc75c": {
      "content": "PropTypes.objectOf($0).isRequired,",
      "doc": "An object with property values of a certain type required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-object-of-required",
      "matches": {
        "prop-types objectof required": true,
        "ptoor": true
      },
      "source": "javascript/prop-types"
    },
    "53aa00e608f350bd1648c60b4cb2b453": {
      "content": "render file:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render :file",
      "matches": {
        "rf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "53aa7426b0cf5cd1d51505bd54f92bd6": {
      "content": "_.round(${number}, ${precision})",
      "doc": "_.round(4.006);\n// => 4\n\n_.round(4.006, 2);\n// => 4.01\n\n_.round(4060, -2);\n// => 4100\n\nComputes `number` rounded to `precision`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-round",
      "matches": {
        "lodash round": true
      },
      "source": "javascript/lodash"
    },
    "53b2006fd47b2d845216ba412fa5c2ff": {
      "content": "try:\n\t${1:${VISUAL}}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5}\nfinally:\n\t${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "Try/Except/Else/Finally",
      "matches": {
        "tryef": true
      },
      "source": "vim-snippets/snippets"
    },
    "53b8f4fa70fab92b678b3060c48c2e2b": {
      "content": "| pluralize: '${1:item}', '${2:items}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pluralize": true
      },
      "source": "vim-snippets/snippets"
    },
    "53ca0bcd6d735284c8bde3d55a6676ab": {
      "content": "select ${1:answer} in ${2:choices}; do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "select": true
      },
      "source": "vim-snippets/snippets"
    },
    "53dabc2046b7b0f37a8dcb39271e76dc": {
      "content": "degrees(${0:rad});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "degrees": true
      },
      "source": "vim-snippets/snippets"
    },
    "53db79c28f34508c641b5b01a5ce0308": {
      "content": "_.reverse()",
      "doc": "var array = [1, 2, 3];\n\n_(array).reverse().value()\n// => [3, 2, 1]\n\nconsole.log(array);\n// => [3, 2, 1]\n\nThis method is the wrapper version of `_.reverse`.\n\n**Note:** This method mutates the wrapped array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-reverse",
      "matches": {
        "lodash reverse": true
      },
      "source": "javascript/lodash"
    },
    "53dd59383f59e0fa5070a61ccfc62152": {
      "content": "log.Printf(\"${1} = %+v\\n\", $1)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "log.Printf(...)",
      "matches": {
        "lf": true
      },
      "source": "gosnippets/snippets"
    },
    "53df5c08692989c585ab1d087d05fbac": {
      "content": "set grid",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set grid",
      "matches": {
        "grid": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "53e30dfb8ea8f04360b6620f55302494": {
      "content": "export default (req, res) => {\n  if (req.method === 'POST') {\n    $1\n  } else {\n    $2\n  }\n};",
      "doc": "",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-api-method",
      "matches": {
        "next api method": true
      },
      "source": "javascript/next"
    },
    "53e32073c8a4d3252bd6d01b74926e45": {
      "content": "Url:templatePath();",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_url_templatepath": true
      },
      "source": "vim-snippets/snippets"
    },
    "53ea8add4137f37b205a750fa238bd2f": {
      "content": "begin\n\t${1:block}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "beg",
      "matches": {
        "beg": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "53efedf76613bd7b8cd38c0365c1982d": {
      "content": "border-top-color: #${1:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtc": true
      },
      "source": "vim-snippets/snippets"
    },
    "53f2ecbd52ccee7414ced4e83da71fec": {
      "content": "text-emphasis: accent",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:ac": true
      },
      "source": "vim-snippets/snippets"
    },
    "53fef2cab1e0e8d6e0ebfca0ca6ec6b5": {
      "content": "word-spacing: ${1:10px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "word-spacing:  length (word)",
      "matches": {
        "word": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5400f96e043a9e049ec4c9f1a29649c1": {
      "content": "{% ${1:tag_name} %}\n\t$2\n{% end$1 %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "%%": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "540629b82d970a9e631a80234764099e": {
      "content": "<script src=\"${0}.js\"></script>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scripts": true
      },
      "source": "vim-snippets/snippets"
    },
    "540b13a3c91dfe2c454893904fa2a97d": {
      "content": "cursor: pointer",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:p": true
      },
      "source": "vim-snippets/snippets"
    },
    "541888d58062f2c0c812127a72cb664e": {
      "content": "border-bottom-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbi": true
      },
      "source": "vim-snippets/snippets"
    },
    "541ff5ff2518e579e4ecc05285b96e08": {
      "content": "\\\\begin{${1:env}}\n\t${0:${VISUAL}}\n\\\\end{$1}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\begin{} ... \\end{} block",
      "matches": {
        "begin": true
      },
      "source": "vim-snippets/snippets"
    },
    "54228eaa18f86f318d74ead643bfc058": {
      "content": "render xml:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render :xml",
      "matches": {
        "rx": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5423079e57cdddd5bcae4489e13466ba": {
      "content": "$${1:mock} = $this->createMock(${2:SomeClass}::class);",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$mock = $this->createMock(SomeClass::class);",
      "matches": {
        "mock": true
      },
      "source": "vim-snippets/snippets"
    },
    "54243d97edf89741790af3f1fd9ee733": {
      "content": "[[NSNotificationCenter defaultCenter] addObserver:${1:self} selector:@selector(${3}) name:${2:NSWindowDidBecomeMainNotification} object:${4:nil}];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reg": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "542969e222524a49b5d38effa5dab3d2": {
      "content": "{% ${1:#:tag} ${2:#:name} %}\n\t${0:TARGET}\n{% end$1 %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% ... %} ... {% end... %}",
      "matches": {
        "tagblock": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "542f0dcc8c553e4e4d16454e7d9dc7e5": {
      "content": "border-style solid",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "542f9c40734f27204024c39b9e2e29d2": {
      "content": "PropTypes.node.isRequired,",
      "doc": "Anything that can be rendered: numbers, strings, elements or an array required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeNodeRequired",
      "matches": {
        "ptndr": true
      },
      "source": "vscode-react/snippets"
    },
    "54353a4c1345383c500578bb9d254635": {
      "content": "deinit {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deinit": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "543f8d382a0b347643d1d6960dab6d5c": {
      "content": "border-bottom-width ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbw": true
      },
      "source": "vim-snippets/snippets"
    },
    "5440940d113b3af7879245a9c40785cf": {
      "content": "console.trace(${0:label});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.trace",
      "matches": {
        "ct": true
      },
      "source": "snippets/javascript"
    },
    "5444f54e2d79e96772c95be1791e04af": {
      "content": "${1:obj}.slideUp('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sup": true
      },
      "source": "snippets/javascript"
    },
    "5449547ff72745c391bc1e0315069adf": {
      "content": "assert ${1:test} : \"${2:Failure message}\";",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as": true
      },
      "source": "vim-snippets/snippets"
    },
    "5450b7bf80299bbecfb7cad5eafc6cc2": {
      "content": "href=\"${1:#}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "href": true
      },
      "source": "vim-snippets/snippets"
    },
    "5464e3fc9763dead828f581cf5179bb8": {
      "content": "require('dotenv-safe').config({ allowEmptyValues: ${1|true,false|} })",
      "doc": "If a variable is defined in the example file and has an empty value in the environment, enabling this option will not throw an error after loading.",
      "filetype": "dotenv-safe",
      "grammar": "lsp",
      "label": "dotenv-safe-allowemptyvalues",
      "matches": {
        "dotenv-safe allowemptyvalues": true
      },
      "source": "javascript/dotenv-safe"
    },
    "5468b5b020b0de2c3e702b834d8c686b": {
      "content": "checkEvents() {\n\tthis.router.events.subscribe(event => {\n\t\tswitch (true) {\n\t\t\tcase event instanceof ${1:eventName}:\n\t\t\t\t$0\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t});\n}",
      "doc": "Angular Router Events",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Router Events",
      "matches": {
        "a-router-events": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "546bee6684fa34f23d728a07f41609a6": {
      "content": "(for/product ([${1}])\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "for/product",
      "matches": {
        "forp": true
      },
      "source": "vim-snippets/snippets"
    },
    "546dc7dd787004367188610aaf65c641": {
      "content": "border-break: close",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbk:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "547d7e396b4a8fa79f80504ec1d1a515": {
      "content": "<h2 class=\"${1}\">${0}</h2>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h2.": true
      },
      "source": "vim-snippets/snippets"
    },
    "54808e83da79653ccb772d11a54c4b16": {
      "content": "empty-cells: show",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "549f98b4441f7fce962a304eed797a47": {
      "content": "test('${1:should }', () => {\n\t$0\n});",
      "doc": "creates a test block",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-test",
      "matches": {
        "jest test": true,
        "test": true
      },
      "source": "javascript/jest"
    },
    "54a57aa5b9fa147065a73785124fcc4c": {
      "content": "<% ${1:TARGET} %>${2}",
      "doc": "",
      "filetype": "eruby",
      "grammar": "snu",
      "label": "<% %>",
      "matches": {
        "ruby_code": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "54a5d41598480312073a726423ac0d2a": {
      "content": "// Package $1 provides ${2:...}\npackage ${1:main}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "package ...",
      "matches": {
        "package": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "54a70b1807a74d67842236ab2aa0f620": {
      "content": "validates_numericality_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:is not a number}\"}, if: proc { |obj| ${5:obj.condition?} }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_numericality_of if",
      "matches": {
        "vnif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "54ac51a6c08bbbed92dd2de3436716a0": {
      "content": "try\n\t${1:${VISUAL}}\ncatch ${2:error}\n\t${3}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "54b90a405ad07274f7bccde55a0d90e7": {
      "content": "if (${1:#:condition}) {\n    ${2:#:commands}\n}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "if (...) {...}",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "54c2083459c50a04866e436c81998028": {
      "content": "bind:${1:property}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-bind",
      "matches": {
        "svbind-simple": true,
        "svelte bind": true
      },
      "source": "javascript/svelte"
    },
    "54c27815e573618ee63115ed18c11b6d": {
      "content": "if err := ${1:condition}; err != nil {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err := ...; err != nil { ... }",
      "matches": {
        "ife": true
      },
      "source": "gosnippets/snippets"
    },
    "54cb0ef86023456a519a1c93af126775": {
      "content": "\\\\citet{${1}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\citet",
      "matches": {
        "citet": true
      },
      "source": "vim-snippets/snippets"
    },
    "54d9c9123caa3c4f6abd4f0278e26d54": {
      "content": "<%= link ${1:\"${2:Submit}\"}, to: ${3:\"${4:/users}\"}, method: ${5::delete} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "link",
      "matches": {
        "lin": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "54dcbd647cd7854f608d664f46fc8fa0": {
      "content": "foreach (${1:var} ${2:entry} in ${3})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each": true
      },
      "source": "vim-snippets/snippets"
    },
    "54dee8574c9ca1d66df62f5980f469ed": {
      "content": "cy.wait(${1:time});",
      "doc": "Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command.",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-wait",
      "matches": {
        "cypress wait": true
      },
      "source": "javascript/cypress"
    },
    "54df042870a4598f0992c2ac014aaf09": {
      "content": "daply(${1:frame}, ${2:variables}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "da": true
      },
      "source": "vim-snippets/snippets"
    },
    "54e12c0f8678ec9a6c15e5df6c8ad27b": {
      "content": "_.indexOf(${array}, ${value}, ${fromIndex})",
      "doc": "_.indexOf([1, 2, 1, 2], 2);\n// => 1\n\n// Search from the `fromIndex`.\n_.indexOf([1, 2, 1, 2], 2, 2);\n// => 3\n\nGets the index at which the first occurrence of `value` is found in `array`\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons. If `fromIndex` is negative, it's used as the\noffset from the end of `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-indexof",
      "matches": {
        "lodash indexof": true
      },
      "source": "javascript/lodash"
    },
    "54e36222ab812b37462011436859e17d": {
      "content": "<pre>{{${1:model} | async | json}}</pre>$0",
      "doc": "Angular pre debug | async | json",
      "filetype": "html",
      "grammar": "lsp",
      "label": "pre w/ async json",
      "matches": {
        "a-preja": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "54e43ab50f66658f94eed37b64ec2a47": {
      "content": "outline-color: invert",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oc:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "54e5b9708d643802b293fe7a9532bcc4": {
      "content": "border-bottom-style none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "54eaddb5c160813924aa42edc153171b": {
      "content": "src=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "src": true
      },
      "source": "vim-snippets/snippets"
    },
    "54fc60015d411a5270bbd5c56dffa640": {
      "content": "(Thread/sleep ${1})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sleep": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "551ae34440ed6b668ffe8bb9e0c7126c": {
      "content": "PropTypes.any,",
      "doc": "Any prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeAny",
      "matches": {
        "ptan": true
      },
      "source": "vscode-react/snippets"
    },
    "551debe96eadd258170c23246ff21548": {
      "content": "for(int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})\n{\n\t${5}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forr": true
      },
      "source": "vim-snippets/snippets"
    },
    "551f07e33afe004023475b5a1e7dda3c": {
      "content": "test('should $1', () => {\n\t$0\n})\n",
      "doc": "Testing `test` block",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "testBlock",
      "matches": {
        "test": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "5528cd9727e32b5b3ec2f25086c390f3": {
      "content": "Open Context Menu    ${1:${locator}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Open Context Menu",
      "matches": {
        "ocm": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "552b507c458fce4e1b1de4b02d8e2094": {
      "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: '${1:selector-name}',\n\ttemplateUrl: '${2:name}.component.html'\n})\n\nexport class ${3:Name}Component implements OnInit {\n\tconstructor() { }\n\n\tngOnInit() { }$0\n}",
      "doc": "Angular component",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-component",
      "matches": {
        "a-component": true,
        "angular component": true
      },
      "source": "javascript/angular"
    },
    "552b6e3d0234dc4a03ea73cefc39629e": {
      "content": "LOGGER.error(${0:msg})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "le": true
      },
      "source": "vim-snippets/snippets"
    },
    "552b943a5434bc44afe3277cb4834797": {
      "content": "list-style-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "5533131f90d7edcfa9d6548e2b431026": {
      "content": "<<${1:id}>>${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "reference to anchor",
      "matches": {
        "ref": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "55337b883d58c095c95c5430a2604026": {
      "content": "try {\n  ${0:${VISUAL}}\n} catch (${1:Exception e}) {\n}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "55339b3bc1cde571807f2f6d5c4214e4": {
      "content": "{% from ${1:x} import ${0:y} %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "from": true
      },
      "source": "vim-snippets/snippets"
    },
    "5535d8f26765864358ccd300b1165163": {
      "content": "on (${1}) {\n\t${2}\n};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "on": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5537c1819cb8f346be1b5d2e889f8150": {
      "content": "@return ${0:#:description}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "return": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "553d8b310e902a02fe95b5b344f1d300": {
      "content": "if ${1:condition}\n\t$2\nelsif ${3:condition}\n\t$4\nelse\n\t$0\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifee": true
      },
      "source": "vim-snippets/snippets"
    },
    "55453b992d75a962006032c325ce75fd": {
      "content": "justify-items: end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "55467cd5130d3e59e4781fcb2caf6dd8": {
      "content": "<c>${1:#:text}</c>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<c></c>",
      "matches": {
        "c": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "554a181f461feebd0568f9ae9fdfd888": {
      "content": "entry ${1}(${2}) when ${3} is\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "entry {...} when",
      "matches": {
        "entry": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "554aa2b2753afe7276b8dde1b5f7cda6": {
      "content": "text-emphasis: before",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "556f15b1f425af2056381bcaedb8ec7a": {
      "content": "async with ${1:expr} as ${2:var}:\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "awith": true
      },
      "source": "vim-snippets/snippets"
    },
    "55711ca8b202e5168659645b6ee3cb15": {
      "content": "@push('$1')\n\t${2:${VISUAL}}\n@endpush",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@push directive",
      "matches": {
        "push": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "55774eb21af2c7601c353040b1d4ce8e": {
      "content": "it { should render_template ${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isrtp": true
      },
      "source": "vim-snippets/snippets"
    },
    "557895288cf4ce94185863ed1bbe3512": {
      "content": "_.fill(${array}, ${value}, ${start}, ${end})",
      "doc": "var array = [1, 2, 3];\n\n_.fill(array, 'a');\nconsole.log(array);\n// => ['a', 'a', 'a']\n\n_.fill(Array(3), 2);\n// => [2, 2, 2]\n\n_.fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]\n\nFills elements of `array` with `value` from `start` up to, but not\nincluding, `end`.\n\n**Note:** This method mutates `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-fill",
      "matches": {
        "lodash fill": true
      },
      "source": "javascript/lodash"
    },
    "558862b10f1cf6a6987161cfd2c35d9f": {
      "content": "background-repeat: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr": true
      },
      "source": "vim-snippets/snippets"
    },
    "558f3bee7d05d09f577d217e03385c64": {
      "content": "text-outline: ${1:0} ${2:0} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "to+": true
      },
      "source": "vim-snippets/snippets"
    },
    "559350596e9a750f15957f47467359c6": {
      "content": "border-style: ridge;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "559a1302a33b1c686cf337ae78a38b97": {
      "content": "@media ${1:screen}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@m": true
      },
      "source": "vim-snippets/snippets"
    },
    "559f23ae7619b94fb38e1e184cfe27fa": {
      "content": "export default compose(\n\tgraphql(${1:queryOrMutation}, { name: ${2:name} }),\n)(${1:${TM_FILENAME_BASE}})",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportGraphQL",
      "matches": {
        "expgql": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "55a10d9703aaff2f409ea16d01de35de": {
      "content": "_.sum(${array})",
      "doc": "_.sum([4, 2, 8, 6]);\n// => 20\n\nComputes the sum of the values in `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sum",
      "matches": {
        "lodash sum": true
      },
      "source": "javascript/lodash"
    },
    "55a1c96832460f85a5a00d0575c5f34f": {
      "content": "mod ${1:#:mod_name} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mod": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "55a7a5c2573e90451f8248fc4ddac4fe": {
      "content": "cursor: ${1:default/auto/crosshair/pointer/move/*-resize/text/wait/help};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "cursor: type (cursor)",
      "matches": {
        "cursor": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "55af01a90a180797a4be6476119eb864": {
      "content": "public void set${1}(${0:String} new${1}) {\n\t${1:fieldName} = new${1};\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/snippets"
    },
    "55b1f9ad769e5f1c1306d35c27e8a871": {
      "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n\n",
      "doc": "Creates a React Functional Component with ES7 module system with PropTypes",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactFunctionalComponentWithPropTypes",
      "matches": {
        "rfcp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "55b3b5e8d993a22a6a5bd709010054bc": {
      "content": "border-corner-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdci": true
      },
      "source": "vim-snippets/snippets"
    },
    "55b50e9d293ca2d2c6430e1a89aeabfc": {
      "content": "<input type=\"week\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:week": true
      },
      "source": "vim-snippets/snippets"
    },
    "55b6477060fcb9a862fb48fa683ddef6": {
      "content": "Wait Until Element Contains    ${1:${locator}}    ${2:${text}}    ${3:${timeout=None}}    ${4:${error=None}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Wait Until Element Contains",
      "matches": {
        "wuec": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "55b720ef768a4fa1b01be9730897419e": {
      "content": "<summary>\n\t${0}\n</summary>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "summary": true
      },
      "source": "vim-snippets/snippets"
    },
    "55b82d38b122bbb1764a18537d6fc39a": {
      "content": "bezierVertex(${1:cx1}, ${2:cy1}, ${3:cz1}, ${4:cx2}, ${5:cy2}, ${6:cz2}, ${7:x}, ${8:y}, ${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "3D",
      "matches": {
        "bezierVertex": true
      },
      "source": "vim-snippets/snippets"
    },
    "55bc7bb9faea8521ca657e11ac633876": {
      "content": "def this(arg) = this(arg)",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "athis": true
      },
      "source": "vim-snippets/snippets"
    },
    "55c8d40bcd57a96154975c1572760a5e": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script lang=\"ts\">\n\timport { Component, Vue } from 'vue-property-decorator';\n\n\t@Component\n\texport default class ${0} extends Vue {\n\t\t\n\t}\n</script>\n\n<style scoped>\n\n</style>",
      "doc": "Base for Vue File with Class based Typescript format",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component with Class based Typescript format",
      "matches": {
        "vbase-ts-class": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "55cccc0df7878c74799566dad019dc35": {
      "content": "[source,${1:language}]\n----\n${0}\n----",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "source code block --- source ---",
      "matches": {
        "block-source": true,
        "source": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "55d0bba353fcb08e54dcf97061cd87c2": {
      "content": "function ${1:foo}(node, ${2:parameters}) {\n\t// the node has been mounted in the DOM\n\treturn {\n\t\tupdate(${2:parameters}) {\n\t\t\t// the value of `${2:parameters}` has changed\n\t\t}\n\t\tdestroy() {\n\t\t\t// the node has been removed from the DOM\n\t\t}\n\t};\n}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-action-update",
      "matches": {
        "svactionu": true,
        "svelte action update": true
      },
      "source": "javascript/svelte"
    },
    "55dd0a092d5b7d382471d3133872adbf": {
      "content": "template ${2:/*name*/}(${1:/*args*/})\n{\n\t$3\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "template (temp)",
      "matches": {
        "temp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "55e5d1368d84910026c87b2c9caada5b": {
      "content": "if ${1:#:condition}\n  ${0:TARGET}\nendif",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "if endif",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "55f675980fefe50d842f3ba3d36419af": {
      "content": "if (${1}) {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "55f6fef55d2a0a4e2b984705917ea35a": {
      "content": "@(${1:x}) ${0:x*x}",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "anonymous function",
      "matches": {
        "@": true
      },
      "source": "vim-snippets/snippets"
    },
    "560ab6bbd20266c1c0ad506ae18ef666": {
      "content": "internal string ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps&": true
      },
      "source": "vim-snippets/snippets"
    },
    "560d219163084c3f77fec929a5ddbe08": {
      "content": "module type ${1} = sig\n  ${2:TARGET}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "module signature",
      "matches": {
        "mot": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "56137f2e1d86be78b3f65eb00f5b0f96": {
      "content": "while (${1:true}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5619933d1c1aa366ee226f7d546fe291": {
      "content": "<span class=\"${1}\">${0}</span>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "span.": true
      },
      "source": "vim-snippets/snippets"
    },
    "561cbd8085be3eaf0c0abe30ff73a868": {
      "content": "_.size(${collection})",
      "doc": "_.size([1, 2, 3]);\n// => 3\n\n_.size({ 'a': 1, 'b': 2 });\n// => 2\n\n_.size('pebbles');\n// => 7\n\nGets the size of `collection` by returning its length for array-like\nvalues or the number of own enumerable string keyed properties for objects.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-size",
      "matches": {
        "lodash size": true
      },
      "source": "javascript/lodash"
    },
    "5622b3e550d6a7fb1626156827aa17f1": {
      "content": "_.rearg(${func}, ${indexes})",
      "doc": "var rearged = _.rearg(function(a, b, c) {\n  return [a, b, c];\n}, [2, 0, 1]);\n\nrearged('b', 'c', 'a')\n// => ['a', 'b', 'c']\n\nCreates a function that invokes `func` with arguments arranged according\nto the specified `indexes` where the argument value at the first index is\nprovided as the first argument, the argument value at the second index is\nprovided as the second argument, and so on.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-rearg",
      "matches": {
        "lodash rearg": true
      },
      "source": "javascript/lodash"
    },
    "562a6a33f8b0a1613eb23a55d741cf30": {
      "content": "${1:app}.post('${2:route}', ${3:handler});",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "epost": true
      },
      "source": "snippets/javascript"
    },
    "562c4f8a28052d397a1fc5a8d67a255a": {
      "content": "switch (${1:#:variable}) {\ncase '${2:#:value}':\n\t${3:#:code...}\n\tbreak;\n${0}\ndefault:\n\t${4:#:code...}\n\tbreak;\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "sw",
      "matches": {
        "switch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5635dc5f0a903529c6ceb7a0ff0579a9": {
      "content": "<area shape=\"poly\" coords=\"${1}\" href=\"${2}\" alt=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "area:p": true
      },
      "source": "vim-snippets/snippets"
    },
    "56367593e38e45e8ca8474f1527aa5d3": {
      "content": "clip rect(${1:0} ${2:0} ${3:0} ${0:0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cp:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "563a6a3cee045559c6efc5de59226151": {
      "content": "|> ${0}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "563edf22c3cd39935b711480c9d78bdc": {
      "content": "console.error(${1:object});",
      "doc": "Displays a message in the console and also includes a stack trace from where the method was called",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleError",
      "matches": {
        "cer": true
      },
      "source": "vscode-javascript/snippets"
    },
    "5644cbc63fb54d15f683ef9008886e59": {
      "content": "<%call expr=\"${1:name}\">\n\t${2:}\n</%call>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "call",
      "matches": {
        "call": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "56451c8a919293867a63d97ed52f958f": {
      "content": "import React, { Component } from 'react'\nimport { Text, StyleSheet, View } from 'react-native'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nconst styles = StyleSheet.create({})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativeComponentWithStyles",
      "matches": {
        "rncs": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "564722387e451ef7f7eb53e1bb81fd16": {
      "content": "media=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "media": true
      },
      "source": "vim-snippets/snippets"
    },
    "565275cc01a3f933694c9a438946d32f": {
      "content": "z-index: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "z": true
      },
      "source": "vim-snippets/snippets"
    },
    "56668e64ced1186f9073297982c51b15": {
      "content": "${1:obj}.unwrap()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unwrap": true
      },
      "source": "snippets/coffee"
    },
    "566f3a3caee4046172fbee9b976c8301": {
      "content": "mixed.meta()",
      "doc": "mixed.meta(metadata: object): Schema\n\nAdds to a metadata object, useful for storing data with a schema, that doesn't belong\nthe cast object itself.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-meta",
      "matches": {
        "yup mixed meta": true
      },
      "source": "javascript/yup"
    },
    "5672fcf0f03444687da8ab32e00ea186": {
      "content": "|> ${0}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "5673aa8ceaa3de7d8e0581c24628b327": {
      "content": "border-right-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdri": true
      },
      "source": "vim-snippets/snippets"
    },
    "5676dc95c72ba2fd1c7c86e097606c1b": {
      "content": "${1:outFactor} <- factor(x = ${2:dataVec}, levels = ${3:levels}, exclude = ${4:exclude})",
      "doc": "Create a factor (categorical variable) from a vector",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Categorical variable",
      "matches": {
        "factor": true
      },
      "source": "vscode-R/snippets"
    },
    "567765afe4db148b828b5558b9dc0da1": {
      "content": "grid-column ${1} / ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gc": true
      },
      "source": "vim-snippets/snippets"
    },
    "5678fef0a0f3f7831917856e56414d64": {
      "content": "#!/usr/bin/env bash",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bash": true
      },
      "source": "vim-snippets/snippets"
    },
    "567ac27a2420ffb70c3acfc1ecb9cbbc": {
      "content": "@else if ($1)\n\t${2:${VISUAL}}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@else if directive",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "567c72a04a4f9e90d2f1c0abe325ef2e": {
      "content": "text-transform: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "5681cdaacb33d74af4be86de614a0dc9": {
      "content": "import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a React pure component class with PropTypes and ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactPureComponent",
      "matches": {
        "rpc": true
      },
      "source": "vscode-react/snippets"
    },
    "5684ea9701f5fe5bb6d836f16be2e382": {
      "content": "cursor: pointer;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:p": true
      },
      "source": "vim-snippets/snippets"
    },
    "56895b9956f14d3a9c5715ce4dcad437": {
      "content": "(for ([${1}])\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "568c0972640277590d7a219fe4b52732": {
      "content": "for ${1:item} in ${2:items}:\n\t${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "569079dc98581b9e8459ffdb1eefbe93": {
      "content": "border-width: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdw": true
      },
      "source": "vim-snippets/snippets"
    },
    "56945128323a6cd0115c70e1d517547e": {
      "content": "import 'react-native'\nimport React from 'react'\nimport renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\n\nimport store from 'src/store'\nimport ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(\n\t\t<Provider store={store}>\n\t\t\t<${1:${TM_FILENAME_BASE}} {...defaultProps} />\n\t\t</Provider>,\n\t)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "setupReactNativeTestWithRedux",
      "matches": {
        "snrtest": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "5696052dba5ec89db52770de070caf4b": {
      "content": "{%- continue -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "continue-": true
      },
      "source": "vim-snippets/snippets"
    },
    "5698d1735e69d1ba64ea59dbf59273f6": {
      "content": "/**\n * ${0}\n */",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "Comment Big Block",
      "matches": {
        "cmmb": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "569b8941e0d6baaeba918584d83d0c26": {
      "content": "vertical-align: top;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "56a2d50a5b64c1cd8d077730f56b8e65": {
      "content": "export default (req, res) => {\n  res.json(${1:object});\n};",
      "doc": "API routes provide built in middlewares which parse the incoming request. Those middlewares are: req.cookies, req.body, req.query.",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-api",
      "matches": {
        "next api": true
      },
      "source": "javascript/next"
    },
    "56abb91a18a25b07e1a59a50bc6312f3": {
      "content": "protected ${1:int} ${2} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p|-": true
      },
      "source": "vim-snippets/snippets"
    },
    "56b097b8b424d1b407445f23d12da8c9": {
      "content": "require('dotenv-safe').config({ encoding: '${1:latin1}' })",
      "doc": "You may specify the encoding of your file containing environment variables.",
      "filetype": "dotenv-safe",
      "grammar": "lsp",
      "label": "dotenv-safe-encoding",
      "matches": {
        "dotenv-safe encoding": true
      },
      "source": "javascript/dotenv-safe"
    },
    "56c0e7a9f24527ab99e6ac2a3576b7a8": {
      "content": "bind:this={${1:dom_node}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-bind-this",
      "matches": {
        "svbind-this": true,
        "svelte bind this": true
      },
      "source": "javascript/svelte"
    },
    "56c3b5c38c04a47242b42d40576c23e2": {
      "content": "NSMutableDictionary *${1:#:dict} = [NSMutableDictionary dictionary];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dict": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "56c4b67e322623073ff5e2d0778684f3": {
      "content": "DECIMAL",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dec": true
      },
      "source": "vim-snippets/snippets"
    },
    "56ca011a63896b056801e570adbc8cb4": {
      "content": "${1:obj}.trigger('${2:event name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trig": true
      },
      "source": "snippets/coffee"
    },
    "56cc3dbfa6bbcb503c4c2af1195dbae8": {
      "content": "text-decoration: overline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "56cc96598cea65dda2762cd6f3e1bcc4": {
      "content": "${1:obj}.mouseover (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mover": true
      },
      "source": "snippets/coffee"
    },
    "56cf30346a4404d7c4026a143e077f80": {
      "content": "(comment\n\t${0})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comm": true
      },
      "source": "vim-snippets/snippets"
    },
    "56cfd1b036baea60ece327028d5d2659": {
      "content": "\\${.version}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "${.version}",
      "matches": {
        "ver": true
      },
      "source": "vim-snippets/snippets"
    },
    "56d1b608dcff8d1f7640d3fc18631b85": {
      "content": "select {\ncase ${1:v1} := <-${2:chan1}:\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "select { case a := <-chan: ... }",
      "matches": {
        "select": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "56d1f21c2a381927fc055410395cec21": {
      "content": "it('${1:description}', function() {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "it (js)",
      "matches": {
        "it": true
      },
      "source": "vim-snippets/snippets"
    },
    "56d26250f3ae85b37ff5729004a1cff3": {
      "content": "${1:obj}.keypress (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "kpress": true
      },
      "source": "snippets/coffee"
    },
    "56d4ef98eb19057df8b0a80a580850db": {
      "content": "[<EntryPoint>]\nlet main argv =\n\t${0}\n\t0",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "56e62480aa628938e7266634c776d1c4": {
      "content": "_.sortedLastIndexOf(${array}, ${value})",
      "doc": "_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n// => 3\n\nThis method is like `_.lastIndexOf` except that it performs a binary\nsearch on a sorted `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sortedlastindexof",
      "matches": {
        "lodash sortedlastindexof": true
      },
      "source": "javascript/lodash"
    },
    "56ebbd3457a52e015e62cbe85bda648a": {
      "content": "host { \"${1:hostname}\":\n\tip => ${0:127.0.0.1},\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "host": true
      },
      "source": "vim-snippets/snippets"
    },
    "56edb42b03bebc72d67aa1e1d730884b": {
      "content": "input${1:#: nbit} i_${2:name},",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "input [] i_,",
      "matches": {
        "I": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "56efaa4a5c2ef7113adae00eba9071eb": {
      "content": "${1:a}: ${2:T}${0:, arg}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "arg": true
      },
      "source": "vim-snippets/snippets"
    },
    "56f49d6bbb8f0d1bcb08541d740ef967": {
      "content": "left ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "l": true
      },
      "source": "vim-snippets/snippets"
    },
    "56f597ca40b9c2dcadb29f0e3ee093f6": {
      "content": "background-color: ${1:red};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background-color:  color-name (background)",
      "matches": {
        "background": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "56f6bbe8e5bde3ded6139a416bdb3381": {
      "content": "its(:${1:method}) { should ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "its": true
      },
      "source": "vim-snippets/snippets"
    },
    "57063ea73777caf7fe71df4c3ee3e88e": {
      "content": "set yrange [${1:*}:${2:*}]",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set yrange [Y1:Y2]",
      "matches": {
        "yrange": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5708ee78f5685c2e927b9663475d876f": {
      "content": "LOGGER.info(${0:msg})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "li": true
      },
      "source": "vim-snippets/snippets"
    },
    "570a577e755cd76d4871247bcdea8325": {
      "content": "companion object {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "kotlin",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cobj": true
      },
      "source": "vim-snippets/snippets"
    },
    "5710e5a01f3ad3cd73ae3a851974fa50": {
      "content": "${1:deferred}.resolveWith(${2:this}, ${3:args})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dresw": true
      },
      "source": "snippets/javascript"
    },
    "571108a2437454fa09fa742d6f7d8c2e": {
      "content": "render nothing: ${1:true}, status: ${2:401}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (nothing,status) (rns)",
      "matches": {
        "rns": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5715a81b5e29281f3ba96e25e61070fb": {
      "content": "proc ${1:name} {${2:args}} \\\n{\n\t$3\n}\n",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "proc... (proc)",
      "matches": {
        "proc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5715e4cc1ffe9a184918ffcb3447e0cb": {
      "content": "defp ${1:name}, do: ${2}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dfp": true
      },
      "source": "vim-snippets/snippets"
    },
    "571f3db5c056c586163958ee12a7a257": {
      "content": "this.state.$0",
      "doc": "Access component's state",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentState",
      "matches": {
        "state": true
      },
      "source": "vscode-react/snippets"
    },
    "5720457d9ddc2e408e9fed455dc24b4b": {
      "content": "font-size-adjust ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fza": true
      },
      "source": "vim-snippets/snippets"
    },
    "572268f6886eaba987482a8b08215972": {
      "content": "loop\n\t${0}\nend loop;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loop": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5722dfd2991bc39e8d39dd6ad949e516": {
      "content": "int ${1:y} = threadIdx.y + blockIdx.y * blockDim.y;",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Get current Y index (1D)",
      "matches": {
        "iy": true
      },
      "source": "vim-snippets/snippets"
    },
    "5728d45b73c531a557ae80fad3a0b138": {
      "content": "${1:type}, ${2:allocatable, }dimension(${3::}) :: ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "arr": true
      },
      "source": "vim-snippets/snippets"
    },
    "57292cfc81fdd5a87db231a176e07a53": {
      "content": "var ${1} ${2} = ${3}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "variable declaration",
      "matches": {
        "var": true
      },
      "source": "vim-snippets/snippets"
    },
    "572fa529f3b0e16a2e61b130800b1d1d": {
      "content": ".. tip:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "tip",
      "matches": {
        "tip": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "573465b7167b1a9907183820dba7204f": {
      "content": "[${1:text}](https://${2:address} \"${3:title}\")",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[\"": true
      },
      "source": "vim-snippets/snippets"
    },
    "5736223cf5e291e03a1cb33a1179d57a": {
      "content": "for (let ${1:key} in ${2:array}) {\n\tif (${2:array}.hasOwnProperty(${1:key})) {\n\t\t${0}\n\t}\n}",
      "doc": "for in loop",
      "filetype": "base",
      "grammar": "lsp",
      "label": "for-in-loop",
      "matches": {
        "base for in": true
      },
      "source": "javascript/base"
    },
    "574534662bdce487a2363a90dd82c184": {
      "content": "if (${1:condition}) then\n\t${0}\nend if",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "576de2eeeeb0a3d3e96ae7af00a64ae7": {
      "content": "print_r(${1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "57751a20cffea741ad9499adc2ec770c": {
      "content": "<router-link :to=\"{name: '${1:name}'}\">${2:LinkTitle}</router-link>",
      "doc": "Named routing link",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Named Routing Link",
      "matches": {
        "vroutename": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "577930830fec1ca288fe8ba9393eaf41": {
      "content": "border-style: dashed;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:ds": true
      },
      "source": "vim-snippets/snippets"
    },
    "577da4972cddd5b6ca2cb4d95b267fbc": {
      "content": "grid-column-gap: 0",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gcg:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "57a2dbc58f3b261be8f15c87f88ac451": {
      "content": "assert_rjs :${1:replace}, ${2:\"${3:dom id}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "assert_rjs",
      "matches": {
        "asrj": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "57b172f537b978cc21117168d6b694ff": {
      "content": "close(unit = ${1:fp}) ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "close": true
      },
      "source": "vim-snippets/snippets"
    },
    "57b1aa5235d88f8cbd9cf81adb1237b4": {
      "content": "const ${1} = require('${2:module_name}');",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "re": true
      },
      "source": "snippets/javascript"
    },
    "57b3be73fd86a6a37bf785bc1b94fde0": {
      "content": "__shared__ ${1:int} ${2:memo}[${3:SIZE}];${0}",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Shared memory declaration",
      "matches": {
        "share": true
      },
      "source": "vim-snippets/snippets"
    },
    "57c17036ee2c5c9a523716d1d1d475af": {
      "content": "scope :${1:name}, lambda { |${2:param}| ${3:where(${4::${5:field}: ${6:\"${7:value}\"}})} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "scope lambda",
      "matches": {
        "scopel": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "57c2870cfc30d889c33db80ef83274e1": {
      "content": "font-weight: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw": true
      },
      "source": "vim-snippets/snippets"
    },
    "57c8309f407087a131169d6ef3cfdad3": {
      "content": "else {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "57cc7f33be74f74bd668825f5fab5a4c": {
      "content": "<?php ${0} ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "?": true
      },
      "source": "vim-snippets/snippets"
    },
    "57d2fe49b62096d4ad194857fb32da5a": {
      "content": "float32",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "float",
      "matches": {
        "fl": true
      },
      "source": "vim-snippets/snippets"
    },
    "57d452fff506a50081cf6e84b0879dc4": {
      "content": "<a href=\"${1}\" target=\"_parent\">${2:TARGET}</a>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ahref_parent": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "57e59a87e4a362c25b0069fbd199ad59": {
      "content": "${1:dfname} <- data.frame(${2:x} = numeric(), ${3:y} = numeric())",
      "doc": "Code snippet for an empty numerical data frame",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Empty data frame (numeric)",
      "matches": {
        "df2n": true
      },
      "source": "vscode-R/snippets"
    },
    "57ea7e3ef592ad40a423502c31ee4e21": {
      "content": "font-style: italic",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "57eb417bc46402a6e88b2a3d9afc19c9": {
      "content": "execute ${1}",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exe": true
      },
      "source": "vim-snippets/snippets"
    },
    "57ec59fc03239983cc594a0212b1a69d": {
      "content": "$.ajaxSetup({\n\turl: \"${1:mydomain.com/url}\",\n\ttype: \"${2:POST}\",\n\tdataType: \"${3:xml/html/script/json}\",\n\tdata: $.param( $(\"${4:Element or Expression}\") ),\n\tcomplete: (jqXHR, textStatus) ->\n\t\t${5:// callback}\n\t,\n\tsuccess: (data, textStatus, jqXHR) ->\n\t\t${6:// success callback}\n\t,\n\terror: (jqXHR, textStatus, errorThrown) ->\n\t\t${0:// error callback}\n})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxsetup": true
      },
      "source": "snippets/coffee"
    },
    "57ec71f8f507780b54ea06ee6330a8db": {
      "content": "place-content: ${1} ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc+": true
      },
      "source": "vim-snippets/snippets"
    },
    "57ecb85724053e1a563d99964b28f8b3": {
      "content": "delegate :${1:methods}, to: :${2:object}, prefix: :${3:prefix}, allow_nil: ${0:allow_nil}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "delegate .. to .. prefix .. allow_nil",
      "matches": {
        "dele": true
      },
      "source": "vim-snippets/snippets"
    },
    "57ef5e8cdcc6a99ce23c610f0fcdee1a": {
      "content": "${1:obj}.append('${2:Some text <b>and bold!</b>}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "append": true
      },
      "source": "snippets/coffee"
    },
    "57f15b9ebf6c6c98e9cf3274fb56f9ca": {
      "content": "${1:deferred}.isResolved()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Disres": true
      },
      "source": "snippets/javascript"
    },
    "57f46ee7b9e8f2066576d6b6a0da9680": {
      "content": "return ${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "return ...",
      "matches": {
        "return": true,
        "rt": true
      },
      "source": "gosnippets/snippets"
    },
    "57f620a2c831193370e32bf708fd936b": {
      "content": "background-repeat: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr": true
      },
      "source": "vim-snippets/snippets"
    },
    "5803dc389bb3d82e8213ed473bcd7263": {
      "content": "\\begin{abstract}\n\t${1:TARGET}\n\\end{abstract}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{abstract} \\abstract": true,
        "abstract": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "580503edc83923d47910e8fe2a94eee7": {
      "content": "@media ${1:all} and (max-width: ${2:SIZE}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "@media all and (max-width) {...}",
      "matches": {
        "media-max-width": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5811088aa1eabf05e137b8417a67f4d6": {
      "content": "pinMode(${1}, OUTPUT);",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pinout": true
      },
      "source": "vim-snippets/snippets"
    },
    "581987d311289018261bdfef54e34d34": {
      "content": "font-size-adjust: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fza": true
      },
      "source": "vim-snippets/snippets"
    },
    "581d1d79974b5869278a69f2c5cc3f5a": {
      "content": "font-style normal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "58276f2332034a28a8412817d65dea15": {
      "content": "require IEx; IEx.pry\n${0}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pry": true
      },
      "source": "vim-snippets/snippets"
    },
    "582f99a1975dfcb6c8084d84b5a61b0b": {
      "content": "${1:obj}.one '${2:event name}', (${3:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "one": true
      },
      "source": "snippets/coffee"
    },
    "583001c194406fc50eacf0e553f2d549": {
      "content": "each_index do |${1:i}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eaid": true
      },
      "source": "vim-snippets/snippets"
    },
    "5830aea5636518a17b83eef3b7aa2a22": {
      "content": "else {\n   ${1:selected}\n}",
      "doc": "Code snippet for 'else' conditional",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "else",
      "matches": {
        "else": true
      },
      "source": "vscode-R/snippets"
    },
    "5832c550b16e11d482dbbe930eba37cd": {
      "content": "for ${1:i},${2:v} in pairs(${3:table_name}) do\n\t${0:-- body}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forp": true
      },
      "source": "vim-snippets/snippets"
    },
    "5840bb42820a95856f8a1bc52da4e33f": {
      "content": "if ${1:condition}\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "snippets/coffee"
    },
    "5842d4c999c6e8e3672fe389c9cc7807": {
      "content": "axios.defaults.${1:key} = '${2:value}';",
      "doc": "Define global axios defaults, eg. baseURL, headers etc.",
      "filetype": "axios",
      "grammar": "lsp",
      "label": "axios-defaults",
      "matches": {
        "axios defaults": true
      },
      "source": "javascript/axios"
    },
    "584474b56658e58eaa80857859892684": {
      "content": "$this->${1:method}()->shouldHaveKeyWithValue(${2:'key'}, ${3:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldHaveKeyWithValue('key', 'value')",
      "matches": {
        "skeyvalue": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "584c4042fd96a9198f7ff02cab9223fd": {
      "content": ".iter()$0",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": ".iter()",
      "matches": {
        ".it": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "58523d69b74b669de823b8e6488e0efd": {
      "content": "- name: http\n  port: 80\n  protocol: TCP\n  targetPort: {{ .Values.$1.service.targetPorts.http }}\n  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.http))) }}\n  nodePort: {{ .Values.${1:value_key}.service.nodePorts.http }}\n  {{- end }}\n  ${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "portHTTP_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "5883bc9d9a435a6d02a65cb5c024014f": {
      "content": "printf(\"${1:} = %d\\n\", $1);",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prd": true
      },
      "source": "vim-snippets/snippets"
    },
    "588ff7df9ca7045fad5ea8e05531bf05": {
      "content": "$.removeData(${1:element}${2:, 'key name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "remdd": true
      },
      "source": "snippets/javascript"
    },
    "589028b15bfe4ad14639ccb6b56002b1": {
      "content": "if ${1} then\n\t${2}\nelse\n\t${0}\nend if;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "if ... else",
      "matches": {
        "ifelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "589322e52ffc1fd88007d54f74060614": {
      "content": "logger.warn { '${1:message}' }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "logw": true
      },
      "source": "vim-snippets/snippets"
    },
    "5895cf7b2d792b0fc20d8d2e14b1f476": {
      "content": "${1:FIELDNAME} = models.EmailField(max_length=${2:75}${0:, blank=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "email": true
      },
      "source": "vim-snippets/snippets"
    },
    "589c121ae924ccf468d0980e569e3d79": {
      "content": "const ${1:variants} = {\n  ${2:hidden}: {\n    ${3:style}\n  },\n  ${4:visible}: {\n    ${5:style}\n  },\n};",
      "doc": "",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-variants",
      "matches": {
        "framer-motion variants": true,
        "variants": true
      },
      "source": "javascript/framer-motion"
    },
    "589ef316610f15f231de359781bdb53d": {
      "content": "$.cssHooks['${1:CSS prop}'] = {\n\tget: (elem, computed, extra) ->\n\t\t${2: // handle getting the CSS property}\n\tset: (elem, value) ->\n\t\t${0: // handle setting the CSS value}\n}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "csshooks": true
      },
      "source": "snippets/coffee"
    },
    "58a4bc778f8ee43bc8b93db79ce0fe9d": {
      "content": "PIMPLE\n{\n\tnOuterCorrectors \t${1:outer};\n\tnCorrectors     \t${2:inner};\n\tnNonOrthogonalCorrectors ${3:nonOrtho};\n\tpRefCell        \t${4:cell};\n\tpRefValue       \t${0:value for $4};\n}",
      "doc": "",
      "filetype": "openfoam",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pimple": true
      },
      "source": "vim-snippets/snippets"
    },
    "58b2f91ce8c4d9a6b17e39ca2a6c44af": {
      "content": "$.isFunction(${1:obj})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isfunc": true
      },
      "source": "snippets/coffee"
    },
    "58b5575b2939d74a48b2c1aadcf2f7b3": {
      "content": "margin: ${1:0} ${2:0} ${3:0} ${0:0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:4": true
      },
      "source": "vim-snippets/snippets"
    },
    "58ba8b98762b9ff3e2199d56a7b2c455": {
      "content": "text-align-last: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal": true
      },
      "source": "vim-snippets/snippets"
    },
    "58d1f405872100ff827a41e347b9832a": {
      "content": "grid-auto-columns min-content",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac:mic": true
      },
      "source": "vim-snippets/snippets"
    },
    "58d1f5173860499fe2f8e762582e6a01": {
      "content": "padding-left: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "padding-left": true,
        "pl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "58d392928e9c27673a345bc597e58cdf": {
      "content": "<code>$0</code>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "XML code comment",
      "matches": {
        "<c": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "58d571b3d5d29e416bcf4af5b89b9343": {
      "content": "project(${0:Name})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "proj": true
      },
      "source": "vim-snippets/snippets"
    },
    "58dc9a05caf1c7f0e28752838d556db5": {
      "content": "moon.p ${0}",
      "doc": "",
      "filetype": "moon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "58e0b4668b828cbb196108fa63ffee28": {
      "content": "list",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "List",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "58e257d72c9146db6dadbcdb4b4d0ced": {
      "content": "print!(\"${1}{${2}}\", ${3});",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "print! with format param",
      "matches": {
        "pri,": true
      },
      "source": "vim-snippets/snippets"
    },
    "58e7a50228c38a6e331e83f5a417be22": {
      "content": "while ${1} ${2:<=} ${3}\n\t${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "while loop",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "58eb8afff2b9ac3a8b1d173a8a037d00": {
      "content": "<details${2}>\n    <summary>${1}</summary>\n    ${3}\n</details>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "details": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "58eeb54d23e4742582d2a393d104c1d6": {
      "content": "opacity ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "op": true
      },
      "source": "vim-snippets/snippets"
    },
    "58f21cdcc1292c0d0f23f0d53cf4008a": {
      "content": "${1:#:expression} if ${2:#:condition};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "59099aeee4a7faca4c59414580f4e655": {
      "content": "overflow-style move",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:mv": true
      },
      "source": "vim-snippets/snippets"
    },
    "590fbbf2c394ceecfb7716fa2b5ab615": {
      "content": "System.Runtie.CompilerServices",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s.r.c": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "59105fe838220723d6b7ee55cd87273f": {
      "content": "cy.scrollTo(${1:x}, ${2:y});",
      "doc": "Scroll to a position defined by the distance in pixels from window/element’s x and y or percentage of the window/element’s width and height.",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-scroll-to-coordinates",
      "matches": {
        "cypress scroll to coordinates": true
      },
      "source": "javascript/cypress"
    },
    "591340014837cddf24d22eb33721df20": {
      "content": "${1:document}.getElementsByClassName('${0:class}')",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "by.": true
      },
      "source": "snippets/javascript"
    },
    "59198e035d14c279431ff84c1d09dfc5": {
      "content": "\\${3:TARGET}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${3:TARGET}",
      "matches": {
        "3T": true,
        "3t": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "59222375ea6539089167a0fcb4f885dd": {
      "content": "module ${1}\n${0}\nend#module",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "module ... end",
      "matches": {
        "module": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "59232fd8a208b052f65e62b67d6b67e2": {
      "content": "{# ${0:comment} #}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#": true
      },
      "source": "vim-snippets/snippets"
    },
    "592330b56b114a0e7fdee1a1629116f9": {
      "content": "(for/sum ([${1}])\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "for/sum",
      "matches": {
        "fors": true
      },
      "source": "vim-snippets/snippets"
    },
    "592590bf6b5264383d7c86b070b358b0": {
      "content": "\\begin{sffamily}\n\t${1:TARGET}\n\\end{sffamily}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{sffamily} \\sffamily": true,
        "sffamily": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "59271e8b2559ce40b74f8b281570430a": {
      "content": ":first-child",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":fc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "59272c36b23c601d57b2104964bb69fc": {
      "content": "if ${1:value}, ok := ${2:map}[${3:key}]; ok == true {\n\t${4:/* code */}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if key in a map",
      "matches": {
        "om": true
      },
      "source": "vim-snippets/snippets"
    },
    "59309baf50d9eb24a0d6c69fd9bac51f": {
      "content": "#include <${1:stdio}.h>",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc": true
      },
      "source": "vim-snippets/snippets"
    },
    "59327b9369374fc2c507ff7ae2dabbd3": {
      "content": "position: ${1:static/relative/absolute/fixed};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "position: type (position)",
      "matches": {
        "position": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "59329017fa8513348dc4a6323a946bfd": {
      "content": "function __construct(${1})\n{\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "construct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5945e8a97dbbfd1b95efd9eca4154190": {
      "content": "(${1:args}) ->\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "snippets/coffee"
    },
    "59486d6afc3153e7e359d9f610e09ffd": {
      "content": "border-break: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbk": true
      },
      "source": "vim-snippets/snippets"
    },
    "594a83fe499a81bebcea98579442201d": {
      "content": "$.isEmptyObject(${1:obj})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isempty": true
      },
      "source": "snippets/javascript"
    },
    "594c67203579b7239cda1a8e50aa9356": {
      "content": "- (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument}\n{\n\t${1} res = [super ${2:#:method}]\n\treturn res;\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "SubMethod",
      "matches": {
        "sm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "59517d53252d4e9027d12b193c102042": {
      "content": "{#if ${1:condition}}\n\t${2: <!-- content here -->}\n{/if}",
      "doc": "if block",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-if-block",
      "matches": {
        "svelte if-block": true,
        "svif": true
      },
      "source": "javascript/svelte"
    },
    "595a6969538bc13e7b63fffb095d035a": {
      "content": "logical :: ${1:fileExsit}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "logical",
      "matches": {
        "lo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "595ec8b5d59202c3c9a4731ddc7edf37": {
      "content": "if err != nil {\n\tlog.Fatal(err)\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err != nil { log.Fatal(err) }",
      "matches": {
        "errl": true
      },
      "source": "gosnippets/snippets"
    },
    "5961040a0a1a5bec5ed8f685510aa4fe": {
      "content": "${1:expression} for @${2:array};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xfor": true
      },
      "source": "vim-snippets/snippets"
    },
    "5962d54643ed72822f46dfaff4154bed": {
      "content": "case '${1:value}':\n\t${0:${VISUAL}}\n\tbreak;",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "case 'value': ... break",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "59640a573909861b898150a24e7afd4a": {
      "content": "use parent qw(${0:Parent Class});",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parent": true
      },
      "source": "vim-snippets/snippets"
    },
    "59670370a16491b863a85dd3b1e1795e": {
      "content": "var.test(${1:x}, ${0:y})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fte": true
      },
      "source": "vim-snippets/snippets"
    },
    "59797011cb04f5c2e16b80deb6476e7e": {
      "content": "service { \"${1:service}\":\n\tensure    => running,\n\tenable    => true,\n\trequire   => [ Package[\"${2:package}\"], File[\"${3:file}\"], ],\n\tsubscribe => [ File[\"${4:configfile1}\"], File[\"${5:configfile2}\"], Package[\"${6:package}\"], ],\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "service": true
      },
      "source": "vim-snippets/snippets"
    },
    "597bace4736ab3e274709d41df78b072": {
      "content": "Serial.println(${1});",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sl": true
      },
      "source": "vim-snippets/snippets"
    },
    "598030f5ec7148bbe10de23751570f09": {
      "content": "try\n    ${1}\n${2:catch}\n    ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "try ... end",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5980f603920aca7aa94b31e2ef1dc444": {
      "content": "_.isNumber(${value})",
      "doc": "_.isNumber(3);\n// => true\n\n_.isNumber(Number.MIN_VALUE);\n// => true\n\n_.isNumber(Infinity);\n// => true\n\n_.isNumber('3');\n// => false\n\nChecks if `value` is classified as a `Number` primitive or object.\n\n**Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\nclassified as numbers, use the `_.isFinite` method.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isnumber",
      "matches": {
        "lodash isnumber": true
      },
      "source": "javascript/lodash"
    },
    "5986e3042833124f2178f7e943aa42eb": {
      "content": "$.dequeue('${1:selector expression}'${2:, 'queue name'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deqq": true
      },
      "source": "snippets/javascript"
    },
    "599ef1b9e9152b528ffdc674db964787": {
      "content": "noiseDetail(${1:octaves}${2:, }${0:falloff});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "noiseDetail": true
      },
      "source": "vim-snippets/snippets"
    },
    "599ef32622389609b7720126b4e77b04": {
      "content": "${1:obj}.submit(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "submit": true
      },
      "source": "snippets/javascript"
    },
    "59a815eba555900e9ff9ba66398920bf": {
      "content": "$this->input->is_cli_request();${1}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_input-is_cli_request": true
      },
      "source": "vim-snippets/snippets"
    },
    "59a86274141f1194c01cacf5d5a1f7f3": {
      "content": "Tuple${1:2}[${2:T},${0:T}]",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tpl": true
      },
      "source": "vim-snippets/snippets"
    },
    "59ab21f3c665af6440606739f75c72b7": {
      "content": "<track src=\"${1}\" srclang=\"${2}\" label=\"${3}\" default=\"${4:default}>${5}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "track": true
      },
      "source": "vim-snippets/snippets"
    },
    "59b28ea38b5514bffb6adfb0b23c4616": {
      "content": "select * from ${0:table}",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s*": true
      },
      "source": "vim-snippets/snippets"
    },
    "59bb8fe08b6fa181fecd16c6993cc0af": {
      "content": "<table border=\"${1}\">\n${2:TARGET}\n</table>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "table": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "59c0ea334e4b6dfa5cba7fdf64fe706c": {
      "content": "$this->assertArrayHasKey(${1:$key}, ${2:$array});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertArrayHasKey($key, $array)",
      "matches": {
        "ashk": true
      },
      "source": "vim-snippets/snippets"
    },
    "59cb8bfd410aff0f9862d7a4979298ab": {
      "content": "*ngFor=\"let ${1:item} of ${2:stream} | async as ${3:list}\"${0}",
      "doc": "Angular *ngForAsync",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngforasync",
      "matches": {
        "a-ngforasync": true,
        "angular ng for async": true
      },
      "source": "javascript/angular"
    },
    "59d26e268daaf29bca05853d0ff4e17a": {
      "content": "System.IO",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s.i": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "59de24ac897a0bbae2ffb055066d7598": {
      "content": "grid-gap: 0;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gg:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "59e3143e353abdca456c86aaff2df70d": {
      "content": "<c:catch var=\"${0}\" />",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ccatch": true
      },
      "source": "vim-snippets/snippets"
    },
    "59e3598117af93bcfaf260d250efb5c5": {
      "content": "def show\n\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\n\trespond_to do |format|\n\t\tformat.html # show.html.erb\n\t\tformat.json  { render json: @$1 }\n\tend\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defshow": true
      },
      "source": "vim-snippets/snippets"
    },
    "59e3fa7d3e1810f8b5e1bab9e65e4f16": {
      "content": "opts.on('-${1:o}', '--${2:long-option-name}', ${3:String}, '${4:Option description.}') do |${5:opt}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "opt": true
      },
      "source": "vim-snippets/snippets"
    },
    "59e48942cf38ac0b031e7d5b244fedcd": {
      "content": "rgba(${1:255}, ${2:255}, ${3:255}, ${4:0.5})$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "color rgba",
      "matches": {
        "rgba": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "59ebe65a8401713c5152401474d6ab0c": {
      "content": "BEGIN {\n\t${0}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "BEGIN { ... }",
      "matches": {
        "beg": true
      },
      "source": "vim-snippets/snippets"
    },
    "59eca979402dcc7fa6b683effd89ff22": {
      "content": "${1}:\ndeclare\n\t${2}\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "declare named block",
      "matches": {
        "decn": true
      },
      "source": "vim-snippets/snippets"
    },
    "59eed1fd2803243cfa327aedd7341c75": {
      "content": "dist(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${0:z2});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "3D",
      "matches": {
        "dist": true
      },
      "source": "vim-snippets/snippets"
    },
    "59f7248c3ef4525572d67cf81d9378d8": {
      "content": "echo CHtml::beginForm(array('${1}'), '${2:post}',array('${3:optionName}'=>${4:optionValue}));\n${0}\necho CHtml::endForm();",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhbeform": true
      },
      "source": "vim-snippets/snippets"
    },
    "59fc816ae867eb3be8a6831345ac7260": {
      "content": "color: #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "c": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a052e88af4b22b9fcde9806e904495e": {
      "content": "${1:obj}.scrollTop(${2:value})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scrollt": true
      },
      "source": "snippets/javascript"
    },
    "5a086d5077313f7911464e4b612fa4f8": {
      "content": "PropTypes.symbol,",
      "doc": "Symbol prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeSymbol",
      "matches": {
        "ptsm": true
      },
      "source": "vscode-react/snippets"
    },
    "5a0ce2ebd27a1ed9021adf6803bd9316": {
      "content": "border-collapse: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdcl": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a12942ba0a6234156983db739d97428": {
      "content": "align-content start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a17baf8651788e30da0e22c3e472c05": {
      "content": "background-position ${1:0} ${0:0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgp": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a18a0f8888cdecc131350a0f8174ee2": {
      "content": "<menu type=\"context\">\n\t${0}\n</menu>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "menu:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a23fc86794732558884e3b8ee2ce543": {
      "content": "$this->db->get(\"${1:table}\", ${2:limit}, ${3:offset});${4}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_db-get": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a2f8cdf4ebdeb6fd1ce3a61d050c06f": {
      "content": "write(unit = ${1:fp}, file = ${2:filename}, iostat = ${3:ierr}) ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "write": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a33d233b264ad93d03d0a5c2bf183a4": {
      "content": "${1:action} unless ${0:condition}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unl": true
      },
      "source": "snippets/coffee"
    },
    "5a45969bd235a5332fe7fbcd367fae84": {
      "content": "expect(${1:target}).not$0;",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not (js)",
      "matches": {
        "notx": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a53527a378769088bd4d1c3d5a2e812": {
      "content": "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React Router",
      "matches": {
        "imrr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "5a53a97fe646792d07f1151017a2fcc0": {
      "content": "(for/fold\n\t([${1}])\n\t([${2}])\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "for/fold",
      "matches": {
        "forf": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a5670e6b4f5e66a6e5f901b97d16a97": {
      "content": "render inline: \"${1:<%= 'hello' %>}\", type: ${2::rjson}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (inline,type) (rit)",
      "matches": {
        "rit": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5a5ec9774605dcb58fd7d5b286ab3ef8": {
      "content": "$('<${1}/>'${2:, {}})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "snippets/javascript"
    },
    "5a60fb3f4c472baeff49cae334ef2c8a": {
      "content": "display: table",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tb": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a6626108913716c9f74ba9078a0267c": {
      "content": "ceil(${0:value});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ceil": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a66e80b79993380287f5e361d9ba377": {
      "content": "${1} := ${2}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "shorthand variable declaration",
      "matches": {
        "v": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a6817cfeae268d16c0b236a47d72927": {
      "content": "import React, { memo } from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = memo(() => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n});\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a memoized stateless React component without PropTypes and ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactMemo",
      "matches": {
        "rscm": true
      },
      "source": "vscode-react/snippets"
    },
    "5a6872f4a3ba20c7d46d7ecc6e49b8a2": {
      "content": "render layout:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render :layout",
      "matches": {
        "rl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5a6fc07fe800566433fa4f77f750e17c": {
      "content": "$display(\"${1}\", ${2});",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "$display(\"...\", ...);",
      "matches": {
        "display": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5a87f16ae93827bb999c628efbade4fc": {
      "content": "it { expect(${1:object}).${2} ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iexp": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a9293c885d9736412c55501683d6921": {
      "content": "t.time :${1:title}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcti": true
      },
      "source": "vim-snippets/snippets"
    },
    "5a9365fdf6ef3a3d9a3cb52b737a9631": {
      "content": "try {\n\t${0:${VISUAL}}\n} catch (${1:Exception} $e) {\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "try { ... } catch (Exception $e) { ... }",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "5aa897bc2ed2592e4463f40f2dde8032": {
      "content": "\\begin{rmfamily}\n\t${1:TARGET}\n\\end{rmfamily}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{rmfamily} \\rmfamily": true,
        "rmfamily": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5aab7b56c16d0ae610f60f2045d491fb": {
      "content": "create_table :${1:table_name} do |t|\n\t${0}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mct": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ab3331828d6f7f596049f0b43a9d0f0": {
      "content": "extension ${1:Int} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "extension": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5ab62dfbb09877bdfa2e6e9009340384": {
      "content": "${1:YYYY}-${2:MM}-${3:DD} open ${4:Account} ${8:#:Commodity}",
      "doc": "",
      "filetype": "beancount",
      "grammar": "snu",
      "label": "open account",
      "matches": {
        "open": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5aba1af35a2cc347b140dcc17dfadfba": {
      "content": "{% trans \"${0:string}\" %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trans": true
      },
      "source": "vim-snippets/snippets"
    },
    "5abdda5ae42e8aebb0798ed15cba3056": {
      "content": "fmt.Printf(\"${1}\\n\"${2:})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pf": true,
        "printf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5ac53ad095d4667397489d0a32abee59": {
      "content": "border-right none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdr:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ac996bbc269f7369d773a5d0d5282fa": {
      "content": "__PACKAGE__->get_${1:package_method}(${0:var})",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pkgetv": true
      },
      "source": "vim-snippets/snippets"
    },
    "5aca65e5bb33c8c8befbf127d3c7cb98": {
      "content": "Option<${1:i32}>",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Option<T>",
      "matches": {
        "opt": true
      },
      "source": "vim-snippets/snippets"
    },
    "5adb0642ac0e69f7dad7c9a209c15bd9": {
      "content": "${0:root} = exports ? this",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exp": true
      },
      "source": "snippets/coffee"
    },
    "5ae8f4d608e93eb4e09c10b47581759c": {
      "content": "% if ${1:condition}:\n\t${2:}\n% endif",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "if ",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5af460ac162741826113eec2958612ad": {
      "content": "include_once '${1:file}';",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc1": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b000e0d443537e41af3a59634c11e0a": {
      "content": "<figure id=\"${1}\">\n\t${0}\n</figure>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "figure#": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b0282a862ace2b62419c92b7e6f1468": {
      "content": "maply(${1:matrix}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ma": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b037fb07271dd015caa0499e66e2bcc": {
      "content": "font-style italic",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b0887e09aa27f65e96dad65749eea85": {
      "content": "function ${1:function_name}() {\n\t${0:#function_body}\n}",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b0d127c591669058b3c8db189bf6065": {
      "content": "<If ${1:condition}>\n        ${2}\n</If>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5b0dd83ebb1d5995b7794d5b48499d13": {
      "content": "// Crate name\n#![crate_name = \"${1:crate_name}\"]\n// Additional metadata attributes\n#![desc = \"${2:Description.}\"]\n#![license = \"${3:BSD}\"]\n#![comment = \"${4:Comment.}\"]\n// Specify the output type\n#![crate_type = \"${5:lib}\"]",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Define create meta attributes",
      "matches": {
        "crate": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b1125eebc9aea7261e6b347a2501072": {
      "content": "t.Run(\"${0}\", func(t *testing.T){\n\n})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "t.Run(XYZ, func(t *testing.T){ ... })",
      "matches": {
        "tr": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "5b15449ddba60b219c69d2f8f50fc2af": {
      "content": "import React, { Component } from 'react'\n\nexport class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}\n",
      "doc": "Creates a React component class with ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-class-export-component",
      "matches": {
        "rce": true,
        "react component class export": true
      },
      "source": "javascript/react"
    },
    "5b1ad83efe4da7ca3cc0b91f6e3d8d77": {
      "content": ":hover",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":h": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b30beb4e2219de79b9c7754c2240573": {
      "content": "${${1:1}:${0:text}}",
      "doc": "",
      "filetype": "snippets",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b30f13469f44dee0fb4600fcc51bd49": {
      "content": "t.integer :lock_version, null: false, default: 0\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create lock_version column",
      "matches": {
        "tcl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5b315901e8d639ac8bd6b72d816a9d24": {
      "content": "throws ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ths": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b32e42b6b408f5c913ed6bb7b450f38": {
      "content": "for (var ${2:i} = 0, len = ${1:things}.length; $2 < len; ${3:++}$2) {\n  ${0:$1[$2]}\n}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b33371d46ea4cfd1e84e8b4ba6bc3c6": {
      "content": "echo CHtml::button('${1:label}',array('${2:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhb": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b37449ad1d234a8dfddb6d87edd079e": {
      "content": "display: run-in;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:ri": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b3dd743599b31bcbe39705f7bb3ed8e": {
      "content": "${1:obj}.pushStack(${2:elements})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pushstack": true
      },
      "source": "snippets/javascript"
    },
    "5b4060d822af58ca5c5957c0a8010059": {
      "content": "font-emphasize-style none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b44c7845cef6e25b9add61a36e9fe70": {
      "content": "font-stretch: ultra-expanded;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:ue": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b454d453e443b0e72378fb1b2532293": {
      "content": "{%- cycle '${1:odd}', '${2:even}' -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cycle-": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b4a14f90cb6e3f7f13caae1a3324708": {
      "content": "::after",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "::a": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b4b03a85526c516c778172b9b106170": {
      "content": "<em>${0}</em>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "em": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b4f73c99bddf41388f20121b50ec459": {
      "content": "string",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "string",
      "matches": {
        "sr": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b578a080beb304cf11f45b180c1db22": {
      "content": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n\treturn {\n\n\t};\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn {\n\n\t};\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n)(${1:${TM_FILENAME_BASE}});",
      "doc": "Creates a React component class connected to redux with dispatch",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactReduxDispatchComponent",
      "matches": {
        "rrdc": true
      },
      "source": "vscode-react/snippets"
    },
    "5b5b287fe82e6a385f22f49d06f3d94c": {
      "content": "overflow-style: move",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:mv": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b5b3a0496f388126513b85bf089f456": {
      "content": "if err != nil {\n\treturn nil, errors.Wrap(err, \"${1:message}\")\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error return wrap with two return values",
      "matches": {
        "errn,w": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "5b6807b8ad26bf92784ffc27e968b880": {
      "content": "echo CHtml::metaTag('${1:content}', '${2:name}', '${3:httpEquiv}',array('${4:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhmtag": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b76cbb0905048a520367c9ed941f131": {
      "content": "_.isNative(${value})",
      "doc": "_.isNative(Array.prototype.push);\n// => true\n\n_.isNative(_);\n// => false\n\nChecks if `value` is a pristine native function.\n\n**Note:** This method can't reliably detect native functions in the presence\nof the core-js package because core-js circumvents this kind of detection.\nDespite multiple requests, the core-js maintainer has made it clear: any\nattempt to fix the detection will be obstructed. As a result, we're left\nwith little choice but to throw an error. Unfortunately, this also affects\npackages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\nwhich rely on core-js.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isnative",
      "matches": {
        "lodash isnative": true
      },
      "source": "javascript/lodash"
    },
    "5b7920fffaf96a98e665a55505ada327": {
      "content": "logic${1:#: nbit} ${2:reg}_r, $2_w;${3:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "logic [] _r, _w;",
      "matches": {
        "rw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5b7bc9a9f087de97266b138f7722b1fe": {
      "content": "$this->session->set_userdata($${1:array});${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_session_set_userdata": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b7bec1cf30152eb3dac81d9c7819ae8": {
      "content": "import React, { memo } from 'react'\n\nexport default memo(function ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n})\n",
      "doc": "Creates a React Memo Function Component with ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-function-memo-component",
      "matches": {
        "react component function memo": true,
        "rmc": true
      },
      "source": "javascript/react"
    },
    "5b7d1a3b321526981943ba3c95f649d1": {
      "content": "const (\n\t${1:NAME} ${2:Type} = ${3:value}\n\t${0}\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "const ( ... )",
      "matches": {
        "cons": true
      },
      "source": "gosnippets/snippets"
    },
    "5b7ee58d9a9dacead15f29dd64487384": {
      "content": "<label for=\"${2:$1}\">$1</label>\n<input type=\"${3:text}\" name=\"${4:$2}\"${5: id=\"${6:$2}\"} value=\"$7\" />$8",
      "doc": "",
      "filetype": "html_minimal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "label_and_input": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5b7f74e7ff5af59d8f6eb0932129270c": {
      "content": "<component :is=\"${1:componentId}\"></component>$0",
      "doc": "component element",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-component",
      "matches": {
        "component": true,
        "vue component": true
      },
      "source": "javascript/vue"
    },
    "5b953fc0fb532aa5c502e09fd902d5c7": {
      "content": "overflow-x: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "5b97a80fa78d5e4f57c53ed70a670e0c": {
      "content": "${${1}}${0}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "${": true
      },
      "source": "snippets/javascript"
    },
    "5b9c3bb758861156c8c2f6f5a7ff497a": {
      "content": "1. ${1:first}\n2. ${2:second}\n3. ${3:third}\n$0",
      "doc": "Insert ordered list",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert ordered list",
      "matches": {
        "ordered list": true
      },
      "source": "vscode-R/snippets"
    },
    "5b9fb604dabd0d2125f2e647cab4717a": {
      "content": "case ${1:${VISUAL}} => ${0}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "5baaf7a8dae5df582d487831be59f7e8": {
      "content": "point(${1:x}, ${2:y}${3:, }${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "point": true
      },
      "source": "vim-snippets/snippets"
    },
    "5bada40a4e53c15589a442e29324c258": {
      "content": "\\begin{upshape}\n\t${1:TARGET}\n\\end{upshape}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{upshape} \\upshape": true,
        "upshape": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5bb0e039c29c2be4270032999437b8f8": {
      "content": "@deprecated ${0:#:description}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deprecated": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5bbcde715baff5120161000321504302": {
      "content": "animate:${1:name}={${2:params}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-animate",
      "matches": {
        "sva": true,
        "svelte animate": true
      },
      "source": "javascript/svelte"
    },
    "5bbe121582df69abcd426b9e523ad64b": {
      "content": "border-top-right-radius: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtrrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "5bbe784b7036fff8ce44b740fa534e08": {
      "content": "max-width: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maw": true
      },
      "source": "vim-snippets/snippets"
    },
    "5bc3816c498e26b2b295a8f6faadcc18": {
      "content": "echo CHtml::resetButton('${1:label}',array('${2:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhrsb": true
      },
      "source": "vim-snippets/snippets"
    },
    "5bc3e21be16f335a4412d3dc23657b72": {
      "content": "$_ENV['${1:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "E": true
      },
      "source": "vim-snippets/snippets"
    },
    "5bc44f05eecb1451af4ba7d17de4057c": {
      "content": "else if (${1:condition}) {\n\t${0}\n}",
      "doc": "else if statement",
      "filetype": "base",
      "grammar": "lsp",
      "label": "else-if-statement",
      "matches": {
        "base else if": true
      },
      "source": "javascript/base"
    },
    "5bc96bd44756d9751c164471864ce904": {
      "content": "$.when(${1:deferreds})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dwhen": true
      },
      "source": "snippets/javascript"
    },
    "5bd1d00c367589453459531c032fdbd0": {
      "content": "while (${1:/* condition */}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "while (condition) { ... }",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "5bd2a5d5377d4dc222eff06d15c8ed97": {
      "content": "redirect_to controller: \"${1:items}\", action: \"${2:list}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to (controller, action)",
      "matches": {
        "reca": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5bd7f986ad6ef2cbfa6958185fa69fd8": {
      "content": "const { request } = require('graphql-request');",
      "doc": "",
      "filetype": "graphql-request",
      "grammar": "lsp",
      "label": "graphql-request-require-request",
      "matches": {
        "graphql-request require request": true
      },
      "source": "javascript/graphql-request"
    },
    "5bd9b78500b8ab3fd30512e88310e4ad": {
      "content": "bottom ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b": true
      },
      "source": "vim-snippets/snippets"
    },
    "5bde3ab197a333d24fe8feaa3e3d820c": {
      "content": "border-left-style: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdls:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "5bf476db446b22676918f10a0b53446f": {
      "content": "\\\\begin{enumerate}[(i)]\n\t\\\\item ${0}\n\\\\end{enumerate}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "enumerate environment",
      "matches": {
        "enumi": true
      },
      "source": "vim-snippets/snippets"
    },
    "5bf7062ff220c30df0c1f256d3a9b519": {
      "content": "describe '${1:#method}' do\n\t${0:pending 'Not implemented'}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "descm": true
      },
      "source": "vim-snippets/snippets"
    },
    "5bf82463e52caa3174745e2bea99caed": {
      "content": "\\begin{overlay}\n\t${1:TARGET}\n\\end{overlay}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{overlay} \\overlay": true,
        "overlay": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5bfe74d4cb504edabfc72f57b00accd5": {
      "content": "\\\\cdot {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "dot product",
      "matches": {
        ".": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c02f0baf71e1c0ca9806ca3a72619d8": {
      "content": "<section class=\"${1}\">\n\t${0}\n</section>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "section.": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c0502faa0742d80d47dab1f59bdbd1a": {
      "content": "function object(o) {\n\tfunction F() {}\n\tF.prototype = o;\n\treturn new F();\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "obj": true
      },
      "source": "snippets/javascript"
    },
    "5c087755306e0ca178b543fb3ba2d77a": {
      "content": "\\begin{align}\n\t${1:TARGET}\n\\end{align}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{align} \\align": true,
        "align": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5c0af497176fd67952129af8d2bfc97a": {
      "content": "export default {\n\tstate: {\n\t\tvalue: 'my value'\n\t},\n\tgetters: {\n\t\tvalue: state => {\n\t\t\treturn state.value;\n\t\t}\n\t},\n\tmutations: {\n\t\tupdateValue(state, payload) {\n\t\t\tstate.value = payload;\n\t\t}\n\t},\n\tactions: {\n\t\tupdateValue({commit}, payload) {\n\t\t\tcommit('updateValue', payload);\n\t\t}\n\t}\n};",
      "doc": "vuex module",
      "filetype": "vuex",
      "grammar": "lsp",
      "label": "vuex-module",
      "matches": {
        "vmodule": true,
        "vuex module": true
      },
      "source": "javascript/vuex"
    },
    "5c0f15f4e8b76656cc74705518fc3947": {
      "content": "${1:obj}.children('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "children": true
      },
      "source": "snippets/javascript"
    },
    "5c11283045b893441008dd1fd212ce39": {
      "content": "runs(function() {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "runs (js)",
      "matches": {
        "ru": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c11358953e6086a6ce79bc96081e604": {
      "content": "${1:callbacks}.has(${2:callback})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Chas": true
      },
      "source": "snippets/coffee"
    },
    "5c122284686be5efca95500c8f35278e": {
      "content": "---\ntitle: ${1:title}\nlayout: post\ndate: ${2:date} ${0:hour:minute:second} -05:00\n---",
      "doc": "",
      "filetype": "textile",
      "grammar": "snu",
      "label": "",
      "matches": {
        "header": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c1754984473874a733360e5337f067d": {
      "content": "ReactDOM.hydrate(${1:element}, ${2:container}[, ${3:callback}]);",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "ReactDOM.hydrate",
      "matches": {
        "rdh": true
      },
      "source": "snippets/javascript"
    },
    "5c17dd4d3acb34f6f57ab36b76f858ef": {
      "content": "${1:obj}.toggle(function (${2:e}) {\n\t${3:// event handler}\n}, function ($2) {\n\t${4:// event handler}\n});\n${0}",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tog": true
      },
      "source": "snippets/javascript"
    },
    "5c218ec9be53af1b744f86fb6818f25a": {
      "content": "continue;",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "continue (cont)",
      "matches": {
        "cont": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5c272ae19aeabc65da87b3b5aabdf938": {
      "content": "#!/usr/bin/env falcon",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c297968207f2535340ad88f970e143c": {
      "content": "-behaviour(${1:behaviour}).",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "beh": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c2ab9d2242456e3630fe49e505ff4d7": {
      "content": "func main() {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Main function",
      "matches": {
        "/^main/": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5c2e75d2591181ef81c9bf08327dedf3": {
      "content": "wordwrap:$1",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wordwrap": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5c31b26e5b78d271d8b4b7caaa43c525": {
      "content": "&#x2193;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "down": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c36e23c7519aea84bc006ffec0d8f51": {
      "content": "border: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b": true,
        "border": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5c409b8f73ee8e64955eabb1957c104a": {
      "content": "type ${1:Type} = ${0:Type}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ty": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c41f2b58b9d7dd849679dae81b6cadc": {
      "content": "background-color transparent",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgc:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c4e096d8396788c71d4ed14c920c7fc": {
      "content": "${1:deferred}.resolve(${2:args})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dres": true
      },
      "source": "snippets/javascript"
    },
    "5c4f72140b259528b7ad5ef9251279db": {
      "content": "white-space: normal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c5585d9d7d88ac074d05b36063d8dbb": {
      "content": "class ${1:ModelName}(models.Model):\n\t\"\"\"${2:docstring}\"\"\"\n\t${3}\n\tclass Meta:\n\t\t${4}\n\tdef __unicode__(self):\n\t\t${5}\n\tdef save(self, *args, **kwargs):\n\t\t${6}\n\t@models.permalink\n\tdef get_absolute_url(self):\n\t\treturn ('${7:view_or_url_name}' ${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "model": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c56a3603f0a5ae7225a77d41cf901bb": {
      "content": "margin-top ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mt": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c574dd1e6718f6abf300e24f956f49d": {
      "content": "${1:callbacks}.fire(${2:args})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cfire": true
      },
      "source": "snippets/javascript"
    },
    "5c60881908e8adb3654a1ba3fe84fd09": {
      "content": "library UNISIM;\nuse UNISIM.VCOMPONENTS.ALL;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "libx": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c7497d14eceaea97eca150c94e2cdf2": {
      "content": "border-right-color ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrc": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c7926ba04549468d3f3ecd9c9adb206": {
      "content": "border-fit: overwrite;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:ow": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c7c20bc3cb0fa64e14ff4654c606075": {
      "content": "@class ${1:Foo};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c7f982dd8d1a8ddf050628f41d98f3e": {
      "content": "outline-offset: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oo": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c8a7f8c3d463a88823507a1f08a21b3": {
      "content": "java.net.",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "j.n": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c913f034b5068dfd1876d97b4977e42": {
      "content": "grid-column: ${1} / ${2};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gc": true
      },
      "source": "vim-snippets/snippets"
    },
    "5c9a81fd73366154e66869dbb6470e83": {
      "content": "v-show=\"${1:condition}\"",
      "doc": "Expects: any",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-show",
      "matches": {
        "vshow": true,
        "vue v-show": true
      },
      "source": "javascript/vue"
    },
    "5c9d61fa6af62244ab5e156d975ffe16": {
      "content": "${1:FIELDNAME} = forms.EmailField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "EmailField",
      "matches": {
        "fmail": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5ca2610375667bf11dcb90044a809985": {
      "content": "${1:obj}.scrollTop(${2:value})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scrollt": true
      },
      "source": "snippets/coffee"
    },
    "5ca3b1241364b049dad574be25055bb4": {
      "content": "else static if(${1}) {\n\t${2}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "seif": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ca4bfd8bfcc2fbd0187d2db542d8f28": {
      "content": "fmt.Println(${0:TARGET})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pl": true,
        "println": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5ca8d6fc86d1b1744f0ddf3b53cd5d41": {
      "content": "end",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "=> end?",
      "matches": {
        "edn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5cb7ee42f8ef2882ef4073f925ae6a5c": {
      "content": "{% ${1} %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "%": true
      },
      "source": "vim-snippets/snippets"
    },
    "5cbe90d1b53dcf239bc9538b2eba2ae7": {
      "content": "const ${1:feature}Reducer = createReducer(\n\tinitialState,\n\ton($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),\n);\n\nexport function reducer(state: State | undefined, action: Action) {\n\treturn $1Reducer(state, action);\n}",
      "doc": "Creates an NgRx Reducer",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "NgRx Create Reducer",
      "matches": {
        "a-ngrx-create-reducer": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "5cbe9c1d9fbf22a7a80212bcf638f4c9": {
      "content": "div(ng-repeat='${1} in ${2}' track by $index)",
      "doc": "",
      "filetype": "jade",
      "grammar": "snu",
      "label": "",
      "matches": {
        "repi": true
      },
      "source": "vim-snippets/snippets"
    },
    "5cbec8218c03275aaf123a3bc7bc9dd7": {
      "content": "place-self stretch",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "5cc25f1d79253ec08f2142c1cb9bb8d5": {
      "content": "match ${1:TARGET} with\n| ${2} -> ${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "match",
      "matches": {
        "match": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5cc48f25fe69aa79730a8bc38157adf3": {
      "content": "mixed.oneOf()",
      "doc": "mixed.oneOf(arrayOfValues: Array<any>, message?: string | function): Schema Alias: equals\n\nWhitelist a set of values. Values added are automatically removed from any blacklist if they are in it.\nThe ${values} interpolation can be used in the message argument.Note that undefined does not fail this validator, even when undefined is not included in arrayOfValues.\nIf you don't want undefined to be a valid value, you can use mixed.required.let schema = yup.mixed().oneOf([\"jimmy\", 42]);\n\nawait schema.isValid(42); // => true\nawait schema.isValid(\"jimmy\"); // => true\nawait schema.isValid(new Date()); // => false\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-one-of",
      "matches": {
        "yup mixed oneof": true
      },
      "source": "javascript/yup"
    },
    "5ccfb9c0efd453fcb6d4992d0e3c8c83": {
      "content": "@inbook{${1:LABEL},\n    author/editor = {${2}},\n    title = {${3}},\n    chapter/pages = {${4}},\n    publisher = {${5}},\n    year = {${6}},\n    memo = {volume, series, address, edition, month, note},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@inbook": true,
        "inbook": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5cd84eea0fdc3e6e39e71e7258383b4d": {
      "content": "quotes: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q": true
      },
      "source": "vim-snippets/snippets"
    },
    "5cd9f52f2b1716ace548487e98bb5aaa": {
      "content": "place-items: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ce025bd29a27fc525ff68a004bddc3d": {
      "content": "it { should validate_presence_of :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isvp": true
      },
      "source": "vim-snippets/snippets"
    },
    "5cf5caa1365a4ba8b62c94bbc966647c": {
      "content": "while (${1:condition}) {\n\t${0}\n}",
      "doc": "while loop",
      "filetype": "base",
      "grammar": "lsp",
      "label": "while-loop",
      "matches": {
        "base while": true
      },
      "source": "javascript/base"
    },
    "5cfe55af0fea8007fb042ce74e04cb4b": {
      "content": "refute_same ${1:unexpected}, ${2:actual}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rfs": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d021cc8d03115440ddc5591e135812e": {
      "content": "{{- if .Values.$1.enabled }}\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n  name: {{ template \"${2:chartName}.${1:value_key}.fullname\" . }}\n# spec\n\t# containers_spec\n\t# livenessProbe_spec\n\t# PersistentVolumeClaim_spec\n\t# initContainers_spec\n\t# resources_spec\n\t# nodeselector_spec\n\t# tolerations_spec\n\t# affinity_spec\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deploy_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d1cc965ffe2efeb654839671000512e": {
      "content": "max { |a, b| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "max": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d2d75ffb0ce9c3e68c4e7da39d78c73": {
      "content": "import * as ${1:NAME} from \"${0:TARGET}\";",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "import * as NAME from \"...\";",
      "matches": {
        "import-all": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5d33c3ed706a4e935374e9e235174503": {
      "content": "const ${1:packageName} = require('${1:package}');$0",
      "doc": "Require a package to const",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "requireToConst",
      "matches": {
        "req": true
      },
      "source": "vscode-javascript/snippets"
    },
    "5d3894284f45c0c215fe2017ad6d8cca": {
      "content": "protected ${1}(${2}): ${3:any} {\n\t${0}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts protected method",
      "matches": {
        "tpromet": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d3b953ef9cf5c3708d89266c2bfa2c5": {
      "content": "border-left-width: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlw": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d4c3ca8ec41822b9ec5e6a617a53948": {
      "content": "map {  ${0: body }    }  ${1: @array } ;",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d53d29ac408ae89c39653643f0c0bcd": {
      "content": "__SOURCE_DIRECTORY__",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "__SOURCE_DIRECTORY__",
      "matches": {
        "sourced": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5d67f63889fb1ecb7c78a0fe6aeba82e": {
      "content": "max(${1:value1}, ${2:value2}${3:, }${0:value3});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "max": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d6bd544a4bcb53689c90d874e2c9928": {
      "content": "require '${1:#:file}';${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5d72c4f027783eb8dcf30d3bfc4b1c3e": {
      "content": "${1:obj}.insertBefore('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "insb": true
      },
      "source": "snippets/javascript"
    },
    "5d8115c951a946d0b294048dbfc9d493": {
      "content": "setter ${0:name}",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d867b28d3f5bc1256a6a8b15ed7e5f3": {
      "content": "align-self flex-start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d8b770cac67d6846ec4b22331aa4d4d": {
      "content": "split(${1:hay stack}, \"${2:patten}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "split": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d8cfc67cafbc0f8127c009452a4f950": {
      "content": "font-family: ${0:Georgia,'Times New Roman'},serif",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d8daf28e05cf259f5a1c55903f4af65": {
      "content": "${1:dfname} <- data.frame(${2:a} = character(), ${3:b} = character())",
      "doc": "Code snippet for an empty character data frame",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Empty data frame (character)",
      "matches": {
        "df2c": true
      },
      "source": "vscode-R/snippets"
    },
    "5d950abbfadc979d7d917f5d4806faa7": {
      "content": "try {\n    ${0:TARGET}\n} catch {\n    ${1}\n} finally {\n    ${2}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "try {} catch {} finally {}",
      "matches": {
        "try_catch_n_finally": true,
        "try_cnf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5d983757c08c306351e63e5fa7048b4c": {
      "content": "line(${1:x1}, ${2:y1}, ${3:x2}, ${0:y2});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "line": true
      },
      "source": "vim-snippets/snippets"
    },
    "5d990f6dd2974fdc8f6f934f92ed352c": {
      "content": "import pdb; pdb.set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "import pdb..",
      "matches": {
        "pdb": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5d9e8b445b4620b262516603dbcb12f5": {
      "content": "_.dropRightWhile(${array}, ${predicate})",
      "doc": "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n\n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n\n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']\n\nCreates a slice of `array` excluding elements dropped from the end.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-droprightwhile",
      "matches": {
        "lodash droprightwhile": true
      },
      "source": "javascript/lodash"
    },
    "5da08b3752404b244808145e427c9564": {
      "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n${0}\n</html>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xhtml": true
      },
      "source": "vim-snippets/snippets"
    },
    "5da4b7728513733f88b02cb77850c3ec": {
      "content": "border-left-style: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdls": true
      },
      "source": "vim-snippets/snippets"
    },
    "5db26c1d3d1a5776149ab33a1e3f213a": {
      "content": "class ${1:MODEL_NAME}CreateView(CreateView):\n\tmodel = $1\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Generic Create View",
      "matches": {
        "createview": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5db810b0746daa535dfe0953704c6a88": {
      "content": "@safe",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "safe": true
      },
      "source": "vim-snippets/snippets"
    },
    "5dc03986a327edd81f71632399cc4b26": {
      "content": "class ${1:name} extends FunSuite {\n\ttest(\"${0:description}\") {\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsuite": true
      },
      "source": "vim-snippets/snippets"
    },
    "5dc1c166d7848bbac0d63df354189732": {
      "content": "_.attempt(${func}, ${args})",
      "doc": "// Avoid throwing errors for invalid selectors.\nvar elements = _.attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '>_>');\n\nif (_.isError(elements)) {\n  elements = [];\n}\n\nAttempts to invoke `func`, returning either the result or the caught error\nobject. Any additional arguments are provided to `func` when it's invoked.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-attempt",
      "matches": {
        "lodash attempt": true
      },
      "source": "javascript/lodash"
    },
    "5dc2dcc81e903c6ed71b855f40d6f3e3": {
      "content": "namespace ${1:#:name} {\n    ${0:TARGET}\n} // namespace $1",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "namespace {}",
      "matches": {
        "namespace": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5dd6b718b00140be3f92c9ba736c17bc": {
      "content": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n});",
      "doc": "Creates a forEach statement in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "forEach",
      "matches": {
        "fre": true
      },
      "source": "vscode-javascript/snippets"
    },
    "5dd96dc382d128f267ab06789920b1b1": {
      "content": "stringformat:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stringformat": true
      },
      "source": "vim-snippets/snippets"
    },
    "5de740e71e1b2c7a920e9205cbef3e5c": {
      "content": "_.flatMap(${collection}, ${iteratee})",
      "doc": "function duplicate(n) {\n  return [n, n];\n}\n\n_.flatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]\n\nCreates a flattened array of values by running each element in `collection`\nthru `iteratee` and flattening the mapped results. The iteratee is invoked\nwith three arguments: (value, index|key, collection).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-flatmap",
      "matches": {
        "lodash flatmap": true
      },
      "source": "javascript/lodash"
    },
    "5de7a9f2359a2447dbd7065eaa921ae3": {
      "content": "import { createGlobalStyle } from 'styled-components';",
      "doc": "import { createGlobalStyle } from 'styled-components'",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-import-create-global-style-from-styled-components",
      "matches": {
        "imscg": true,
        "styled-components import createglobalstyle": true
      },
      "source": "javascript/styled-components"
    },
    "5dec826d21f8d25f464e59be732a53cc": {
      "content": "<% ${1:} %>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "<%",
      "matches": {
        "<%": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5df6d779b3290d59a9322312e89a0f6e": {
      "content": "string.ensure()",
      "doc": "string.ensure(): Schema\n\nTransforms undefined and null values to an empty string along with\nsetting the default to an empty string.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-ensure",
      "matches": {
        "yup string ensure": true
      },
      "source": "javascript/yup"
    },
    "5df700c04ba14e1aab6b2e9f41cf2afb": {
      "content": "padding: 0;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "5dfc65680f0393dc582edf0a213bae21": {
      "content": "Main.@bp",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "Debugger breakpoint",
      "matches": {
        "deb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5e0af3452836c357939ba0456740b876": {
      "content": "switch ${1:expression} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5e20a17aa818a7a5de4c41d4ad5e29b9": {
      "content": ":after",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":a": true
      },
      "source": "vim-snippets/snippets"
    },
    "5e2d872bbfd54b267a499bc127401440": {
      "content": "it { should validate_confirmation_of :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isvc": true
      },
      "source": "vim-snippets/snippets"
    },
    "5e34aa1461d289477ddae7bfc6465704": {
      "content": "${1:void} ${2:function_name}(${3})\n{\n\t${4}\n}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "5e3c872b191f43a9dee83ebd6d40ec3b": {
      "content": "_.isWeakSet(${value})",
      "doc": "_.isWeakSet(new WeakSet);\n// => true\n\n_.isWeakSet(new Set);\n// => false\n\nChecks if `value` is classified as a `WeakSet` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isweakset",
      "matches": {
        "lodash isweakset": true
      },
      "source": "javascript/lodash"
    },
    "5e448be2601df36383a03f377a6c6126": {
      "content": "componentWillUpdate(nextProps, nextState) {\n\t${1}\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "componentWillUpdate",
      "matches": {
        "cwu": true
      },
      "source": "snippets/javascript"
    },
    "5e61d37018b0095c6e70c7b19e540cae": {
      "content": "\\${3:#${0:optional}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${3:#optional}",
      "matches": {
        "3#": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5e63f74fa6a06470561db31d07d39625": {
      "content": "xhr :delete, :${1:destroy}, id: ${2:1}$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "xhr delete",
      "matches": {
        "xdelete": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5e67f9e7709b8eae84d16ab1da15bc36": {
      "content": "try: ${1:pass}\ndefer: ${2:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trydefer": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5e699a1693551ed389d65d73fa4a0056": {
      "content": "sort(${1:x})",
      "doc": "Sort",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "sor",
      "matches": {
        "sort": true
      },
      "source": "vscode-R/snippets"
    },
    "5e6dd757e726843555c80858993f4b4d": {
      "content": "process (${1:all})\nbegin\n\t${2}\nend process;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pra": true
      },
      "source": "vim-snippets/snippets"
    },
    "5e7f5cea2ee2923b0a3dcbabcb5fa3e4": {
      "content": "finally\n\t${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "finally statement",
      "matches": {
        "fin": true
      },
      "source": "vim-snippets/snippets"
    },
    "5e7f942982a302cdd6a0a8ee069721e2": {
      "content": "${1:obj}.outerHeight()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "outerh": true
      },
      "source": "snippets/coffee"
    },
    "5e82f1fd114bb8c758b462f67a44aa4c": {
      "content": "belongs_to :${1:association}, polymorphic: true",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "btp": true
      },
      "source": "vim-snippets/snippets"
    },
    "5e85f47355a516bea75f1cbeffeba7cf": {
      "content": "<%text>\n\t${0:}\n</%text>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "text": true
      },
      "source": "vim-snippets/snippets"
    },
    "5e8805e14a5af61b5eec41cb03c66eeb": {
      "content": "====== ${1} ======\n${2}",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "======": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5e8b6cfbed690db0d1337d3f88a26f7c": {
      "content": "let ${1:TARGET} = ${2};${3}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5e8ca6716759b43c27efe77c877f7935": {
      "content": "editor = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "editor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5e9e87e3421b9e3cd0676cb21238c353": {
      "content": "${1:public} bool ${2} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ea96f2fa95da9d3aa9e5212428f4385": {
      "content": "for (${1}; ${2}; ${3}) {\n    ${4:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5eacff74ff10db0ee513b88fa9bf3f0d": {
      "content": "{% csrf_token %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "csrf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5ec021aeeb9a2115f7264c5b525ca9d4": {
      "content": "url = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "url": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5ec9640b0e3df950edfbff475180f8b6": {
      "content": "$this->${1:method}()->shouldBe${2:String|Array|Bool}();",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldBeString|Array|Bool()",
      "matches": {
        "sbscalar": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5eca276028eb73d43dc8b95100421fee": {
      "content": "<main>\n    ${1}\n</main>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5eca43347784132f4db313549a4649d3": {
      "content": "Sleep    ${1:2 minutes 10 seconds}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Sleep",
      "matches": {
        "sleep": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5ecc4df0d719280d7b7a28ed2f22a46b": {
      "content": "always_latch begin ${1:: statement_label}\n\t${0}\nend $1",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "all": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ed4b368ed665f2752bd9205362214b9": {
      "content": "text-shadow ${1:0} ${2:0} ${3:0} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tsh+": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ed5da9f78da1322fa76d9587ddc4f30": {
      "content": "#include <boost/${1:shared_ptr}.hpp>",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "binc": true
      },
      "source": "vim-snippets/snippets"
    },
    "5eda2fa21d364c6fe4a66dc02a770237": {
      "content": "expect(${1:target}).wasNotCalled()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect was not called (coffee)",
      "matches": {
        "notsc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5eda5cd7fb48f9ce0d627b65b6ce2c46": {
      "content": "open(unit = ${1:fp}, file = ${2:filename}, status = ${3:unknown}, iostat = ${4:ierr}) ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "open": true
      },
      "source": "vim-snippets/snippets"
    },
    "5edd940804d10a92c9bd01db79295d9e": {
      "content": "console.table(${1:object});",
      "doc": "Displays tabular data as a table.",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consoletable",
      "matches": {
        "base console table": true
      },
      "source": "javascript/base"
    },
    "5eddd72a64216471aed158c711d3dcb9": {
      "content": "fix(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "fix conventional commit",
      "matches": {
        "fix": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5ee1719082cca5ea693390f2a63ad4f4": {
      "content": "if err != nil {\n\treturn err\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if error not nil, return err",
      "matches": {
        "ir": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ee231f7b42b99a70358dc9cb3611dc7": {
      "content": "refute ${1:test}, '${2:Failure message.}'",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rf": true
      },
      "source": "vim-snippets/snippets"
    },
    "5eecb2367de4ef9ac40972cce2f312a9": {
      "content": "border-top-right-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtri:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ef2cdbe8b2a7588968a2f35e38949cf": {
      "content": "with ${1};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "with",
      "matches": {
        "wi": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ef531ff7dead1d5e648d0f02e2a462f": {
      "content": "use lib qw{ ./t/lib };",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tlib": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ef9efe697e1916e6e8c88ee06a15604": {
      "content": "defer func() {\n\t${0}\n}()",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "defer func() { ... }",
      "matches": {
        "def": true
      },
      "source": "gosnippets/snippets"
    },
    "5eff03c76513d1c7625135e7fe5eba9e": {
      "content": "white-space: pre-line",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:pl": true
      },
      "source": "vim-snippets/snippets"
    },
    "5effa12bcb9ca67735b1f043cd2293a6": {
      "content": "const ${1:function_name} = (${2}) => {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "c=>": true
      },
      "source": "snippets/javascript"
    },
    "5f010e9740e7afbeb7dfaebf81f35b3f": {
      "content": "_.delay(${func}, ${wait}, ${args})",
      "doc": "_.delay(function(text) {\n  console.log(text);\n}, 1000, 'later');\n// => Logs 'later' after one second.\n\nInvokes `func` after `wait` milliseconds. Any additional arguments are\nprovided to `func` when it's invoked.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-delay",
      "matches": {
        "lodash delay": true
      },
      "source": "javascript/lodash"
    },
    "5f08f949c66f912bab2b39358fe91fb3": {
      "content": "if ${1:condition}\n\t${2:${VISUAL}}\nelse\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "snippets/coffee"
    },
    "5f150a81f2d75ba4a1105db7ae44cdcb": {
      "content": "${1:auto} ${2:func}(${3:params}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f1a80b78ca77c53d6d57044723971a0": {
      "content": "${1:obj}.fadeOut('slow/400/fast', function () {\n\t${0:// callback};\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadeoutc": true
      },
      "source": "snippets/javascript"
    },
    "5f1d8fa81ed0461aded25b6235365e0e": {
      "content": "when {\n\tchangeset '${1:changeSet}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whenchangeset": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f21542ebad8eac3c7c1b476cb26a321": {
      "content": "#warning ${0:#:message}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "warn": true,
        "warning": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5f235f369df07b8b944045665aa34ea5": {
      "content": "display flex",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f4d071a7679413d28c9a9b8b658ebd9": {
      "content": "${1:FIELDNAME} = models.CharField(max_length=${2}${0:, blank=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "char": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f4db93a04abfa246cd2f8bcdcad6584": {
      "content": "border-style: dot-dot-dash;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:dtdtds": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f533bc92d5cc5569f37551f92541b26": {
      "content": "class:${1:name}={${2:condition}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-class",
      "matches": {
        "svcl": true,
        "svelte class": true
      },
      "source": "javascript/svelte"
    },
    "5f58bc490fad0beddfd345060e589dae": {
      "content": "#[allow(${1:unused_variables})]",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "allow lint attribute",
      "matches": {
        "allow": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f58c5d430a0b26caa8e8ee8333b790c": {
      "content": "atan2(${0:rad});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "atan2": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f64fdb46da29b44e71633ed0bb1a044": {
      "content": "{${1} for ${2} in ${3:${VISUAL}}}${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "set comprehension",
      "matches": {
        "scp": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f79a1459bd296d6c68d89b120f1b540": {
      "content": "reduce(${1:init}) do |${2:mem}, ${3:var}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "redd": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f7a81448454d87d0999dcac0f3aee71": {
      "content": "pages = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pages": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5f7bab8b93797dfa4bc98055d219abb1": {
      "content": "cy.viewport(${1:width}, ${2:height});",
      "doc": "Control the size of the screen for your application.",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-viewport",
      "matches": {
        "cypress viewport": true
      },
      "source": "javascript/cypress"
    },
    "5f7d45f15060fdcdc7765fedbd03f18b": {
      "content": "margin-left auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ml:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f9607511be2312f207b772153e2dbc0": {
      "content": "text-emphasis: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f98aeaff8a32398e9d9271c8ad3a712": {
      "content": "border-style: dot-dash",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:dtds": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f98d4b4669c22389efdb136920e5ee9": {
      "content": "test(\"${1:description}\") {\n\t${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "5f9a789968a585b483b631eadc50750d": {
      "content": "{@code ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{code": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "5fa2e9c397c0a21096f6336f362adfbe": {
      "content": "let ${1:name} = ref ${2:val} in\n${3:e}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "ref",
      "matches": {
        "ref": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "5fa7d83a96ec2fba3dab558462238869": {
      "content": "${1:obj}.slideDown('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sdown": true
      },
      "source": "snippets/javascript"
    },
    "5fb57b59ba1bc92d7c11519b658f02f9": {
      "content": "align-self: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as": true
      },
      "source": "vim-snippets/snippets"
    },
    "5fd6d4c0d1e2172ef751b0fb987c1cce": {
      "content": "font-family ${0:Georgia,'Times New Roman'},serif",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "5fe246e25cde507476f6995f371b502c": {
      "content": "_.has(${object}, ${path})",
      "doc": "var object = { 'a': { 'b': 2 } };\nvar other = _.create({ 'a': _.create({ 'b': 2 }) });\n\n_.has(object, 'a');\n// => true\n\n_.has(object, 'a.b');\n// => true\n\n_.has(object, ['a', 'b']);\n// => true\n\n_.has(other, 'a');\n// => false\n\nChecks if `path` is a direct property of `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-has",
      "matches": {
        "lodash has": true
      },
      "source": "javascript/lodash"
    },
    "5fe6e7ada6d00a0944652e81b1b6d402": {
      "content": "clip: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cp:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ff1e3770004d789d56170cb2ddb44ac": {
      "content": "assert(${1:ptr} != NULL);",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "anl": true
      },
      "source": "vim-snippets/snippets"
    },
    "5ff7798175d9f516b5a19080b2e48592": {
      "content": "{{- range $key, $value := .Values.tcp }}\n  - name: \"{{ $key }}-tcp\"\n\tport: {{ $key }}\n\tprotocol: TCP\n\ttargetPort: \"{{ $key }}-tcp\"\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "portTCP_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "5fffcd7eb7338b7e3e8abfb0e5b1d763": {
      "content": "${fn:toLowerCase(${0:string})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lc": true
      },
      "source": "vim-snippets/snippets"
    },
    "600aa143b7f20abedf9468aaef95244b": {
      "content": "list-style-position: inside;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisp:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "600b4073d94eaf6d149a697f9ed007da": {
      "content": "fmt.Sprintf(\"%${1:s}\", ${2:var})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Sprintf",
      "matches": {
        "ps": true
      },
      "source": "vim-snippets/snippets"
    },
    "600c7f043568e60481237d9f62cd536f": {
      "content": "expect(${1:target}).toHaveBeenCalled();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to have been called (js)",
      "matches": {
        "ethbc": true
      },
      "source": "vim-snippets/snippets"
    },
    "600e7c390c80ed9120ba5ebab7e2d34f": {
      "content": "for (var ${1} = 0; $1 < ${2}.length; $1++) {\n\t${0:TARGET}\n};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "fr",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "600f575cfd9c8d31d1b093e9a651036b": {
      "content": "quote do\n\t${1}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "qu": true
      },
      "source": "vim-snippets/snippets"
    },
    "602593bbe95e1b9f56f6838e857685ca": {
      "content": "cut:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cut": true
      },
      "source": "vim-snippets/snippets"
    },
    "602c5f80b32591c6c4667c508233c983": {
      "content": "(if ${1} ${2} ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "603190322b1d031b95493ffb215a588a": {
      "content": "flash[:${1:notice}] = \"${2:Successfully created...}\"$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "flash[...]",
      "matches": {
        "flash": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "60333c446c442c88b7f067ec1f73d713": {
      "content": "_.bindKey(${object}, ${key}, ${partials})",
      "doc": "var object = {\n  'user': 'fred',\n  'greet': function(greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  }\n};\n\nvar bound = _.bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n\nobject.greet = function(greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n\nbound('!');\n// => 'hiya fred!'\n\n// Bound with placeholders.\nvar bound = _.bindKey(object, 'greet', _, '!');\nbound('hi');\n// => 'hiya fred!'\n\nCreates a function that invokes the method at `object[key]` with `partials`\nprepended to the arguments it receives.\n\nThis method differs from `_.bind` by allowing bound functions to reference\nmethods that may be redefined or don't yet exist. See\n[Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\nfor more details.\n\nThe `_.bindKey.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-bindkey",
      "matches": {
        "lodash bindkey": true
      },
      "source": "javascript/lodash"
    },
    "603716b62b8a8d35474e17a29e0ec6fd": {
      "content": "${1:name}\tvarchar2(${2:size})\t${3:default ''}\t${0:not null}",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ccol": true
      },
      "source": "vim-snippets/snippets"
    },
    "603a8152002ed9fcf7bdf9a288076cd1": {
      "content": "assert_redirected_to ${10:${2:parent}_${3:child}_path(${4:@}${5:$2})}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "assert_redirected_to (nested path plural)",
      "matches": {
        "artnpp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6043b7e77c653cce8e774d0c976523c9": {
      "content": "refute_operator ${1:left}, :${2:operator}, ${3:right}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rfo": true
      },
      "source": "vim-snippets/snippets"
    },
    "604f0e425222c87687365dfa591f0ffa": {
      "content": "{% schema %}\n\t{\n\t\t${0}\n\t}\n{% endschema %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "schema": true
      },
      "source": "vim-snippets/snippets"
    },
    "60538f8adb84ccedd6b71204c7ca08aa": {
      "content": "quotes '\\00AB' '\\00BB' '\\201E' '\\201C'",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q:ru": true
      },
      "source": "vim-snippets/snippets"
    },
    "6069eed46fae1a22602b9ab0185ce655": {
      "content": "<ol type=\"I\">${1:TARGET}</ol>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "olI": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "606bf92a2bc71d5237a91ff3731c0f34": {
      "content": "vmap ${1} ${2}",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vm": true
      },
      "source": "vim-snippets/snippets"
    },
    "606ea9dbd43e05d2a2035474fcc64f17": {
      "content": "${1}:\nfor ${2} of ${3} loop\n\t${0}\nend loop $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "named for each",
      "matches": {
        "nfore": true
      },
      "source": "vim-snippets/snippets"
    },
    "606efee513048faf8dd9436ec8bfa0ea": {
      "content": "PropTypes.shape({\n\t$0\n}),",
      "doc": "An object taking on a particular shape",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeShape",
      "matches": {
        "ptsh": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "606fbbad817c3f8d1a2ac1c795e76648": {
      "content": "library ${1}\nuse $1.${2}",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lib": true
      },
      "source": "vim-snippets/snippets"
    },
    "6072a10ed4803d6f2599dbb79c7964b9": {
      "content": "test('should $1', async () => {\n\t$0\n})\n",
      "doc": "Testing `asynchronous test` block",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "testAsyncBlock",
      "matches": {
        "testa": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "60779a99349e68b776a8db3f5212b466": {
      "content": "expect($1).toBeGreaterThan($0);",
      "doc": "expects the argument is greater than or equal",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobegreaterthan",
      "matches": {
        "jest expect tobegreaterthan": true,
        "tbgt": true
      },
      "source": "javascript/jest"
    },
    "607a1104bc258067db7d64382a673806": {
      "content": "build(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "build conventional commit",
      "matches": {
        "build": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "607caf24bf67ef91aba5a7072de79613": {
      "content": "pgl.beginGL();\n\t${0}\npgl.endGL();",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "begin gl",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "6081c8f1a680d3f882033d23d3f75455": {
      "content": "widows: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wid": true
      },
      "source": "vim-snippets/snippets"
    },
    "608d689f6d6adfc0b0e174caabc064ab": {
      "content": "set {${1:TARGET}}${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "set {}",
      "matches": {
        "set": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "608d9a55547fd968054e999b6dc8faaa": {
      "content": "white-space pre",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:p": true
      },
      "source": "vim-snippets/snippets"
    },
    "608da2c700e3b542d3e1c8028d8e86ab": {
      "content": "$_GET['${1}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "get",
      "matches": {
        "get": true
      },
      "source": "vim-snippets/snippets"
    },
    "608f548d1fcc5dc9ed4a2d3578312ad4": {
      "content": "font-smooth: never",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "60902d6cd094b3bf4e3fa428e9666a2b": {
      "content": "${1:public} static int Main(string[] args)\n{\n\t${0}\n\treturn 0;\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sim": true
      },
      "source": "vim-snippets/snippets"
    },
    "6097c305107a8dbd2a552b095b1b9e4e": {
      "content": "vertical-align: sub;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:sub": true
      },
      "source": "vim-snippets/snippets"
    },
    "609ee1cd6dc79d302e5a7507789c60cf": {
      "content": "@trusted",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trusted": true
      },
      "source": "vim-snippets/snippets"
    },
    "60a6681647121dffeb3931ea6511ffc6": {
      "content": "$.queue(${1:element}${2:, name}${3:, newQueue})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "queuee": true
      },
      "source": "snippets/coffee"
    },
    "60a679289136421d19fc70534d0102ea": {
      "content": "grid-auto-flow row dense",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:rd": true
      },
      "source": "vim-snippets/snippets"
    },
    "60aa79395b041d7fc601ce5cb30823a2": {
      "content": "page-break-after: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "60acab3ac3e279f61971c0632a81c6ef": {
      "content": "case (${1})\n    ${2:'b0}: begin\n        ${3}\n    end\n    default : begin\n        ${4}\n    end\nendcase",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "case () ... endcase",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "60b00131ee7244f4ac6ee2c11337671a": {
      "content": "set xtics ${1:#:start}, ${2:#:incr}, ${3:#:end}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set xtics start, incr, end",
      "matches": {
        "xtics": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "60b6673de2b0c98ab93f26ffe51959eb": {
      "content": "text-shadow: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tsh:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "60be307a9e7a2048aa1d333e79b2a24d": {
      "content": "justify-self: start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "60bfdc881abbb3ebb0a0dc89574b0faa": {
      "content": "[@@deriving ${0:TARGET}]",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "[@@deriving ...]",
      "matches": {
        "@@": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "60c39bb5f8c648aa8849801573a3a0b6": {
      "content": "print(${1:x}, ${2:...})",
      "doc": "Print",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "pri",
      "matches": {
        "print": true
      },
      "source": "vscode-R/snippets"
    },
    "60ce08213eebedb2f69e1135bf3e923f": {
      "content": "cut:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cut": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "60de358dfaa5b0b54428ac9e3dfef814": {
      "content": "<ng-container $0></ng-container>",
      "doc": "Angular ng-container",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ng-container",
      "matches": {
        "a-ng-container": true,
        "angular ng-container": true
      },
      "source": "javascript/angular"
    },
    "60deae5458b1eeae23f1b2135f635bff": {
      "content": "let $1_save = &${1}\nlet &$1 = ${2}\ntry\n  ${0}\nfinally\n  let &$1 = $1_save\nendtry",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "use option save",
      "matches": {
        "save_option": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "60df9e5433facda4d81b013e9edd55aa": {
      "content": "(${1:Class} ${2:a}) => $2",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "Type constraint",
      "matches": {
        "=>": true
      },
      "source": "vim-snippets/snippets"
    },
    "60ed8ae6de57a34864eecb98f149dcf5": {
      "content": "if (${1}) {\n\t${2}\n}${3: else}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "60ef48ce4d38b537e9f3f92dc2b317ca": {
      "content": "script src=\"${1:script.js}\" type=\"text/javascript\"",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "script": true
      },
      "source": "vim-snippets/snippets"
    },
    "60f059d3915cdda51d49b3d56848e7c4": {
      "content": "{%- for ${1:item} in ${2:collection} -%}\n\t${0}\n{%- endfor -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for-": true
      },
      "source": "vim-snippets/snippets"
    },
    "60fd4d3b7b265d541d8868b6e988164e": {
      "content": "justify-self: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js": true
      },
      "source": "vim-snippets/snippets"
    },
    "60fe123ae2634637fe4e84b2fed79f31": {
      "content": "${1:obj}.nextAll('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nexta": true
      },
      "source": "snippets/javascript"
    },
    "611a7d6ae3eddb405a9e379c9f46cb97": {
      "content": "expect(${1:target}).not.toEqual(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to equal (js)",
      "matches": {
        "note": true
      },
      "source": "vim-snippets/snippets"
    },
    "6120f3274550615238253573cd1f8d2e": {
      "content": "import { ${1:map} } from 'rxjs/operators';\n$0",
      "doc": "RxJs import",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "RxJs Operator Import",
      "matches": {
        "a-rxjs-operator-import": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "6132934adadc46dc89e67939d7db76f9": {
      "content": "_.toNumber(${value})",
      "doc": "_.toNumber(3.2);\n// => 3.2\n\n_.toNumber(Number.MIN_VALUE);\n// => 5e-324\n\n_.toNumber(Infinity);\n// => Infinity\n\n_.toNumber('3.2');\n// => 3.2\n\nConverts `value` to a number.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-tonumber",
      "matches": {
        "lodash tonumber": true
      },
      "source": "javascript/lodash"
    },
    "613610012da51e61128a2be45b89f2ba": {
      "content": "{% gist ${1:gist_id} ${0:filename} %}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gist-full": true
      },
      "source": "vim-snippets/snippets"
    },
    "613790b773e39b986632617fcb08d717": {
      "content": "size(${1:200}, ${2:200}${0:, OPENGL});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "opengl",
      "matches": {
        "size": true
      },
      "source": "vim-snippets/snippets"
    },
    "614053ee57b62aed4efac67be1d0379b": {
      "content": "display list-item",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:li": true
      },
      "source": "vim-snippets/snippets"
    },
    "6141481516ab28771c11dfe254f1eeba": {
      "content": "<tfoot>\n\t${0}\n</tfoot>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tfoot": true
      },
      "source": "vim-snippets/snippets"
    },
    "61447033134eccb05493a971bb9d9d76": {
      "content": "Run Keyword Unless    '\\${${1:rc}}' != '${2:abc}'    ${3:${kw}}    ${4:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword Unless",
      "matches": {
        "rku": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "614681b213b8e56e6e92e6045b34fb96": {
      "content": "css: ['assets/${1:normalize.css}'],",
      "doc": "link to css assets such as normalize",
      "filetype": "nuxt-config",
      "grammar": "lsp",
      "label": "Nuxt Use CSS File",
      "matches": {
        "ncss": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "614a4ee73a0058d6ecdfce8c4e5bd539": {
      "content": "font-smooth never",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "6157bc87591896f8c334d244c9db4735": {
      "content": "|${1|preventDefault,stopPropagation,passive,capture,once|}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-modifiers",
      "matches": {
        "svelte modifier": true,
        "svmodifier": true
      },
      "source": "javascript/svelte"
    },
    "615d8fd327c7d12f3615300baff36a18": {
      "content": "validates_inclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not included in the list}\"}, if: proc { |obj| ${7:obj.condition?} }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_inclusion_of if",
      "matches": {
        "viif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "617233e2cf89ff4c5f9972c2e706a564": {
      "content": "content no-close-quote",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:ncq": true
      },
      "source": "vim-snippets/snippets"
    },
    "618147add6d1f03ba7cf5abe6d323239": {
      "content": "stages {\n\tstage('${1:Build}') {\n\t\tsteps {\n\t\t\tsh '${2:make}'\n\t\t}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sss": true
      },
      "source": "vim-snippets/snippets"
    },
    "618b4a77dbbf9d62d8d2cd257c2511ce": {
      "content": "{{- if .Values.$1.nodeSelector }}\n  nodeSelector:\n{{ toYaml .Values.${1:value_key}.nodeSelector | indent 8 }}\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nodeselector_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "618d36b49f4f703348fe1b34664fd414": {
      "content": "{|class=\"wikitable\"\n|+ ${1}\n! ${2}\n! ${3}\n|-\n| ${4}\n| ${5}\n|-\n| ${6}\n| ${7}\n|-\n|\n|\n|}",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{|": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6192b90e2569502f11e30a41ec19927b": {
      "content": "{% extends \"${1}\" %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig extends",
      "matches": {
        "ext": true
      },
      "source": "vim-snippets/snippets"
    },
    "6197074aa7b6a6ed40b291a303182aa3": {
      "content": "(deftype ${1:Name} [${2:fields}]\n\t${3:Protocol}\n\t${0:code})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defty": true
      },
      "source": "vim-snippets/snippets"
    },
    "619a71c1fb5a52ef4fa689a49601a43a": {
      "content": "[NSString stringWithFormat:@\"$1\", $2]$0",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "NSString stringWithFormat (format)",
      "matches": {
        "format": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "619d0e8544563777f3521d296e35efbd": {
      "content": "Element Should Not Be Visible    ${${1:locator}}    ${2:${optional message}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Element Should Not Be Visible",
      "matches": {
        "esnbv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "61a566401c1e46112acca1022feb1e06": {
      "content": "def method_missing(meth, *args, &blk)\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defmm": true
      },
      "source": "vim-snippets/snippets"
    },
    "61a5d43163211bb6b9139e153d417026": {
      "content": "-moz-border-image: url('${1}') ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:m+": true
      },
      "source": "vim-snippets/snippets"
    },
    "61aa3fbdf0cadef03feed5a3215611db": {
      "content": "- (${1:id})${2:method};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "md": true
      },
      "source": "vim-snippets/snippets"
    },
    "61ac79e90ae29566d2b6660751ec51f3": {
      "content": "int ${1:x} = threadIdx.x + blockIdx.x * blockDim.x;\nint ${2:y} = threadIdx.y + blockIdx.y * blockDim.y;\nint ${3:z} = threadIdx.z + blockIdx.z * blockDim.z;",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Get current X,Y,Z index (3D)",
      "matches": {
        "ixyz": true
      },
      "source": "vim-snippets/snippets"
    },
    "61b4a40f93c80f74ccd3e333b36d1687": {
      "content": "when {\n\tchangeRequest '${1:changeRequest}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whenchangeRequest": true
      },
      "source": "vim-snippets/snippets"
    },
    "61b7c0ad05a2d8de97146274845eddb6": {
      "content": "import { Injectable } from '@angular/core';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:ServiceName}Service {\n\tconstructor() { }\n\t$0\n}",
      "doc": "Angular Service with Injectable ProvidedIn Root",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-service",
      "matches": {
        "a-service": true,
        "angular service": true
      },
      "source": "javascript/angular"
    },
    "61b89ffa551cc54144fa8a15993cd00b": {
      "content": "[\n\t${VISUAL}$0\n],",
      "doc": "",
      "filetype": "json",
      "grammar": "snu",
      "label": "Array",
      "matches": {
        "a": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "61bb6af1c3475cf9e00cbf7a2784f798": {
      "content": "_.next()",
      "doc": "var wrapped = _([1, 2]);\n\nwrapped.next();\n// => { 'done': false, 'value': 1 }\n\nwrapped.next();\n// => { 'done': false, 'value': 2 }\n\nwrapped.next();\n// => { 'done': true, 'value': undefined }\n\nGets the next value on a wrapped object following the\n[iterator protocol](https://mdn.io/iteration_protocols#iterator).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-next",
      "matches": {
        "lodash next": true
      },
      "source": "javascript/lodash"
    },
    "61bda9010f69098d3437ee8811ea786f": {
      "content": "(define-values (${1}) (${0}))",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "define-values",
      "matches": {
        "defv": true
      },
      "source": "vim-snippets/snippets"
    },
    "61c8e6bd6ff9815aff072ba4fe9a3b2b": {
      "content": "display -moz-inline-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:mib": true
      },
      "source": "vim-snippets/snippets"
    },
    "61d25fa616adf95123d21492b62d9ea5": {
      "content": "fun (${1:Parameters}) -> ${2:body} end",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "61da5d496da92a177842827768022471": {
      "content": "/**\n * ${3:#:undocumented class variable}\n *\n * @var ${4:#:string}\n **/\n${1:#:var} $${2};${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc_class_var": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "61daa3c477310dada33a03e09e5748c3": {
      "content": "\\begin{equation}\n\t${1:TARGET}\n\\end{equation}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{equation} \\equation": true,
        "equation": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "61def8d4dac231f09334f4bd9237593f": {
      "content": "config(function($1) {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-angular",
      "grammar": "snu",
      "label": "angular config",
      "matches": {
        "aconf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "61e0dcc2fab046e96f7a73915af225e3": {
      "content": "align-items baseline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "61e60d65e1d8f779fa3e624f16c8f507": {
      "content": "beforeRouteUpdate(to, from, next) {\n\t${1:next();}\n},",
      "doc": "Vue Router component guards beforeRouteUpdate",
      "filetype": "vue-script-router",
      "grammar": "lsp",
      "label": "Vue Router beforeRouteUpdate",
      "matches": {
        "vbeforerouteupdate": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "61eff58612a94c8a83e4fe9e82a80ab0": {
      "content": "import '${1:module}'$0",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "importNoModuleName",
      "matches": {
        "imn": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "61f27c43d6881258f9cc392b49c2fc86": {
      "content": "__MODULE__",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "MOD": true
      },
      "source": "vim-snippets/snippets"
    },
    "61f6ceb5a79083e6e4330c09fdf8c861": {
      "content": "try\n{\n\t${VISUAL}$0\n}\ncatch (${1:Exception} ${2:e})\n{\n\tthrow;\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "try catch block",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "62068d8ede7799eef8be053d3c40891a": {
      "content": "justify-content: end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "6206f3291b1b7df96687e46307e8dc92": {
      "content": "${1:FIELDNAME} = forms.ModelChoiceField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "ModelChoiceField",
      "matches": {
        "fmochoice": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "620bf18cc5d437007de33b60d7e6db66": {
      "content": "assertNull(\"${1:Failure message}\", ${2:object});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "an": true
      },
      "source": "vim-snippets/snippets"
    },
    "62273380e45d29384af064fb4f8fb683": {
      "content": "match {\n\tcase ${1} => ${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "match {\\n  case .. => ..",
      "matches": {
        "match": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6228197c3d9a51d240305b8ea38245f3": {
      "content": "$.trim(${1:str})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$trim": true
      },
      "source": "snippets/coffee"
    },
    "62292df89df344d8f1f6003e8e3724f8": {
      "content": "for ${1:I} in ${2} loop\n\t${0}\nend loop;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "622d5747600135c283a03fb276e898fe": {
      "content": "border-style: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "62315d492e60208e6de1af11bc18325f": {
      "content": "list-style-position outside",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisp:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "62371cd5bb11f133ee12493b8c5080bc": {
      "content": "validates :${1:attribute}, exclusion: { in: ${0:%w( mov avi )} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ve": true
      },
      "source": "vim-snippets/snippets"
    },
    "623c74a558370b8e374da5713c1f7c1f": {
      "content": "${1:obj}.show '${2:slow/400/fast}', ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "showc": true
      },
      "source": "snippets/coffee"
    },
    "623f729949e5fb9ce25be3e9bbe87e69": {
      "content": "resize: vertical;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "623f8dc4d4a829c73e45c6b9e9e2a0d2": {
      "content": "{% while ${1:condition} %}\n  ${0}\n{% end %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "62423f3c3e9ff2db016cdf4a7280a30e": {
      "content": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
      "doc": "Imports a specific portion of the module by assigning a local alias in ES6 syntax",
      "filetype": "base",
      "grammar": "lsp",
      "label": "importas",
      "matches": {
        "base import as": true
      },
      "source": "javascript/base"
    },
    "62488279a32cca3eab254eb42eccf73c": {
      "content": "for ${1:rec} in (${2: select}) loop\n\t${0}\nend loop;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fors": true
      },
      "source": "vim-snippets/snippets"
    },
    "624cf59e247d2bc935349f5542218329": {
      "content": "\ncomponentWillMount() {\n\t$0\n}\n",
      "doc": "Invoked once, both on the client and server, immediately before the initial rendering occurs",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentWillMount",
      "matches": {
        "cwm": true
      },
      "source": "vscode-react/snippets"
    },
    "62567e6a7b1e99a77fa39541b9fd8c25": {
      "content": "{% if ${1:expr} %}\n\t$2\n{% else %}\n\t$3\n{% endif %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "if/else",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "625d51b661f0bdd6ea5f4406125c3eb5": {
      "content": "<input type=\"image\" name=\"${1}\" id=\"${2:$1}\" src=\"${3}\" alt=\"${4}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:image": true
      },
      "source": "vim-snippets/snippets"
    },
    "6267333e83639a7aef79d46f9092a607": {
      "content": "pluralize:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pluralize": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "62718d9769a7dcb893b0c0fd01a07874": {
      "content": "overflow-y: visible;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "627af28aacf4aa8f050a6c55bf0510f5": {
      "content": "${1:obj}.attr({'${2:attr1}': '${3:value1}', '${4:attr2}': '${5:value2}'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "attrm": true
      },
      "source": "snippets/coffee"
    },
    "627ba93fbc83c97cb87852c9af67c33c": {
      "content": "Page Should Contain Button    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Contain Button",
      "matches": {
        "pscb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6284bd2e249e0df8daa785032db5e904": {
      "content": "writeln(${1:/*args*/});",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "writeln (wr)",
      "matches": {
        "wr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6284cd89d4b8624f0795e7c2c4be6008": {
      "content": "object.from()",
      "doc": "object.from(fromKey: string, toKey: string, alias: boolean = false): Schema\n\nTransforms the specified key to a new key. If alias is true then the old key will be left.let schema = object({\n  myProp: mixed(),\n  Other: mixed()\n})\n  .from(\"prop\", \"myProp\")\n  .from(\"other\", \"Other\", true);\n\nschema.cast({ prop: 5, other: 6 }); // => { myProp: 5, other: 6, Other: 6 }\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "object-from",
      "matches": {
        "yup object from": true
      },
      "source": "javascript/yup"
    },
    "628543bd61760945b157545e15ec1d5e": {
      "content": "${1:name}.asInstanceOf[${2:T}]",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as": true
      },
      "source": "vim-snippets/snippets"
    },
    "628a34a0a5b74f71abb60b08158ec223": {
      "content": ".. table:: ${1:#:TITLE}\n\t${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "directive_table",
      "matches": {
        "table": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "62a06ae7e06b31304a1521c9936ba55e": {
      "content": "border-bottom-right-radius: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbrrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "62a320c5cecde1b29ff8c2e6cf67b37a": {
      "content": "if ${1} then\n\t${0}\nend if;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "62ac68028ced461ebbc6cd0f2903e7fc": {
      "content": "\\begin{figure}[${1}]\n\t\\centering\n\t\\begin{tikzpicture}[${2}]\n\t\t${3:TARGET}\n\t\\end{tikzpicture}\n\t\\caption{${4}}\n\t\\label{${5}}\n\\end{figure}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "figuretikz": true,
        "tikzfig": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "62b11b46a61705f99a0eafdd680e9ae8": {
      "content": "public",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pu": true
      },
      "source": "vim-snippets/snippets"
    },
    "62b6b967d9a23a41776b9377ad4da526": {
      "content": "class ${1:#:NAME} {\n  constructor(${2:#:ARGS}) {\n    ${0:TARGET}\n  }\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "class {...}",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "62b883e49469bbeeb58d398754fc09f9": {
      "content": "xhr :post, :${1:create}, ${2:object}: ${3:object}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xpost": true
      },
      "source": "vim-snippets/snippets"
    },
    "62c215d27246b4f5803acf67d53b02e9": {
      "content": "if (${1:/* condition */}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "62c32c74ef2f7333c87201d917a421a1": {
      "content": "show errors;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "err": true
      },
      "source": "vim-snippets/snippets"
    },
    "62c4030aaedb89e850aef64f5c8b6c2c": {
      "content": "let ${1:variable} = ${0: value}",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "62cf72cb7b08b63576022e611fe3fcce": {
      "content": "${1:deferred}.isRejected()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Disrej": true
      },
      "source": "snippets/javascript"
    },
    "62d34f6dbda184e31d610749ba6f7606": {
      "content": "<datalist>\n\t${0}\n</datalist>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "datalist": true
      },
      "source": "vim-snippets/snippets"
    },
    "62daaf603f6280495acae1e7092a17de": {
      "content": "PropTypes.oneOfType([\n\t$0\n]),",
      "doc": "An object that could be one of many types",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeOneOfType",
      "matches": {
        "ptet": true
      },
      "source": "vscode-react/snippets"
    },
    "62e8bc1f70eb6c5e333fc750952fbfb8": {
      "content": "${1:obj}.parent('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parent": true
      },
      "source": "snippets/coffee"
    },
    "62ede32695a2a70ba4d78f941e6a10ab": {
      "content": "finally(function()\n  ${0:TARGET}\nend)",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "finally(func)",
      "matches": {
        "finally": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "62f3c9f11cfe830bcc313374af7e2ce2": {
      "content": "Serial.read();",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sr": true
      },
      "source": "vim-snippets/snippets"
    },
    "62f8d703b283c59794740852f440dab6": {
      "content": "this.setState({$0})",
      "doc": "Performs a shallow merge of nextState into current state",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-component-set-state-object",
      "matches": {
        "react componentsetstateobject": true,
        "sst": true
      },
      "source": "javascript/react"
    },
    "62fd4d69358deec301604718e71280db": {
      "content": "{-| ${0}\n-}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/snippets"
    },
    "62ffba8af758b71b3992e90d51a6e033": {
      "content": "password(name: \"${1:PASSWORD}\" , defaultValue: \"${2:SECRET}\" , description: \"${3:Enter a password}\")\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parampassword": true
      },
      "source": "vim-snippets/snippets"
    },
    "630982139b94cd588364bef1082a0b8f": {
      "content": "<%= link_to \"${1:Link text...}\", ${2:parent}_${3:child}_path(${0:@$2}) %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "linpp": true
      },
      "source": "vim-snippets/snippets"
    },
    "630cf3336fb18a18ea30495839860a2c": {
      "content": "(${1:a}, ${0:b})",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tup": true
      },
      "source": "vim-snippets/snippets"
    },
    "630ed79a4d7053fa93695c4f5c68e981": {
      "content": "add_library(${1:lib} ${${0:srcs}})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lib": true
      },
      "source": "vim-snippets/snippets"
    },
    "630edd3edfec7af1502707afbaffbde1": {
      "content": "$scope.${1:variable} = ${2:variable}\n${3}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$va": true
      },
      "source": "snippets/coffee"
    },
    "6316b52ae0d0d80e4a7792528e0a053c": {
      "content": "has_many :${1:object}s${2:, class_name: \"$1\", foreign_key: \"${4:reference}_id\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "has_many (hm)",
      "matches": {
        "hm": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6319aafcc49236c79ef4aaa7c4553c4b": {
      "content": "<%= form_tag(${1:\"${2:/users}\"}, method: ${3::post}) %>\n\t$0\n</form>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "form_tag",
      "matches": {
        "ft": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "632a77f22c52b38e64f105e5d6f11747": {
      "content": "const ${1:reducerName} = (state={}, action) => {\n\tswitch(action.type) {\n\t\tcase ${1:action}:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t$2\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t};\n};",
      "doc": "",
      "filetype": "javascript-redux",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rdc": true
      },
      "source": "snippets/javascript"
    },
    "632bd143d8f861c840b63ec9fbaea019": {
      "content": "const ${1:memoizedCallback} = useMemo(() => ${2}(${3}), [$3]);",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "useMemo",
      "matches": {
        "usem": true
      },
      "source": "snippets/javascript"
    },
    "632d9d1d5ecdad17d407bc7c733f7281": {
      "content": "for (int ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {\n\t${0:$1[$2]}\n};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "6334488d01dca6445e33ad50c9239e11": {
      "content": "find(:all${1:, conditions: ['${2:${3:field} = ?}', ${5:true}]})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "find(:all)",
      "matches": {
        "fina": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "633898cec2fad5d6c3ea17b378ec4155": {
      "content": "pipeline {\n\tagent any\n\tstages {\n\t\tstage('${1:Build}') {\n\t\t\tsteps {\n\t\t\t\tsh '${2:make}'\n\t\t\t}\n\t\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "psss": true
      },
      "source": "vim-snippets/snippets"
    },
    "6338dcedc84df73b74b75a69e2c9417f": {
      "content": "cursor pointer",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:p": true
      },
      "source": "vim-snippets/snippets"
    },
    "633c5efd61a4130cbb67b4fa7a0e55d0": {
      "content": "cursor: help",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:he": true
      },
      "source": "vim-snippets/snippets"
    },
    "634ef9006ded665c6d790b3448a14cac": {
      "content": "white-space-collapse: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc": true
      },
      "source": "vim-snippets/snippets"
    },
    "63581f1b4ccf0d25fd4fdf9a8f520f56": {
      "content": "+------------------+------------+-----------------------+------------+\n|${1:#:cel} | | | |\n+==================+============+=======================+============+\n| | | | |\n+------------------+------------+-----------------------+------------+\n| | | | |\n+------------------+------------+-----------------------+------------+",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "grid_table",
      "matches": {
        "table_grid": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "63625b6ba96c49971bcc530aa2850c15": {
      "content": "import { observer } from '@ember/object';",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "import { observer } from '@ember/object';",
      "matches": {
        "prooimport": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "63659734a44d1b118b58b336ce124ab6": {
      "content": "(${1:first}:\\${2:name})(${0})",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":\\": true
      },
      "source": "vim-snippets/snippets"
    },
    "6368018f75a1a5419872c2500c5fb8cb": {
      "content": "export const ${1:action} = createAction('[${2:Source}] ${3:Event}', props<{${4:key}: ${5:type}}>());",
      "doc": "Creates an NgRx Action with Props",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "NgRx Create Action w/ Props",
      "matches": {
        "a-ngrx-create-action-props": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "636d9fcd46f22e9719f9f2ff74942805": {
      "content": "Vue.directive('${1:directiveName}', {\n\tbind(el, binding, vnode) {\n\t\tel.style.${2:arg} = binding.value.${2:arg};\n\t}\n});",
      "doc": "vue custom directive",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-custom-directive",
      "matches": {
        "vc-direct": true,
        "vue custom directive": true
      },
      "source": "javascript/vue"
    },
    "63718d6ef8a4a5f6588dfaceb8595627": {
      "content": "outline: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "637602d95734eb0528a08c17f08b3fc0": {
      "content": "protected:\n\t${1:/*members*/}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "protected (prot)",
      "matches": {
        "prot": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "638003ed3f7cc0974c67aa7aaa9eeaa1": {
      "content": "{#each ${1:items} as ${2:item}, (${3:key})}\n\t${4: <!-- content here -->}\n{/each}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-each-key-block",
      "matches": {
        "sveach-key": true,
        "svelte each key": true
      },
      "source": "javascript/svelte"
    },
    "63879dff5300b1e870238fbe7b423451": {
      "content": "try\n{\n\t${0:${VISUAL}}\n}\ncatch (${1:System.Exception})\n{\n\tthrow;\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "638aaa83433939b3e9057dfc0be48ea2": {
      "content": "$this->session->userdata(\"${1:item}\");${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_session_userdata": true
      },
      "source": "vim-snippets/snippets"
    },
    "6391fcfd712baae6087ca0f59e6c27a9": {
      "content": "PropTypes.oneOfType([\n\t$0\n]),",
      "doc": "An object that could be one of many types",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-one-of-type",
      "matches": {
        "prop-types oneoftype": true,
        "ptet": true
      },
      "source": "javascript/prop-types"
    },
    "63924af4a77f87678d83f71b8ca33fb5": {
      "content": "case ${1:value}:\n\t$2\n\tbreak;",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "case",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "63939dd0309bbfe5da5754ddee03d3ef": {
      "content": "<%= javascript_include_tag ${0::all} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jit": true
      },
      "source": "vim-snippets/snippets"
    },
    "6394584fba7a57937c162253e5d3f33d": {
      "content": "sub {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asub": true
      },
      "source": "vim-snippets/snippets"
    },
    "6399e1f8343172fa7ead7449972b7c64": {
      "content": "public bool ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb+": true
      },
      "source": "vim-snippets/snippets"
    },
    "639b476f2dfde08d1cd90c82bbd47ee4": {
      "content": "$.ajax({\n\turl: '${1:mydomain.com/url}',\n\ttype: '${2:POST}',\n\tdataType: '${3:xml/html/script/json}',\n\tdata: $.param( $('${4:Element or Expression}') ),\n\tcomplete: function (jqXHR, textStatus) {\n\t\t${5:// callback}\n\t},\n\tsuccess: function (data, textStatus, jqXHR) {\n\t\t${6:// success callback}\n\t},\n\terror: function (jqXHR, textStatus, errorThrown) {\n\t\t${0:// error callback}\n\t}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajax": true
      },
      "source": "snippets/javascript"
    },
    "639dc3e73c897ee1b2a33888b3b52201": {
      "content": "PropTypes.oneOf(['$0']),",
      "doc": "Prop type limited to specific values by treating it as an enum",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeEnum",
      "matches": {
        "pte": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "639e47e4723dcbe0d5848844ca7cfc06": {
      "content": "border-top: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdt": true
      },
      "source": "vim-snippets/snippets"
    },
    "63a645e9e92e6c0f9c4994a3aeabb22e": {
      "content": "const dispatch = useDispatch();",
      "doc": "Redux useDispatch() hook",
      "filetype": "redux",
      "grammar": "lsp",
      "label": "redux-usedispatch-hook",
      "matches": {
        "redux usedispatch": true,
        "rxusdh": true
      },
      "source": "javascript/redux"
    },
    "63ac5c5f87b30485e9747770c5a19bad": {
      "content": "try {\n\t${0:${VISUAL}}\n} catch(${1:Exception} ${2:e}) {\n} finally {\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tryf": true
      },
      "source": "vim-snippets/snippets"
    },
    "63aeb77cbacce88f3b3ae86ccb8025f8": {
      "content": "{% for ${1} in ${2} %}\n\t${0}\n{% endfor %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig for",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "63b394af033157bb285e51fa82df5a1b": {
      "content": "Console.Write(${1:#:message});${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "print": true,
        "write": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "63ba4c09e058b1b7d7cb881c15bbaa03": {
      "content": "float: right;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "63bbb8da5dd6163d7ff7449dcfd53190": {
      "content": "__PACKAGE__->${0:package_method}()",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pkgm": true
      },
      "source": "vim-snippets/snippets"
    },
    "63bda51dc016c0a2cb64526c9e888fae": {
      "content": "t.timestamps\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tctss": true
      },
      "source": "vim-snippets/snippets"
    },
    "63c8d00d75c84fc818d7a42b1f73d495": {
      "content": "[${1:id}]: https://${2:url}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[:": true
      },
      "source": "vim-snippets/snippets"
    },
    "63d13e65ed0d3e2cf6d852283137c8e9": {
      "content": "% if ${1:condition}:\n\t${2:}\n% else:\n\t${3:}\n% endif",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "if/else",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "63d29786a5c1235def0b335927e08d9a": {
      "content": "overflow-y scroll",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "63d404c1a2923584a4e2c6e03ee91ec8": {
      "content": "display: grid;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:g": true
      },
      "source": "vim-snippets/snippets"
    },
    "63dc8f110082d140cd718e06f8a599d9": {
      "content": "std::vector<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vector": true
      },
      "source": "vim-snippets/snippets"
    },
    "63e60fe20cd6dc543080c19318a6f2f0": {
      "content": "expect(${1:target})$0",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect (coffee)",
      "matches": {
        "ex": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "63e8b847f1887fe113a6b887d5c0ae3a": {
      "content": "import sbt._\nclass ${1:Name}(info: ProjectInfo) extends DefaultWebProject(info) {\n\tval liftVersion = \"${0:2.3}\"\n\toverride def libraryDependencies = Set(\n\t) ++ super.libraryDependencies\n\tval snapshots = ScalaToolsSnapshots\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "webproject": true
      },
      "source": "vim-snippets/snippets"
    },
    "63ea45feb94b6f38d3d5886b7980f607": {
      "content": "border-corner-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtli:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "63efd5dc89a0b493e562be098e026916": {
      "content": "System.out.println(${0});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "println": true
      },
      "source": "vim-snippets/snippets"
    },
    "63f29530d2fcf4d5d2873ebee64ed728": {
      "content": "{% autoescape ${1:#:strategy} %}\n\t${0:TARGET}\n{% autoescape %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% autoescape ... %} ... {% endautoescape %}",
      "matches": {
        "autoescape": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "63f3e2661adb3b985f5c77fb488e549e": {
      "content": "Run Keyword And Expect Error    ${1:My error}    ${2:${kw}}    ${3:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword And Expect Error",
      "matches": {
        "rkaee": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "63f6b706bafd0963c50f183f9e3d0086": {
      "content": "hasattr(${1:#:obj}, ${2:#:attr})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "hasattr(..., ...)",
      "matches": {
        "hasattr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "63f9d777b8c0afa20b32f385c0a35f96": {
      "content": "<input type=\"datetime\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:datetime": true
      },
      "source": "vim-snippets/snippets"
    },
    "63fcb5ea37be8a81878e3235a235271b": {
      "content": "${1:this}.set('${2:property}', ${3:value});",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "this.set('property', value);",
      "matches": {
        "eset": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6415402bc20dc8ed9d46f4ab2024f05b": {
      "content": "randomSeed(${0:value});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "randomSseed": true
      },
      "source": "vim-snippets/snippets"
    },
    "6417590a43fbfe09837b7618af20719d": {
      "content": "${1:ptr} = (${2:type}*) malloc(sizeof($2));",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mlc": true
      },
      "source": "vim-snippets/snippets"
    },
    "6422847760294639b6373932dbff83a7": {
      "content": "echo CHtml::ajaxButton('${1:label}', '${2:url}',array('${3:ajaxOptionName}'=>${4:ajaxOptionValue}),array('${5:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhajb": true
      },
      "source": "vim-snippets/snippets"
    },
    "6422e47bb96bb9fe36e739929fdaa173": {
      "content": "${1:FIELDNAME} = models.SmallIntegerField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "SmallIntegerField",
      "matches": {
        "msmallint": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "64254e832ae6342ef30f78f885281788": {
      "content": "<VirtualHost ${1:example.org}>\n\tServerAdmin webmaster@${1}\n\tDocumentRoot /www/vhosts/${1}\n\tServerName ${1}\n\tErrorLog logs/${1}-error_log\n\tCustomLog logs/${1}-access_log common\n</VirtualHost>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vhost": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6426f164ac822c0ea6455e7262b62a36": {
      "content": "vertex(${1:x}, ${2:y}, ${3:z}${4:, }${5:u}${6:, }${0:v});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "3D",
      "matches": {
        "vertex": true
      },
      "source": "vim-snippets/snippets"
    },
    "642d9eefb6f185dbf16d16cc1852be12": {
      "content": "chapter = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "chapter": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "643e9dcd03260f256bbd6cb593154a15": {
      "content": "font-smooth: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm": true
      },
      "source": "vim-snippets/snippets"
    },
    "64462a2a946a028fb6b73a37f2992bb3": {
      "content": "margin-bottom: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb": true
      },
      "source": "vim-snippets/snippets"
    },
    "64464acb2f678392216cae3e6ffe24b9": {
      "content": "background-size cover",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz:cv": true
      },
      "source": "vim-snippets/snippets"
    },
    "6448b1ae87af5a379cf07a7d209da526": {
      "content": "export const Global${1} = createGlobalStyle`\n  ${2}\n`;",
      "doc": "Export createGlobalStyle",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-export-create-global-style",
      "matches": {
        "exscg": true,
        "styled-components export createglobalstyle": true
      },
      "source": "javascript/styled-components"
    },
    "644c796177ba547b8f55486db7e4a9e2": {
      "content": "border-top-right-radius: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtrrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "644cd1f15f644a9149d9ebabc5089edf": {
      "content": "text-height auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "644d84b367bd125d8616817c2d9995f0": {
      "content": "# Client App\nFROM johnpapa/angular-cli as client-app\nLABEL authors=\"${1:John Papa}\"\nWORKDIR /usr/src/app\nCOPY [\"package.json\", \"npm-shrinkwrap.json*\", \"./\"]\nRUN npm install --silent\nCOPY . .\nRUN ng build --prod\n\n# Node server\nFROM ${2:node:12-alpine} as node-server\nWORKDIR /usr/src/app\nCOPY [\"package.json\", \"npm-shrinkwrap.json*\", \"./\"]\nRUN npm install --production --silent && mv node_modules ../\nCOPY ${3:server.js} .\nCOPY ${4:/server} /usr/src/app/server\n\n# Final image\nFROM ${2:node:12-alpine}\nWORKDIR /usr/src/app\nCOPY --from=node-server /usr/src /usr/src\nCOPY --from=client-app /usr/src/app/dist ./\nEXPOSE ${5:3000}\n# CMD [\"node\", \"server.js\"]\nCMD [\"npm\", \"start\"]\n$0",
      "doc": "Multi-stage Node and Angular Dockerfile",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "multi-stage-node-and-angular-dockerfile",
      "matches": {
        "angular multi-stage node and dockerfile": true,
        "docker-angular-node-multi-stage": true
      },
      "source": "javascript/angular"
    },
    "6450c72aae33444097d90ee7bd80e3c9": {
      "content": "-moz-border-image: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "645265dcde569376d9343379070ec04d": {
      "content": "validates_acceptance_of",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_acceptance_of",
      "matches": {
        "vb": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6452ab2754bba2650b612e3c32473b05": {
      "content": "${1:obj}.last('${1:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "last": true
      },
      "source": "snippets/coffee"
    },
    "64581930cc85b1c0021f187519c3d754": {
      "content": "alt=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alt": true
      },
      "source": "vim-snippets/snippets"
    },
    "645826cd7290dba4069c657a981c88d1": {
      "content": "font-effect: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "646a1e669c7ec7063c9974513b3c9705": {
      "content": "render text: '${0:text to render}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rt": true
      },
      "source": "vim-snippets/snippets"
    },
    "646d9c0fc1036dd53f703696247f190c": {
      "content": "self.",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        ".": true
      },
      "source": "vim-snippets/snippets"
    },
    "646e44a205b3646fc30ec3c68b074ce0": {
      "content": "overflow-style panner",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:p": true
      },
      "source": "vim-snippets/snippets"
    },
    "64708245b1e07d766a21ae1181f400b9": {
      "content": "&#x2192;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "right": true
      },
      "source": "vim-snippets/snippets"
    },
    "6471af2276ed55e781bbab71d6cb6956": {
      "content": "var $1 = new sap.m.Text({\n\t\t\ttext :$2,\n\t\t\ttextDirection :$3,\n\t\t\tvisible :$4,\n\t\t\twrapping : $5,\n\t\t\ttextAlign : $6,\n\t\t\twidth :$7,\n\t\t\tmaxLines :$8\n\t\t});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapmtext": true
      },
      "source": "vim-snippets/snippets"
    },
    "6474136bf1fb0a5d468f7efa0406bbf7": {
      "content": "image::${1:example.jpg}[${2:Description}]\n${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "image::file[desc]",
      "matches": {
        "image": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "647a7a8619ea402edc7c432971de80c3": {
      "content": "matrix(${1:data}, nrow = ${2:rows}, ncol = ${0:cols})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mat": true
      },
      "source": "vim-snippets/snippets"
    },
    "647acf39f90a2a6e7a133e1de5c34b11": {
      "content": "justify-content: space-evenly",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "648267638e01b921a36938f15b40e37a": {
      "content": "\\begin{aligned}\n        ${1:TARGET}\n\\end{aligned}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{aligned} \\aligned": true,
        "aligned": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6483b713c634c84f3d073f4c0c7baad2": {
      "content": "assert!(${1:predicate});",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "assert!",
      "matches": {
        "as": true
      },
      "source": "vim-snippets/snippets"
    },
    "648575b605a07e79bc66ae6874eb4f66": {
      "content": "<?php\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<?": true
      },
      "source": "vim-snippets/snippets"
    },
    "648ae7beb7c9361fc711dd1fde71a54b": {
      "content": "import ${0:module_name}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "648b83d195bdce5eb3153a9ba0d18ccc": {
      "content": "upto(${1:1.0/0.0}) { |${2:n}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "upt": true
      },
      "source": "vim-snippets/snippets"
    },
    "648c84836d590d603fa6141d558efe37": {
      "content": "import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport const store = new Vuex.Store({\n\tstate: {\n\t\t${1:key}: ${2:value}\n\t}\n});",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vstore": true
      },
      "source": "vim-snippets/snippets"
    },
    "64947399562e30f6554f8049544b8082": {
      "content": "| md5",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "md5": true
      },
      "source": "vim-snippets/snippets"
    },
    "649a54cf00bf2001caac5fd564adfc5d": {
      "content": "| remove_first: '${1:string}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "remove_first": true
      },
      "source": "vim-snippets/snippets"
    },
    "649bec706f7d3e6f065ac575dc07f231": {
      "content": "__LINE__",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "LINE": true
      },
      "source": "vim-snippets/snippets"
    },
    "64a1b738411f789f22192c6c375d18ed": {
      "content": "-> { ${1} }.must_raise ${0:StandardError}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mra": true
      },
      "source": "vim-snippets/snippets"
    },
    "64a37d1edd1aef1c2faba6d28d9fdad9": {
      "content": "[...Array(${1:length}).keys()]${0}",
      "doc": "sequence of 0..n",
      "filetype": "base",
      "grammar": "lsp",
      "label": "sequence-of-0-n",
      "matches": {
        "base sequence of": true
      },
      "source": "javascript/base"
    },
    "64aca927fc35528434a3fc8136740c06": {
      "content": "${1:obj}.toggleClass('${2:class name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "togclass": true
      },
      "source": "snippets/javascript"
    },
    "64b16e87721b7b9565b9682aafbd4c46": {
      "content": "public import ${1:/*module*/};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "public import (pimp)",
      "matches": {
        "pimp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "64c344ac8e8ce62aa4f598e580393fb3": {
      "content": "echo CHtml::activePasswordField(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhapf": true
      },
      "source": "vim-snippets/snippets"
    },
    "64c4d108883abf10a35ac6312b43ffa4": {
      "content": "IO.puts(${1})",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "puts": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "64ca0eca1e3e69fdc0d8a0db34f865d5": {
      "content": "import React, { Component } from 'react'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React, { Component }",
      "matches": {
        "imrc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "64da8cc4211ef467047527b5fa0ce82c": {
      "content": "border-style: solid",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "64e6fb66abf6d498b9a37eb0f66fcdf7": {
      "content": "times { |${1:n}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tim": true
      },
      "source": "vim-snippets/snippets"
    },
    "64ea0ebe6e8d9ecd259848c04bc19f20": {
      "content": "border-bottom-style: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbs": true
      },
      "source": "vim-snippets/snippets"
    },
    "64fa1eafa2979a69e6c17ec47babc6e7": {
      "content": "while ${1:condition}:\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "64fd420654a80243e32c843e3e35abbd": {
      "content": "font-style: normal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "650288f248f924ea53398a3346bf4663": {
      "content": "elif ${1:condition}\n\t${0}",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "65073486f00c18570ade28bc46e41637": {
      "content": "-moz-border-radius: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrz:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "650fff13131c36249733200faace7969": {
      "content": "_.kebabCase(${string})",
      "doc": "_.kebabCase('Foo Bar');\n// => 'foo-bar'\n\n_.kebabCase('fooBar');\n// => 'foo-bar'\n\n_.kebabCase('__FOO_BAR__');\n// => 'foo-bar'\n\nConverts `string` to\n[kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-kebabcase",
      "matches": {
        "lodash kebabcase": true
      },
      "source": "javascript/lodash"
    },
    "6512f84b39fc6a4706747a0f02e0f3ec": {
      "content": "${1:#:type} ${2:#:var}${3};",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "var": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "652158982b8baedd9e307509eb56c5f7": {
      "content": "use Symfony\\Component\\HttpFoundation\\File\\UploadedFile;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Symfony\\..\\File",
      "matches": {
        "usefile": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "652356338ece4eca1941566ccd552687": {
      "content": "$.ajaxStart ->\n\t${1:// handler for when an AJAX call is started and no other AJAX calls are in progress}\n${0}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxstart": true
      },
      "source": "snippets/coffee"
    },
    "653c0f8740e84df466570536291b599a": {
      "content": "%% @private",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "%p": true
      },
      "source": "vim-snippets/snippets"
    },
    "653d69f68cf70b43102a305e99a3b24e": {
      "content": "<strong>${0}</strong>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "strong": true
      },
      "source": "vim-snippets/snippets"
    },
    "653d7c224d9d792cc3e73b42b4bcf95c": {
      "content": "const express = require('express');\nconst app = express();\nconst port = process.env.PORT || ${1:port};\nconst www = process.env.WWW || '${2:./}';\napp.use(express.static(www));\nconsole.log(`serving \\${www}`);\napp.get('*', (req, res) => {\n\tres.sendFile(`index.html`, { root: www });\n});\napp.listen(port, () => console.log(`listening on http://localhost:\\${port}`));\n$0",
      "doc": "Node.js Express Server",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "node-js-express-server",
      "matches": {
        "angular node express server": true,
        "ex-node-server-simple": true
      },
      "source": "javascript/angular"
    },
    "653e35515ce8e2245f0125e8dd163f54": {
      "content": "${1:obj}.nextUntil('${2:selector expression}'${3:, 'filter expression'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nextu": true
      },
      "source": "snippets/coffee"
    },
    "653e419a5fc562bcdf67b8e3eb3b741c": {
      "content": "text-emphasis: dot;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "65433978eb2a734e51aa64890cb1728f": {
      "content": "page-break-before: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "6546421f872a99aa5ebc11cd7b2cef06": {
      "content": "grid-auto-columns: max-content",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac:mac": true
      },
      "source": "vim-snippets/snippets"
    },
    "6559945bd69822fd85f9c008685bc2f9": {
      "content": "white-space: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs": true
      },
      "source": "vim-snippets/snippets"
    },
    "655eba6888f9cad8d501bdc4d04474a4": {
      "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
      "doc": "Creates a React component class with PropTypes and ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-class-component-proptypes",
      "matches": {
        "rccp": true,
        "react component class proptypes": true
      },
      "source": "javascript/react"
    },
    "655fdb42e0c521feae271be33c77c9ef": {
      "content": "@else if ${1:condition}\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "6562cb1cc7867b69593fc4ff700abb17": {
      "content": "list-style-type square",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "656e40fa0de85de31a6e89d5c900fe4d": {
      "content": "${0:name}.view.zipWithIndex",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "zipwi": true
      },
      "source": "vim-snippets/snippets"
    },
    "65764022dbfcce7985a85feb4eb3aed5": {
      "content": "<h${1:1}>${2}</h$1>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "657a05c52504f9d886761c472fc15c82": {
      "content": "for ${1:i} = ${2:1} to ${3:10} do\n\t${4:(* BODY *)}\ndone",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "for",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "657e15dd3ffa2b34d9ac853e17b19048": {
      "content": "@return {${1:Type}} ${2:Description}",
      "doc": "",
      "filetype": "javascript-jsdoc",
      "grammar": "snu",
      "label": "@return {Type} Description",
      "matches": {
        "@ret": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "658ecec9147de28cac7008e0423296e1": {
      "content": "text-outline: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "to:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "65954f2b81fcd1644dc517bbb3fe93bf": {
      "content": "require('dotenv-safe').config({ path: '${1:/full/custom/path/to/your/env/vars}' })",
      "doc": "You may specify a custom path if your file containing environment variables is located elsewhere.",
      "filetype": "dotenv-safe",
      "grammar": "lsp",
      "label": "dotenv-safe-path",
      "matches": {
        "dotenv-safe path": true
      },
      "source": "javascript/dotenv-safe"
    },
    "65a4afafed596b4feb510e4ee73920c9": {
      "content": "\\${${1:name}}=    Set Variable    ${2:${value}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Set Variable",
      "matches": {
        "sv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "65ac400d40437b0e30dafe551d440201": {
      "content": "function ${1:name}(${2:args})\n  return ${3:type}\nas\n\tl_res\t$3;\nbegin\n\t${0:-- body};\n\treturn l_res;\nend $1;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pfb": true
      },
      "source": "vim-snippets/snippets"
    },
    "65b15b67f76ac6a958f3fa1b1794f3e2": {
      "content": "if ($1) {\n\t${2:# body...}\n}\nelsif ($3) {\n\t${4:# elsif...}\n}\nelse {\n\t${5:# else...}\n}\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "Conditional if..elsif..else (ifee)",
      "matches": {
        "ifee": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "65b3ddf6bf60cd168a9d7ba3c6f66258": {
      "content": "if err != nil {\n\treturn errors.Wrap(err, \"${1:message}\")\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error return wrap",
      "matches": {
        "errnw": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "65bc00ea85a0530bd1ddc7b6ed19f619": {
      "content": "Page Should Contain Image    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Contain Image",
      "matches": {
        "psci": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "65c2b65901a8ee4e951d6748ecdc2522": {
      "content": "public import",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pimp": true
      },
      "source": "vim-snippets/snippets"
    },
    "65cf3ab1b10109a230942fecff1a2f6e": {
      "content": "with($1)\n{\n\t${VISUAL}$2\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "with (with)",
      "matches": {
        "with": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "65e45bd3940fb5072b9e6380bfd95a1e": {
      "content": "overflow: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov": true
      },
      "source": "vim-snippets/snippets"
    },
    "65e6289b3695dd0eb7ee23e85e2fa997": {
      "content": "font-style ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "65e6f37b0fc9c68ac5411ef79b154b23": {
      "content": "\\\\times {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "cross product",
      "matches": {
        "\\x": true
      },
      "source": "vim-snippets/snippets"
    },
    "65e7253c667db92d5e9b17ec15d2483f": {
      "content": "if (${1:true}) {\n\t${0:${VISUAL}}\n} else {\n\t${2}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "if (condition) { ... } else { ... }",
      "matches": {
        "ife": true
      },
      "source": "snippets/javascript"
    },
    "65eaead3f25c2d86e8ea51e12fbaf9ed": {
      "content": "[routerLink]=\"['${1:routePath}', ${2:routeParameterValue}]\"\nrouterLinkActive=\"${3:router-link-active}\"$0",
      "doc": "Angular routerLink with a route parameter",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrouterlinkwithparameter",
      "matches": {
        "a-routerlink-param": true,
        "angular ng router link with parameter": true
      },
      "source": "javascript/angular"
    },
    "65eaec99c0a2a59e7878c78c9ae6611d": {
      "content": "line-height: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lh": true
      },
      "source": "vim-snippets/snippets"
    },
    "65ef90c56777c693026d4f301fb6766b": {
      "content": "redirect_to :back",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to :back",
      "matches": {
        "reb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "65f2650da2760aaa6ab432f7926e7901": {
      "content": "impl ${1:Type/Trait}${2: for $3} {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Struct/Trait implementation",
      "matches": {
        "impl": true
      },
      "source": "vim-snippets/snippets"
    },
    "65f71812107c52ba6af88be1d361f76a": {
      "content": "{% spaceless %}\n\t${0:TARGET}\n{% endspaceless %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% spaceless %} ... {% endspaceless %}",
      "matches": {
        "spaceless": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "65fb0b1b71c8d5429d153db80ccaa25e": {
      "content": "export const ${1} = styled.${2}.attrs({\n  ${3}: ${4}\n})`\n  ${5}\n`;",
      "doc": "Export styled-component with attributes",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-export-styled-component-with-attributes",
      "matches": {
        "exscattrs": true,
        "styled-components export component with attributes": true
      },
      "source": "javascript/styled-components"
    },
    "65ff89cd3a5ccb24c8f7c2a8a5e0f124": {
      "content": "${1:name} <- function(${2:parameters}) {\n   ${3:selected}\n}",
      "doc": "Named function",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "function",
      "matches": {
        "function": true
      },
      "source": "vscode-R/snippets"
    },
    "66067eeb019fc1957164ab5121af6b3e": {
      "content": "-moz-border-radius ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrz:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "6608f011d678339eb13192f62f732df6": {
      "content": "$this->renderDynamic('${1:callback}', array('${2:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yrdi": true
      },
      "source": "vim-snippets/snippets"
    },
    "6610709fe842cecb10cf244f1a3d1c1a": {
      "content": "outline-color ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oc": true
      },
      "source": "vim-snippets/snippets"
    },
    "6610daed32ddc7732990b8c500bd9bbb": {
      "content": "outline: ${1:1px} ${2:solid} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o+": true
      },
      "source": "vim-snippets/snippets"
    },
    "6615f813d9864d34d3d5f7db67c0c1e9": {
      "content": "content: close-quote;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:cq": true
      },
      "source": "vim-snippets/snippets"
    },
    "661902b9cabb0eba1982c4fabe858d6d": {
      "content": "catch($1Exception e)\n{\n\t${2:/*handle exception*/}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "catch (catch)",
      "matches": {
        "catch": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "661bcd25fcaf09fbe36f11814cefe2e4": {
      "content": "${1:public} ${2:String} get${3:}(){\n\treturn this.${0:};\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "get": true
      },
      "source": "vim-snippets/snippets"
    },
    "661dece2997cd735d4451b7f45b1baf2": {
      "content": "text-decoration ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td": true
      },
      "source": "vim-snippets/snippets"
    },
    "6627763cc3a36b63ab932dfd310bbd42": {
      "content": "background-origin: padding-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo:pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "662c2ba8ba22038ebc84871029817acf": {
      "content": "/**\n* @Route(\"/${1:route_name}\", name=\"$1\")\n* @Template()\n*/\npublic function $1Action($2)\n{\n\t$3\n\treturn ${4:[];}$0\n}",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony 2 Controller action",
      "matches": {
        "sfa": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "662e3f026c65ba35e602dc20493aa5f1": {
      "content": "div(ng-show='${1}')",
      "doc": "",
      "filetype": "jade",
      "grammar": "snu",
      "label": "",
      "matches": {
        "show": true
      },
      "source": "vim-snippets/snippets"
    },
    "663e4199b3e3614829c949df357c9253": {
      "content": "console.time(\"${1:label}\");\n${0:${VISUAL}}\nconsole.timeEnd(\"$1\");",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.time ... console.timeEnd",
      "matches": {
        "ctime": true
      },
      "source": "snippets/javascript"
    },
    "663e5c25fd500058bb2b00a4c2c5234b": {
      "content": "justify-self center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "663f78f25eca88306569d4db6596d111": {
      "content": "<colgroup>\n\t<col>\n\tcol+${0}\n</colgroup>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "colgroup+": true
      },
      "source": "vim-snippets/snippets"
    },
    "6641e0aa417555125626734d707eafb8": {
      "content": "top: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "66555973d0eabd58259f6e2391214833": {
      "content": "Yii::app()->clientScript->registerScriptFile('${1:scriptUrl}', CClientScript::POS_${0:END});",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yregsf": true
      },
      "source": "vim-snippets/snippets"
    },
    "6657ca033a2dae134ebbcd7863816838": {
      "content": "$.Callbacks()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "C": true
      },
      "source": "snippets/javascript"
    },
    "665bdbc64ac0c851bc6a7d79d1522042": {
      "content": "// enable or disable writing into the depth buffer\ngl.glDepthMask(${0:flag});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl depth mask",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "665c580e54fa3ee7c4ad9d452fe61757": {
      "content": "font-style: oblique",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "6662543b1882319d672905fac586cf23": {
      "content": "<%= ${1:f}.text_area :${0:attribute} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffta": true
      },
      "source": "vim-snippets/snippets"
    },
    "66625d851b5815a3de9e2d5ace13fd2b": {
      "content": "exit when ${1};\n${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "exit when",
      "matches": {
        "exit_when": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6664dc5ba0c2f0cfe73b41ea93a26a3f": {
      "content": "border-right-width: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "border-right-width": true,
        "brw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "66657d08f2b19b4f556609cce1d9a842": {
      "content": "border-bottom: ${1:1px} ${2:solid} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdb+": true
      },
      "source": "vim-snippets/snippets"
    },
    "666effa54f2434cdde7c3071f16f92df": {
      "content": "for ${1:i} = ${2:0} to ${3:10} do\n  ${0:TARGET}\ndone",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "for i=x..y do; ... done",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "66707bb79a260f6e10eaaa2626703b4c": {
      "content": "import { mapGetters } from 'vuex';\n\nexport default {\n\tcomputed: {\n\t\t...mapGetters([\n\t\t\t${1:'nameOfGetter'},\n\t\t])\n\t},\n};",
      "doc": "mapgetters inside a vue component",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue MapGetters",
      "matches": {
        "vmapgetters": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "6688db17c13433a5fc6bb43c61378135": {
      "content": "background-image: none;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background-image:  none (background)",
      "matches": {
        "background": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6689690d493cdcc812dc184e9a4842ff": {
      "content": "type ${1} is ${2};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "type": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "668f3d023a21db8669c65da121d5a0b3": {
      "content": "if ${1:condition}\n\t${2}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "6692a18d723c3a3bcf9a134c0f0e622a": {
      "content": "$.ajaxSuccess(function (${1:e}, xhr, settings) {\n\t${2:// handler for when any AJAX call is successfully completed};\n});\n${0}",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxsuccess": true
      },
      "source": "snippets/javascript"
    },
    "6698188882aa9c2377b4e4535024deec": {
      "content": "_.defer(${func}, ${args})",
      "doc": "_.defer(function(text) {\n  console.log(text);\n}, 'deferred');\n// => Logs 'deferred' after one millisecond.\n\nDefers invoking the `func` until the current call stack has cleared. Any\nadditional arguments are provided to `func` when it's invoked.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-defer",
      "matches": {
        "lodash defer": true
      },
      "source": "javascript/lodash"
    },
    "6699256c8d0866b2677596315c5a3cb1": {
      "content": "__import__('pprint').pprint(${1})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pprint": true
      },
      "source": "vim-snippets/snippets"
    },
    "669da4c69b2cfd4cdf3929d8888a4339": {
      "content": "t.text :${1:title}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tct": true
      },
      "source": "vim-snippets/snippets"
    },
    "66ab00e2102a05d77a4615f323556a37": {
      "content": "font-weight: bolder",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:br": true
      },
      "source": "vim-snippets/snippets"
    },
    "66ad0e2ce0be51dda0e172b49ef4cb30": {
      "content": "text-align-last: right",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "66b0c5d51dfdc055bb9e5350a0555447": {
      "content": "% if ${1:condition}:\n\t${0:}\n% endif",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "if",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "66b7afa622def97e68de2d38632947cd": {
      "content": "${1:map}.catch_all '*${2:anything}', controller: '${3:default}', action: '${4:error}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapca": true
      },
      "source": "vim-snippets/snippets"
    },
    "66bc26f61a1cea716dc45f4825a8e662": {
      "content": "if ${1:condition}\n\t${2:# body...}\nelse\n\t${3:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "If .. Else",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "66c21a919e44cfc996b6cbc724e9b7d3": {
      "content": "console.timeEnd(${1:object});",
      "doc": "Sets end point for execution time measurement",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleTimeEnd",
      "matches": {
        "cte": true
      },
      "source": "vscode-javascript/snippets"
    },
    "66c3d1a3956238389f372a9c89534bb5": {
      "content": "cmake_minimum_required(VERSION ${0:2.8.2})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "min": true
      },
      "source": "vim-snippets/snippets"
    },
    "66cb049f56b0e7a469725bf10d272b02": {
      "content": "empty-cells ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec": true
      },
      "source": "vim-snippets/snippets"
    },
    "66d1dca3736547ec0bc18ea9ad286cea": {
      "content": "\\begin{minipage}{${1:0.45}\\linewidth}\n\t${2:TARGET}\n\\end{minipage}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{minipage} \\minipage": true,
        "minipage": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "66d50c2ca6e5506289d2c31b2cad2638": {
      "content": "assert_not_equal ${1:unexpected}, ${2:actual}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asne": true
      },
      "source": "vim-snippets/snippets"
    },
    "66dc357bd8d0dde93363acd11811f0bd": {
      "content": "std.conv",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "conv": true
      },
      "source": "vim-snippets/snippets"
    },
    "66dff73e97372c81a0eb39cc26ba2ebc": {
      "content": "super(${1:/*args*/});",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "super (sup)",
      "matches": {
        "sup": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "66e43c08005523e17062876327d8630c": {
      "content": "background: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "66ebfbb70387af81b5dcbcc1757a5a79": {
      "content": "number.negative()",
      "doc": "number.negative(message?: string | function): Schema\n\nValue must be a negative number.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "number-negative",
      "matches": {
        "yup number negative": true
      },
      "source": "javascript/yup"
    },
    "66ee93cd35dd234d760e9f330f88e725": {
      "content": "display: table-caption;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbcp": true
      },
      "source": "vim-snippets/snippets"
    },
    "66f020b6c733541b0db751709000d545": {
      "content": "fmt.Errorf(\"${1:${VISUAL}}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Errorf(...)",
      "matches": {
        "fe": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "6704fcfdb6a8a6db4bd9186a0ef447bb": {
      "content": "fprintf(${1:stderr}, \"${2:%s}\\n\"${3});",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fpr": true
      },
      "source": "vim-snippets/snippets"
    },
    "67061993f648af42ef431983a69c845d": {
      "content": "else {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "else {}",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "670b157f62908167daaddc0ba7e0f59c": {
      "content": "destroyed () {\n\t${0};\n},",
      "doc": "destroyed lifecycle method",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle destroyed",
      "matches": {
        "vdestroyed": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "670bd4c489c2c149855b41a3361cb67f": {
      "content": "<%= select ${1:f}, :${2:field}, ${3:[{\"key\", \"value\"}]}, prompt: ${4:\"Prompt\"} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "select",
      "matches": {
        "sl": true
      },
      "source": "vim-snippets/snippets"
    },
    "670eca36bc95f839e94923fe9466e8ff": {
      "content": "-webkit-box-shadow: ${1:0} ${2:0} ${3:0} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:w+": true
      },
      "source": "vim-snippets/snippets"
    },
    "67180b3dc3a7ec1355700f7b4d7f2334": {
      "content": "emerg(\"${1:message}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "emerg": true
      },
      "source": "vim-snippets/snippets"
    },
    "6719d95fc14b9aa4cbb4bbeb0979ec8c": {
      "content": "_.isDate(${value})",
      "doc": "_.isDate(new Date);\n// => true\n\n_.isDate('Mon April 23 2012');\n// => false\n\nChecks if `value` is classified as a `Date` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isdate",
      "matches": {
        "lodash isdate": true
      },
      "source": "javascript/lodash"
    },
    "671f4acf2fef5ba00b31a6b9521e4a49": {
      "content": "form_input(\"${1:name}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_input": true
      },
      "source": "vim-snippets/snippets"
    },
    "671f7839512f9f12feb7c13a6aa3cd47": {
      "content": "const ${1:value} = useContext(${2:MyContext});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "useContext",
      "matches": {
        "usect": true
      },
      "source": "snippets/javascript"
    },
    "672ff0dc027a2341247ba7db3e960ad0": {
      "content": "vertical-align: bottom",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "6731e1ae619c18dad913af69cab03126": {
      "content": "my $fh = open \"${1:filename}\", ${2::r|:w|:a};\n${3:# actions};\n$fh.close;",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "open": true
      },
      "source": "vim-snippets/snippets"
    },
    "673b0ad48e5313fbb382fdf04f3c8921": {
      "content": "list-style-type circle",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "673c476d160ece9736e54ab96c5e5889": {
      "content": "clear: right;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "67412a47825c4cab0616565d6992375e": {
      "content": "padding-right: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "padding-right": true,
        "pr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6746aeb3b6167ce517142df0a497ba06": {
      "content": "function(d, i) { ${1} }",
      "doc": "",
      "filetype": "javascript-d3",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fdi": true
      },
      "source": "vim-snippets/snippets"
    },
    "67495fb10a2ee5a8b9b14431d07068b1": {
      "content": "import { Switch } from 'react-router-dom'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React Browser Router - Switch",
      "matches": {
        "imbrs": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "6749e9c034e1b9bf827dce2a9070e6cd": {
      "content": "${1:FIELDNAME} = forms.ComboField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "ComboField",
      "matches": {
        "fcombo": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "674e766daa33b7a86691c6157cca78f5": {
      "content": "round(${0:value}};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "round": true
      },
      "source": "vim-snippets/snippets"
    },
    "674f4fa717ae20ec1580c4be1453207e": {
      "content": "(condp ${1:pred} ${2:expr}\n\t${0})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "condp": true
      },
      "source": "vim-snippets/snippets"
    },
    "67566a91e79c91e458b368fc515cef97": {
      "content": "assert_nothing_raised(${1:StandardError}) { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asnr": true
      },
      "source": "vim-snippets/snippets"
    },
    "6758b80ab0987dd61ae219a0e7f98d90": {
      "content": "printf(\"${1:} = %${2}\\n\", $1);",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prx": true
      },
      "source": "vim-snippets/snippets"
    },
    "675c810df2cc9c7b968b1f545c4c0de8": {
      "content": "package ${1:main}\n${0:TARGET}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "package": true,
        "pk": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "675d35197bd02cd8055d45d350e1215a": {
      "content": "list-style-position ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisp": true
      },
      "source": "vim-snippets/snippets"
    },
    "675d363f0737d65a9bfe7ab3345d60fc": {
      "content": "public int ${1} { get; protected set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi+|": true
      },
      "source": "vim-snippets/snippets"
    },
    "677f50aa823a4331cc62bba4ac9d3f12": {
      "content": "justify-items: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "6781db5c234f3423ed9bd16b76e80557": {
      "content": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "6783c40d258b74b789a9bbed7a43d342": {
      "content": "{ ${1:#capture}(${2:#:arguments}) -> ${3:Void} in\n    ${0:TARGET}\n}\n${9}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "{ (...) -> Type in ... }",
      "matches": {
        "closure": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6786dc0897e6d83cc52a7b7b2198f3c0": {
      "content": "${1:obj}.each (index) ->\n\t${0:this.innerHTML = this + \" is the element, \" + index + \" is the position\"}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each": true
      },
      "source": "snippets/coffee"
    },
    "6794918d163e942106f27d7b8c49ceba": {
      "content": "else if (${3})\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "67963af9e7d66f6b460b92b26758176a": {
      "content": "PropTypes.oneOf(['$0']).isRequired,",
      "doc": "Prop type limited to specific values by treating it as an enum required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeEnumRequired",
      "matches": {
        "pter": true
      },
      "source": "vscode-react/snippets"
    },
    "6798ed2b628cd967c0e4c7ae03de9bb1": {
      "content": "_.upperCase(${string})",
      "doc": "_.upperCase('--foo-bar');\n// => 'FOO BAR'\n\n_.upperCase('fooBar');\n// => 'FOO BAR'\n\n_.upperCase('__foo_bar__');\n// => 'FOO BAR'\n\nConverts `string`, as space separated words, to upper case.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-uppercase",
      "matches": {
        "lodash uppercase": true
      },
      "source": "javascript/lodash"
    },
    "679b0028552321afdc3857a7ae6a9e4c": {
      "content": "t.rename :${1:old_column_name}, :${2:new_column_name}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tre": true
      },
      "source": "vim-snippets/snippets"
    },
    "679de5a6c8acf6029278274561a4fa72": {
      "content": "import ${1:module}\n${0}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "import": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "67a009475b02849062e4ba5aa209ccfa": {
      "content": "set ${1:#:NAME}(${2:#:ARGS}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "set": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "67a5601865cfba41f3ff236879dc632c": {
      "content": "expect($0)",
      "doc": "expect actual value",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-expect",
      "matches": {
        "exp": true,
        "jest expect": true
      },
      "source": "javascript/jest"
    },
    "67adb1127af7f8a1c272fd7aedde6ba7": {
      "content": "${1:obj}.removeClass('${2:class name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "remc": true
      },
      "source": "snippets/coffee"
    },
    "67b4f23978967e4e63b493edead36ffb": {
      "content": "methods: {\n\t${1:name}() {\n\t\t${0}\n\t}\n},",
      "doc": "vue method",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Methods",
      "matches": {
        "vmethod": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "67b8e1a6a66d19dbad069bb02944326b": {
      "content": "~w(${0})a",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "atom list",
      "matches": {
        "al": true
      },
      "source": "vim-snippets/snippets"
    },
    "67ba651ad2721caf2073cee5e16b125f": {
      "content": "font-smooth: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm": true
      },
      "source": "vim-snippets/snippets"
    },
    "67bae7e8dc1912f6ae9e651fb2e40969": {
      "content": "[${0:TARGET} for ${1:x} in ${2:xs}]",
      "doc": "",
      "filetype": "moon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "67cb46a5e54b45df0e20397441b99a3c": {
      "content": "border-color ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdc": true
      },
      "source": "vim-snippets/snippets"
    },
    "67cfa4a5434fff792fbf635138e99af3": {
      "content": "\\\\maketitle",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "maketitle",
      "matches": {
        "mkt": true
      },
      "source": "vim-snippets/snippets"
    },
    "67d5025483ea8cc411f11dd53625d615": {
      "content": "> ${1:${TM_SELECTED_TEXT}}",
      "doc": "Insert quoted text",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert quoted text",
      "matches": {
        "quote": true
      },
      "source": "vscode-R/snippets"
    },
    "67d5fda8a49f8794582ce0fd80a6efa3": {
      "content": "PropTypes.oneOf(['$0']).isRequired,",
      "doc": "Prop type limited to specific values by treating it as an enum required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-enum-required",
      "matches": {
        "prop-types enum required": true,
        "pter": true
      },
      "source": "javascript/prop-types"
    },
    "67d672c0d07284c54a464ee647bc472b": {
      "content": "${1:name}.split(\"${0:,}\")",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "spl": true
      },
      "source": "vim-snippets/snippets"
    },
    "67dac238cbd0b6b928651fb09435cc19": {
      "content": "${1:#:set the_filename to }choose file name with prompt \"${2:#:Name this file:}\"\n\tdefault name \"${3:untitled}\" default location ${4:#:path to home folder}",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "choose",
      "matches": {
        "choose_NewFile": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "67de7cc33aba86e81f5c737e3a32023f": {
      "content": "case ${1:pattern}${0}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "67e53fc72adffc0b40050fa86910d368": {
      "content": "<form (ngSubmit)=\"onSubmit()\" #${1:form}=\"ngForm\">\n</form>",
      "doc": "Form with ngSubmit and form attributes",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngForm",
      "matches": {
        "a-form": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "67f2a2579d976ccdf4abb24b070c180a": {
      "content": "${1:protected} function ${2:foo}()\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m": true
      },
      "source": "vim-snippets/snippets"
    },
    "67f2baab3761479a1f172926a9cb951d": {
      "content": "<s>${0}</s>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s": true
      },
      "source": "vim-snippets/snippets"
    },
    "67f63252b84bdc2420b3d8a0aef71f33": {
      "content": "<fieldset id=\"${1}\">\n\t${0}\n</fieldset>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fieldset#": true
      },
      "source": "vim-snippets/snippets"
    },
    "67f694b416e65ba9fa20ff63436242e7": {
      "content": "export { $2 } from '${1:module}'$0",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportDestructing",
      "matches": {
        "exd": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "67f8b72f59837a3b00c872571dd52761": {
      "content": "grid-auto-columns: min-content;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac:mic": true
      },
      "source": "vim-snippets/snippets"
    },
    "67fb3314163a3104fbc00348411e97c3": {
      "content": "${1:FIELDNAME} = models.DateField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "date": true
      },
      "source": "vim-snippets/snippets"
    },
    "67fcc2e801085fd03198d410107ea1f1": {
      "content": "*ngFor=\"let ${1:item} of ${2:stream} | async as ${3:list}\"${0}",
      "doc": "Angular *ngForAsync",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngForAsync",
      "matches": {
        "a-ngForAsync": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "6814daee3ee48c79e0ef97a45f22a3f1": {
      "content": "display: run-in",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:ri": true
      },
      "source": "vim-snippets/snippets"
    },
    "681973621d42b2c0b7a05376f45ab2b5": {
      "content": "if\n\t${1:guard} ->\n\t\t${0:body}\nend",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "681c173c7298f47e9314b0b2ca72041e": {
      "content": "{% filter ${1:filter} %}\n\t$2\n{% endfilter %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "filter",
      "matches": {
        "filter": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "681c77f55c4c940a7524a9273ce8cbe8": {
      "content": "place-content: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "682450749569fb32a661fb2a7588a523": {
      "content": "target_link_libraries(${1:bin} ${0:somelib})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link": true
      },
      "source": "vim-snippets/snippets"
    },
    "682585a350cd25027015a9353f439e3f": {
      "content": "background-size: cover;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz:cv": true
      },
      "source": "vim-snippets/snippets"
    },
    "6825dd7937164e719cefa2485745a727": {
      "content": "let ${1:name} = ${2:value};",
      "doc": "let assignment",
      "filetype": "base",
      "grammar": "lsp",
      "label": "let-assignment",
      "matches": {
        "base let": true
      },
      "source": "javascript/base"
    },
    "68287eec172163fd1f68eb3903d60721": {
      "content": "<?php if ($${1:var}): ?>\n\t${0:${VISUAL}}\n<?php endif ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "?i": true
      },
      "source": "vim-snippets/snippets"
    },
    "683875f6c2cea2a695dff5be43c5c414": {
      "content": "protected int ${1} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi|-": true
      },
      "source": "vim-snippets/snippets"
    },
    "6841143aa361b7bed92db06497535454": {
      "content": "{{- if .Values.$1.service.annotations }}\n  annotations:\n{{ toYaml .Values.${1:value_key}.service.annotations | indent 4 }}\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "annotations_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "684a262f5a6b704ae003349e85667cd8": {
      "content": "${1:obj}.scrollLeft(${2:value})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scrolll": true
      },
      "source": "snippets/coffee"
    },
    "6853b88aa4fb5a70467c0bf4b299c6b8": {
      "content": "import React from 'react'\nimport { View, Text } from 'react-native'\n\ninterface Props {\n\t\n}\n\nconst ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React Native Arrow Function Component with ES7 module system and TypeScript interface",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typescriptReactNativeArrowFunctionComponent",
      "matches": {
        "tsrnf": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "6863dc029ea3afd4b9bc569e5e2f3ef7": {
      "content": "<blockquote>\n\t${0}\n</blockquote>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blockquote": true
      },
      "source": "vim-snippets/snippets"
    },
    "6864ab56a9f208b0c24678dac1faaa7e": {
      "content": "if err != nil {\n\tt.Fatalf(\"${0:message}\")\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err != nil { t.Fatalf(...) }",
      "matches": {
        "terf": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "686568db07e8898c18aa0f405ae4267c": {
      "content": "grid-template ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gt": true
      },
      "source": "vim-snippets/snippets"
    },
    "68663186c1799eec34b6b332f7098ebe": {
      "content": "\\begin{filecontents}\n\t${1:TARGET}\n\\end{filecontents}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{filecontents} \\filecontents": true,
        "filecontents": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "686a79a611fd170a6bc0482421e9966a": {
      "content": "PStore.new('${1:file_name.pstore}')",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Pn-": true
      },
      "source": "vim-snippets/snippets"
    },
    "686fd0e50cfd152b7180bc3a4cc9a212": {
      "content": "{% render '${0:snippet}' %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "render": true
      },
      "source": "vim-snippets/snippets"
    },
    "6878033489068f47a0f00a987d0c6e10": {
      "content": "<html>\n${0}\n</html>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "html": true
      },
      "source": "vim-snippets/snippets"
    },
    "68853e3ca373d2c5f3e9e7e35114e820": {
      "content": "spyOn(${1:object}, \"${2:method}\").andThrow(${3:exception})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "spy on and throw (coffee)",
      "matches": {
        "st": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "688a09e1ab9d9be756998157727fa114": {
      "content": "throw ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "689452bcd3b9f2d01f217f4cda1803bf": {
      "content": "assert_eq!(${1:expected}, ${2:actual});",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "assert_eq!",
      "matches": {
        "ase": true
      },
      "source": "vim-snippets/snippets"
    },
    "68967981433eb0038883b04b1904f752": {
      "content": "# Service resource\nservice ${1:\"service_name\"} do # Name of the service\n\t${2:#}enabled ${3:nil} # Whether the service is enabled at boot time\n\t${4:#}running ${5:nil} # Make sure the service is running. Start if stopped\n\t${6:#}pattern ${7} # Pattern to look for in the process table\n\t${8:#}start_command ${9:nil} # Command used to start this service\n\t${10:#}stop_command ${11:nil} # Command used to stop this service\n\t${12:#}status_command ${13:nil} # Command used to check the service run status\n\t${14:#}restart_command ${15:nil} # Command used to restart this service\n\t${16:#}reload_command ${17:nil} # Command used to tell this service to reload its configuration\n\t${18:#}supports ${19:false} # Features this service supports, ie :restart, :reload, :status\n\t${20:#}${21:action :enable} # Enable this service\n\t${22:#}${23:action :disable} # Disable this service\n\t${24:#}${25:action :nothing} # Don't do anything with this service (Default)\n\t${26:#}${27:action :start} # Start this service\n\t${28:#}${29:action :stop} # Stop this service\n\t${30:#}${31:action :restart} # Restart this service\n\t${32:#}${0:action :reload} # Reload the configuration for this service\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "service": true
      },
      "source": "vim-snippets/snippets"
    },
    "689df3eb937207a9cb1f68a639166548": {
      "content": "#' @description\n#'\n#' ${1:function description}\n#'\n#' ${2:@param ${3:name}::${4:Type} ${5:Description}}\n#'\n#' ${6:@returns ${7:name}::${8:Type} ${9:Description}}\n#'\n#' @examples\n#'\n#' ${10: function call examples}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "function documentation",
      "matches": {
        "docf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "68a048b68702987904b86aa2850aa2e8": {
      "content": "/*! \\brief ${1:Brief function description here}\n *\n *  ${2:Detailed description of the function}\n *\n * \\param $3 ${4:Parameter description}\n * \\param $5 ${6:Parameter description}\n * \\return ${7:Return parameter description}\n */\n${8:void} ${9:function_name}(${10:Type} ${3:Parameter}, ${11:Type} ${5:Parameter})\n{\n\t${12}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dfun2": true
      },
      "source": "vim-snippets/snippets"
    },
    "68af5bbf2caaa377f3b35163784c62ca": {
      "content": "line-height: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lh": true
      },
      "source": "vim-snippets/snippets"
    },
    "68b0ea5c3c21a089a76479d0db944cff": {
      "content": "(let [${1:name} ${2:expr}]\n\t${0:code})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "68bdcc1e922ae6265302034764857ce2": {
      "content": "-moz-box-shadow: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "68c1529c071ccc7c54c716b4c46bcd15": {
      "content": "\\begin{math}\n\t${1:TARGET}\n\\end{math}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{math} \\math": true,
        "math": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "68c25c335e1019d4d654377f94b53334": {
      "content": "padding ${1:0} ${2:0} ${0:0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:3": true
      },
      "source": "vim-snippets/snippets"
    },
    "68c2f8b43bbb156ad9716ce9fb0207ce": {
      "content": "map[${1:string}]${0:int}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "map[Type]Type",
      "matches": {
        "map": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "68cb5c85b7b1403c37bb4026a7c20842": {
      "content": "margin: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m": true,
        "margin": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "68cd074d40904925a76037bfd6021a91": {
      "content": "mutations: {\n\t${1:updateValue}(state, ${3:payload}) {\n\t\tstate.${2:value} = ${3:payload};\n\t}\n}",
      "doc": "vuex mutation",
      "filetype": "vuex",
      "grammar": "lsp",
      "label": "vuex-mutation",
      "matches": {
        "vmutation": true,
        "vuex mutation": true
      },
      "source": "javascript/vuex"
    },
    "68d541a2c633d1edfb37ab4012df0681": {
      "content": "min-height: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mih": true,
        "min-height": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "68d967ea2d85d111ee7bd9401a6dc924": {
      "content": "_.union(${arrays})",
      "doc": "_.union([2], [1, 2]);\n// => [2, 1]\n\nCreates an array of unique values, in order, from all given arrays using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-union",
      "matches": {
        "lodash union": true
      },
      "source": "javascript/lodash"
    },
    "68d9fedcacfddee4189aadb83792202a": {
      "content": "Run Keyword And Continue On Failure    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword And Continue On Failure",
      "matches": {
        "rkacof": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "68db57ee1a1c2aa1c57d89b99f1d876b": {
      "content": "margin-top: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mt:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "68e65c37e69021a78297f834b3def38b": {
      "content": "it.only('${1:should }', () => {\n\t$0\n});",
      "doc": "creates an it block that runs only",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-it-only",
      "matches": {
        "ito": true,
        "jest it only": true
      },
      "source": "javascript/jest"
    },
    "68ea36aacf29f839d52d18b52651fcb6": {
      "content": "#lang racket/gui",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#rg": true
      },
      "source": "vim-snippets/snippets"
    },
    "68ec371060bb6328b5cec2fcfa6be405": {
      "content": "internal ${1:int} ${2} { get; protected set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p&|": true
      },
      "source": "vim-snippets/snippets"
    },
    "68f19c6076f1e2c30e1012b2c1392c61": {
      "content": "enum ${1} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enum": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "68f51212f30adb0d16913b2cef8f4ad3": {
      "content": "to=\"$1\"$0",
      "doc": "to=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-to",
      "matches": {
        "to": true,
        "vue to": true
      },
      "source": "javascript/vue"
    },
    "68fb1350454b2803bcb1ef678144ea20": {
      "content": "background-clip: content-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:cb": true
      },
      "source": "vim-snippets/snippets"
    },
    "68fb327c77d7759f64c0403a41b6c506": {
      "content": "justify-items: end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "68fd2a1313a877d19855a43912629dce": {
      "content": "describe \"${1}\" [ $0 ]",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "desc": true
      },
      "source": "vim-snippets/snippets"
    },
    "68fdb9a24aa919650df07df386901135": {
      "content": "font-style oblique",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "690b318c4158ade6272c5814927156b1": {
      "content": "if ${1} then\n\t${0:${VISUAL}}\nend if;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "if",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "690fd8046116fc8dc174c3c1f916c3ff": {
      "content": "if err != nil {\n\treturn ${1:nil}, ${2:err}\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error return with two return values",
      "matches": {
        "errn,": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "691a94518060e9fd771188940dc384ad": {
      "content": "unsafe {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "unsafe {}",
      "matches": {
        "unsafe": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6925a4bfdc046b206364e6238157e7e6": {
      "content": "log.Println(\"${1}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "log println",
      "matches": {
        "lp": true
      },
      "source": "vim-snippets/snippets"
    },
    "692b7f5d798f4c22c10215206ad58ef6": {
      "content": "{%- unless ${1:condition} -%}\n\t${0:${VISUAL}}\n{%- endunless -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unless-": true
      },
      "source": "vim-snippets/snippets"
    },
    "693851e0f999f8c81516f34b24f58cfd": {
      "content": "triggers {\n\tcron('${1:H */4 * * 1-5}')\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "triggers": true
      },
      "source": "vim-snippets/snippets"
    },
    "693a8b6941a0d5a968b7c067597879cb": {
      "content": "else {\n\t${0}\n}",
      "doc": "else statement",
      "filetype": "base",
      "grammar": "lsp",
      "label": "else-statement",
      "matches": {
        "base else": true
      },
      "source": "javascript/base"
    },
    "694024c0d2f0a1d5c151efa814f02909": {
      "content": "for ${1} = ${2}, ${3} = ${4}\n\t${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "nested for loop",
      "matches": {
        "fornest": true
      },
      "source": "vim-snippets/snippets"
    },
    "6942c5c7b2587cda18c6eeee887631e1": {
      "content": "asm {\n\t${1}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asm": true
      },
      "source": "vim-snippets/snippets"
    },
    "6944273d62314b6b072c67c5a0313603": {
      "content": "_.chain()",
      "doc": "var users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n// A sequence without explicit chaining.\n_(users).head();\n// => { 'user': 'barney', 'age': 36 }\n\n// A sequence with explicit chaining.\n_(users)\n  .chain()\n  .head()\n  .pick('user')\n  .value();\n// => { 'user': 'barney' }\n\nCreates a `lodash` wrapper instance with explicit method chain sequences enabled.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-chain",
      "matches": {
        "lodash chain": true
      },
      "source": "javascript/lodash"
    },
    "6944debff750caf88306c715ecf653f8": {
      "content": "class ${0:ModelName}Inline(admin.TabularInline):\n\tmodel = $1",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tabularinline": true
      },
      "source": "vim-snippets/snippets"
    },
    "694a6fcc9df4f6598a5bcd8f9f66f42c": {
      "content": "import React, { PureComponent } from 'react'\n\nexport default class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
      "doc": "Creates a React pure component class with ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-class-pure-component",
      "matches": {
        "react component class pure": true,
        "rpc": true
      },
      "source": "javascript/react"
    },
    "6951c79a7feffe7c4ea3e503bd4ff9b7": {
      "content": "import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativeFunctionalExportComponent",
      "matches": {
        "rnfe": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "69548f6b889817f889ae8853681b9e70": {
      "content": "import { computed } from '@ember/object';",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "import { computed } from '@ember/object';",
      "matches": {
        "cproimport": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "695bf19f3995dd443cc55c0ea6a48d96": {
      "content": "Page Should Not Contain Button    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Not Contain Button",
      "matches": {
        "psncb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6963f4e61575fa664c0313c78bee5e6b": {
      "content": "border-color: ${1:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-color: color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6964a329e65aed4e5b0fa523e6456b3b": {
      "content": "beforeAll(() => {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine-arrow",
      "grammar": "snu",
      "label": "before all (js)",
      "matches": {
        "befa": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6968c0dedbb10f5983e92d74fc496389": {
      "content": "\\\\begin{alertblock}{${1:title}}\n\t${0:${VISUAL}}\n\\\\end{alertblock}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "alertblock environment",
      "matches": {
        "alertblock": true
      },
      "source": "vim-snippets/snippets"
    },
    "6969d886d2cb43bace38cb8d2dc478a4": {
      "content": "expect(${1:what}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "expect": true
      },
      "source": "vim-snippets/snippets"
    },
    "696c25c9bece076d14ce0b720af7399e": {
      "content": "list-style-image: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list-style-image": true,
        "lsi": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "696cbac4329c7c5aa64a148591dc8c4c": {
      "content": "\\\\begin{gather${1:ed}}\n\t${0:${VISUAL}}\n\\\\end{gather$1}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "gather(ed) environment",
      "matches": {
        "gat": true
      },
      "source": "vim-snippets/snippets"
    },
    "696daf7ebdce6951d8658f56511e93c9": {
      "content": "impl ${1} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "impl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6975f3490fc8f2d673d6e6b4dba0f1db": {
      "content": "<div [ngSwitch]=\"${1:conditionExpression}\">\n\t<div *ngSwitchCase=\"${2:expression}\">${3:output}</div>\n\t<div *ngSwitchDefault>${4:output2}</div>\n</div>",
      "doc": "Angular ngSwitch",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngSwitch",
      "matches": {
        "a-ngSwitch": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "69761c020a2292daf841d34356a5b55b": {
      "content": "{!! $1 !!}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "{!! !!} statement",
      "matches": {
        "{!": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "69765c839db5c2c78e1a540108ac8918": {
      "content": "<<<\n${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "page break",
      "matches": {
        "pagebreak": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "697a26860cb0cc3594b90059e893a87e": {
      "content": "border-top-style: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdts:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "697a3e978ea61f5c88972fe4670add4c": {
      "content": "let mut ${1}: ${2} = ${3};",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "let mut variable declaration with explicit type annotation",
      "matches": {
        "lettm": true
      },
      "source": "vim-snippets/snippets"
    },
    "697e85db683a02df21899373976e059b": {
      "content": "{(${1:a},${2:b}) =>\n\t${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{(": true
      },
      "source": "vim-snippets/snippets"
    },
    "69939c67f2bcfe00be92a3cc915a4c1e": {
      "content": "xit('${1:}', () => {\n\t${0:${VISUAL}}\n});",
      "doc": "",
      "filetype": "javascript-mocha",
      "grammar": "snu",
      "label": "xit('should do', () => { ... })",
      "matches": {
        "xit": true
      },
      "source": "vim-snippets/snippets"
    },
    "69946e41627bbe8b3e05d06ec68ad9c1": {
      "content": "repeat{\n  ${2:}\n  if(${1:condition}) break\n}",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "re": true
      },
      "source": "vim-snippets/snippets"
    },
    "69957d14ff2df51a20cc86baf0ee1913": {
      "content": "textSize(${0:size});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "textSize": true
      },
      "source": "vim-snippets/snippets"
    },
    "69a04e2c25e760bb50327d750ac69d8c": {
      "content": "return ${1} do\n\t${0}\nend return;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "extended return",
      "matches": {
        "ret": true
      },
      "source": "vim-snippets/snippets"
    },
    "69aca15adc3b662248b1ce0a8d0bf20a": {
      "content": "position fixed",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "69ae8b34cacd6fe4236cec0be50d807c": {
      "content": "align-self: last baseline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:lb": true
      },
      "source": "vim-snippets/snippets"
    },
    "69b68c07f0c7635ac9805d21806d9e3a": {
      "content": "with ${1:expr} as ${2:var}:\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "with": true
      },
      "source": "vim-snippets/snippets"
    },
    "69b9096e2a71bce7f0d66dccd0f5323c": {
      "content": "java.math.",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "j.m": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "69c949beae6bf93f26b298cbcfabc28f": {
      "content": "border: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bd:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "69d0db3b1b39fd6fb6d60c16d2a1ab45": {
      "content": "ifFrameLoaded (${1}) {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "il": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "69d5f62843a5e02d7a69d2462640b115": {
      "content": "<em>${1:TARGET}</em>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "em": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "69d64b2d9cf7943f87920205056ed6de": {
      "content": "Run Keyword If Test Failed    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword If Test Failed",
      "matches": {
        "rkitf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "69dfccff7d9762a895e2d9efb34c72b4": {
      "content": "background-color: transparent;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgc:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "69f2aae4ac76cc02744bed52b1ff2c4c": {
      "content": "@testset \"${1}\" begin\n\t${2}\n\t@test_throws ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "@testset with @test_throws",
      "matches": {
        "@tt": true
      },
      "source": "vim-snippets/snippets"
    },
    "69f3a6e7cb381de1ad6a28c13ccdc5ae": {
      "content": "&#x21E5;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tab": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a03f73c9f9ca26ddccd111bd5ed2f6f": {
      "content": "expect(${1:target}).wasCalled()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect was called (coffee)",
      "matches": {
        "esc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6a043e1993c1e6fc7d28564b88f2cb64": {
      "content": "${1:property_name}: computed('${3:argument}', function() {\n\t${0://body...}\n}),",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "property_name: computed('...', function() {...}),",
      "matches": {
        "cpro": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6a1051ac73bf046b7a3b6fd75446cc62": {
      "content": "background-repeat no-repeat",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a12072e25e00581045602337b32e354": {
      "content": "display: ${1:table/inline-table/table-row-group/table-header-group/table-footer-group/table-row/table-column-group/table-column/table-cell/table-caption};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "display: table-types (display)",
      "matches": {
        "display": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6a15d8e0485069d7f10e2c0dcc89e172": {
      "content": "${1:int}[${2:string}] ${3:dict} = ${0};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aa": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a170de83dd750e731ab3c618219f6b1": {
      "content": "if ( ${1:condition} )\n{\n\t${2:}\n}",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a1bd28907321fe251a4c92e1fabc8fd": {
      "content": "render controller:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render :controller",
      "matches": {
        "rc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6a32a5ce8d7a5e15f695ade17813a2d3": {
      "content": "after_create $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "after_create",
      "matches": {
        "aftc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6a32ec4fef1c4b41de280e40909cc2c5": {
      "content": "Char",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "chr": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a3a0dee2806103cf27a48c54cc4c070": {
      "content": "SELECT ${1:*}\nFROM ${2:table1} ${3:T1}\nJOIN ${4:table2} ${5:T2}\nON T1.${6:column1} = T2.${7:column2}",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "SELECT * FROM T1 JOIN T2 ... ON",
      "matches": {
        "SELECT_JOIN_DATA": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6a3cd86fcb7a14c2bff18ee9731451af": {
      "content": "{% increment ${0:variable} %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "increment": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a41fb5dc62b923f7dd0f48e009a9abc": {
      "content": "static if(${1}) {\n\t${2}\n} else {\n\t${3}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sife": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a5e86dc2daaf8078932f7bd7bfe79ff": {
      "content": "t.text :${1:title}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.text (tct)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6a624ba198393bd50c9930ff43697c84": {
      "content": "Yii::import('${0}');",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yimp": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a69c794f830aa398cdf081dfa0b7e0a": {
      "content": "namespace eval ${1:path} {${0:#script...}}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ns": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a6a97953a7e1f5f27fee9e473ddc023": {
      "content": "_.parseInt(${string}, ${radix})",
      "doc": "_.parseInt('08');\n// => 8\n\n_.map(['6', '08', '10'], _.parseInt);\n// => [6, 8, 10]\n\nConverts `string` to an integer of the specified radix. If `radix` is\n`undefined` or `0`, a `radix` of `10` is used unless `value` is a\nhexadecimal, in which case a `radix` of `16` is used.\n\n**Note:** This method aligns with the\n[ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-parseint",
      "matches": {
        "lodash parseint": true
      },
      "source": "javascript/lodash"
    },
    "6a705f0797cba5d07bc1b09f5a637351": {
      "content": "import ${1};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ip": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6a706a242a662aefa2700addb8bca57a": {
      "content": "Element Should Be Enabled    ${${1:locator}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Element Should Be Enabled",
      "matches": {
        "esbe": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6a70af7553b0ca1edc1ca44da662b1d5": {
      "content": "var tests = []struct {\n    name string\n    expected string\n    given string\n}{\n    {\"${2}\", \"${3}\", \"${4}\",},\n}\nfor _, tt := range tests {\n    tt := tt\n    t.Run(tt.name, func(t *testing.T){\n        actual := ${1:Function}(tt.given)\n        if actual != tt.expected {\n            t.Errorf(\"given(%s): expected %s, actual %s\", tt.given, tt.expected, actual)\n        }\n    })\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "var test = {...}{...} for {t.Run(){...}}",
      "matches": {
        "testtable": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6a748685c867cff906151f53df88596a": {
      "content": "RAILS_DEFAULT_LOGGER.${1:debug} ${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "log2": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a75fe41ce4d905c3a5d3233afce152b": {
      "content": "@mixin ${1:name}(${2}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mix": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a76f75dca4921624053ab18079fc7f7": {
      "content": "return ${0}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "re": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a78da2f820d674c30066a66d46cda85": {
      "content": "<include file='${1:#:filename}' path='${2:#:tabpath}[@${3:#:name}=\"${4:#:id}\"]'/>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<include file='' path=''/>",
      "matches": {
        "include": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6a7d9917321b5d7e6d9547e08def405d": {
      "content": "{%- paginate ${1:collection.products} by ${2:12} -%}\n\t{%- for ${3:product} in $1 -%}\n\t\t${0}\n\t{%- endfor -%}\n{%- endpaginate -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "paginate-": true
      },
      "source": "vim-snippets/snippets"
    },
    "6a7df5aa106290ebf10b55749fe16b36": {
      "content": "\\$GLOBALS['${1:#:variable}']${2: = }${3:#:something}${4:;}${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gloabals": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6a821afc8a36ea3abd303c7dfe286a82": {
      "content": "${1:obj}.slideUp('${2:slow/400/fast}', function () {\n\t${0:// callback};\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "supc": true
      },
      "source": "snippets/javascript"
    },
    "6a8779bb220d519c5ffc6a62a2c706c3": {
      "content": "border-right-color: #${1:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-left-color: color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6a92ade95525feb6189450948d23a81f": {
      "content": "_.findLast(${collection}, ${predicate}, ${fromIndex})",
      "doc": "_.findLast([1, 2, 3, 4], function(n) {\n  return n % 2 == 1;\n});\n// => 3\n\nThis method is like `_.find` except that it iterates over elements of\n`collection` from right to left.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-findlast",
      "matches": {
        "lodash findlast": true
      },
      "source": "javascript/lodash"
    },
    "6a96534361726003eef33f006c680d44": {
      "content": "it { is_expected.not_to ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iiexpn": true
      },
      "source": "vim-snippets/snippets"
    },
    "6aa23477aa9e7fe04cc92c56d5488e25": {
      "content": "\\$_COOKIE['${1:#:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cookie": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6aa583303cdeead900a5ab068e065189": {
      "content": "import { Directive } from '@angular/core';\n\n@Directive({ selector: '[${1:selector-name}]' })\nexport class ${2:Name}Directive {\n\tconstructor() { }\n}",
      "doc": "Angular directive",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Directive",
      "matches": {
        "a-directive": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "6aa886db65775305ca053e993be23c32": {
      "content": "join:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "join": true
      },
      "source": "vim-snippets/snippets"
    },
    "6aa8f9700f53696311cc7b2311b18253": {
      "content": "/*\n * ${1}\n*/",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "/*": true
      },
      "source": "vim-snippets/snippets"
    },
    "6aa9358fb6dc3b6599cd770525758864": {
      "content": "<%= ${1:f}.text_field :${0:attribute} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fftf": true
      },
      "source": "vim-snippets/snippets"
    },
    "6ab90ff85c0a9614dd2158a55fc167f5": {
      "content": "const {${1:module}} = require('./${1:module}');",
      "doc": "destructuring require assignment local",
      "filetype": "base",
      "grammar": "lsp",
      "label": "destructuring-require-assignment-local",
      "matches": {
        "base require assignment local destruct": true
      },
      "source": "javascript/base"
    },
    "6abbcf0f809c787588fc6c186de0de6c": {
      "content": "if {${1}} {\n\t${0}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "6ac5b68c878da6940ebc39e789564f0c": {
      "content": "validates_length_of :${1:attribute}, within: ${2:3..20}${3:, on: :${4:create}, message: \"${5:must be present}\"}, if: proc { |obj| ${6:obj.condition?} }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_length_of if",
      "matches": {
        "vlif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6ac94d9e0751e73d8bef102b3dcea3c5": {
      "content": "__LINE__",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "__LINE__",
      "matches": {
        "line": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6aca2a3c1756e1f97d408778c74a93ce": {
      "content": "import { TimelineMax, ${1:Ease} } from 'gsap'",
      "doc": "component methods options that dispatch an action from vuex store.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-import-gsap",
      "matches": {
        "vimport-gsap": true,
        "vue import gsap": true
      },
      "source": "javascript/vue"
    },
    "6acadbdaed676d7e241fb07df73f9cec": {
      "content": "<nuxt name=\"$1\">$2</nuxt>$0",
      "doc": "",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-namedview",
      "matches": {
        "nuxt namedview": true
      },
      "source": "javascript/nuxt"
    },
    "6ad03e400ffc06a5e3d3975a968959fc": {
      "content": "func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "HTTP handler",
      "matches": {
        "funch": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6ad614599b2aa5fedfcecff51a475736": {
      "content": "${1:action} unless ${2:condition}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Unless",
      "matches": {
        "unl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6adbbd2406241c860304feaee71156ae": {
      "content": "font-stretch: normal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "6ae17722c302b5b9f8f0d2f5f6d2244b": {
      "content": "padding-left: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pl": true
      },
      "source": "vim-snippets/snippets"
    },
    "6ae454da9e7ce9011f205ed22c90b958": {
      "content": "use Moose;\nuse namespace::autoclean;\n${1:#}BEGIN {extends '${2:ParentClass}'};\n${0}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "moose": true
      },
      "source": "vim-snippets/snippets"
    },
    "6aec2f181205a5bd8ef9db0e64bd081b": {
      "content": "page-break-after: always",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "6aede45af1aa30f9e297608168e74edd": {
      "content": "if ($1 != null)\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "if not null",
      "matches": {
        "ifnn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6af080b5d64185c715f8bdb301340d5a": {
      "content": "Url:previous();",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_url_previous": true
      },
      "source": "vim-snippets/snippets"
    },
    "6af30c2fc668451e04a71487dca736d6": {
      "content": "for all ${1} ${2:in} ${3} => ${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "for all",
      "matches": {
        "for_all": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6af737e4d5b97f6738fa9e295c5a96d2": {
      "content": "\\\\begin{equation}\n\\\\begin{tikzcd}\n\t${1}\n\\\\end{tikzcd}\n\\\\end{equation}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "tikzcd environment in equation",
      "matches": {
        "tikzcd": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b0240d40f312bba0b2f98dfd6483001": {
      "content": "for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b1234d6acda94f1d43ebd6a943a7aca": {
      "content": "$.isFunction(${1:obj})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isfunc": true
      },
      "source": "snippets/javascript"
    },
    "6b22647f1bf892fd778b9c1167dcfe53": {
      "content": "considering ${1:#:case}\n\t${0:TARGET}\nend considering",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "con": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6b271284d2f83c51f5e52a47024dbfaf": {
      "content": "_.findKey(${object}, ${predicate})",
      "doc": "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findKey(users, function(o) { return o.age < 40; });\n// => 'barney' (iteration order is not guaranteed)\n\n// The `_.matches` iteratee shorthand.\n_.findKey(users, { 'age': 1, 'active': true });\n// => 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findKey(users, 'active');\n// => 'barney'\n\nThis method is like `_.find` except that it returns the key of the first\nelement `predicate` returns truthy for instead of the element itself.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-findkey",
      "matches": {
        "lodash findkey": true
      },
      "source": "javascript/lodash"
    },
    "6b2c37ec06664b9ae24813241fbf0f18": {
      "content": "File.open(${1:#:filename}, '${2:#:mode}') do |${3:io}|\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "File.open(filename) do ... end",
      "matches": {
        "fileopen": true,
        "open": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6b2d1d58440885833a299352e6c6f5ae": {
      "content": "\\autocite{${1}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\autocite": true,
        "autocite": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6b3aed4ebf28cf179f89edf100aa9ea8": {
      "content": "list-style-position: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisp": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b3af52bfbdee40f37437683af4fc351": {
      "content": "$.isArray(${1:obj})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isarr": true
      },
      "source": "snippets/javascript"
    },
    "6b3b1b3716c590f6c4b8e6f39c5a28c1": {
      "content": "<%= render partial: '${1:item}', collection: ${0:items} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rpc": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b4439bee04ca715fdb879679b3af584": {
      "content": "beforeEach(() => {\n\t$0\n});",
      "doc": "beforeEach function is called once before each spec",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-beforeeach",
      "matches": {
        "be": true,
        "jest beforeeach": true
      },
      "source": "javascript/jest"
    },
    "6b4705f9741bfcec684b66cfcc3f45e9": {
      "content": "mods : { ${1:modName} : '${2:modVal}' },",
      "doc": "",
      "filetype": "javascript-bemjson",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mo": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b4e81f7aa4d460d2f15f71e077ed377": {
      "content": "font-stretch condensed",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b590c39fdd684345add231213b7646f": {
      "content": "visibility: hidden",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b5c3acd8c70cad749722b468655e972": {
      "content": "width ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b641d2b780616afcb814af5da05d24e": {
      "content": "describe.skip('${1:Name of the group}', () => {\n\t$0\n});",
      "doc": "creates a describe block that will be skipped",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-describe-skip",
      "matches": {
        "descs": true,
        "jest describe skip": true
      },
      "source": "javascript/jest"
    },
    "6b674746e0fab2200c78aee6900e3b53": {
      "content": "color: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "c": true,
        "color": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6b6ce05777cb7e907ca20469c9576848": {
      "content": "border-style dashed",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:ds": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b6fb7218dcb60dc1cb2894569b354d3": {
      "content": "if ${1:#:condition}:\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "if ...: ...",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6b814bb2caf542a6034cfc46eb154bd8": {
      "content": "/*! TODO: ${1:Todo description here} */",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "todo": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b86a3ba512ba5734af5355ad0f63059": {
      "content": "@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();",
      "doc": "Angular @Output event and emitter",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "output-event",
      "matches": {
        "a-output-event": true,
        "angular output event": true
      },
      "source": "javascript/angular"
    },
    "6b8ec8f967bc8f84442df5306caa5bd4": {
      "content": "alias ${1:value} this;\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alth": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b945b7feea251c758ef5c034bd3b90b": {
      "content": "// @flow\nimport * as React from 'react';\ntype Props = {\n  $0\n};\ntype State = {\n  $1\n};\nexport class ${2:${TM_FILENAME_BASE}} extends React.Component<Props, State>{\n  render() {\n    return (\n      <div>\n        \n      </div>\n    );\n  };\n};",
      "doc": "Creates a React component class with FlowTypes",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "flowClassComponent",
      "matches": {
        "fcc": true
      },
      "source": "vscode-react/snippets"
    },
    "6b96a1ba70b7b33df6121f5eceeb1eca": {
      "content": "xhr :delete, :${1:destroy}, id: ${2:1}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xdelete": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b9b3ed61218b17c75517e014a9a75d7": {
      "content": "it { should respond_with ${0:status} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isrw": true
      },
      "source": "vim-snippets/snippets"
    },
    "6b9d8804f0a4776088cb0e14ba68ea58": {
      "content": "jasmine.any($1)",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "any (coffee)",
      "matches": {
        "any": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6ba44535b8f377c6eaccc1098027e146": {
      "content": "main(_) -> io:format(\"Hello, world!\\n\").",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "helloworld": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6bb00ca968e2778e89c877a1a61866ad": {
      "content": "case ${1:#:val}:\n    ${0:TARGET}\n    break;",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6bb687f63b2c5eee86e391958209720b": {
      "content": "assertEquals(\"${1:Failure message}\", ${2:expected}, ${3:actual});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ae": true
      },
      "source": "vim-snippets/snippets"
    },
    "6bb9d4af1b913210bc2d71beda5a9d1e": {
      "content": "/**\n * ${4:#:undocumented function}\n *\n * @return ${5:void}\n * @author ${6}\n **/\n${1}function ${2}(${3});${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc_interface_function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6bc2e35ae17660654754b72c6bf09552": {
      "content": "after_update :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mau": true
      },
      "source": "vim-snippets/snippets"
    },
    "6bcaa708a9859ee98c1f21f3c084fb44": {
      "content": "{% else %}\n\t$1",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6bd41fb4a2bb428a33187c7dc3f4a083": {
      "content": "wordwrap:${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wordwrap": true
      },
      "source": "vim-snippets/snippets"
    },
    "6bd845bd994c8fabf9e5358d0583eb34": {
      "content": "<%= ${1:f}.file_field :${0:attribute} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffff": true
      },
      "source": "vim-snippets/snippets"
    },
    "6bde496ebe1a9c20b45fc9bc9b963f5c": {
      "content": "<embed src=\"${1}\" type=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "embed": true
      },
      "source": "vim-snippets/snippets"
    },
    "6be1586512c4a2348b99e6f022a394ca": {
      "content": "<?php\n/**\n * ${1:}\n */\nclass ${2:Site}Controller extends ${3:CController}\n{\n\t  public function action${4:Index}()\n\t  {\n\t      ${0}\n\t  }\n\t// -----------------------------------------------------------\n\t// Uncomment the following methods and override them if needed\n\t/*\n\tpublic function filters()\n\t{\n\t\t// return the filter configuration for this controller, e.g.:\n\t\treturn array(\n\t\t\t'inlineFilterName',\n\t\t\tarray(\n\t\t\t\t'class'=>'path.to.FilterClass',\n\t\t\t\t'propertyName'=>'propertyValue',\n\t\t\t),\n\t\t);\n\t}\n\tpublic function actions()\n\t{\n\t\t// return external action classes, e.g.:\n\t\treturn array(\n\t\t\t'action1'=>'path.to.ActionClass',\n\t\t\t'action2'=>array(\n\t\t\t\t'class'=>'path.to.AnotherActionClass',\n\t\t\t\t'propertyName'=>'propertyValue',\n\t\t\t),\n\t\t);\n\t}\n\t*/\n}",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ycontroller": true
      },
      "source": "vim-snippets/snippets"
    },
    "6be4a0bde3eb02547d487ca2ef8e1d0c": {
      "content": "expect(${1:target}).not.toBeDefined()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect not to be defined (coffee)",
      "matches": {
        "notd": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6bf614af2466558affccd37133d4e5f1": {
      "content": "# frozen_string_literal: true",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "frozen": true
      },
      "source": "vim-snippets/snippets"
    },
    "6bf7c8235ec1bb8f735dc7339170c1f7": {
      "content": "Page Should Not Contain Radio Button    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Not Contain Radio Button",
      "matches": {
        "psncrb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6c032d8030afdb68c6aaa1c40aaf34a1": {
      "content": "console.assert(${1:expression}, ${0:obj});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.assert",
      "matches": {
        "ca": true
      },
      "source": "snippets/javascript"
    },
    "6c0df1d9f5d31ac9afda32bf30129d42": {
      "content": "text-outline: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "to": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c1704bd1c5e2ff3a57d0fea65f42d05": {
      "content": "instance ${1:Monoid} ${2:Type} where\n\t${0}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inst": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c209eec8d21e7c09145167db7f3f75b": {
      "content": "@lang('$1')",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@lang directive",
      "matches": {
        "lang": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6c2efcab829f9793075bdbb9e7218e52": {
      "content": "PropTypes.arrayOf($0).isRequired,",
      "doc": "An array of a certain type required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-array-of-required",
      "matches": {
        "prop-types arrayof required": true,
        "ptaor": true
      },
      "source": "javascript/prop-types"
    },
    "6c2f2a3d72cdfdd421e3396923179938": {
      "content": "(defn ${1:name} \"${2:doc-string}\" [${3:arg-list}]\n\t${0:code})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defn": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c3030032f1793a3fcd52181f3c45f66": {
      "content": "cursor hand",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:ha": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c31561ba13cd44e6215999a688c15d7": {
      "content": "${pageContext.request.contextPath}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cpath": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c381e09f74adc550ef236062549e940": {
      "content": "/**\n * ${1:undocumented class variable}\n *\n * @var ${2:string}\n */",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc_vp": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c459c7177d76d0c8f03a72fcd5dffa4": {
      "content": "private ${1}: ${0:any}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts create private field",
      "matches": {
        "tprfi": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c4ea82000c8574678248fe4cee539f7": {
      "content": ".. attention:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "attention",
      "matches": {
        "attention": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6c52bd458d50003978fe3f1cc4627be4": {
      "content": "(** ${0:TARGET} *)",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "ocamldoc comment (** .. *)",
      "matches": {
        "oo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6c5ab5742511e9d97debd960a5bd2415": {
      "content": "<style lang=\"postcss\" scoped>\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with postcss scoped",
      "matches": {
        "style_with_postcss_scoped": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6c641b1fa342659d7ba36f76ea736815": {
      "content": "fieldset\n\tlegend ${1}",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fieldset": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c64fc766ac08ce85c99ea2cdc0a355f": {
      "content": "${1:obj}.parentsUntil('${2:selector expression}'${3:, 'filter expression'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parentsu": true
      },
      "source": "snippets/javascript"
    },
    "6c6a76325311c49a50098af843556e1a": {
      "content": "$routeProvider.when '${1:url}',\n\ttemplateUrl: '${2:templateUrl}'\n\tcontroller: '${3:controller}'\n${4}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngrw": true
      },
      "source": "snippets/coffee"
    },
    "6c6bcad1d86bce39ec33edfb5fa5336d": {
      "content": "${1:obj}.removeAttr('${2:attribute name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rema": true
      },
      "source": "snippets/javascript"
    },
    "6c6eb4f8bc856a2679bd47f148006ebc": {
      "content": "| escape",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "escape": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c74ebb10326eed0f46522829fb81bec": {
      "content": "_.find(${collection}, ${predicate}, ${fromIndex})",
      "doc": "var users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n];\n\n_.find(users, function(o) { return o.age < 40; });\n// => object for 'barney'\n\n// The `_.matches` iteratee shorthand.\n_.find(users, { 'age': 1, 'active': true });\n// => object for 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.find(users, ['active', false]);\n// => object for 'fred'\n\n// The `_.property` iteratee shorthand.\n_.find(users, 'active');\n// => object for 'barney'\n\nIterates over elements of `collection`, returning the first element\n`predicate` returns truthy for. The predicate is invoked with three\narguments: (value, index|key, collection).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-find",
      "matches": {
        "lodash find": true
      },
      "source": "javascript/lodash"
    },
    "6c7924ddb11083a2501163a85c7f57d5": {
      "content": "unbinary(\"${0:str}\"});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unbinary": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c7b0c1658180460deb91e2bcebbb89b": {
      "content": "ambient(${1:value1}, ${2:value2}, ${0:value3});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ambient": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c7ef61cd239f05add56cbce23ba08b6": {
      "content": "height=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "height": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c89b40c34a751566da7792e59747077": {
      "content": "for ${1:i} in ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c908cb2b9aea4fbf71ec55777d0f936": {
      "content": "println!(\"${1}\");",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "println!",
      "matches": {
        "pln": true
      },
      "source": "vim-snippets/snippets"
    },
    "6c90cf2a4d431306472aeed979f6f0f0": {
      "content": "crossTable <- xtabs(~${1:varNames}, data= ${2:dataName}, exclude = c(${3:exclude}), subset = ${4:subset})\nftable(crossTable)  # print crosstabs\nsummary(crossTable) # chi-square tests",
      "doc": "Crosstabulations for variables in a data frame",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Crosstabs",
      "matches": {
        "xtabs": true
      },
      "source": "vscode-R/snippets"
    },
    "6c9b0c05a5c9e34bcbf7396f2b74dfe3": {
      "content": "(:require [${1:namespace} :as [${0}]])",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "require": true
      },
      "source": "vim-snippets/snippets"
    },
    "6ca0cd9bcbae8aa90703ceda2c22c6c4": {
      "content": "border-width ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdw": true
      },
      "source": "vim-snippets/snippets"
    },
    "6cabeeced29fb61bda5d0e37901a2181": {
      "content": "<header>\n    ${1}\n</header>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "header": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6cb6fc87aadca73ad5c55195ca4ca28f": {
      "content": "println!(${1:\"\\{\\}\"}, ${0:TARGET});",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "println!",
      "matches": {
        "pln": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6cbc1a059ad371672cb310d4460fd393": {
      "content": "/** @var ${3:string} */\n${1:public} $${2};",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "att": true
      },
      "source": "vim-snippets/snippets"
    },
    "6cc3598ed948ce67c98cc41bcf80c0a7": {
      "content": "it { should ensure_length_of :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isel": true
      },
      "source": "vim-snippets/snippets"
    },
    "6cd1e140637612154d023df1733338cb": {
      "content": "<%doc>\n\t${1:}\n</%doc>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "doc",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6cd5e4f7d5d602391549ba3b9134fc00": {
      "content": "interface ${1} ${2:#:extends}{\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "interface": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6cef2a75f204fe2518fd2b1f1d2cbbda": {
      "content": "grid-auto-rows auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "6cf3b478413bfeec307e4a8439d79ecb": {
      "content": "list-style-type: decimal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:dc": true
      },
      "source": "vim-snippets/snippets"
    },
    "6cf593c7917770d929f8f5bd8326f301": {
      "content": "def __unicode__(self):\n\t${0:representation}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "uni": true
      },
      "source": "vim-snippets/snippets"
    },
    "6cf8472a279a3397cae0c61ac571c76b": {
      "content": "module ${1:M} (${2:Arg} : ${3:ARG}) = struct\n\t${4:(* BODY *)}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "define functor - no signature",
      "matches": {
        "func": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6cf8bc7b2506d26719894ef58c17a36d": {
      "content": "marker-offset: ${1:10px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "marker-offset: length (marker)",
      "matches": {
        "marker": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6cfd964cb57ac80f3ac55a5cf7cef44f": {
      "content": "const $1 = $2 => dispatch($3);",
      "doc": "Redux dispatch hook",
      "filetype": "redux",
      "grammar": "lsp",
      "label": "redux-dispatch-hook",
      "matches": {
        "redux dispatch": true,
        "rxd": true
      },
      "source": "javascript/redux"
    },
    "6d01dc0518553b7b0ae4025dec3468ee": {
      "content": "#!/usr/bin/env python\n$0",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "#!/usr/bin/env python",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6d08efb62b9e53fc33f91685bac97586": {
      "content": "public string ${1} { get; internal set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps+&": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d0a14a4fa7009d9eab19cb00f402689": {
      "content": "__global__ void ${1:kernel}(${2:void}) {\n\t${0:// TODO: Implement}\n}",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Kernel definition",
      "matches": {
        "kern": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d0a4a6620b37df050617887d8ecc00a": {
      "content": "<c:choose>\n\t${0}\n</c:choose>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cchoose": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d1b1a926c498482c6bd39a11cefcb46": {
      "content": "@online{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    url = {${4}},\n    note = {year/date},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@online": true,
        "online": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6d1b3265bd78fad7e1530173751b5d83": {
      "content": "background-break: bounding-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d2388c5a0ab37709433e3e8bf6d9c39": {
      "content": "| last",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "last": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d2753ea14402413019c25719c71f4af": {
      "content": "extends ${0:what}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "extends": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d350e67dd28b41abc9f0443b32b53fa": {
      "content": "<keep-alive>\n\t<component :is=\"\">\n\t\t<p>default</p>\n\t</component>\n</keep-alive>",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vkeep": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d3d1288c1b18db6999d3ce1c4656efa": {
      "content": "private ${1:int} ${2:myVar};\npublic $1 ${3:MyProperty}\n{\n\tget { return $2; }\n\tset { $2 = value; }\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "propf": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d47df4fcda53a1ec1fcad3e699f5821": {
      "content": "System.Windows.Forms",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s.w.f": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6d4bf6ceb54e280b69b531a8ad64c942": {
      "content": ".DEFAULT_GOAL := ${1}",
      "doc": "",
      "filetype": "make",
      "grammar": "snu",
      "label": "",
      "matches": {
        "default": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d4c117254f951cef931bc0f8b33ae52": {
      "content": "do {\n\t${0:${VISUAL}}\n} while (${1:/* condition */});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d57738a9b0fb6f3f312feb371ad6efa": {
      "content": "outline-width: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ow": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d5b9ed4925a1692245722b13a80fdef": {
      "content": "grid-row-gap: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grg": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d64ec848c6af71cbf4ae33d0fb37cbf": {
      "content": "Array${1:[T]}${0:()}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "arr": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d6883150c7f8a567c72f42ef5f82ea9": {
      "content": "File.join(File.dirname(__FILE__), *['${1:rel path here}'])",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fpath": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d6be3bbf7c5b74c97b4806e963c57de": {
      "content": "${1:Object} ${2:o}${3: = new $1}(${0});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "object": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d6f7647b7e18eccc42092893221d74c": {
      "content": "process (${1:clk})\nbegin\n\tif rising_edge ($1) then\n\t\t${2}\n\tend if;\nend process;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prc": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d73526fac58eba39f6bc41ebf3053ed": {
      "content": "self.${1:attribute} = $1",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "self.attribute = attribute",
      "matches": {
        "sa": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d819b9d6d44105722742f8cb8cf8189": {
      "content": "PropTypes.instanceOf($0),",
      "doc": "Is an instance of a class prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeInstanceOf",
      "matches": {
        "pti": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "6d82e5cee944c426e6abd9b2ca8b4d0a": {
      "content": "useMemo(() => ${1:function}, ${2:input})",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-usememo",
      "matches": {
        "react usememo": true,
        "usememo": true
      },
      "source": "javascript/react"
    },
    "6d85bc0a9bf712e5c0123bff5d7ccea5": {
      "content": "$this->db->insert(${1:table}, ${2:data});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_db_insert": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d9250be4378ef2ca4d7399f898af22b": {
      "content": "str_replace(${1:search}, ${2:replace}, ${3:subject})$0",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "str_replace",
      "matches": {
        "sr": true
      },
      "source": "vim-snippets/snippets"
    },
    "6d9c62a0da7df1089a8e63d444482c30": {
      "content": "const { ${scrollYProgress} } = useViewportScroll()",
      "doc": "useViewportScroll(): ScrollMotionValues Returns MotionValues that update when the viewport scrolls.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-viewport-scroll",
      "matches": {
        "framer-motion use-viewport-scroll": true,
        "use-viewport-scroll": true
      },
      "source": "javascript/framer-motion"
    },
    "6da302829d60b75161c156501e11ea09": {
      "content": "try {\n\t${1:${VISUAL}}\n} catch {\n\tcase e: FileNotFoundException => ${2}\n\tcase e: IOException => ${3}\n} finally {\n\t${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "6daaa999de16f79da85d2dab3363ebc0": {
      "content": "if (${1:/* condition */}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "6dac4dea48d4ffe78b4b88e356ec830c": {
      "content": "if ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "6dac516776294ed90aabda4b1cac9c9b": {
      "content": "public ${1:String} get${2}() {\n\treturn ${0:fieldName};\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "get": true
      },
      "source": "vim-snippets/snippets"
    },
    "6dafc04bbff12379f128f3955d3ebf3b": {
      "content": "flex-direction: column-reverse;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxd:cr": true
      },
      "source": "vim-snippets/snippets"
    },
    "6db9a9e7d1df501edc6c09da97a86d74": {
      "content": "white-space-collapse normal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "6dbc7bcda3f9ac5fb6efa31eb05897d7": {
      "content": "padding: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true,
        "padding": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6dc4bf2172463ae28352426ab93b1fd7": {
      "content": "(map #(${1:lambda}) ${0:coll})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapl": true
      },
      "source": "vim-snippets/snippets"
    },
    "6dc8ad00b4281812a2b9f7632b9a1974": {
      "content": "print(${0:TARGET})",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true,
        "print": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6dc9d7a3d5674bc1d8c3a39915a775fe": {
      "content": "import { ${1} } from '${2}';",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "import { member } from 'xyz'",
      "matches": {
        "imm": true
      },
      "source": "snippets/javascript"
    },
    "6dcff7ca077d0f5737c67d48663adc07": {
      "content": "import { request } from 'graphql-request';",
      "doc": "",
      "filetype": "graphql-request",
      "grammar": "lsp",
      "label": "graphql-request-import-request",
      "matches": {
        "graphql-request import request": true
      },
      "source": "javascript/graphql-request"
    },
    "6dd168af53c053636d752225050bf331": {
      "content": "errors.Wrapf(${1:err}, \"${2:message %v}\", ${3:args...})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "errors.Wrapf",
      "matches": {
        "ewf": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "6dd16ef23951d207cf8372c63d7b71b4": {
      "content": "Element Should Be Disabled    \\${${1:locator}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Element Should Be Disabled",
      "matches": {
        "esbd": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6ddd6f0bcb2f289ae2ce378288cf68b0": {
      "content": "Yii::app()->request->cookies['${0}']",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yco": true
      },
      "source": "vim-snippets/snippets"
    },
    "6de115043020c0782f60067a3719f3ee": {
      "content": "justify-items: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji": true
      },
      "source": "vim-snippets/snippets"
    },
    "6de2739a4bbe84586e16f1df70e853d7": {
      "content": "array.max()",
      "doc": "array.max(limit: number | Ref, message?: string | function): Schema\n\nSet a maximum length limit for the array. The ${max} interpolation can be used in the message argument.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "array-max",
      "matches": {
        "yup array max": true
      },
      "source": "javascript/yup"
    },
    "6de496567f648058069bcf653ffc092a": {
      "content": "int ${1:x} = threadIdx.x + blockIdx.x * blockDim.x;",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Get current X index (1D)",
      "matches": {
        "ix": true
      },
      "source": "vim-snippets/snippets"
    },
    "6ded6144ac763abac7c71d021e4c87a9": {
      "content": "if ${1}\n\t${2}\nelse\n\t${0}\nend",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "if ... else",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "6dee8286ac2188ca1a1d0ae3f17f687f": {
      "content": "const ${1:actionCreatorName} = ${2:payload} => {\n  return {\n    type: '${3:ACTION_TYPE}',\n    payload: ${2:payload},\n  };\n};",
      "doc": "Redux action template",
      "filetype": "redux",
      "grammar": "lsp",
      "label": "redux-action",
      "matches": {
        "redux action": true,
        "rxaction": true
      },
      "source": "javascript/redux"
    },
    "6df0097921b2854646b2608bfb3b63b9": {
      "content": "directive '${1:directiveName}', factory = (${2:injectables}) ->\n\tdirectiveDefinitionObject =\n\t\t${3:directiveAttrs}\n\t\tcompile: compile = (tElement, tAttrs, transclude) ->\n\t\t\t(scope, element, attrs) ->\n\tdirectiveDefinitionObject",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngdc": true
      },
      "source": "snippets/coffee"
    },
    "6df29228e42ff3c6207ef202c7ff6a2a": {
      "content": "_${1}_${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "_italic_",
      "matches": {
        "italic": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6df30a304d53a5bddd8313c57e347aac": {
      "content": "{% widthratio ${1:this_value} ${2:max_value} ${0:100} %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "widthratio": true
      },
      "source": "vim-snippets/snippets"
    },
    "6df7fb068e487fc0e51e37986619f8bf": {
      "content": "_.ary(${func}, ${n})",
      "doc": "_.map(['6', '8', '10'], _.ary(parseInt, 1));\n// => [6, 8, 10]\n\nCreates a function that invokes `func`, with up to `n` arguments,\nignoring any additional arguments.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-ary",
      "matches": {
        "lodash ary": true
      },
      "source": "javascript/lodash"
    },
    "6dff7f0cd5ca110cf92c5ff927d19074": {
      "content": "PropTypes.node,",
      "doc": "Anything that can be rendered: numbers, strings, elements or an array",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeNode",
      "matches": {
        "ptnd": true
      },
      "source": "vscode-react/snippets"
    },
    "6e02107df6b0ac17dc8eb3494c283b6f": {
      "content": "if $${1:variable} {\n\t${2}\n} else {\n\t${0}\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "6e041611e1bcd9c37db181ad70125c23": {
      "content": "merge(${1:x}, ${2:y}, ${3:by = ${4:intersect(names(x), names(y))}}, ${5:all = ${6:FALSE}})",
      "doc": "Merge",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "mer",
      "matches": {
        "merge": true
      },
      "source": "vscode-R/snippets"
    },
    "6e049d6c059d8573783868085791e2f6": {
      "content": "data(${1:name})",
      "doc": "Load Dataset",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "dat",
      "matches": {
        "data": true
      },
      "source": "vscode-R/snippets"
    },
    "6e05a3f950038c0931acb18c5357d287": {
      "content": "<svelte:self ${1:prop}={${2:value}} />",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-self-prop",
      "matches": {
        "svelte self prop": true,
        "svsep": true
      },
      "source": "javascript/svelte"
    },
    "6e139692dcf40c542a17a426f7d9b57a": {
      "content": "$scope.$watch '${1:watchExpr}', (newValue, oldValue) ->\n\t${2}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$w": true
      },
      "source": "snippets/coffee"
    },
    "6e1e1dc5992dba6c470e3f878301b5c3": {
      "content": "let ${1}: ${2} = ${3};",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "let variable declaration with explicit type annotation",
      "matches": {
        "lett": true
      },
      "source": "vim-snippets/snippets"
    },
    "6e2100610fbb5d5963105331ef52be87": {
      "content": "it { should ensure_inclusion_of :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isei": true
      },
      "source": "vim-snippets/snippets"
    },
    "6e2194b8bff841e072fb3ffdf2bd2914": {
      "content": "border-bottom-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbi": true
      },
      "source": "vim-snippets/snippets"
    },
    "6e3d4a9ffd653719f0350c8d4729cdea": {
      "content": "type ${1:Type} =\n\t${0}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ty": true
      },
      "source": "vim-snippets/snippets"
    },
    "6e49bb53a9e74e73637b3e89545aa176": {
      "content": "render partial: '${1:item}', collection: ${0:@$1s}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rpc": true
      },
      "source": "vim-snippets/snippets"
    },
    "6e51720a9ace894eb6e56fc4ff4b8a69": {
      "content": "struct ${1}\n    ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "struct ... end",
      "matches": {
        "struct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6e742ddfcf8b564dfd795bfa74933dbe": {
      "content": "type ${1:Struct} struct {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Struct declaration",
      "matches": {
        "struct": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6e83e57d95b38a61356a25777b2451b4": {
      "content": "align-self: start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "6e89b44fe6ab260510b1b62ee9beb10a": {
      "content": "expect($1).toBeTruthy();$0",
      "doc": "expects the argument is truthy",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobetruthy",
      "matches": {
        "jest expect tobetruthy": true,
        "tbt": true
      },
      "source": "javascript/jest"
    },
    "6e8bedbeb045e32c7827f9e49a537e84": {
      "content": "onDestroy(() => {\n\t${1:// content here}\n});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-on-destroy",
      "matches": {
        "svelte lifecycle destroy": true,
        "svlfd": true
      },
      "source": "javascript/svelte"
    },
    "6e8dd2369cba3f03b00b536f3ff4998a": {
      "content": "<label for=\"${0:$1}\">${1}</label>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "label": true
      },
      "source": "vim-snippets/snippets"
    },
    "6e9202dbec1f1d5d94a8d1544ef51776": {
      "content": "overflow-x auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "6eaa6b18ea6ae03bde14e8083aa53505": {
      "content": "(use gauche.test)\n(test-start \"${1}.scm\")\n(load \"$1.scm\")\n(test* \"${2}\" ${3:expected} ${4:actual})",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "(use gauche.test)(test-start ...",
      "matches": {
        "gauche-testsuite": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6ead0ba1b5ec00f11a8cc25b661450ef": {
      "content": "$this->markTestIncomplete(${1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->markTestIncomplete()",
      "matches": {
        "marki": true
      },
      "source": "vim-snippets/snippets"
    },
    "6eb5689a9987ee3441cdd8b332d5454d": {
      "content": "$this->renderText('${0}');",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yrt": true
      },
      "source": "vim-snippets/snippets"
    },
    "6eb56db6cf44b11a1de5cba96130f270": {
      "content": "border-bottom-left-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbli": true
      },
      "source": "vim-snippets/snippets"
    },
    "6eba32a3e2167807e93c332756b353f0": {
      "content": "${1:deferred}.promise(${2:target})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dprom": true
      },
      "source": "snippets/javascript"
    },
    "6ebabfcf9eeb28487e6f6e3ebd0edd38": {
      "content": "else {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6ec02bfab2b46b868841af99441e6594": {
      "content": "let ${1:x} = ${2:v} in\n${3:e}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "let .. in binding",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6ec14a292d5b3345de43e1902df715a7": {
      "content": "border-top-color ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtc": true
      },
      "source": "vim-snippets/snippets"
    },
    "6ec97bce235349f011d2297ed9eca011": {
      "content": "spyOn(${1:object}, \"${2:method}\").andReturn(${3:arguments})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "spy on and return (coffee)",
      "matches": {
        "sr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6eca3d5239317742ddb01364fdc5ae31": {
      "content": "<syntaxhighlight lang=\"${1}\">\n${2}\n</syntaxhighlight>",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sy": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6ecec1ee68e2f34d83d415eb0eff2296": {
      "content": "<form (ngSubmit)=\"onSubmit()\" #${1:form}=\"ngForm\">\n</form>",
      "doc": "Form with ngSubmit and form attributes",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngform",
      "matches": {
        "a-form": true,
        "angular ng form": true
      },
      "source": "javascript/angular"
    },
    "6ecf027018ab428af32a5003008f2605": {
      "content": "runs ->\n\t$0",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "runs (coffee)",
      "matches": {
        "ru": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6ecf3a5148d1122b2ec3eb04228be7f2": {
      "content": "while ${1:#:condition}:\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6edf085ba307701e8465eee3db490295": {
      "content": "number.lessThan()",
      "doc": "number.lessThan(max: number | Ref, message?: string | function): Schema\n\nValue must be less than max. The ${less} interpolation can be used in the\nmessage argument.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "number-less-than",
      "matches": {
        "yup number lessthan": true
      },
      "source": "javascript/yup"
    },
    "6ee2a599389dd21bed04be5891b8e91c": {
      "content": "${1:callbacks}.fire(${2:args})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cfire": true
      },
      "source": "snippets/coffee"
    },
    "6ee8b312a246ff8c1e4036f70e14c968": {
      "content": "nuxt-link(to=\"/${1:page}\") ${1:page}",
      "doc": "nuxt routing link",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Nuxt Routing Link",
      "matches": {
        "vnuxtl": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "6eeb5e5ef008535e58830c336134c0e8": {
      "content": "grid-auto-flow: column",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "6ef82f339c645defa1ce72c8ceb6ce30": {
      "content": "while (${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f0648e256575a8b7b83d9bfd7d5ca40": {
      "content": "if(${1:true})\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f08ba374c73b5a7ff75adaacb98b5c7": {
      "content": "digitalWrite(${1}, HIGH);",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dwHigh": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f0ab6e0712d8bbeefcef675028a6f57": {
      "content": "<c:url value=\"${1}\" var=\"${2}\">\n\t<c:param name=\"${4}\" value=\"${5}\" />\n\tcparam+${0}\n</c:url>\n<a href=\"${$2}\">${3}</a>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "curl+": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f16260aed4cfdb9dc2b48dd4b092943": {
      "content": "validates :${0:terms}, acceptance: true",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates .., acceptance: true",
      "matches": {
        "va": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f1695a5f4b9b02aaed14b73d1bfd41c": {
      "content": "display: block;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f2a8fa1dfc0315b51cb04a065abe517": {
      "content": "min-width: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "miw": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f377bb09f595170ab7bdd53886d3d9f": {
      "content": "${1:obj}.fadeTo('slow/400/fast', ${2:0.5}, function () {\n\t${0:// callback};\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadetoc": true
      },
      "source": "snippets/javascript"
    },
    "6f47e615850eb1275a68de50a1583e7d": {
      "content": "props: {\n\t${1:propName}: {\n\t\ttype: ${2:Number},\n\t\tdefault: ${0}\n\t},\n},",
      "doc": "Vue Props with Default",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Props with Default",
      "matches": {
        "vprops": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "6f4902775bd5a994eb9ed1af9c791c88": {
      "content": "_.isFunction(${value})",
      "doc": "_.isFunction(_);\n// => true\n\n_.isFunction(/abc/);\n// => false\n\nChecks if `value` is classified as a `Function` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isfunction",
      "matches": {
        "lodash isfunction": true
      },
      "source": "javascript/lodash"
    },
    "6f5570d9e600448b85a9864a09037e75": {
      "content": "&#x232B;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "backspace": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f571e7acacc2c0a5ad1ed24f59ade78": {
      "content": "use Carp; # 'verbose';\n# cloak \"die\"\n# warn \"warning\"\n$SIG{'__DIE__'} = sub {\n\trequire Carp; Carp::confess\n};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "debug_trace": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f5b06a364044fe478aa105655e8bff0": {
      "content": "module ${1:M} (${2:Arg} : ${3:ARG}) : ${4:SIG} = struct\n\t${5:(* BODY *)}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "define functor - with signature",
      "matches": {
        "Func": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6f5ba221dd365bcbf063cb2c4dfcd6f2": {
      "content": "Console.WriteLine(${1});",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cw": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f5cb0306389632329e8c881802c79ad": {
      "content": "if ${1:condition}\n\t${2:${VISUAL}}\nelse\n\t${0}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f5d4ef8babdd2c138675a3d1e610c38": {
      "content": "@require '${0}'",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@r": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f6c0af2d2bcb68b1331bed33127cb2b": {
      "content": "with ${1};${2}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "with ...;...",
      "matches": {
        "with": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6f6f45b467a86d2eb35068daaa955842": {
      "content": "PropTypes.objectOf($0),",
      "doc": "An object with property values of a certain type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeObjectOf",
      "matches": {
        "ptoo": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "6f71bc2cc9327c760c8ab3e1970a30e4": {
      "content": "public string ${1}(${2})\n{\n\t${0:return \"\";}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ms+": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f756b6dc0b2a6545db09b102e47608a": {
      "content": "${1:fn}.apply(${2:this}, ${3:arguments})",
      "doc": "function apply",
      "filetype": "base",
      "grammar": "lsp",
      "label": "function-apply",
      "matches": {
        "base function apply": true
      },
      "source": "javascript/base"
    },
    "6f78f0349cd8a3dfc809d9d168831f6b": {
      "content": "beforeAll(function() {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "before all (js)",
      "matches": {
        "befa": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f822d8cddbe152d4c7135d8fc17359a": {
      "content": "${1}.forEach((${2:item}) => {\n\t${0}\n});",
      "doc": "forEach loop",
      "filetype": "base",
      "grammar": "lsp",
      "label": "foreach-loop",
      "matches": {
        "base foreach": true
      },
      "source": "javascript/base"
    },
    "6f8d484bc99951baa41dfed167a033fb": {
      "content": "foreach (${1:#:var} in ${2:#:iter}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "foreach () {}",
      "matches": {
        "fore": true,
        "foreach": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6f90ac3d36dcb6546b880c6c987f10ff": {
      "content": "std::cout << ${1} << std::endl;",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cout": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f92dfbaf622891726b7ce7aaabb9b78": {
      "content": "<input type=\"${1:text/submit/hidden/button/image}\" name=\"${2}\" id=\"${3:$2}\" value=\"${4}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input": true
      },
      "source": "vim-snippets/snippets"
    },
    "6f93b32e265c9279d9893da5dd9a30e5": {
      "content": "_.isMap(${value})",
      "doc": "_.isMap(new Map);\n// => true\n\n_.isMap(new WeakMap);\n// => false\n\nChecks if `value` is classified as a `Map` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-ismap",
      "matches": {
        "lodash ismap": true
      },
      "source": "javascript/lodash"
    },
    "6f93f3dfc50ce68fc0548a3e7cf42106": {
      "content": "console.debug(${1:object});",
      "doc": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consoledebug",
      "matches": {
        "base console debug": true
      },
      "source": "javascript/base"
    },
    "6f9b782a57e26c755af9e25de76d47f7": {
      "content": "{% elif ${0:condition} %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fa82d9d06b49c6d18926adcc02e7a24": {
      "content": "splice(${1:array}, ${2:value/array2}, ${0:index});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "splice": true
      },
      "source": "vim-snippets/snippets"
    },
    "6faa314e1850d4f4f03d5e996847d269": {
      "content": "$this->assertClassHasAttribute(${1:$attributeName}, ${2:Example}::class);",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertClassHasAttribute($name, Example::class)",
      "matches": {
        "ascha": true
      },
      "source": "vim-snippets/snippets"
    },
    "6faba2fe8fff05c71c91f6d4fbf21782": {
      "content": "<Directory ${1:/Library/WebServer/}>\n\t${0}\n</Directory>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dir": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6fac11feabeb357563343b3a8fe82897": {
      "content": "@doc \"\"\"\n${1:doc string}\n\"\"\"\ndef ${2:name} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defd": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fb297576d6934a4f00d4d5f81fd002f": {
      "content": "{% unless ${1:condition} %}\n\t${0:${VISUAL}}\n{% endunless %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unless": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fb83df367dcdb6c71c17e0f3297d3b6": {
      "content": "sqrt(${0:value});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sqrt": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fbf87fa47e4a3d4d2c05ab23d38bbc0": {
      "content": "text-align=\"left\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alignl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6fc3bcea4b748ec9a13373245eb50f03": {
      "content": "expect($1).toHaveProperty(${2:keyPath}, ${3:value});$0",
      "doc": "returns true if the argument matches the second object",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tohaveproperty",
      "matches": {
        "jest expect tohaveproperty": true,
        "thp": true
      },
      "source": "javascript/jest"
    },
    "6fc5140a4aca2defc9710c2e7db3c48c": {
      "content": "call ${1:s:V}.load('${2:#:module_name}')",
      "doc": "",
      "filetype": "vital",
      "grammar": "snu",
      "label": "call s:V.load('...')",
      "matches": {
        "vital_load": true
      },
      "source": "neosnippets/vim"
    },
    "6fc9c413e81c8d6350fcc724e98cc4c7": {
      "content": "expect(${1:target}).not.toBeHidden();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to be hidden (js)",
      "matches": {
        "noth": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fca7c92e477c7b436f97f82efaffb31": {
      "content": "white-space: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fcf259cc179669af110f8eb5cfe8cbd": {
      "content": "import ${1} (${2})",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "import ... (...)",
      "matches": {
        "importOnly": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6fd0149f1195e482051c36e3e0b4d86b": {
      "content": "foreach ($${1:#:variable} as $${2:#:key}${3: =>} $${4:#:value}) {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "foreach-hashmap": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "6fd0b59d4900ec6e5f79d5442095e987": {
      "content": "(${1:args}) ~>\n\t${2}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bfun": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fd1c0b39fa3519424abf18b42ab152c": {
      "content": "<c:import url=\"${1}\">\n\t<c:param name=\"${2}\" value=\"${3}\" />\n\tcparam+${0}\n</c:import>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cimport+": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fd3e9742bc78595aa64e20bbd0e6e91": {
      "content": "BEGINFILE {\n\t${0}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "BEGINFILE { ... }",
      "matches": {
        "begf": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fe286e371c3f19357cc57b681486ef5": {
      "content": "var_export($1);$0",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "Dumb debug helper in cli",
      "matches": {
        "pc": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fe4402de77e0896fa0a91b76b3b5bbe": {
      "content": "${1}.filter(${2:item} => {\n\t${0}\n});",
      "doc": "filter",
      "filetype": "base",
      "grammar": "lsp",
      "label": "filter",
      "matches": {
        "base filter": true
      },
      "source": "javascript/base"
    },
    "6fe6e883a230353bc54cc9be22b759e4": {
      "content": "where(${1:'conditions'}${0:, bind_var})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wc": true
      },
      "source": "vim-snippets/snippets"
    },
    "6fecece12ca7e6f7457743fb85385b54": {
      "content": "PropTypes.number.isRequired,",
      "doc": "Number prop type required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-number-required",
      "matches": {
        "prop-types number required": true,
        "ptnr": true
      },
      "source": "javascript/prop-types"
    },
    "6fef67905e328c1f575f29ad8562c729": {
      "content": "${1:moduleName} = angular.module '$1', [${2:moduleDeps}]\n${3}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngma": true
      },
      "source": "snippets/coffee"
    },
    "6ff8dc8ca9952e540a6a73fc56fb646a": {
      "content": "import EmberObject from '@ember/object';\n\nexport default EmberObject.extend({\n\t${0://Properties here...}\n});",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "import EmberObject from '@ember/object';",
      "matches": {
        "eobj": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "6ffbd9c67da85eb909032131601e58e0": {
      "content": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: '${1:selector-name}'\n})\n\nexport class ${2:Name}Pipe implements PipeTransform {\n\ttransform(value: any, ...args: any[]): any {\n\t\t$0\n\t}\n}",
      "doc": "Angular pipe",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-pipe",
      "matches": {
        "a-pipe": true,
        "angular pipe": true
      },
      "source": "javascript/angular"
    },
    "6ffee44bae9212f44f23fa3f1d9b0c37": {
      "content": "class=\"${1}\"${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7007ccf3aa75aa69abbcff388b8db678": {
      "content": "import { useInView } from 'react-intersection-observer';",
      "doc": "",
      "filetype": "react-intersection-observer",
      "grammar": "lsp",
      "label": "react-intersection-observer-import",
      "matches": {
        "react-intersection-observer import": true,
        "rio import": true
      },
      "source": "javascript/react-intersection-observer"
    },
    "7009b4f9a17449cd41a292deae9cf737": {
      "content": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
      "doc": "Imports a specific portion of the module by assigning a local alias in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "importAs",
      "matches": {
        "ima": true
      },
      "source": "vscode-javascript/snippets"
    },
    "701835ba292778f0cdd81a3b49f9122f": {
      "content": "${1:obj}.stop('${2:queue}', ${3:false}, ${4:false})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stop": true
      },
      "source": "snippets/javascript"
    },
    "70197f28a411ab087df2799b9e85fe22": {
      "content": "Debug.Assert(${1:true});",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "Debug.Assert",
      "matches": {
        "da": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "701aff46c1b387c2204efcfea2ad5a65": {
      "content": "justify-content: space-around;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:sa": true
      },
      "source": "vim-snippets/snippets"
    },
    "701f5dee2ace5b04eedb0c23156ece06": {
      "content": "@while ${1:$i} ${2:>} ${3:0} {\n\t${0}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "while": true
      },
      "source": "vim-snippets/snippets"
    },
    "70237f98d5108514138ad42bad15694d": {
      "content": "procedure ${1};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "procedure declaration",
      "matches": {
        "procd": true
      },
      "source": "vim-snippets/snippets"
    },
    "7024fdebcdfd92dd144d4f4c59f9b574": {
      "content": "align-self: first baseline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:fb": true
      },
      "source": "vim-snippets/snippets"
    },
    "70284d242e33f998d7cac0163e555989": {
      "content": "<th>${1}</th>\nth+${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th+": true
      },
      "source": "vim-snippets/snippets"
    },
    "70335301b0dbabfabe1427bd0b53b4a6": {
      "content": "<link rel=\"shortcut icon\" href=\"${1:favicon.ico}\" type=\"image/x-icon\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link:favicon": true
      },
      "source": "vim-snippets/snippets"
    },
    "7044426fd9126b959dee1cb00586990f": {
      "content": "@online{${1:name},\n\tauthor={${2:author}},\n\ttitle={${3:title}},\n\tdate={${4:date}},\n\turl={${5:url}}\n}\n$0",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "Online resource",
      "matches": {
        "online": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7046363a967ef65922b346a671e3964e": {
      "content": "{\n\t\"type\": \"range\",\n\t\"id\": \"${1}\",\n\t\"min\": ${2},\n\t\"max\": ${3},\n\t\"step\": ${4},\n\t\"unit\": \"${5}\",\n\t\"label\": \"${6}\",\n\t\"default\": ${0}\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_range": true
      },
      "source": "vim-snippets/snippets"
    },
    "704d510ef53aff07133165f16733bffe": {
      "content": "file(glob ${1:srcs} *.${0:cpp})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "glob": true
      },
      "source": "vim-snippets/snippets"
    },
    "7059ffaa7cd8e494c8b0e4c7a55e82fa": {
      "content": "_.unescape(${string})",
      "doc": "_.unescape('fred, barney, &amp; pebbles');\n// => 'fred, barney, & pebbles'\n\nThe inverse of `_.escape`; this method converts the HTML entities\n`&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\ntheir corresponding characters.\n\n**Note:** No other HTML entities are unescaped. To unescape additional\nHTML entities use a third-party library like [_he_](https://mths.be/he).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-unescape",
      "matches": {
        "lodash unescape": true
      },
      "source": "javascript/lodash"
    },
    "705a55e9fcfe7bfec6c97e6f94155722": {
      "content": "import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class HeaderInterceptor implements HttpInterceptor {\n\tconstructor() {}\n\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\tconst headers = req.headers\n\t\t\t.set('Content-Type', 'application/json');\n\t\tconst authReq = req.clone({ headers });\n\t\treturn next.handle(authReq);\n\t}\n}",
      "doc": "Angular HttpInterceptor for headers HttpClient",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular HttpInterceptor for Headers",
      "matches": {
        "a-http-interceptor-headers": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "705aa9c04efa2c092290ac208408438c": {
      "content": "\\begin{bfseries}\n\t${1:TARGET}\n\\end{bfseries}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{bfseries} \\bfseries": true,
        "bfseries": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "705bbb7b21f14abc4b717c621f059e78": {
      "content": "change_column :${1:table}, :${2:column}, :${0:type}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mcc": true
      },
      "source": "vim-snippets/snippets"
    },
    "705f026275998d546b5c574851a851f1": {
      "content": "<% if ${1} %>\n\t${2}\n<% else %>\n\t${0}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "706353aa2998648751e463c8de089281": {
      "content": "const mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\t${1:propName}: () => {\n\t\t\tdispatch(${2:actionName}());\n\t\t},\n\t};\n};",
      "doc": "",
      "filetype": "javascript-redux",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mdtp": true
      },
      "source": "snippets/javascript"
    },
    "706fca9f9142cf62d9ff0ff83f4e80ef": {
      "content": "<video src=\"${1}\" height=\"${2}\" width=\"${3}\" preload=\"${4:none}\" autoplay=\"${5:autoplay}\">${6}</video>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "video": true
      },
      "source": "vim-snippets/snippets"
    },
    "7079ad33cc1e1029d791cbde5f538bf0": {
      "content": "${1:FIELDNAME} = models.URLField(${2:verify_exists=False}${3:, max_length=200}${0:, blank=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "url": true
      },
      "source": "vim-snippets/snippets"
    },
    "7086e4ef64f146eebd2f458effd51a52": {
      "content": "object.constantCase()",
      "doc": "object.constantCase(): Schema\n\nTransforms all object keys to CONSTANT_CASE.Extending Schema TypesThe simplest way to extend an existing type is just to cache a configured schema and use that through your application.let yup = require(\"yup\");\nlet parseFormats = [\"MMM dd, yyy\"];\nlet invalidDate = new Date(\"\");\n\nmodule.exports = yup.date().transform(function(value, originalValue) {\n  if (this.isType(value)) return value;\n  // the default coercion transform failed so lets try it with Moment instead\n  value = Moment(originalValue, parseFormats);\n  return value.isValid() ? value.toDate() : invalidDate;\n});\nAlternatively, each schema is a normal JavaScript constructor function that you can mutate or delegate to\nusing the normal patterns. Generally you should not inherit from mixed unless you know what you are doing,\nbetter to think of it as an abstract class. The other types are fair game though.You should keep in mind some basic guidelines when extending schemas\nnever mutate an existing schema, always clone() and then mutate the new one before returning it.\nBuilt-in methods like test and transform take care of this for you, so you can safely use them (see below) without worrying\ntransforms should never mutate the value passed in, and should return an invalid object when one exists\n(NaN, InvalidDate, etc) instead of null for bad values.\nby the time validations run the value is guaranteed to be the correct type, however if nullable is\nset then null is a valid value for that type, so don't assume that a property or method exists on the value.\nAdjust core Typeslet invalidDate = new Date(\"\");\n\nfunction parseDateFromFormats(formats, parseStrict) {\n  return this.transform(function(value, originalValue) {\n    if (this.isType(value)) return value;\n\n    value = Moment(originalValue, formats, parseStrict);\n\n    return value.isValid() ? value.toDate() : invalidDate;\n  });\n}\n\n// `addMethod` doesn't do anything special it's\n// equivalent to: yup.date.prototype.format = parseDateFromFormats\nyup.addMethod(yup.date, \"format\", parseDateFromFormats);\nCreating new TypesYup schema use the common constructor pattern for modeling inheritance. You can use any\nutility or pattern that works with that pattern. The below demonstrates using the es6 class\nsyntax since its less verbose, but you absolutely aren't required to use it.let DateSchema = yup.date;\nlet invalidDate = new Date(\"\"); // our failed to coerce value\n\nclass MomentDateSchemaType extends DateSchema {\n  constructor() {\n    super();\n    this._validFormats = [];\n\n    this.withMutation(() => {\n      this.transform(function(value, originalvalue) {\n        if (this.isType(value))\n          // we have a valid value\n          return value;\n        return Moment(originalValue, this._validFormats, true);\n      });\n    });\n  }\n\n  _typeCheck(value) {\n    return (\n      super._typeCheck(value) || (moment.isMoment(value) && value.isValid())\n    );\n  }\n\n  format(formats) {\n    if (!formats) throw new Error(\"must enter a valid format\");\n    let next = this.clone();\n    next._validFormats = {}.concat(formats);\n  }\n}\n\nlet schema = new MomentDateSchemaType();\n\nschema.format(\"YYYY-MM-DD\").cast(\"It is 2012-05-25\"); // => Fri May 25 2012 00:00:00 GMT-0400 (Eastern Daylight Time)\nTypeScript SupportIf you are using TypeScript installing the Yup typings is recommendednpm install -D @types/yup\nYou can now infer a TypeScript type alias using the exported InferType. Given the following Yup schema:import * as yup from 'yup';\n\nconst personSchema = yup.object({\n  firstName: yup\n    .string(),\n  nickName: yup\n    .string()\n    .nullable(),\n  gender: yup\n    .mixed<'male' | 'female' | 'other'>()\n    .oneOf(['male', 'female', 'other']),\n  email: yup\n    .string()\n    .nullable()\n    .notRequired()\n    .email(),\n  birthDate: yup\n    .date()\n    .nullable()\n    .notRequired()\n    .min(new Date(1900, 0, 1)),\n});\nYou can derive the TypeScript type as follows:type Person = yup.InferType<typeof personSchema>;\nWhich is equivalent to the following TypeScript type alias:type Person = {\n  firstName: string;\n  nickName: string | null;\n  gender: \"male\" | \"female\" | \"other\";\n  email?: string | null | undefined;\n  birthDate?: Date | null | undefined;\n}\nMaking the following objects valid both for TypeScript and Yup validation:const minimalPerson: Person = {\n    firstName: \"Matt\",\n    nickName: null,\n    gender: \"male\"\n};\n\nconst fullPerson: Person = {\n    firstName: \"Matt\",\n    nickName: \"The Hammer\",\n    gender: \"male\",\n    email: \"matt@the-hammer.com\",\n    birthDate: new Date(1976, 9, 5)\n};\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "object-constant-case",
      "matches": {
        "yup object constantcase": true
      },
      "source": "javascript/yup"
    },
    "708f9262fb0a51e7c00aced843108897": {
      "content": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n\treturn {\n\n\t};\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n)(${1:${TM_FILENAME_BASE}});",
      "doc": "Creates a React component class connected to redux",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactReduxComponent",
      "matches": {
        "rrc": true
      },
      "source": "vscode-react/snippets"
    },
    "70a82fe7dc1b5f95ad9272549328d77a": {
      "content": "${1:FIELDNAME} = models.CharField($2, max_length=${3:50})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "CharField",
      "matches": {
        "mchar": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "70a978bc7574b8ddf44825e1b6a2146c": {
      "content": "import { Injectable } from '@angular/core';\nimport { CanLoad, Route } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanLoad {\n\tconstructor() { }\n\n\tcanLoad(route: Route) {\n\t\treturn true;$0\n\t}\n}",
      "doc": "Angular CanLoad guard",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular CanLoad Guard",
      "matches": {
        "a-guard-can-load": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "70af12acf25822da9f90db53d7b30592": {
      "content": "type\t\tsymmetryPlane;",
      "doc": "",
      "filetype": "openfoam",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sym": true
      },
      "source": "vim-snippets/snippets"
    },
    "70b3497133a089f8f8b7a7e032167434": {
      "content": "def index\n\t@${1:model_class_name} = ${2:ModelClassName}.all\n\trespond_to do |format|\n\t\tformat.html # index.html.erb\n\t\tformat.json  { render json: @$1s }\n\tend\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defindex": true
      },
      "source": "vim-snippets/snippets"
    },
    "70b371f613a2fb3eef45a47873ea93de": {
      "content": "@after-leave=\"$1\"$0",
      "doc": "@after-leave=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-after-leave",
      "matches": {
        "afterleaveevent": true,
        "vue after-leave": true
      },
      "source": "javascript/vue"
    },
    "70b3dc02ca0a6ce08603acf5d5089d44": {
      "content": "defimpl ${1:protocol_name}, for: ${2:data_type} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defim": true
      },
      "source": "vim-snippets/snippets"
    },
    "70b57339a3440026ee14b130c01f79f5": {
      "content": "${1:obj}.bind('${2:event name}', (${3:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bind": true
      },
      "source": "snippets/coffee"
    },
    "70bc46a0cfcb3fa1499811399ad99e01": {
      "content": "{\n\t\"type\": \"article\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_article": true
      },
      "source": "vim-snippets/snippets"
    },
    "70bc7e66a5eb253b3d501222db9ca47a": {
      "content": "_.escapeRegExp(${string})",
      "doc": "_.escapeRegExp('[lodash](https://lodash.com/)');\n// => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n\nEscapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n\"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-escaperegexp",
      "matches": {
        "lodash escaperegexp": true
      },
      "source": "javascript/lodash"
    },
    "70c03ae574dc8ffec9768abaefab20ca": {
      "content": "case ${1}:\n\t${0}\n\tbreak;",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "case: break;",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "70c6449b8fadf5e7bcc15c5877997b58": {
      "content": "(* ${1:comment} *)",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "commment",
      "matches": {
        "cc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "70c9272fc0b2e8ddc122c744e3b92c16": {
      "content": "real, dimension(${1}), intent(out) :: ${2}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "real dimension intent(out)",
      "matches": {
        "redo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "70caae3367d152efda960ffee0bbd714": {
      "content": "#import \"${1}}\"",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Imp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "70cb2141286f190a5d26a3a01d8e1fff": {
      "content": "#!/usr/bin/env rdmd",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rdmd": true
      },
      "source": "vim-snippets/snippets"
    },
    "70cb51ac926ba9d1f4b9cc1d1d4c0676": {
      "content": "assertNotSame(\"${1:Failure message}\", ${2:expected}, ${3:actual});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asns": true
      },
      "source": "vim-snippets/snippets"
    },
    "70d77aedbd4fe1fd7a8479f11ed829b3": {
      "content": "background-origin padding-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo:pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "70e22ce9c1522d544d74842405ec6b6d": {
      "content": "background-break: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk": true
      },
      "source": "vim-snippets/snippets"
    },
    "70e3baca99702fd1e11e732e96f0f675": {
      "content": "${1:obj}.hasClass('${2:className}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hasc": true
      },
      "source": "snippets/javascript"
    },
    "70e4d2fd9420e1d4dd63ba4e7f72c8d3": {
      "content": "${1:obj}.data(${2:obj})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "data": true
      },
      "source": "snippets/coffee"
    },
    "70e52c4ac059b9537723629e7cf2904d": {
      "content": "public int ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi+": true
      },
      "source": "vim-snippets/snippets"
    },
    "70eb7e10681afeab102f60bb90fcb0a2": {
      "content": "while (${1:/* condition */}) {\n\t${2}\n}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "70f12ebe87b03aee7f97cb7b809cd133": {
      "content": "cut(${1:x}, breaks = c(${2:${3:}, ${4:max(${1:x})}}))",
      "doc": "Divide Into Intervals",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "cut",
      "matches": {
        "cut": true
      },
      "source": "vscode-R/snippets"
    },
    "70f84eb5ea9e6200bdcf8d89d9454794": {
      "content": "expect($1).toHaveBeenCalledWith($0);",
      "doc": "returns true if the spy has been called with",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tohavebeencalledwith",
      "matches": {
        "jest expect tohavebeencalledwith": true,
        "thbcw": true
      },
      "source": "javascript/jest"
    },
    "70ff51c73fe2a9b3b53a5a0171a888a3": {
      "content": "def create\n\t@${1:model_class_name} = ${2:ModelClassName}.new($1_params)\n\trespond_to do |format|\n\t\tif @$1.save\n\t\t\tflash[:notice] = '$2 was successfully created.'\n\t\t\tformat.html { redirect_to(@$1) }\n\t\t\tformat.json  { render json: @$1, status: :created, location: @$1 }\n\t\telse\n\t\t\tformat.html { render action: 'new' }\n\t\t\tformat.json  { render json: @$1.errors, status: :unprocessable_entity }\n\t\tend\n\tend\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defcreate": true
      },
      "source": "vim-snippets/snippets"
    },
    "71013dc9b2f89b36c1ceb57687cbfb4a": {
      "content": "#![feature(${1:plugin})]",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "feature attribute",
      "matches": {
        "feat": true
      },
      "source": "vim-snippets/snippets"
    },
    "710beaa0e4663bd2b9a09bce61c669e0": {
      "content": "import ${1:Html} exposing (${2:..})\n${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "import ... exposing (..)",
      "matches": {
        "impe": true,
        "importExposing": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7113dc900e18a365420a129f16a19389": {
      "content": "\\begin{cases}{${1}}\n\t${2:TARGET}\n\\end{cases}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{cases} \\cases": true,
        "cases": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "711772bba5beb0de37424e4a982a1fd8": {
      "content": "letter-spacing: $1em;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "letter-spacing:   length-em (letter)",
      "matches": {
        "letter": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "711c7e8054093371e06c715ae9e17b78": {
      "content": "always @(${1:*})${2:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "always @()",
      "matches": {
        "al": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "712240061af6f05988813c97080af22a": {
      "content": "{\n\tpath: '${1:pathName}',\n\tname: '${2:routeName}',\n\tcomponent: () => import('./${3:pathToComponent}'),\n},",
      "doc": "Vue Router route with per route code-splitting",
      "filetype": "vue-script-router",
      "grammar": "lsp",
      "label": "Vue Router Route",
      "matches": {
        "vroute-named": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "712b1c03f8497f0d9d01d0a73a602049": {
      "content": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
      "doc": "Export named function in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportNamedFunction",
      "matches": {
        "enf": true
      },
      "source": "vscode-javascript/snippets"
    },
    "7130c474f36d90fe4e5020114987ebe5": {
      "content": "componentDidMount() {\n\t$0\n}\n",
      "doc": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentDidMount",
      "matches": {
        "cdm": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "7137e4c1a2aa4c432c8f836c8cee8e96": {
      "content": "display dialog \"${1:#:text}\"\n\t${2:#:with icon}\n\tbuttons {\"${3:Cancel}\", \"${4:Other Choice}\", \"${5:OK}\"}\n\tdefault button \"${5}\"\nset button_pressed to button returned of result\nif button_pressed is \"${5}\" then\n\t${6:TARGET}\nelse if button_pressed is \"${3}\" then\n\t-- action for cancel button goes here\nelse\n\t-- action for other button goes here\nend if",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "dialog",
      "matches": {
        "dialog_OK/Cancel/Other": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "715ba21d84e8a43045411047162c295e": {
      "content": "def ${1:name}(${2:args}) when ${3:guard}, do:",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dfw": true
      },
      "source": "vim-snippets/snippets"
    },
    "715c66d42bf6e9007cb3a8d83fdaa7e5": {
      "content": "it_behaves_like ${0:'shared examples name'}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ibl": true
      },
      "source": "vim-snippets/snippets"
    },
    "715da848decac0e147c7ad9bf32def43": {
      "content": "<audio src=\"${1}\">${0}</audio>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "audio": true
      },
      "source": "vim-snippets/snippets"
    },
    "7165b95b7f851cef6052fbe6cdc18836": {
      "content": "@font-face {\n\tfont-family: ${1};\n\tsrc: url(${2});\n}${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@f": true
      },
      "source": "vim-snippets/snippets"
    },
    "71675df74ebbd294bd239af04db47698": {
      "content": "_.cloneWith(${value}, ${customizer})",
      "doc": "function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(false);\n  }\n}\n\nvar el = _.cloneWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 0\n\nThis method is like `_.clone` except that it accepts `customizer` which\nis invoked to produce the cloned value. If `customizer` returns `undefined`,\ncloning is handled by the method instead. The `customizer` is invoked with\nup to four arguments; (value [, index|key, object, stack]).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-clonewith",
      "matches": {
        "lodash clonewith": true
      },
      "source": "javascript/lodash"
    },
    "716ba604f53320464a1060e4136b701b": {
      "content": "While (${1:condition})\n\t${0:; code...}\nWEnd",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "716c09226d0be76ce6aa05a361ba91f5": {
      "content": "console.dir(${1:object})",
      "doc": "Prints a JavaScript representation of the specified object",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleDir",
      "matches": {
        "cdi": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "71703cb57603c8705e5bcf3465c4c2e4": {
      "content": "partition do |${1:e}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pard": true
      },
      "source": "vim-snippets/snippets"
    },
    "71723cf8086f2f1b4e5aab2033ea8de3": {
      "content": "fscanf(${1:stdin}, \"${2}\", ${3});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "fscanf(file, \"...\", ...);",
      "matches": {
        "fscanf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "71752afaf0496ab62f8f3c46643d0ca5": {
      "content": "for (let ${1:i} of ${2:#:Things}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forof": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "717992d769bf3e53c2ab162cdca53931": {
      "content": "function ${1}(${2})\n    ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "function ... end",
      "matches": {
        "function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "71822b758a1307fe33b0e3d206f96dcf": {
      "content": "_.pickBy(${object}, ${predicate})",
      "doc": "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pickBy(object, _.isNumber);\n// => { 'a': 1, 'c': 3 }\n\nCreates an object composed of the `object` properties `predicate` returns\ntruthy for. The predicate is invoked with two arguments: (value, key).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-pickby",
      "matches": {
        "lodash pickby": true
      },
      "source": "javascript/lodash"
    },
    "71868807d047b9a6e009b1255840dfa0": {
      "content": "${1:expression} unless ${2:condition};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xunless": true
      },
      "source": "vim-snippets/snippets"
    },
    "718e46b5ef32f6772f0154a7f28c39f1": {
      "content": "if ${1:#:condition}\n  ${2:TARGET}\nelse\n  ${3:#:body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "718f3ce7d3102f5da0a5d3cea42be5fa": {
      "content": "@for ($1)\n\t${2:${VISUAL}}\n@endfor",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@for directive",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "71a4fdbef7ec4c73a67d193bfbf2eba5": {
      "content": "{ path: '', pathMatch: 'full', redirectTo: '${1:path}' },$0",
      "doc": "Angular default route path",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Default Route Path",
      "matches": {
        "a-route-path-default": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "71a883902a94405ac4130f1951dbc6c9": {
      "content": "fmt\"${0:#:TARGET}\"",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fmt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "71afcbdee63ebfbbf4e74dbbefcb792d": {
      "content": "@doc false\ndef child_spec(${1:_opts}) do\n\t%{\n\t\tid: __MODULE__,\n\t\tstart: {__MODULE__, :start_link, ${2:[]}},\n\t\trestart: ${3::permanent},\n\t\tshutdown: ${4:5000},\n\t\ttype: ${5::worker}\n\t}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cs": true
      },
      "source": "vim-snippets/snippets"
    },
    "71b5444d61b7dcf6432544f0b95f92a9": {
      "content": "async fn ${1:function_name}(${2})${3} {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Async function definition",
      "matches": {
        "afn": true
      },
      "source": "vim-snippets/snippets"
    },
    "71b6cc48ac953e8d13e6004c38765f6e": {
      "content": "align-self: baseline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "71b6e9fc6430d0c547ace82b395fe1de": {
      "content": "background-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "71c338d78b46708aefec8c38c377ac49": {
      "content": "@php\n\t${1:${VISUAL}}\n@endphp",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@php directive",
      "matches": {
        "php": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "71c69ad14e3c855fb490973662ffec86": {
      "content": "_.chunk(${array}, ${size})",
      "doc": "_.chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\n_.chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]\n\nCreates an array of elements split into groups the length of `size`.\nIf `array` can't be split evenly, the final chunk will be the remaining\nelements.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-chunk",
      "matches": {
        "lodash chunk": true
      },
      "source": "javascript/lodash"
    },
    "71c8d0bab63100ade266342608721474": {
      "content": "class:${1:name}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-class-short",
      "matches": {
        "svcls": true,
        "svelte class short": true
      },
      "source": "javascript/svelte"
    },
    "71d5bf10164fbe402bd70e33971f2aca": {
      "content": "grid-auto-rows ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar": true
      },
      "source": "vim-snippets/snippets"
    },
    "71db9f3277592d486e6935327583b9f4": {
      "content": "text-wrap: suppress",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "71e3be80d42cd19ff217b1f395db8b59": {
      "content": "word-break: break-all;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:ba": true
      },
      "source": "vim-snippets/snippets"
    },
    "71e51f49f0a47f211597241360ede8b0": {
      "content": "mixin ${1:/*mixed_in*/} ${2:/*name*/};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "mixin (mixin)",
      "matches": {
        "mixin": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "71ee3f5712292934a379249137aff53e": {
      "content": "outline-color: ${0:#000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oc": true
      },
      "source": "vim-snippets/snippets"
    },
    "72013f4d9aa40bcef969369f2bcc1a5c": {
      "content": "<del>${1:TARGET}</del>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "del": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7208e2317d3ec51db8c401e1dbc09720": {
      "content": "$.type(${1:obj})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$type": true
      },
      "source": "snippets/coffee"
    },
    "720f58cf43b3471bec673490c6f1af52": {
      "content": "${1:obj}.error (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "error": true
      },
      "source": "snippets/coffee"
    },
    "7213a4d0e29a6ba8b462fc47f2508133": {
      "content": "after(() => {\n\t${0:${VISUAL}}\n});",
      "doc": "",
      "filetype": "javascript-mocha",
      "grammar": "snu",
      "label": "after(() => { ... })",
      "matches": {
        "aft": true
      },
      "source": "vim-snippets/snippets"
    },
    "72143c7ee4b5f2a20d77a7c366930d87": {
      "content": "$.param(${1:obj})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "param": true
      },
      "source": "snippets/coffee"
    },
    "7214cf51127f4a4492725b245a65ed64": {
      "content": "const { head, html, css } = ${1:App}.render({\n\tprops: ${3:props},\n})",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-render-component",
      "matches": {
        "svelte render component": true,
        "svrcom": true
      },
      "source": "javascript/svelte"
    },
    "721571c89c63afad63e7fbd186ea47ff": {
      "content": "{% else %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig else",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "7224cdaf241513ac1de34e33e21c5f12": {
      "content": "class $1Inline(admin.TabularInline):\n\t'''\n\tTabular Inline View for $1\n\t'''\n\tmodel = ${2:$1}\n\tmin_num = ${3:3}\n\tmax_num = ${4:20}\n\textra = ${5:1}\n\traw_id_fields = ($6,)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Tabular Inline",
      "matches": {
        "tabularinline": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "722691458d7828bd2d449297cb54ce7f": {
      "content": "macro(${1:name} ${2:args})\n\t${3}\nendmacro($1)",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "macro() endmacro()",
      "matches": {
        "macro": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7227dbfdb126627563925ff62f04449b": {
      "content": "#' @field ${1:name}::${2:Type} ${0:Description}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "type field documentation",
      "matches": {
        "fld": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "72315caf7f3e94eec3b4d2de0a036b82": {
      "content": "else${0:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "else",
      "matches": {
        "el": true,
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7234662cedcb10b090214b8cbaf6012c": {
      "content": "width auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "7243ac3651a0e4bff68957d2cfd6c045": {
      "content": "grid-template: ${1} / ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gt+": true
      },
      "source": "vim-snippets/snippets"
    },
    "7243d73de4d82d4c7be253a279ac048f": {
      "content": "const {${1:module}} = require('${1:module}');",
      "doc": "destructuring require assignment",
      "filetype": "base",
      "grammar": "lsp",
      "label": "destructuring-require-assignment",
      "matches": {
        "base require assignment": true
      },
      "source": "javascript/base"
    },
    "724696acf290b87f02d7e7eceeb90e73": {
      "content": "main() {\n  ${0}\n}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "724cf9ee0152d825fc3d0e099a42770f": {
      "content": "spyOn(${1:object}, \"${2:method}\").andCallFake(${3:function})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "spy on and call fake (coffee)",
      "matches": {
        "scf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7250fbd8a4e5f67c41e9f4251c5a6b29": {
      "content": "{% apply ${1} %}\n\t${0}\n{% endapply %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig apply",
      "matches": {
        "apply": true
      },
      "source": "vim-snippets/snippets"
    },
    "72572603e88d1229ea0a1bedfe05a8b6": {
      "content": "def ${1:name}(${2:arg}) = ${0:}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "7261d2fe84329ea03ac50ef505f8d2fc": {
      "content": "for ${2:i} = 0, ${1:#:Things} do\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "72622380dedb012cdbd2ca4c3bf316b7": {
      "content": "echo CHtml::activeName(${1:model}, '${0:attribute}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhan": true
      },
      "source": "vim-snippets/snippets"
    },
    "7263817a2be6a946276634d15dcf43e5": {
      "content": "place-content ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc": true
      },
      "source": "vim-snippets/snippets"
    },
    "7267cb48673c01f8f0280d7a98c9f9bf": {
      "content": "test(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "test conventional commit",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "727126df18c9e0379fa961818481cb8d": {
      "content": "isNumeric!${1:N}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isnum": true
      },
      "source": "vim-snippets/snippets"
    },
    "727480b6a1ebfe0aeb326dd51e737eff": {
      "content": "t.datetime :${1:title}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create datetime column",
      "matches": {
        "tcdt": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "72764fb24e10518a6f85db86d46602e9": {
      "content": "[NSThread detachNewThreadSelector:@selector(${1:method}:) toTarget:${2:aTarget} withObject:${3:anArgument}]",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Detach New NSThread",
      "matches": {
        "thread": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7276d76d236d86be3a0a0aeca31f841b": {
      "content": "border-left-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdli": true
      },
      "source": "vim-snippets/snippets"
    },
    "727fb3cf3fa59807b37feabb67903d04": {
      "content": "function ${1:#:function_name}(${2:#:argument}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "func",
      "matches": {
        "function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "72866911725a2c6237b0bdbe261b3857": {
      "content": "enum struct ${1:#:name} { ${2:#:TARGET} };",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "enum struct {};",
      "matches": {
        "enum_scoped": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "728767afa9458401dd2acb917c016842": {
      "content": "this.setState($0);",
      "doc": "Performs a shallow merge of nextState into current state",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentSetStateObject",
      "matches": {
        "sst": true
      },
      "source": "vscode-react/snippets"
    },
    "728ce784fed951a3b180a9aecb6f7e72": {
      "content": "align-items last baseline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:lb": true
      },
      "source": "vim-snippets/snippets"
    },
    "728eb903940036a9c8455a5dbe77ad18": {
      "content": "border-corner-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdci:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "729274976ecaf0d22d9c21a050f35ff8": {
      "content": "${fn:substring(${1:string}, ${2:begin}, ${0:end})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "substr": true
      },
      "source": "vim-snippets/snippets"
    },
    "7297eddd38ddd944fb1fe5d6d5ea110c": {
      "content": "z-index auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "z:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "729817743ad8ce42056f1e4eeaa2e22a": {
      "content": "(fun ${1} -> ${0})",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lam": true
      },
      "source": "vim-snippets/snippets"
    },
    "729a884c055c54c1e6ac3e155f92b640": {
      "content": "match ${1} with\n| ${2} -> ${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sw": true
      },
      "source": "vim-snippets/snippets"
    },
    "72a1106c4bc0cf7a60a70e4ec2e8a4cb": {
      "content": "include(\"${1}\")\n${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "include source code",
      "matches": {
        "incl": true
      },
      "source": "vim-snippets/snippets"
    },
    "72a4a2348bc55711aa5b364ca44bd4de": {
      "content": "<img id=\"${1}\" src=\"${2}\" alt=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img#": true
      },
      "source": "vim-snippets/snippets"
    },
    "72a55c89d949ecdd03393350f08bc437": {
      "content": "\\\\subparagraph{${1:subparagraph name}}%\n\\\\label{subp:${2:$1}}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\subparagraph",
      "matches": {
        "subp": true
      },
      "source": "vim-snippets/snippets"
    },
    "72a7e6cb23639be9a00611c8c443f6d8": {
      "content": "text-align-last: left",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "72b0ad2b85e6d339d5af9ea072862548": {
      "content": "<xsl:variable name=\"${1:name}\">${0}\n</xsl:variable>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "blank",
      "matches": {
        "variable": true
      },
      "source": "vim-snippets/snippets"
    },
    "72b3c07d62df6d6cf04afc2e23a83530": {
      "content": "private def ${1:method_name}\n\t${0}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pdef": true
      },
      "source": "vim-snippets/snippets"
    },
    "72b5f3754bb09cb11169248f2a72f412": {
      "content": "public:\n\t${1:/*members*/}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "public (pub)",
      "matches": {
        "pub": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "72c13b5e2f9680e3481532c5b4ba398d": {
      "content": "\\${4:TARGET}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${4:TARGET}",
      "matches": {
        "4T": true,
        "4t": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "72c33d560401d76552b8f5cf94372c99": {
      "content": "${1:FIELDNAME} = models.DateField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "DateField",
      "matches": {
        "mdate": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "72ca4ab17094f111aab9a711892139c7": {
      "content": "for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forr": true
      },
      "source": "vim-snippets/snippets"
    },
    "72cf96e5e4b55b92a466de521ff1529b": {
      "content": "![${1:#:alt}][${2:#:id}]${3}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "![alt][id]",
      "matches": {
        "altid": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "72d5fdb858b8db25e63ad7b860001a97": {
      "content": "{ ${0:#statements} }",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{": true
      },
      "source": "vim-snippets/snippets"
    },
    "72da0f43ce88519661f53c33126125ed": {
      "content": "console.groupEnd();",
      "doc": "Closes out the corresponding console.group().",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleGroupEnd",
      "matches": {
        "cge": true
      },
      "source": "vscode-javascript/snippets"
    },
    "72dfd467c9633a120ef81b9eb7f0df9f": {
      "content": "test \"${1}\" =\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "72f998f46e586b89b1382e68b606c695": {
      "content": "<nuxt-link to=\"/${1:page}\">${1:page}</nuxt-link>",
      "doc": "nuxt routing link",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Nuxt Routing Link",
      "matches": {
        "vnuxtl": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "72ff8a11588ab61a9ef712eeeb18023e": {
      "content": "text-emphasis: before;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "7308f104305260aed0a84d737c9dd468": {
      "content": "@brief ${0:Description}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@br": true
      },
      "source": "vim-snippets/snippets"
    },
    "73327036fea90e414812a5576f502644": {
      "content": "${1:callbacks}.disable()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cdis": true
      },
      "source": "snippets/coffee"
    },
    "7339cfc560182a9aacb7de04cc9dbd3d": {
      "content": "select {\ncase ${1:#:condition}:\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "select {}",
      "matches": {
        "select": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "735257c758ad90d608b14d7a8ba2590b": {
      "content": ":global(${1:body}) {\n\t/* this will apply to <body> */\n\t${2:/* your styles go here */}\n}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-global-style",
      "matches": {
        "svelte global style": true,
        "svsglobal": true
      },
      "source": "javascript/svelte"
    },
    "735538d98f9241db71241b3f6747a526": {
      "content": "switch ${1:-exact} -- ${2:\\$var} {\n\t${3:match} {\n\t\t$4\n\t}\n\tdefault {$5}\n}\n",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "switch... (switch)",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "73590a1d8f10f5857d1e893be3a95fdc": {
      "content": "box-sizing: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxz": true
      },
      "source": "vim-snippets/snippets"
    },
    "7365fcb49cb8d3729338934555cd7bb1": {
      "content": "/*\n * ${0}\n */",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "/*": true
      },
      "source": "vim-snippets/snippets"
    },
    "7367a0190a11dc40c46bd2a3c038918c": {
      "content": "pipe(${1:stream})$2",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "pipe",
      "matches": {
        "pipe": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7369893a627fedb53830c64e3c9fa73e": {
      "content": "${1:ModelName}::model()->find(${2:condition},array('${3:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yfind": true
      },
      "source": "vim-snippets/snippets"
    },
    "737acde8760efec56f5be021d9eb077a": {
      "content": "test ${1:test_name} => { description => '${2:Description of test.}'} => sub {\n\tmy ($self) = @_;\n\t${0}\n};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trsub": true
      },
      "source": "vim-snippets/snippets"
    },
    "7382598fb4ccfc63d0a6a880b0060d44": {
      "content": "{% elif ${1} %}\n\t${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "7385bff5486570164302d7fa356b64b3": {
      "content": "![${1:alttext}](${2:/images/image.jpg})",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "![": true
      },
      "source": "vim-snippets/snippets"
    },
    "739cfb016311b50e06282f568d22b147": {
      "content": "${1:ModelName}::model()->findBySql(${2:sql}, array('${3:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yfindbs": true
      },
      "source": "vim-snippets/snippets"
    },
    "73a1102341b1ea179cd870cdea6bf845": {
      "content": "list-style: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lis:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "73a4f1a9f07acc1f85c8aeca087667b7": {
      "content": "${1:term}\n  ~  ${2:definition}",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "::": true
      },
      "source": "vim-snippets/snippets"
    },
    "73afa371a0f89093875d44e5c256cc75": {
      "content": "{% filter ${1} %}\n\t${0:TARGET}\n{% endfilter %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% filter ... %} ... {% endfilter %}",
      "matches": {
        "filter": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "73c2d6e3d5270ba0ba2c5d02897fa074": {
      "content": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}",
      "doc": "try/catch/finally",
      "filetype": "base",
      "grammar": "lsp",
      "label": "try-catch-finally",
      "matches": {
        "base try catch finally": true
      },
      "source": "javascript/base"
    },
    "73c37cb88d4191cf780d14a29e45abdc": {
      "content": "public ${1}(${2}): ${3:any} {\n\t${0}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts public method",
      "matches": {
        "tpmet": true
      },
      "source": "vim-snippets/snippets"
    },
    "73c94bad05664bf481214addfe5d9c25": {
      "content": "[${1:foo} retain];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ret": true
      },
      "source": "vim-snippets/snippets"
    },
    "73d1b35349e639b2d62f4913b12bd57f": {
      "content": "\\\\frac{d {$1}}{d {$2}} {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "derivative",
      "matches": {
        "dv": true
      },
      "source": "vim-snippets/snippets"
    },
    "73d384914b105c11708dc8b5d97b41d0": {
      "content": "$.map(${1:arrayOrObject}, function (${2:value}, ${3:indexOrKey}) {\n\t${0:// callback}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapp": true
      },
      "source": "snippets/javascript"
    },
    "73d793285014e57aa2cd54fdbdf1f597": {
      "content": "if(Yii::app()->request->isAjaxRequest == TRUE)\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yifisajax": true
      },
      "source": "vim-snippets/snippets"
    },
    "73dda8ed3cd8f6b7c0d023225757911c": {
      "content": "yumrepo { \"${1:repo name}\":\n\tdescr   => \"${2:$1}\",\n\tenabled => ${0:1},\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yumrepo": true
      },
      "source": "vim-snippets/snippets"
    },
    "73df7b42b861968a1f43f59cb126eaa4": {
      "content": "float: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "73e623a74b76973a05cea5ca311cff47": {
      "content": "grid: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "g": true
      },
      "source": "vim-snippets/snippets"
    },
    "73eb1922066790aed3a0321a3f17adcf": {
      "content": "display table-caption",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbcp": true
      },
      "source": "vim-snippets/snippets"
    },
    "741164789a0e877bf024cd2c3e591778": {
      "content": "text-align-last: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal": true
      },
      "source": "vim-snippets/snippets"
    },
    "7417ab94afa2936facd46a6890f86910": {
      "content": "interface ${1:name}\n\t${0}\nend interface $1",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iface": true
      },
      "source": "vim-snippets/snippets"
    },
    "7417c2c1d86db5bed5188f5d35982766": {
      "content": "/**\n * Gets the value of ${1:foo}\n *\n * @return ${2:string}\n */\n${3:public} function get${4:$1}()\n{\n\treturn $this->${5:$1};\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "PHP Class Getter Setter",
      "matches": {
        "gm": true
      },
      "source": "vim-snippets/snippets"
    },
    "74264e3a77c8154f3d6af975bbf56723": {
      "content": "constructor(${1:arguments}) {\n\tsuper(${1:arguments});${0}\n}",
      "doc": "class constructor (ES6)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "class-constructor-es6-",
      "matches": {
        "base class constructor": true
      },
      "source": "javascript/base"
    },
    "74293df1b9b0f67488e3fa61cf4fdd3e": {
      "content": "function ${1} return ${2};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "function declaration",
      "matches": {
        "function_declare": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "742a04d9b42d949981c957c1405e2634": {
      "content": "${1:condition} ? ${2:expression} : ${3:expression};",
      "doc": "ternary operator",
      "filetype": "base",
      "grammar": "lsp",
      "label": "ternary-operator",
      "matches": {
        "base ternary operator": true
      },
      "source": "javascript/base"
    },
    "742bba834f4331b441c3dee507909d6a": {
      "content": "\\$\\{VISUAL${1:${2:default}${3:/transform/}}\\}",
      "doc": "",
      "filetype": "snippets",
      "grammar": "snu",
      "label": "${VISUAL}",
      "matches": {
        "vis": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7436e98e06fe92999e59fe85a9a1246f": {
      "content": "useCallback(\n\t() => {\n\t\t${1:callback}\n\t},\n\t[${2:input}],\n)",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-usecallback",
      "matches": {
        "react usecallback": true,
        "usecallback": true
      },
      "source": "javascript/react"
    },
    "74397775c0f02bc7714d99fb43dd414b": {
      "content": "${1:FIELDNAME} = models.DateTimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "datetime": true
      },
      "source": "vim-snippets/snippets"
    },
    "7449429e26091c392300ed8cd5c3df73": {
      "content": "console.warn(${1:object});",
      "doc": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consolewarn",
      "matches": {
        "base console warn": true
      },
      "source": "javascript/base"
    },
    "7451107f6ec92f7beaa6a7145cc310e2": {
      "content": "\\$_SERVER['${1:#:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "server": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "74517d93aec00ae47278dc18b672d979": {
      "content": "internal int ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi&": true
      },
      "source": "vim-snippets/snippets"
    },
    "745a73a9a74325db04ac497189cf6871": {
      "content": "test.skip('${1:should }', () => {\n\t$0\n});",
      "doc": "creates a test block that will be skipped",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-test-skip",
      "matches": {
        "jest test skip": true,
        "tests": true
      },
      "source": "javascript/jest"
    },
    "745ae32cd4eef30d9a78347b06ea6b90": {
      "content": "componentWillMount() {\n\t$0\n}\n",
      "doc": "DEPRECATED!!!. Invoked once, both on the client and server, immediately before the initial rendering occurs",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentWillMount",
      "matches": {
        "cwm": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "745b6edaab2512ff6985172932bc622e": {
      "content": "{#if ${1:condition}}\n\t${2: <!-- content here -->}\n{:else if ${3: otherCondition}}\n\t${4: <!-- else if content here -->}\n{:else}\n\t${5: <!-- else content here -->}\n{/if}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-if-else-if-block",
      "matches": {
        "svelte if else if": true,
        "svif-else-if": true
      },
      "source": "javascript/svelte"
    },
    "745c2a2fd773584abb9d6f7964d73edd": {
      "content": "validates_associated :${0:attribute}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_associated",
      "matches": {
        "va": true
      },
      "source": "vim-snippets/snippets"
    },
    "746692d4d2abaa141ec62f82939e3ad0": {
      "content": "${1:obj}.replaceWith(${2:content})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "repw": true
      },
      "source": "snippets/javascript"
    },
    "7467cd0c4339148ce12f4cd0d13244bc": {
      "content": "${1:fn} :: ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}\n$1 ${6}= ${0}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn3": true
      },
      "source": "vim-snippets/snippets"
    },
    "74738662cb58d823c0e0cd75098179f6": {
      "content": "align-items end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "747c1517588ba0a7850debbad93b84b0": {
      "content": "$_GET['${1:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "_GET array",
      "matches": {
        "G": true
      },
      "source": "vim-snippets/snippets"
    },
    "747df136ac16aa7dfb6ef44e2128a050": {
      "content": "<c:remove var=\"${1}\" scope=\"${0:page}\" />",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cremove": true
      },
      "source": "vim-snippets/snippets"
    },
    "7489bef063d0afed74eefa2958b8f3d7": {
      "content": "text-transform: lowercase",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "749f36cfec78b2c0dafc94539ff2a270": {
      "content": "[<Literal>]\nlet ${1} = ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lit": true
      },
      "source": "vim-snippets/snippets"
    },
    "74ae64bf292d237d308534787810ebfc": {
      "content": "__asm__ __volatile__(\n\"${0}\\n\\t\"\n:\n:\n);",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asm": true
      },
      "source": "vim-snippets/snippets"
    },
    "74b5a6676a420be61776e03b745fc7e1": {
      "content": "return ${1:this.num} += ${2:1}",
      "doc": "increment",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-incrementer",
      "matches": {
        "vinc": true,
        "vue incrementer": true
      },
      "source": "javascript/vue"
    },
    "74b7e57e8459548e724ccd4406c04226": {
      "content": "test \"${1:something interesting}\" do\n\t$0\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "test do..end",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "74cc068fb885047cb4b9f25221c8ecdb": {
      "content": "{\n\t\"type\": \"font_picker\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${3}\",\n\t\"default\": \"${0:helvetica_n4}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_font": true
      },
      "source": "vim-snippets/snippets"
    },
    "74cea4102c753cbd6eddce1aa1389712": {
      "content": "constructor(props) {\n\tsuper(props)\n\n\tthis.state = {\n\t\t $0\n\t}\n}\n",
      "doc": "Adds a default constructor for it('', () => {})the class that contains props as arguments",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "classConstructor",
      "matches": {
        "rconst": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "74d4f7d39873d7f860d55b66626c498c": {
      "content": "\\${0:#${0:optional}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${0:#optional}",
      "matches": {
        "0#": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "74efb529e70a2ea3544d08c0a8473315": {
      "content": "saveStrings(${1:filename}, ${0:strings});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "saveStrings": true
      },
      "source": "vim-snippets/snippets"
    },
    "74f325146fd2eaef434ea6452d9e8128": {
      "content": "<?php echo ${1} ?>${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pecho": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "74f44302ec3c4c818c7c34190a1ac4d6": {
      "content": "outline-color invert",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oc:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "74f55584f0dd24682d85840186743716": {
      "content": "list-style-position: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list-style-position": true,
        "lsp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "75015bbe1097cd8f0c3ac5c83b2f5a7c": {
      "content": "exception ${0:TARGET} of ${1:string}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "exception",
      "matches": {
        "exn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "750a65b657200013d0a15b59b6694925": {
      "content": "<%include file=\"${0:filename}\" />",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/snippets"
    },
    "750e671ddb23aa316ffb1034164a0807": {
      "content": "#' @param ${1:name}::${2:Type} ${0:Description}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "function parameter documentation",
      "matches": {
        "par": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "75156e5ab57927aa15b0259db259c401": {
      "content": "import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React, { PureComponent } & PropTypes",
      "matches": {
        "imrpcp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "751b9ca6e3656c9522d1284ac5b1a394": {
      "content": "<?$php foreach ($${1:#:variable} as $${2:#:key}${3: =>}): ?>\n${0:TARGET}\n<?php endforeach; ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pforeach": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "75269a176819aaf41f5439012943a60e": {
      "content": "white-space: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "white-space": true,
        "ws": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "752d235b10eaf66c10c032fda2431b3c": {
      "content": "\" vim: ${0:foldmethod=marker}",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "\" vim: {modeline}",
      "matches": {
        "modeline": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "75326e4d8f18ef699c2c670879028108": {
      "content": "class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n",
      "doc": "Creates a React component class with ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactJustClassComponent",
      "matches": {
        "rcjc": true
      },
      "source": "vscode-react/snippets"
    },
    "75376ce577631b3d708c0f93616e2686": {
      "content": "{{^${1:value}}}\n${0:${VISUAL}}\n{{/$1}}",
      "doc": "",
      "filetype": "mustache",
      "grammar": "snu",
      "label": "# {{^value}} ... {{/value}}",
      "matches": {
        "ifn": true
      },
      "source": "vim-snippets/snippets"
    },
    "7538c74d641a7744a0d46c58d51f95fe": {
      "content": "$this->${1:method}()->shouldEndWith(${2:'string'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldEndWith('string')",
      "matches": {
        "send": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "753b42c388a1895163ec9a62110b542e": {
      "content": "assert ${1:#:test} : ${2:#:Failure message};${3}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "assert": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "753c21b4d0d6b2be70fb800a6fa8a10c": {
      "content": "Object.assign({}, ${1:original}, ${2:source})",
      "doc": "Object.assign copy (shallow clone)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "object-assign-copy-shallow-clone-",
      "matches": {
        "base object assign copy": true
      },
      "source": "javascript/base"
    },
    "754464e5abb7dd99667861d74f94150a": {
      "content": "for(let ${1:item} of ${2:object}) {\n\t${0}\n}\n",
      "doc": "Iterating over property names of iterable objects",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "forOf",
      "matches": {
        "fof": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "7545d15e03aad3ad910297ae44d812d5": {
      "content": "if(${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "7545d6f26262b99f11e62ceac801ad61": {
      "content": "display: -moz-inline-stack",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:mis": true
      },
      "source": "vim-snippets/snippets"
    },
    "7546b38f941d22843a42bf9aee5b1132": {
      "content": "${1:fn} : ${2:a} -> ${3:a}\n$1 ${4} =\n\t${0}",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn1": true
      },
      "source": "vim-snippets/snippets"
    },
    "754707e8392bec3bfa3f8ae2c7c33d1f": {
      "content": "while ${1:#:condition}:\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "while ...: ...",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "754b2e22afdf4aa6bf1506a4b9d0b3dd": {
      "content": "angular.module '${1:moduleName}', [${2:moduleDependencies}]\n${3}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngm": true
      },
      "source": "snippets/coffee"
    },
    "75599c320e4cbe66e27e6d3f4750e724": {
      "content": "charset=\"${1:utf-8}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "charset": true
      },
      "source": "vim-snippets/snippets"
    },
    "755dcb78739dafe3c2eafa4a80b3c279": {
      "content": "beforeCreate () {\n\t${0};\n},",
      "doc": "beforeCreate lifecycle method",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-lifecycle-beforecreate",
      "matches": {
        "vbeforecreate": true,
        "vue lifecycle beforecreate": true
      },
      "source": "javascript/vue"
    },
    "755ee1bcce46adfb2950d9add225241f": {
      "content": "font-weight: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "font-weight": true,
        "fw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7561e7eed1ce28b9cabcfcac0c5f5e7c": {
      "content": "grid-template-columns ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gtc": true
      },
      "source": "vim-snippets/snippets"
    },
    "7564f13bff026fbb2055f19127cb3d89": {
      "content": "\\paragraph{${1}}\n${0:TARGET}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\paragraph": true,
        "paragraph \\paragraph{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "75668da9acc04a96c5d46a27a7bd995d": {
      "content": "if (${1:#:condition}) {\n    ${2:#:commands}\n} else {\n    ${3:#:commands}\n}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "if (...) {...} else {...}",
      "matches": {
        "ifelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "757270fa597b852e591643eafc449d2d": {
      "content": "const mapStateToProps = (state) => ({\n\t${1}\n})\n\nconst mapDispatchToProps = {\n\t\n}\n",
      "doc": "Creates mapStateToProps function.",
      "filetype": "redux",
      "grammar": "lsp",
      "label": "redux-map-to-props",
      "matches": {
        "redux map props": true
      },
      "source": "javascript/redux"
    },
    "7573fe929e8cf8837b19eb336c66f4d3": {
      "content": "overflow-x ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx": true
      },
      "source": "vim-snippets/snippets"
    },
    "758b01b2b2ec5e8dea287dee6d01b778": {
      "content": "<footer>\n    ${1}\n</footer>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "footer": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "75a1b6a50ed1a48668cd72b81915b676": {
      "content": "<td class=\"${1}\">${0}</td>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td.": true
      },
      "source": "vim-snippets/snippets"
    },
    "75a26be49f7cc4c3ef1c22fbdc0ff859": {
      "content": "background-attachment: fixed",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bga:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "75a654e9d939062d7da53195120ffed6": {
      "content": "cattr_accessor :${0:attr_names}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "cattr_accessor",
      "matches": {
        "crw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "75b41884e27be044efc5da1ab2d03810": {
      "content": "@param {${1:type}} ${2:name} ${0:description}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@par": true
      },
      "source": "snippets/javascript"
    },
    "75ba4fe0dadf27239e36eccf282a5c62": {
      "content": "${1:obj}.prependTo('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prependto": true
      },
      "source": "snippets/coffee"
    },
    "75c3d39991d29a30747bbec27e39585a": {
      "content": "normal(${1:nx}, ${2:ny}, ${0:nz});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "normal": true
      },
      "source": "vim-snippets/snippets"
    },
    "75c5b44ec9604fdd6b4b115d47131391": {
      "content": "${1:void} ${2:method}(${3}) ${4:throws }",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m": true
      },
      "source": "vim-snippets/snippets"
    },
    "75e209c0ed6694506ac3355ee68f1d36": {
      "content": "{% include \"${1}\" with ${2} %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig include with parameters",
      "matches": {
        "includewith": true
      },
      "source": "vim-snippets/snippets"
    },
    "75e8c653dbc2b57a48d2cefbdf026221": {
      "content": "border-style: groove;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:g": true
      },
      "source": "vim-snippets/snippets"
    },
    "75e947a473a4ebf1f0cb9491447509e1": {
      "content": "align-items: end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "75f57b74bed227e791ab18b12b35580d": {
      "content": "${1:FIELDNAME} = forms.TypedChoiceField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "TypedChoiceField",
      "matches": {
        "ftchoice": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "75f6d8ff38924b574fc773c6e08b39f5": {
      "content": "my $${1:var} = do { local $/; open my $file, '<', \"${2:file}\"; <$file> };\n${0}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slurp": true
      },
      "source": "vim-snippets/snippets"
    },
    "75f8213c2ce25560f52b79d5d4e4c7fb": {
      "content": "expect(() => {\n\t$0\n}).toThrowErrorMatchingInlineSnapshot();",
      "doc": "expects that the method will throw an error matching the inline snapshot",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tothrowerrormatchinginlinesnapshot",
      "matches": {
        "jest expect tothrowerrormatchinginlinesnapshot": true,
        "ttemis": true
      },
      "source": "javascript/jest"
    },
    "75fa7f41bd53f031f30aed2d3d4b4b78": {
      "content": "content: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct": true
      },
      "source": "vim-snippets/snippets"
    },
    "75fc5e5bdc3e420f965ec41f26c19b71": {
      "content": "var ${1:function_name} = function (${2:argument}) {\n\t${3}\n\t$1 = function ($2) {\n\t\t${0:${VISUAL}}\n\t};\n};",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sdf": true
      },
      "source": "snippets/javascript"
    },
    "76084807c8413db9ed68a29bfbc38574": {
      "content": "outline-style: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "os": true
      },
      "source": "vim-snippets/snippets"
    },
    "761e93032435e6e9c420aad659b0813a": {
      "content": "grid-auto-columns: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac": true
      },
      "source": "vim-snippets/snippets"
    },
    "761ff51704e44a81a9bf1d4f9a5e574c": {
      "content": "factory '${1:factoryName}', (${2:dependencies}) ->\n\t${3}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngmfa": true
      },
      "source": "snippets/coffee"
    },
    "7620295f80bb915d2bdd7901010a15e5": {
      "content": "grid-gap: ${1} ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gg+": true
      },
      "source": "vim-snippets/snippets"
    },
    "76251f0a2478005c2eff71cf4316e896": {
      "content": "getElementsBy${1:TagName}('${0}')",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "get": true
      },
      "source": "snippets/javascript"
    },
    "762a5c8691809af876128eab2a803966": {
      "content": "import ${1:${2:Data}.${3:Text}} (${4})${0}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "Selective import",
      "matches": {
        "imp2": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "762ab1c55f9363865456bb488a8483b2": {
      "content": "Page Should Contain Textfield    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Contain Textfield",
      "matches": {
        "psct": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "762e001e2c7eb592a4227ad50795dacb": {
      "content": "public override bool Equals(object obj)\n{\n\tif (obj == null || GetType() != obj.GetType())\n\t{\n\t\treturn false;\n\t}\n\t${0:throw new NotImplementedException();}\n\treturn base.Equals(obj);\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eq": true
      },
      "source": "vim-snippets/snippets"
    },
    "762f618acfc615d97ed414dc39a47c92": {
      "content": "post {\n\tregression {\n\t\t${1}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "763748115c706148971fe2aa9873150c": {
      "content": "try:\n\t${1:${VISUAL}}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "Try/Except/Finally",
      "matches": {
        "tryf": true
      },
      "source": "vim-snippets/snippets"
    },
    "76419764e709a79cf6a4609d9b47dee0": {
      "content": "${1}defined('${2}')",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def?": true
      },
      "source": "vim-snippets/snippets"
    },
    "764763ea395fda2d5b28d2788686c805": {
      "content": "#define ${0:#:SYMBOL}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true,
        "define": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "76477419533ae493753e6ddf307ad2fb": {
      "content": "do {\n\t${1:TARGET}\n} while (${2:#:condition});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "764dbb5a8adf2c0a699a49910e9711c8": {
      "content": "border-top: ${1:1}px ${2:solid} #${3:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-top: size style color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "76587159c7f53bb4d24bf3b572560ee3": {
      "content": "function it_$1()\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "function it_does_something() { ... }",
      "matches": {
        "it": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7658ca3e1da07fd8db5e505e26a2d618": {
      "content": "for ${1:i} in 1 .. ${0:l_res}.count loop\n\tpipe row( $2($1) );\nend loop;\nreturn;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rpipe": true
      },
      "source": "vim-snippets/snippets"
    },
    "765ac9df9140f4cb8afeef20a694dbc3": {
      "content": "splitTokens(${1:str}${2:, }${0:tokens});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "splitTokens": true
      },
      "source": "vim-snippets/snippets"
    },
    "7660dd8878512da72522bb50f470c97b": {
      "content": "{% include '${1:snippet}', ${2:variable}: ${0:value} %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "includewith": true
      },
      "source": "vim-snippets/snippets"
    },
    "76678d2d0a094e2390942737406113a5": {
      "content": "PropTypes.array.isRequired,",
      "doc": "Array prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeArrayRequired",
      "matches": {
        "ptar": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "76694907ea906d876ad6c93b19bbd401": {
      "content": "<%= content_tag '${1:DIV}', ${2:content}${0:,options} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct": true
      },
      "source": "vim-snippets/snippets"
    },
    "7669c681198a8ecf28e4bc5784b273f0": {
      "content": "assert_nothing_thrown { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asnt": true
      },
      "source": "vim-snippets/snippets"
    },
    "766b54becbda888923a534286d746951": {
      "content": "quotes none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "766ec5fb350455bf78eb8a162ae59985": {
      "content": "overflow-style: panner;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:p": true
      },
      "source": "vim-snippets/snippets"
    },
    "7671752b39ff5d93b5ee1893df0e6bfe": {
      "content": "function ${1}(${2}):${3}{\n\t${0:TARGET}\n};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "76781af8709ae60941206ddeafd8441f": {
      "content": "${1:promise}.catch((${2:err}) => {\n\t${0}\n})",
      "doc": "Promise.catch",
      "filetype": "base",
      "grammar": "lsp",
      "label": "promise-catch",
      "matches": {
        "base promise catch": true
      },
      "source": "javascript/base"
    },
    "767b6e3e5ebc0231f6e80dbc7089d234": {
      "content": ":nth-child(${0})",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":nc": true
      },
      "source": "vim-snippets/snippets"
    },
    "767c72561c1a0999c82d9fa3fe038aee": {
      "content": "const ${shouldReduceMotion} = useReducedMotion()",
      "doc": "A hook that returns true if we should be using reduced motion based on the current device's Reduced Motion setting.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-reduce-motion",
      "matches": {
        "framer-motion use-reduce-motion": true,
        "use-reduce-motion": true
      },
      "source": "javascript/framer-motion"
    },
    "767da4224a5bfd2d3d3d7d58a7c01003": {
      "content": "<%page args=\"${0:}\" />",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "page": true
      },
      "source": "vim-snippets/snippets"
    },
    "767f20819e008f6d66e2c7bba410db17": {
      "content": "Plug '${1}', { 'for': '${0}' }",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "vim-plug Plugin definition with { 'for': '' }",
      "matches": {
        "plugfor": true
      },
      "source": "vim-snippets/snippets"
    },
    "76837eadc6ebf1a045330d8326c49502": {
      "content": "{% endcache %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endcache",
      "matches": {
        "endcache": true
      },
      "source": "vim-snippets/snippets"
    },
    "768babee827da08767caa8bc3dd69c6c": {
      "content": "\\begin{sloppypar}\n\t${1:TARGET}\n\\end{sloppypar}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{sloppypar} \\sloppypar": true,
        "sloppypar": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7693dad47666811eb057ae17c4287fbb": {
      "content": "mag(${1:a}, ${2:b}${3:, }${0:c});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mag": true
      },
      "source": "vim-snippets/snippets"
    },
    "769430232472093b36b6f84b5210fa13": {
      "content": "go func(${1} ${2:type}) {\n\t${3:/* code */}\n}(${0})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "goroutine anonymous function",
      "matches": {
        "ga": true
      },
      "source": "vim-snippets/snippets"
    },
    "76a371b6470be5df24e98acc7e9c5720": {
      "content": "while(${1:cond}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "76a6ec41e33414e252b7b47a6a1d8067": {
      "content": "def ${1:#:name}(self, ${2}):\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "def method(self, ...): ...",
      "matches": {
        "defm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "76ab532e168a8be9bfd5ef1f1702997a": {
      "content": "ls",
      "doc": "",
      "filetype": "vimshell",
      "grammar": "snu",
      "label": "=> ls?",
      "matches": {
        "sl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "76b0e35378c6ff26e4f4cd37e1b91fc4": {
      "content": "<area shape=\"${1:rect}\" coords=\"${2}\" href=\"${3}\" alt=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "area": true
      },
      "source": "vim-snippets/snippets"
    },
    "76b5b914108d65c8fa4b1e4ffae8f9d4": {
      "content": "(** ${0} *)",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/snippets"
    },
    "76b60ee89c8ac5530cfab471d736219a": {
      "content": "public static void main (String[] args) {\n\t${0}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "psvm": true
      },
      "source": "vim-snippets/snippets"
    },
    "76b70dc24e6196e6d9159286425d6073": {
      "content": "{% ifnotequal $1 $2 %}\n\t$3\n{% endifnotequal %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifnotequal": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "76b8b8a37a0f9ab0c77965ea3d633be8": {
      "content": "setattr(${1:#:obj}, ${2:#:attr}, ${3:#:value})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "setattr(..., ...)",
      "matches": {
        "setattr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "76bee433d0cff6b0d0aca5afb112ea02": {
      "content": "// execute a display list\ngl.glCallList(${0:list});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl call list",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "76bffb60edc7b3c7b693fd9a0b82df62": {
      "content": "public static void main (String[] args) {\n\t${0}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "76c06bea38edcbbffe1c25bc74a550c1": {
      "content": "import { useSelector, useDispatch } from 'react-redux';",
      "doc": "Import Redux hooks (useSelector, useDispatch)",
      "filetype": "redux",
      "grammar": "lsp",
      "label": "redux-import-hooks",
      "matches": {
        "irrh": true,
        "redux import hooks": true
      },
      "source": "javascript/redux"
    },
    "76cee6742e4783da26eec1ab4fcc4138": {
      "content": "{% if ${1} %}\n\t${2}\n{% else %}\n\t${0}\n{% endif %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig if else",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "76d512458638915146213795c50efbcb": {
      "content": "<ul id=\"${1}\">\n\t${0}\n</ul>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ul#": true
      },
      "source": "vim-snippets/snippets"
    },
    "76e0ba83ef83f02536dae7048700cb44": {
      "content": "{% else %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "76e13536d4ed3f7fc5c467d466f7995c": {
      "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanActivate {\n\tconstructor() { }\n\n\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\t\treturn true;$0\n\t}\n}",
      "doc": "Angular CanActivate guard",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular CanActivate Guard",
      "matches": {
        "a-guard-can-activate": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "76e187ee23b75f762ba6a3719af99a88": {
      "content": "background-clip: border-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "76e18c4867d2f7e1de728de9fca3a603": {
      "content": "import { Routes } from '@angular/router';\n\nexport const routes: Routes = [${0}]",
      "doc": "Route definitions",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Route definitions",
      "matches": {
        "a-routes": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "76f45d8752f7551bc7ed02ce3c6fc3a1": {
      "content": "divisibleby:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "divisibleby": true
      },
      "source": "vim-snippets/snippets"
    },
    "76f480916108db95133ca464b0a250af": {
      "content": "func ${1:handler}(w http.ResponseWriter, r *http.Request) {\n  ${0:fmt.Fprintf(w, \"hello world\")}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "http.HandlerFunc",
      "matches": {
        "hf": true
      },
      "source": "gosnippets/snippets"
    },
    "76f6f69444f42258afd7486977fe3f49": {
      "content": "$this->${1:method}()->shouldBe(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldBe('value')",
      "matches": {
        "sbe": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "76fe77b4bb880af06b3880a69914d376": {
      "content": "justify-content flex-end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "76fef1a41b9aa878174aa4018c8f8710": {
      "content": "content close-quote",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:cq": true
      },
      "source": "vim-snippets/snippets"
    },
    "771353ed8967bef8fbe4d2c706014910": {
      "content": "after idle ${0:script}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "afi": true
      },
      "source": "vim-snippets/snippets"
    },
    "771556218d1b6254808ebed05a3dae3a": {
      "content": "If ${1:condition} Then\n\t${2:; True code}\nElse\n\t${0:; Else code}\nEndIf",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "772846cd635a127d72a2a1c2947ade8d": {
      "content": "t.binary :${1:title}, limit: ${2:2}.megabytes\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcbi": true
      },
      "source": "vim-snippets/snippets"
    },
    "772b0187fe2a05952630753d33f6a984": {
      "content": "if ${1:(* condition *)} then\n\t${2:(* A *)}\nelse\n\t${3:(* B *)}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "if",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "772d50244274f0fde93f566254c2dbd8": {
      "content": "\\\\begin{equation*}\n\t${0:${VISUAL}}\n\\\\end{equation*}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "unnumbered equation environment",
      "matches": {
        "eq*": true
      },
      "source": "vim-snippets/snippets"
    },
    "773d3bce23474739c3a6e2de8a5b6106": {
      "content": "{{#if ${1:value}}}\n${2:${VISUAL}}\n{{else}}\n${3}\n{{/if}}",
      "doc": "",
      "filetype": "handlebars",
      "grammar": "snu",
      "label": "# {{#if value}} ... {{else}} .. {{/if}}",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "774cabe8f0b9fac27a9ab9be90fa3d81": {
      "content": "| img_tag",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img_tag": true
      },
      "source": "vim-snippets/snippets"
    },
    "774e27d19d8afdc4faddaca198c9a3b2": {
      "content": "package ${1:main}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "package",
      "matches": {
        "pa": true
      },
      "source": "vim-snippets/snippets"
    },
    "77543c62e7da22fa234ddad37d44263e": {
      "content": "border-top-right-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtri": true
      },
      "source": "vim-snippets/snippets"
    },
    "775529b5ca3fb1d686c707b215cbf1d9": {
      "content": "throw ${0:#:exception}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "throw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "775550def09b7730079d91e3883f5303": {
      "content": "_.flatMapDeep(${collection}, ${iteratee})",
      "doc": "function duplicate(n) {\n  return [[[n, n]]];\n}\n\n_.flatMapDeep([1, 2], duplicate);\n// => [1, 1, 2, 2]\n\nThis method is like `_.flatMap` except that it recursively flattens the\nmapped results.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-flatmapdeep",
      "matches": {
        "lodash flatmapdeep": true
      },
      "source": "javascript/lodash"
    },
    "775a73f27604e40007a097c37f1b2694": {
      "content": "align-self: first baseline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:fb": true
      },
      "source": "vim-snippets/snippets"
    },
    "775cc038c7dfa9fb1ce762a555c03606": {
      "content": "grid-auto-rows: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "775d7100dc0e987ee1a512c77ea71519": {
      "content": "{% include \"${0}\" %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/snippets"
    },
    "776034a87b096ec81b59fcb0209dfe09": {
      "content": "${1:#:set the_application to }choose application with prompt \"${2:#:Choose an application:}\"${3:#:with multiple selections allowed}",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "choose",
      "matches": {
        "choose_Applications": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "776785f0f222206afad416c91c12c989": {
      "content": "-> { ${1} }.must_output '${0}'",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mout": true
      },
      "source": "vim-snippets/snippets"
    },
    "776a7b0a46f34fb3ee180c1446d67b79": {
      "content": "{% endnav %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endnav",
      "matches": {
        "endnav": true
      },
      "source": "vim-snippets/snippets"
    },
    "777f695f5a6880f477f700c51d5cc4b1": {
      "content": "plot(${1:x}, ${2:y}, ${3:...})",
      "doc": "Plot",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "plot",
      "matches": {
        "plot": true
      },
      "source": "vscode-R/snippets"
    },
    "77819536f9ae89f3f675b353578af403": {
      "content": "<blockquote>\n${1}\n</blockquote>\n${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blockquote": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "778cb8016d30649bf6ad13e2b80ee179": {
      "content": "map {|${1:#:variable}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7797fdce3f55c1b937abe7fd920e47e2": {
      "content": "net.createServer(function(${1:socket}){\n\t$1.on('data', function(${3:data}){\n\t\t$4\n\t});\n\t$1.on('end', function(){\n\t\t$5\n\t});\n}).listen(${6:8124});",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "net.createServer",
      "matches": {
        "ncs": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "779c4465432a49a4da30253ecc005384": {
      "content": "require('dotenv-safe').config();",
      "doc": "As early as possible in your application, require and configure dotenv-safe. This will load environment variables from .env as usual, but will also read any variables defined in .env.example. If any variables are already defined in the environment before reading from .env, they will not be overwritten. If any variables are missing from the environment, a MissingEnvVarsError will be thrown, which lists the missing variables.",
      "filetype": "dotenv-safe",
      "grammar": "lsp",
      "label": "dotenv-safe-require",
      "matches": {
        "dotenv-safe require": true
      },
      "source": "javascript/dotenv-safe"
    },
    "779fd7cd12155739e44d4b4b5d92240d": {
      "content": "PropTypes.oneOf(['$0']),",
      "doc": "Prop type limited to specific values by treating it as an enum",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-enum",
      "matches": {
        "prop-types enum": true,
        "pte": true
      },
      "source": "javascript/prop-types"
    },
    "77a2ef2f3f680edb6342cb70fb094f22": {
      "content": "<input type=\"file\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:file": true
      },
      "source": "vim-snippets/snippets"
    },
    "77a7454dfa19fc2d599d327605b50fe1": {
      "content": "llply(${1:list}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ll": true
      },
      "source": "vim-snippets/snippets"
    },
    "77abb399203c919a8758a94f56c286f9": {
      "content": "bottom: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "77adc6949bef36d2d046232802b36175": {
      "content": "for ${1:key}, ${2:value} of ${3:object}\n\t${4}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "foro": true
      },
      "source": "vim-snippets/snippets"
    },
    "77bce42075b5b0b439c8fd8a27d205df": {
      "content": "{% debug %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "debug": true
      },
      "source": "vim-snippets/snippets"
    },
    "77c65bca6befd0274b67f5a7c428e4a5": {
      "content": "static public final String ${1:var} = \"${2}\";${4}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "const_string": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "77d50363bec37640ec7554866a4e5424": {
      "content": "break;",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "br": true
      },
      "source": "vim-snippets/snippets"
    },
    "77dfcd07f2469323e6e8ab7cb7e21465": {
      "content": "$this->db->delete(${1:table});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_db_truncate": true
      },
      "source": "vim-snippets/snippets"
    },
    "77e37af89cbd8aac29a8990e57a5f51d": {
      "content": "switch(${1:expression}) {\n\tcase '${3:case}':\n\t\t${4}\n\t\tbreak;\n\t${0}\n\tdefault:\n\t\t${2}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "77e42f1db4cee8a235586b45995b2b65": {
      "content": "@implementation ${1:object}\n- (id)init\n{\n\tif((self = [super init]))\n\t{${0}\n\t}\n\treturn self;\n}\n@end",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "ClassImplementation",
      "matches": {
        "clm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "77e7f7f040205e29fe268a40477bd17c": {
      "content": "java.net",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "j.n": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "77ec5930c7ab06c8696f67a49787cd2f": {
      "content": "SELECT ${1:*}\nFROM ${2:cities} ${3:WHERE area = 'Asia'}\n${4: ORDER BY distance}\n${5: LIMIT 30};",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "SELECT * from ... ORDER BY ... LIMIT ...",
      "matches": {
        "SELECT_DATA": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "77ef9bfac1f124f0f99427a2527b76f0": {
      "content": "import { $2 } from '${1:module}'$0",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "importDestructing",
      "matches": {
        "imd": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "77f27dadd0725ce068fd228c97ff70f6": {
      "content": "try {\n  ${1:TARGET}\n} catch (${2:e}) {\n  ${3}\n} finally {\n  ${4}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try_finally": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "77f630641d21aa2e99695b2e9346b188": {
      "content": "this.setState((state, props) => { return { $0 }})\n",
      "doc": "Performs a shallow merge of nextState into current state",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-component-set-state-func",
      "matches": {
        "react component setstate func": true,
        "ssf": true
      },
      "source": "javascript/react"
    },
    "77f6827cd45d2356449db0be7ef8be3a": {
      "content": "\\\\rightarrow {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "rightarrow",
      "matches": {
        "ra": true
      },
      "source": "vim-snippets/snippets"
    },
    "7806129baec779e8ac6e9e7ee8c5ab0f": {
      "content": "align-content: baseline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "7806dcbdee6613d8a9e005b131fba093": {
      "content": "&#x2305;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enter": true
      },
      "source": "vim-snippets/snippets"
    },
    "78073eefa2d04b9847468f384f6c3216": {
      "content": "place-content: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "78105b225fc2b825b210fef1af8bb3b7": {
      "content": "shared static this(${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sst": true
      },
      "source": "vim-snippets/snippets"
    },
    "78121152b3ed199cd784a0ed57e4ce0c": {
      "content": "<th>${0}</th>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th": true
      },
      "source": "vim-snippets/snippets"
    },
    "782ab8eb0ebca91fa717035f1038000a": {
      "content": "${1:obj}.keydown(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "kdown": true
      },
      "source": "snippets/javascript"
    },
    "78403bcb82a6f6e2744d2c3c90cc6b76": {
      "content": "import { useStaticQuery, graphql } from \"gatsby\"",
      "doc": "",
      "filetype": "gatsby",
      "grammar": "lsp",
      "label": "gatsby-usestaticquery-import",
      "matches": {
        "gatsby import usestaticquery": true
      },
      "source": "javascript/gatsby"
    },
    "784ceac5f35b2f290e7bc6a47afaa1f5": {
      "content": "_.overArgs(${func}, ${transforms})",
      "doc": "function doubled(n) {\n  return n * 2;\n}\n\nfunction square(n) {\n  return n * n;\n}\n\nvar func = _.overArgs(function(x, y) {\n  return [x, y];\n}, [square, doubled]);\n\nfunc(9, 3);\n// => [81, 6]\n\nfunc(10, 5);\n// => [100, 10]\n\nCreates a function that invokes `func` with its arguments transformed.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-overargs",
      "matches": {
        "lodash overargs": true
      },
      "source": "javascript/lodash"
    },
    "784e2789ffb7ec7bffcf71325afd3b91": {
      "content": "get(${1:x}, ${2:y}${3:, }${4:width}${5:, }${0:height});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "pixel",
      "matches": {
        "get": true
      },
      "source": "vim-snippets/snippets"
    },
    "784e58a142823a6b872f3b11ac94d1bf": {
      "content": "type\t\tfixedValue;\nvalue\t\tuniform ${0};",
      "doc": "",
      "filetype": "openfoam",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fv": true
      },
      "source": "vim-snippets/snippets"
    },
    "785605e7a06a6b6dcd79b232dd52a86d": {
      "content": "![${1:alt}](http://${2:link})$0",
      "doc": "Insert image",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert image",
      "matches": {
        "image": true
      },
      "source": "vscode-R/snippets"
    },
    "785c7424748c01abdb8cc3bac46506be": {
      "content": "assert_match(/${1:expected_pattern}/, ${2:actual_string})",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asm": true
      },
      "source": "vim-snippets/snippets"
    },
    "786dd2040a33655f3ec38b7997278ba4": {
      "content": "on:${1:click}=\"{() => ${2:count += 1}}\"",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-on-event-inline",
      "matches": {
        "svelte on event inline": true,
        "svon-inline": true
      },
      "source": "javascript/svelte"
    },
    "786e1df148f4a0d6899cddf95f74d218": {
      "content": "${1:FIELDNAME} = models.BooleanField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "BooleanField",
      "matches": {
        "mbool": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "787bbbd218044e2a53e7f4db0368a43e": {
      "content": "lapply(${1:X}, ${2:FUN}, ${3:...})",
      "doc": "Lapply",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "lap",
      "matches": {
        "lapply": true
      },
      "source": "vscode-R/snippets"
    },
    "787d2914980c94a7351180fcc9d9145d": {
      "content": "<h4>${0}</h4>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h4": true
      },
      "source": "vim-snippets/snippets"
    },
    "788058557dce3a7003d1a73031d5fdaf": {
      "content": "place-items: ${1:stretch} ${0:stretch}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi+": true
      },
      "source": "vim-snippets/snippets"
    },
    "788f33a339e583aedd7ab7206d74d241": {
      "content": "{% endautoescape %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endautoescape",
      "matches": {
        "endautoescape": true
      },
      "source": "vim-snippets/snippets"
    },
    "7890370896d677698868b6697a63a3ca": {
      "content": "${1:out}: $1.o\n\t$(CC) $(CFLAGS) -o $@ $+",
      "doc": "",
      "filetype": "make",
      "grammar": "snu",
      "label": "",
      "matches": {
        "add": true
      },
      "source": "vim-snippets/snippets"
    },
    "789298cdac366d36dada35ea9e4ad4ab": {
      "content": "elsif ${1} then\n\t${2}",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "7894d35787337257977620b9e937c0b2": {
      "content": "clear: both",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "789d5bf0e7e85817c2a3efceaede80b5": {
      "content": "class ${1:class_name}:\n\t\"\"\"${0:description}\"\"\"",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cla": true
      },
      "source": "vim-snippets/snippets"
    },
    "78b119732027762244f9f7f92af0cffe": {
      "content": "${1:outMatrix} <- matrix(data = ${2:dataVec}, nrow = ${3:nrow}, ncol = ${4:ncol}, byrow = ${5:byrow})",
      "doc": "Create a matrix from a vector",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Matrix",
      "matches": {
        "matrix": true
      },
      "source": "vscode-R/snippets"
    },
    "78b646770de3217423e994dd7f1a6404": {
      "content": "require('dotenv-safe').config({ debug: ${1|true,false|} })",
      "doc": "You may turn on logging to help debug why certain keys or values are not being set as you expect.",
      "filetype": "dotenv-safe",
      "grammar": "lsp",
      "label": "dotenv-safe-debug",
      "matches": {
        "dotenv-safe debug": true
      },
      "source": "javascript/dotenv-safe"
    },
    "78b8054962e12a4e80dbb68db12bd1ea": {
      "content": "width: ${1:auto};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "width",
      "matches": {
        "w": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "78d550be173266c6531db1dd5aea4825": {
      "content": "@debug \"${1}\" ${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@d": true
      },
      "source": "vim-snippets/snippets"
    },
    "78eeb438941307ddab3cfc5320c70587": {
      "content": "internal ${1:void} ${2}(${3})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m&": true
      },
      "source": "vim-snippets/snippets"
    },
    "78f1926e7254289f6ed4f94dc8bfdeab": {
      "content": "let!(:${1:object}) { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let!": true
      },
      "source": "vim-snippets/snippets"
    },
    "78f62a98c24f67fcf859c377b623cb14": {
      "content": "afterEach(function() {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "after each (js)",
      "matches": {
        "aft": true
      },
      "source": "vim-snippets/snippets"
    },
    "78f7fb0880792b24f0c0d201035db150": {
      "content": "${1:obj}.is('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "is": true
      },
      "source": "snippets/coffee"
    },
    "78f853ac06614b1fdfe94e6ac0013ccd": {
      "content": "\\\\subsection{${1:subsection name}}%\n\\\\label{sub:${2:$1}}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\subsection",
      "matches": {
        "sub": true
      },
      "source": "vim-snippets/snippets"
    },
    "7901ef2502eca26610cbbd40b10e6343": {
      "content": "function ${1:Singleton} (${2:argument}) {\n\t// the cached instance\n\tvar instance;\n\t// rewrite the constructor\n\t$1 = function $1($2) {\n\t\treturn instance;\n\t};\n\t// carry over the prototype properties\n\t$1.prototype = this;\n\t// the instance\n\tinstance = new $1();\n\t// reset the constructor pointer\n\tinstance.constructor = $1;\n\t${0}\n\treturn instance;\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sing": true
      },
      "source": "snippets/javascript"
    },
    "7906de8646076450dac41f79d9c5bb72": {
      "content": "t.integer :${1:title}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.integer (tci)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7924857fca32d88a96836e85e12ccac0": {
      "content": "overflow-style auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "79330deedf86766138f633435ae35a52": {
      "content": "function ${1:foo}(node) {\n\t// the node has been mounted in the DOM\n\treturn {\n\t\tdestroy() {\n\t\t\t// the node has been removed from the DOM\n\t\t}\n\t};\n}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-action",
      "matches": {
        "svaction": true,
        "svelte action": true
      },
      "source": "javascript/svelte"
    },
    "7936ce36bb6a0b6b16f77dd2a8989442": {
      "content": "public static void Main(string[] args) {\n    ${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "79391e02bd438a4d21bcc324bb059c62": {
      "content": "{% schema %}\n\t{\n\t\t\"name\": \"${1}\",\n\t\t\"class\": \"${2}\",\n\t\t\"settings\": [\n\t\t\t${0}\n\t\t]\n\t}\n{% endschema %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_schema": true
      },
      "source": "vim-snippets/snippets"
    },
    "793e700418ae8483f278cc11301ca375": {
      "content": "place-items: ${1:stretch};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi": true
      },
      "source": "vim-snippets/snippets"
    },
    "79475128dc6d0cb3cb0f3c154c75301d": {
      "content": "PropTypes.object.isRequired,",
      "doc": "Object prop type required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-object-required",
      "matches": {
        "prop-types object required": true,
        "ptor": true
      },
      "source": "javascript/prop-types"
    },
    "794caf3db15eea7ef69ef7969dd41549": {
      "content": "cursor: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "7958ab3ed3b42bd8c4cb2764895f548e": {
      "content": "clear: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl": true
      },
      "source": "vim-snippets/snippets"
    },
    "79590684dc43b2798088ef2f71c0d48b": {
      "content": "setter? ${0:name}",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w?": true
      },
      "source": "vim-snippets/snippets"
    },
    "795b3b3a99e24d195075708efd9299b8": {
      "content": "height: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h": true
      },
      "source": "vim-snippets/snippets"
    },
    "795e16541ba3022fe3b6aa3f07853736": {
      "content": "```${1:language}\n$0\n```",
      "doc": "Insert fenced code block",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert fenced code block",
      "matches": {
        "fenced codeblock": true
      },
      "source": "vscode-R/snippets"
    },
    "796463afbb5c84c625973d6cd02f3efb": {
      "content": "PGraphics pg;\npg = createGraphics(${1:width}, ${2:height}${3:, }${0:applet});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pg": true
      },
      "source": "vim-snippets/snippets"
    },
    "79654b87913a33ca5c34359404fe7584": {
      "content": "{-# LANGUAGE ${1} #-}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "{-# LANGUAGE ... #-}",
      "matches": {
        "language": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "796af77ea06d1d77a74c857865fb15f4": {
      "content": "top auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "797135a51e2e7881012ffc8945ddef47": {
      "content": "align-items start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "79769dfaf8788dcc35ca4c42ce7a509e": {
      "content": "always_comb begin\n    ${1:TARGET}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "always_comb",
      "matches": {
        "alc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7976bd57fc3d1649700896e3829e61b3": {
      "content": "ignoring ${1:#:application responses}\n\t${0:TARGET}\nend ignoring",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ign": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7978791c379a8f0f94089325f3d21438": {
      "content": "if ${1:#:condition} then\n\t${2}\nelse\n\t${3}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "if ... then ... else ...",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "797f8c41f05cc6e89a3ec6213dd9017c": {
      "content": "source :rubygems",
      "doc": "",
      "filetype": "Gemfile",
      "grammar": "snu",
      "label": "",
      "matches": {
        "source-rubygems": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7988c5f789187289225b179a7dcc38b9": {
      "content": "visibility: collapse",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "798c2ddc16ad68561a517111cb65dfa6": {
      "content": "_.maxBy(${array}, ${iteratee})",
      "doc": "var objects = [{ 'n': 1 }, { 'n': 2 }];\n\n_.maxBy(objects, function(o) { return o.n; });\n// => { 'n': 2 }\n\n// The `_.property` iteratee shorthand.\n_.maxBy(objects, 'n');\n// => { 'n': 2 }\n\nThis method is like `_.max` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-maxby",
      "matches": {
        "lodash maxby": true
      },
      "source": "javascript/lodash"
    },
    "798e12db815da4726a674d4533264f1d": {
      "content": "import { Injectable } from '@angular/core';\nimport { PreloadingStrategy, Route } from '@angular/router';\nimport { Observable, EMPTY } from 'rxjs';\n\n// avoid typing issues for now\nexport declare var navigator;\n\n@Injectable({ providedIn: 'root' })\nexport class NetworkAwarePreloadStrategy implements PreloadingStrategy {\n\tpreload(route: Route, load: () => Observable<any>): Observable<any> {\n\t\treturn this.hasGoodConnection() ? load() : EMPTY;\n\t}\n\n\thasGoodConnection(): boolean {\n\t\tconst conn = navigator.connection;\n\t\tif (conn) {\n\t\t\tif (conn.saveData) {\n\t\t\t\treturn false; // save data mode is enabled, so dont preload\n\t\t\t}\n\t\t\tconst avoidTheseConnections = ['slow-2g', '2g' /* , '3g', '4g' */];\n\t\t\tconst effectiveType = conn.effectiveType || '';\n\t\t\tif (avoidTheseConnections.includes(effectiveType)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
      "doc": "Angular network aware preload strategy",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-network-aware-preload-strategy",
      "matches": {
        "a-preload-network-strategy": true,
        "angular network-aware preload strategy": true
      },
      "source": "javascript/angular"
    },
    "798f8e96f7a27e967b9f6a688d790c06": {
      "content": "<link rel=\"apple-touch-icon\" href=\"${1:favicon.png}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link:touch": true
      },
      "source": "vim-snippets/snippets"
    },
    "79977d761d7e0d19944c0a93cdeabd24": {
      "content": "await ${0:${VISUAL}}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "await",
      "matches": {
        "aw": true
      },
      "source": "snippets/javascript"
    },
    "799af10e34fab98b7bda3d1685e7537e": {
      "content": "print ${1:\"${2}\"}${0}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "print",
      "matches": {
        "pri": true
      },
      "source": "vim-snippets/snippets"
    },
    "799ce63f6e460db395119374294dde9c": {
      "content": "scanf(\"${1}\", ${2});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "scanf(\"...\", ...);",
      "matches": {
        "scanf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "79a01728f3808e3b99915afcab685947": {
      "content": "use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Sensio\\..\\Route",
      "matches": {
        "useroute": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "79a8b241fc834df04bee979e86c749bb": {
      "content": "throw ${1};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "79af26ccd4cb2713110d72be68d0c5e7": {
      "content": "grid-auto-rows: max-content;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar:mac": true
      },
      "source": "vim-snippets/snippets"
    },
    "79b05912e770775d7325a2429797e6e5": {
      "content": "sphereDetail(${0:n});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sphereDetails": true
      },
      "source": "vim-snippets/snippets"
    },
    "79b282f65e14f12e859304d449d5fad3": {
      "content": "place-items: start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "79b50ed6fcdbdf00f11f84988b3a1c8e": {
      "content": "@interface ${1} : ${2:NSObject}\n{\n}\n@end\n@implementation ${1}\n- (id)init\n{\n\tif((self = [super init]))\n\t{${0}\n\t}\n\treturn self;\n}\n@end",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Class",
      "matches": {
        "cl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "79d3df05c71f547ce3760a45e0e94430": {
      "content": "scrollBehavior(to, from, savedPosition) {\n\tif(savedPosition) {\n\t\treturn savedPosition;\n\t} else {\n\t\treturn { x: 0, y: 0 };\n\t}\n},",
      "doc": "Vue Router scrollBehavior",
      "filetype": "vue-script-router",
      "grammar": "lsp",
      "label": "Vue Router scrollBehavior",
      "matches": {
        "vscrollbehavior": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "79da5649d804b9dc8575e81b44d2d3c6": {
      "content": "= mail_to ${1:email_address}, ${2:name}",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mt": true
      },
      "source": "vim-snippets/snippets"
    },
    "79e0d0a8aa1fc7715c561c965d07ef81": {
      "content": "import ${0:http}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "79e385d80b01cda408a5f2584285d960": {
      "content": "$_POST['${1:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "_POST array",
      "matches": {
        "P": true
      },
      "source": "vim-snippets/snippets"
    },
    "79ea83dd06a87e0b1e9978e8c6bc24f7": {
      "content": "Option<${1:()}>${2}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Option<A>",
      "matches": {
        "opt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "79f4abc9a27c336d02267e4336980e1f": {
      "content": "data ${1:Type} = ${2:$1} ${0:Int}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "da": true
      },
      "source": "vim-snippets/snippets"
    },
    "79f54b29f00c7b0d16883d465b8172c9": {
      "content": "priority case (${1}) begin\n    ${2:'b0}: begin\n        ${3}\n    end\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case_full": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "79f86cb8b5179c076debe29bb4ad661f": {
      "content": ":hover",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":h": true
      },
      "source": "vim-snippets/snippets"
    },
    "79fb7adb7479691636e11ea327c60fcd": {
      "content": "(\\\\${1:_} => ${0})",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "Lambda function (\\x => ...)",
      "matches": {
        "\\": true
      },
      "source": "vim-snippets/snippets"
    },
    "79fdaa0c7ea618625b2f5c6dfacef1c1": {
      "content": "_.forOwnRight(${object}, ${iteratee})",
      "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forOwnRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n\nThis method is like `_.forOwn` except that it iterates over properties of\n`object` in the opposite order.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-forownright",
      "matches": {
        "lodash forownright": true
      },
      "source": "javascript/lodash"
    },
    "7a03abea4c4cca7a2195bde12f128efe": {
      "content": "padding: ${1:0} ${2:0} ${3:0} ${0:0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:4": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a0642e1a06c45bc1843c30bbc7d1ee1": {
      "content": "overflow-x: hidden;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a13de79e2a6482dd27aa5f93ee75d6c": {
      "content": "until [[ ${1:condition} ]]; do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "until": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a1577033790ec17815629bbda5a0671": {
      "content": "#define",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a18ed328e8795291308486ede1c8dca": {
      "content": "(${1:name} [${2:this} ${3:args}]\n\t${0:code})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "met": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a1abb274263e8d614a6146c9471ebf2": {
      "content": "[[${1}]] ${2}",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[[": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7a23bb2fb2fc960523a77cb459b8f196": {
      "content": "Set Suite Variable    \\${${1:name}}    ${2:${value}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Set Suite Variable",
      "matches": {
        "ssv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7a2c9289fabdae16e4ee80429f85b956": {
      "content": "${1:obj}.slice(${2:start}${3:, end})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slice": true
      },
      "source": "snippets/javascript"
    },
    "7a2ca308eae2363d7ba27c86c49814da": {
      "content": "table-layout: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbl:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a365472e32b2c3a654a692ab24e2087": {
      "content": "use ${0:test_class};\n$1->runtests();",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trunner": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a386326fbe35ff3f40f493d8215fff7": {
      "content": "Rc::new(${0:${VISUAL}})",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Rc::new()",
      "matches": {
        "rc": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a468a920e44ec8f1b3c114c86643844": {
      "content": "justify-content: space-evenly;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a502f60e90328d8d286681d52d0a6d6": {
      "content": "require('${1:module}');",
      "doc": "require",
      "filetype": "base",
      "grammar": "lsp",
      "label": "require",
      "matches": {
        "base require": true
      },
      "source": "javascript/base"
    },
    "7a54abaed58ed80c80da99ba57afa220": {
      "content": "l_${1}\t\t${0:number};",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "l": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a57d2e33d08a07b579e6f4228785780": {
      "content": "position: relative",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a5a2fcf7740dc82b5670bd114d4b99b": {
      "content": "{% break %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "break": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a5b28e8028918eae13a0fc6f6b033b6": {
      "content": "text-decoration overline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a5e8fa63c9f9934ffe2647f5dd94bec": {
      "content": "define [\"${1:#dependencies1}\"], (${2:#dependencies2}) ->\n\t${0:TARGET}",
      "doc": "",
      "filetype": "requirejs_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "snippets/coffee"
    },
    "7a676b880feeb4d32a456bf07e3defef": {
      "content": "implements ${0}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a6b2a0a0b2b0c1773c288ac183af9ae": {
      "content": "return ${1:/*value to return*/};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "return (ret)",
      "matches": {
        "ret": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7a6c2b9ee09d9c4fe1daab3d23b15ecf": {
      "content": "export const select${1:Feature}${2:Property} = createSelector(\n\tselect$1,\n\t(state: $1State, props) => ${3:selectLogic}\n);",
      "doc": "Creates an NgRx Selector using props",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrx-create-selector-w-props",
      "matches": {
        "a-ngrx-create-selector-props": true,
        "angular ng rx create selector props": true
      },
      "source": "javascript/angular"
    },
    "7a6d4875265d3f79fcd66b8059203b13": {
      "content": "@isset\n\t${1:${VISUAL}}\n@endisset",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@isset directive",
      "matches": {
        "isset": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7a72d02980d9ec5e4079bef6abbdb189": {
      "content": "_.startCase(${string})",
      "doc": "_.startCase('--foo-bar--');\n// => 'Foo Bar'\n\n_.startCase('fooBar');\n// => 'Foo Bar'\n\n_.startCase('__FOO_BAR__');\n// => 'FOO BAR'\n\nConverts `string` to\n[start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-startcase",
      "matches": {
        "lodash startcase": true
      },
      "source": "javascript/lodash"
    },
    "7a75b039d602e4e47f069fa8ffc37674": {
      "content": ":nth-child(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":nc": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a78768b459381acaee222df747f0f49": {
      "content": "\\begin{quotation}\n\t${1:TARGET}\n\\end{quotation}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{quotation} \\quotation": true,
        "quotation": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7a7957098eb60a8ad29a0378c392d91c": {
      "content": "class ${1:class_name}(${2:class_params})\n\t${0:/* members/methods */}\nend",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a7cc8976389cc147b91c511b22713fd": {
      "content": "_.add(${augend}, ${addend})",
      "doc": "_.add(6, 4);\n// => 10\n\nAdds two numbers.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-add",
      "matches": {
        "lodash add": true
      },
      "source": "javascript/lodash"
    },
    "7a84ecaf74a440eff365db2c6d3ab455": {
      "content": "border-length: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlt": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a8d56fbbebe8aedf88eab20a6d95aef": {
      "content": "import ReactDOM from 'react-dom';",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "import ReactDOM",
      "matches": {
        "ird": true
      },
      "source": "snippets/javascript"
    },
    "7a929f712801b18e994b3d26ee018c04": {
      "content": "margin 0",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a9366bb9a2f08b3e33d0e4848149ef7": {
      "content": "Yii::trace('${0:msg}');",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ytrace": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a94364fbe45734e743530a17bfeb98f": {
      "content": "<ul type=\"square\">${1:TARGET}</ul>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ulsquare": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7a9597d6fafe3b91ce39e2ab8c33469f": {
      "content": "border-corner-image: continue",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdci:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a98fa058396ad83af0663ea86424ead": {
      "content": "<%= options_from_collection_for_select ${1:collection}, ${2:value_method}, ${3:text_method}, ${0:selected_value} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ofcfs": true
      },
      "source": "vim-snippets/snippets"
    },
    "7a9a17e6b5734f63498f2a5cb24526d8": {
      "content": "get ${1:property}() {\n\t${0}\n}\nset ${1:property}(${2:value}) {\n\t\n}",
      "doc": "getter and setter (ES6 syntax)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "getter-and-setter-es6-syntax-",
      "matches": {
        "base getter setter": true
      },
      "source": "javascript/base"
    },
    "7aa87c5393c52146e84c27d372072569": {
      "content": "if [[ $${1:string} =~ ${2:^regexp.*} ]]; then\n\t${0}\nfi",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "=~",
      "matches": {
        "match-regexp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7ab2d8c9b04804baa2b892c44f4e1aaf": {
      "content": "place-items: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "7abdd9ca520c561c23b81f728959be43": {
      "content": "|> Enum.filter(fn ${1} -> ${0} end)",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "pipe to filter",
      "matches": {
        ">f": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ac625097835f34bf7327f009ff12d19": {
      "content": "while ${1:(* condition *)} do\n\t${2:(* A *)}\ndone",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "while",
      "matches": {
        "while": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7adcf09f635b710cbec5c14a867c2aa7": {
      "content": "func ${1:funcName}(${2}) ${3:error} {\n\t${4}\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "function",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ae358cddfc0eaac337ac16c11d753d1": {
      "content": "it { should rescue_from ${0:exception} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isrf": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ae560b958684c4491c3a507649d175d": {
      "content": "exit when ${1};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "exit when",
      "matches": {
        "ex": true
      },
      "source": "vim-snippets/snippets"
    },
    "7aec240d599809ac6b2e99760445469a": {
      "content": "partition { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "par": true
      },
      "source": "vim-snippets/snippets"
    },
    "7aecfb797cbabcb252968c445053cbfc": {
      "content": "[${1:ref number}] ${0}\nfn$1. ${2:footnote}",
      "doc": "",
      "filetype": "textile",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "7aefdf4f61461a789b1607d3d71baddb": {
      "content": "switch (${1:#:let}) {\n  case ${2:#:val}:\n    ${0:TARGET}\n    break;\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7af08161453f6775df4ef0f1c64db961": {
      "content": "set(${1:var} ${0:val})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/snippets"
    },
    "7af1804b6ac6caa89ca75ffec65caabf": {
      "content": "box-sizing ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxz": true
      },
      "source": "vim-snippets/snippets"
    },
    "7af93791a7395a81b57fe5dff878febf": {
      "content": "{foreach $${1:var} in ${2:ref}}\n\t$0\n{/foreach}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "foreach command",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7b024e23f4dc0914262b3d451ca7641d": {
      "content": "echo CHtml::statefulForm(array('${1}'), '${2:post}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhsform": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b0385ff3c5468e96438a23cbaa2cd47": {
      "content": "var_dump(${1}); die(${0:});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vdd": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b0dbd971da94e3542823b9c8a122085": {
      "content": "@for ${1:$i} from ${2:1} through ${3:3} {\n\t${0}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b0f53842da96e8cb3a8eef1506180ba": {
      "content": "_.differenceWith(${array}, ${values}, ${comparator})",
      "doc": "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n\n_.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n// => [{ 'x': 2, 'y': 1 }]\n\nThis method is like `_.difference` except that it accepts `comparator`\nwhich is invoked to compare elements of `array` to `values`. The order and\nreferences of result values are determined by the first array. The comparator\nis invoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike `_.pullAllWith`, this method returns a new array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-differencewith",
      "matches": {
        "lodash differencewith": true
      },
      "source": "javascript/lodash"
    },
    "7b130b71e0f1ea2f378faba5c05cc8a0": {
      "content": "else if (${1:/* condition */}) {\n\t${2}\n}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b141ec3765ca86db144324debc74be8": {
      "content": "align-content space-around",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:sa": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b1afe590a6e608cbc19b9e9b17093d7": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
      "doc": "Base for Vue File with SCSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component",
      "matches": {
        "vbase": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "7b1b8ecfb3e54d71b2b17e26a6a348ed": {
      "content": "box-shadow: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b21128550aa18fb28c6083eb4fd6625": {
      "content": "input(v-model.number=\"${1:numData}\" type=\"number\" step=\"1\")",
      "doc": "v-model directive number input",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue v-model Number Directive",
      "matches": {
        "vmodel-num": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "7b2425e9db68ac9e804037a88ad96119": {
      "content": "switch (${1:#:var}) {\ncase ${2:#:val}:\n    ${0:TARGET}\n    break;\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "switch () {}",
      "matches": {
        "switch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7b2fc522d7e2ffba8bd2bcd0ac5f4691": {
      "content": "background-position-x: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgpx": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b33e093b1432570c2cc9b93f516dd34": {
      "content": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
      "doc": "An object that could be one of many types required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeOneOfTypeRequired",
      "matches": {
        "ptetr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "7b484e1dd508d48f8855000235cfac53": {
      "content": "in_array(${1:needle}, ${2:haystack})$0",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "in_array",
      "matches": {
        "ia": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b50f77b719b024309e862e519020498": {
      "content": "string.max()",
      "doc": "string.max(limit: number | Ref, message?: string | function): Schema\n\nSet a maximum length limit for the string value. The ${max} interpolation can be used in the message argument",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-max",
      "matches": {
        "yup string max": true
      },
      "source": "javascript/yup"
    },
    "7b543c4d431c1c2b403aa211b18b2055": {
      "content": "<%= image_submit_tag('${1:agree.png}', id: '${2:id}'${0}) %>",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ist": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b55ffcea13e56bcd3472c261392cc42": {
      "content": "if (${1:true}) ${0};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifi": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b59f51e02b87a0fd783af23e1cd84e5": {
      "content": "def main(args: Array[String]):${1:T} = ${0:}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b5d7fd880e47b4ba257051f0e046eef": {
      "content": "content: open-quote;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:oq": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b6783de405b0fa2facdae8776df9a12": {
      "content": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
      "doc": "Invoked before rendering when new props or state are being received. ",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-shouldcomponentupdate",
      "matches": {
        "react shouldcomponentupdate": true,
        "scu": true
      },
      "source": "javascript/react"
    },
    "7b6a4910501097f1c6cb3a1bf315e8e0": {
      "content": "chr",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "Char",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b7020a55cff2bb05f0fc45401ca2d81": {
      "content": "cursor: default",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b7d9b4db5608a8908c5ad6fa4422525": {
      "content": "impl AsRef<${1:Ref}> for ${2:Type} {\n\tfn as_ref(&self) -> &${3:$1} {\n\t\t&self.${0:field}\n\t}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "AsRef trait implementation",
      "matches": {
        "asref": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b800c6711b3815855b4d4bb351da993": {
      "content": "filter!(${1:p})(${2:xs});\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filter": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b8319f463e9f5b044b7093705789fff": {
      "content": "justify-self ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b85d1c2d6baa311d8072b37dd04008a": {
      "content": "quotes: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b863bdd9b50ff20b336eccc7d2e03f7": {
      "content": "loadMovieNum(${1:url}, ${2:level}, ${3:method});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ln": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7b86b19c83e37dbf933643b2548e6d3a": {
      "content": "fscommand(${1:#:command}, ${2:#:paramaters});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7b88ff862c4dd6b28aed6caa3caee648": {
      "content": "expect(${1:target}).toBeNull()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to be null (coffee)",
      "matches": {
        "en": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7b8989903df6c27d0ac0caab01b752e5": {
      "content": "*ngIf=\"${1:expression};else ${2:templateName}\"",
      "doc": "Angular *ngIfElse",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngIfElse",
      "matches": {
        "a-ngIfElse": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "7b8ca4b4ceea198877cf684409c6ef4e": {
      "content": "border-top-right-image continue",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtri:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b927ea28e40dde4d2a55a922b37d19c": {
      "content": "font-stretch extra-expanded",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:ee": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b949a3c054d2b14f4b38e6ccc2a6091": {
      "content": "expect(${1:}).to.deep.equal(${0});",
      "doc": "",
      "filetype": "javascript-mocha",
      "grammar": "snu",
      "label": "expect(...).to.deep.equal(...)",
      "matches": {
        "expd": true
      },
      "source": "vim-snippets/snippets"
    },
    "7b9b96639386df79c88a36eff9a8d654": {
      "content": "<ruby>\n\t<rp><rt>${0}</rt></rp>\n</ruby>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ruby": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ba4fbcf91a59fa59a62a76b4ff0ca15": {
      "content": "nextFrame();",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7ba7fb2fa66222331558985fd54afae7": {
      "content": "componentWillMount: ->\n\t$1",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define componentWillMount",
      "matches": {
        "componentWillMount": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7bb03b33d341bdb14f57367548e33850": {
      "content": "\\${${1:x}}    \\${${2:y}}=    Get Window Position",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Get Window Position",
      "matches": {
        "gwp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7bbfa1f9fd6c01b1d4fa3780ce9abad5": {
      "content": "if ${1:condition}\n\t${0}\nend",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "7bd0a377465dc2f66df14493524f36c3": {
      "content": "if ${1:#:condition} then\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7bd312527b9ad782012c5165f93a0fac": {
      "content": "private",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pri": true
      },
      "source": "vim-snippets/snippets"
    },
    "7bd38c859e27a1897b211bb65fc2be49": {
      "content": "my $${1:var} = do { local $/ = undef; open my $fh, '<', ${2:$file}; <$fh> };\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "slurp",
      "matches": {
        "slurp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7bdff0e5706a4a3f98f42486ad983904": {
      "content": "${1:FIELDNAME} = forms.URLField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "URLField",
      "matches": {
        "furl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7be385fc9ffc09739b29b40fbd293c80": {
      "content": "<input type=\"password\" name=\"${1:password}\">${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inputpassword": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7beee97a010a99e4a8d603569ebc2084": {
      "content": "font-emphasize-style: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems": true
      },
      "source": "vim-snippets/snippets"
    },
    "7bfd90e88bffaa6051001f1185183b46": {
      "content": "border-fit clip",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "7bfff94e0611e3ee3748941148928500": {
      "content": "foreach (${1:var} ${2:entry} in ${3})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "foreach": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c0008dfca921b64a9956924d39f3a23": {
      "content": "@${1:param/return/private/public}  ${1:parameter}  ${0:description}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c0706711bcfef348ae209d77d5dd156": {
      "content": "Set${1:[T]}${0:()}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c0b9d4b6df0969cd445ab5ffbdd4fdf": {
      "content": "cum${1:max}(${2:x})",
      "doc": "Cummulative",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "cum",
      "matches": {
        "cum": true
      },
      "source": "vscode-R/snippets"
    },
    "7c0c51952a0247ee941f13a9ae3ca4bf": {
      "content": "$this->session->flashdata(\"${1:item}\");${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_session_flashdata": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c0efc211cea30547577ae840cac248b": {
      "content": "var $1 = new sap.m.FlexBox({\n\t\t\tvisible : $2,\n\t\t\theight : $3,\n\t\t\twidth : $4,\n\t\t\tdisplayInline :$5,\n\t\t\tdirection :$6,\n\t\t\tfitContainer : $7,\n\t\t\trenderType : $8,\n\t\t\tjustifyContent :$9,\n\t\t\talignItems : $10,\n\t\t\titems:[]\n\t\t});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapmflexbox": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c28489b223ebafee11b9ea33fe78627": {
      "content": "def test_should_get_${1:action}\n\t${2:@${3:model} = ${4:$3s}(:${5:fixture_name})\n\t}get :$1${6:, id: @$3.to_param}\n\tassert_response :success\n\t$0\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "def get request",
      "matches": {
        "deftg": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7c29d6d97ede66f98763232bd02086ef": {
      "content": "functor (${1:Arg} : ${2:ARG}) -> ${3:(* BODY *)}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "functor signature or anonymous functor",
      "matches": {
        "sigf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7c30879e794b62e2e648d17374c547de": {
      "content": "getattr(${1:#:obj}, ${2:#:attr})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "getattr(..., ...)",
      "matches": {
        "getattr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7c3e598fc63858eedbad3998b4336653": {
      "content": "$this->${1:method}()->shouldNotHaveKeyWithValue(${2:'key'}, ${3:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotHaveKeyWithValue('key', 'value')",
      "matches": {
        "snkeyvalue": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7c426a3259126e93df938eda22880f6f": {
      "content": "to!(${1:/*type*/})(${2:/*arg*/})",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "to (to)",
      "matches": {
        "to": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7c46e35f0423b48476aec5d15b80b2ba": {
      "content": "\\\\stackrel{${1:above}}{${2:below}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\stackrel{}{}",
      "matches": {
        "stackrel": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c50a49cca7fa7e55df3d4ffaa85ebe7": {
      "content": "<#function ${1:function_name} ${2:param1}>\n\t${0:${VISUAL}}\n</#function>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#function function_name param1>...</#function>",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c563d290a6fe72328ceebee55f497e1": {
      "content": "if (${1:true}) {${0}}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c62ddb4e6476cd7303cd591cb7db556": {
      "content": "#ifdef __cplusplus\nextern \"C\" {\n#endif\n${0}\n#ifdef __cplusplus\n} /* extern \"C\" */\n#endif",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nocxx": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c67c4c60b664deacd306e2b9e56a3a4": {
      "content": "background-repeat: repeat",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c68fe51ca0be7b7d90b6c42f3968193": {
      "content": "overflow visible",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c70b7676831e08646a00cdc284ad4d5": {
      "content": "<ul class=\"${1}\">\n\t${0}\n</ul>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ul.": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c74a17413847e502199bad2cb94b75c": {
      "content": "${1:http}.HandleFunc(\"${2:/}\", func(w http.ResponseWriter, r *http.Request) {\n\t${0:fmt.Fprintf(w, \"hello world\")}\n})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "mux.HandleFunc",
      "matches": {
        "hhf": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "7c7c1b2db97e6426a47cf5bdbb132913": {
      "content": "| truncatewords: ${1:5}, '${2:...}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "truncatewords": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c7d95502023c918a4549758d0f1d9c2": {
      "content": "Scanner",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c842cf018a0029dc5abdb2bd4c6662b": {
      "content": "| uniq",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "uniq": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c8cdb1005e6cd09eb834275ab92f968": {
      "content": "do {\n    ${0:TARGET}\n} while (${1:#:condition});",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "do {} while() {}",
      "matches": {
        "do_while": true,
        "dowhile": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7c8f2859d84703ace6e6cc37378e1e14": {
      "content": "each do |${1:e}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ead": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c9c404aa9e0064e68e315034a4fec34": {
      "content": "{% include \"${1}\" %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig include",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/snippets"
    },
    "7c9dbcc9022f8ae0ecf897dd2ed16487": {
      "content": "${1:obj}.change(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "change": true
      },
      "source": "snippets/javascript"
    },
    "7c9eebfb339b287d7ae181127bd94350": {
      "content": "<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<% end %>",
      "matches": {
        "end": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7ca3d5d734efa085ec96a10ddcc3822e": {
      "content": "{% include '${1:#:template}' with {${2:#:'key'}: ${2:#:'value'}} %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% include '...' %}",
      "matches": {
        "includewith": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7ca94d6a247dcd03e6b2c0397e6d2d3a": {
      "content": "page-break-before right",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "7cac0ae137cf38494957723be1a02c11": {
      "content": "defmodule Main do\n  def main do\n    ${1:TARGET}\n  end\nend\nMain.main",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7cbd82775d3fe0c3b6046a50ea7efe94": {
      "content": "#include \"${1}.h\"",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#inc2, #include2": true,
        "inc2": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7cc184856e2499e87c1a0c2e5a4721ed": {
      "content": "${1:component}.$destroy();",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-component-destroy",
      "matches": {
        "svcomd": true,
        "svelte component destroy": true
      },
      "source": "javascript/svelte"
    },
    "7cc8fc603e63325e0a379f11124dbf3a": {
      "content": "void setup(){\n\t${1}\n}\nvoid draw(){\n\t${0}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "setup": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ccbbd0ffca6d6c571b0b133b186c2d3": {
      "content": "class Migration${1:class_name} < ApplicationRecord\n\tself.table_name = :${2:model_name}s\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "class Migration... < ApplicationModel .. self.table_name .. end",
      "matches": {
        "cmm": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ccdba66b2e7426bc1f41bcc6020d32f": {
      "content": "#import <${1:Cocoa/Cocoa.h}>",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7cce91061fed33af423cd287c04476c1": {
      "content": "{%- assign ${1:variable} = ${0:value} -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "assign-": true
      },
      "source": "vim-snippets/snippets"
    },
    "7cd4623674b42fbe1906b754ccac609d": {
      "content": "export const ${1:actionName} = (payload) => ({\n\ttype: ${3:type},\n\tpayload\n})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reduxAction",
      "matches": {
        "rxaction": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "7cd6dda8bd99cad1e5e256ce240e4176": {
      "content": "content: no-open-quote;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:noq": true
      },
      "source": "vim-snippets/snippets"
    },
    "7cf2657f1eb4c20b1e1af6c5f994414b": {
      "content": "validates_associated",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_associated",
      "matches": {
        "va": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7cf43525d5526ee5a038402cc14e0bde": {
      "content": "import React, { PureComponent } from 'react'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
      "doc": "Creates a React pure component class with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassPureComponent",
      "matches": {
        "rpc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "7cf47c81c7ed356da46dcbcecdb5c7cf": {
      "content": "_.defaultTo(${value}, ${defaultValue})",
      "doc": "_.defaultTo(1, 10);\n// => 1\n\n_.defaultTo(undefined, 10);\n// => 10\n\nChecks `value` to determine whether a default value should be returned in\nits place. The `defaultValue` is returned if `value` is `NaN`, `null`,\nor `undefined`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-defaultto",
      "matches": {
        "lodash defaultto": true
      },
      "source": "javascript/lodash"
    },
    "7d0ededca0608e0764f42ae277301fb6": {
      "content": "new(${0:type})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "new",
      "matches": {
        "nw": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d1dc97091f1ed52ce7fddde7a58a564": {
      "content": "module Test.Main where\nimport Prelude\nimport Test.Unit (suite, test)\nimport Test.Unit.Main (runTest)\nimport Test.Unit.Assert as Assert\nmain = runTest do\n\tsuite \"${1}\" do\n\t\ttest \"${2:the tests run}\" do\n\t\t\tAssert.equal\n\t\t\t\t\"Hello, world!\"\n\t\t\t\t\"Hello, sailor!\"",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "testunit": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d20e5b0b97503e18669c8ffe28686d6": {
      "content": "background-clip border-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d249b1857168fe54fb9f64fdb0b2a52": {
      "content": "${1:FIELDNAME} = models.XMLField(schema_path=${2:None}${0:, blank=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xml": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d28eee3bbf7b59a8da52ca1d9ec2460": {
      "content": "{% verbatim %}\n\t${0}\n{% endverbatim %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig verbatim",
      "matches": {
        "verbatim": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d29bbdce2de70cce415bbbfbf0ee363": {
      "content": "{\n\t\"type\": \"link_list\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_link_list": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d2a4c796f5fb9316159e1e23cc63840": {
      "content": "procedure ${1}(${2}) is\n\t${3}\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "procedure",
      "matches": {
        "proc": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d314faab487fa5e9627de07bb90e7fc": {
      "content": "gotoAndStop(${1});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gs": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7d31ed143550b9dcd970ad8252e45910": {
      "content": "<p>${0}</p>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d338284612ae382e4bdd9c31cc7f24b": {
      "content": "border-fit: overwrite",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:of": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d3a6e30183979df99dbf10e0c3f0bbe": {
      "content": "import akka.actor.{ActorSystem, Actor, ActorLogging, Props}\nobject ${1:X} {\n\tdef props(${2}) = Props(new X($2))\n}\nclass $1($2) extends Actor with ActorLogging {\n\tdef receive = {\n\t\tcase e =>\n\t\t\t${0:TARGET:println(e)}\n\t}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "akka-actor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7d65594c8872d342917d71130fb08613": {
      "content": "pragma(${1})",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prag": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d6831758ee73ff1b815a92dec7cd8cc": {
      "content": "{# ${1:comment} #}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{# ... #}",
      "matches": {
        "#": true,
        "comment": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7d6c571422ffebcc637d59021e1ed71d": {
      "content": "array.min()",
      "doc": "array.min(limit: number | Ref, message?: string | function): Schema\n\nSet a minimum length limit for the array. The ${min} interpolation can be used in the message argument.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "array-min",
      "matches": {
        "yup array min": true
      },
      "source": "javascript/yup"
    },
    "7d6f45f2104088795a6ced0528e56865": {
      "content": "_.rangeRight(${start}, ${end}, ${step})",
      "doc": "_.rangeRight(4);\n// => [3, 2, 1, 0]\n\n_.rangeRight(-4);\n// => [-3, -2, -1, 0]\n\n_.rangeRight(1, 5);\n// => [4, 3, 2, 1]\n\n_.rangeRight(0, 20, 5);\n// => [15, 10, 5, 0]\n\n_.rangeRight(0, -4, -1);\n// => [-3, -2, -1, 0]\n\n_.rangeRight(1, 4, 0);\n// => [1, 1, 1]\n\n_.rangeRight(0);\n// => []\n\nThis method is like `_.range` except that it populates values in\ndescending order.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-rangeright",
      "matches": {
        "lodash rangeright": true
      },
      "source": "javascript/lodash"
    },
    "7d798600b4bf1c74c601e2b06f98e3ad": {
      "content": "header (\"HTTP/1.1 301 Moved Permanently\");\nheader (\"Location: \".URL);\nexit();",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "http_redirect": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d850b592a9ddbd01d68788449a60b05": {
      "content": "let open ${1:module} in\n${2:e}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "open",
      "matches": {
        "open": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7d8b3c34f7067a2886b3dba48c8e1c2f": {
      "content": "mutations: {\n\t${1:updateValue}(state, ${3:payload}) {\n\t\tstate.${2:value} = ${3:payload};\n\t}\n}",
      "doc": "vuex mutation",
      "filetype": "vue-script-vuex",
      "grammar": "lsp",
      "label": "Vuex Mutation",
      "matches": {
        "vmutation": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "7d989a20e732fa7488b9cecb1628f5a7": {
      "content": "protected function setUp()\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "protected function setUp() { ... }",
      "matches": {
        "setup": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d9b62f2fd03debd94bac76cf4901512": {
      "content": "type ${1} is ${2};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "type",
      "matches": {
        "ty": true
      },
      "source": "vim-snippets/snippets"
    },
    "7d9c3da84888f3f27e1a85eeafd67285": {
      "content": "height: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h": true
      },
      "source": "vim-snippets/snippets"
    },
    "7da12e050d12863119e631dabe4cf056": {
      "content": "internal bool ${1} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb&-": true
      },
      "source": "vim-snippets/snippets"
    },
    "7da17decc8bca80f85ecd2ab47042497": {
      "content": "std::multimap<${1:Key}, ${2:T}> ${3};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mmap": true
      },
      "source": "vim-snippets/snippets"
    },
    "7da58be0f7bdcc71fdf6cd5bf755bbe3": {
      "content": "?assertError(${1:Pattern}, ${0:Expression})",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aserr": true
      },
      "source": "vim-snippets/snippets"
    },
    "7da669e159f313bce39eda6f33c89b67": {
      "content": "PropTypes.element.isRequired,",
      "doc": "React element prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeElementRequired",
      "matches": {
        "ptelr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "7da9888bc93d52346aa392002b8c50ce": {
      "content": "pushMatrix();\n${0:};\npopMatrix();",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pushMatrix": true
      },
      "source": "vim-snippets/snippets"
    },
    "7daa1c79f8a4bb878995efe919466e8c": {
      "content": "time_ago_in_words",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "time_ago_in_words",
      "matches": {
        "taiw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7db68a9c8397c3985e1e4152d5410c92": {
      "content": "border-style: outset",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "7dbb38341dedf793f4a3611af733608d": {
      "content": "length_is:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lengthis": true
      },
      "source": "vim-snippets/snippets"
    },
    "7dbb44ba0c783e91a8bc019924229fcd": {
      "content": "set xrange [${1:*}:${2:*}]",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set xrange [X1:X2]",
      "matches": {
        "xrange": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7dc2cbd0dffc86a311b8d24538a0da76": {
      "content": "for some ${1} ${2:in} ${3} => ${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "for some",
      "matches": {
        "for_some": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7dc8f8fcdcdcc49e05962fba1e7e97f7": {
      "content": "it { should have_db_column :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ishc": true
      },
      "source": "vim-snippets/snippets"
    },
    "7dcd0a9cbee24a499527c46c2f7233ea": {
      "content": "display: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d": true
      },
      "source": "vim-snippets/snippets"
    },
    "7dcfa3b2d2570c6fe057264b5a94af24": {
      "content": "if ${1} then\n\t${2}\nelif ${3} then\n\t${4}\nelse\n\t${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifee": true
      },
      "source": "vim-snippets/snippets"
    },
    "7dd00dae8c5ae94ce1dcb09364cd6c0c": {
      "content": "integer, parameter ::",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "integer parameter",
      "matches": {
        "inp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7dd44bc756441b6067920f03841e8b53": {
      "content": "protected ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "po": true
      },
      "source": "vim-snippets/snippets"
    },
    "7dd63767924b4f728998fd75e4504df6": {
      "content": "- (${1:id})${2:method}\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m": true
      },
      "source": "vim-snippets/snippets"
    },
    "7dee7f05cf4a3cca5fe6c90646974fd8": {
      "content": "prevScene();",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7def9f5f74bac3943f724f0973fad266": {
      "content": "internal ${1:int} ${2} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p&": true
      },
      "source": "vim-snippets/snippets"
    },
    "7df522f6c92ae9c4d38859bad69f6d6d": {
      "content": "${1:void/private/protected/public}${2: static} ${3:name}(${4}) {\n\t${5://if not void return null;}\n}\n${0}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "7df85856baa53562020b680cf255930a": {
      "content": "```{r}\n$0\n```",
      "doc": "Insert R code chunk",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert R code chunk",
      "matches": {
        "r code chunk": true
      },
      "source": "vscode-R/snippets"
    },
    "7df98f8950a6fc434e501f09511d1eee": {
      "content": "<% ${1:array}.forEach((${2:single var}) => { %>\n\t${0:body}\n<% }) %>",
      "doc": "",
      "filetype": "ejs",
      "grammar": "snu",
      "label": "ejs for Each loop",
      "matches": {
        "forE": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7e0a8d46dcaed3bae13c012ebd01c207": {
      "content": ".. ${1:#:NAME}:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "directive",
      "matches": {
        "directive": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7e0b2de952eb7a918343999ad0e5b3b5": {
      "content": "background-color: transparent",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgc:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "7e0c2492215b68ec9426b3108fe42868": {
      "content": "<canvas>\n\t${0}\n</canvas>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "canvas": true
      },
      "source": "vim-snippets/snippets"
    },
    "7e0fe1df6c35c93d65ab441b60a675a7": {
      "content": "object.shape()",
      "doc": "object.shape(fields: object, noSortEdges?: Array<[string, string]>): Schema\n\nDefine the keys of the object and the schemas for said keys.Note that you can chain shape method, which acts like object extends, for example:object({\n  a: string(),\n  b: number()\n}).shape({\n  b: string(),\n  c: number()\n});\nwould be exactly the same as:object({\n  a: string(),\n  b: string(),\n  c: number()\n});\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "object-shape",
      "matches": {
        "yup object shape": true
      },
      "source": "javascript/yup"
    },
    "7e2ce0ee1c2e6c393a01bc44ee034bac": {
      "content": "{:else}\n\t${1: <!-- else content here -->}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-else-block",
      "matches": {
        "svelse": true,
        "svelte else": true
      },
      "source": "javascript/svelte"
    },
    "7e33a0973d84e7155723a0525c125b55": {
      "content": "list-style-type: disc",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "7e357a6ca6255915ca42fc42c67d087a": {
      "content": "<img :src=\"'/path/to/images/' + ${1:fileName}\" alt=\"${2:altText}\"/>",
      "doc": "image source binding",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Image Source Binding",
      "matches": {
        "vsrc": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "7e46ea2fa5ad8e1d4c3c2ab9b083a6af": {
      "content": "font-emphasize-position: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "femp": true
      },
      "source": "vim-snippets/snippets"
    },
    "7e49d99c8a5e48525850fa0f23c82c90": {
      "content": "${1:obj}.resize (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "resize": true
      },
      "source": "snippets/coffee"
    },
    "7e53f3f861b3cd071134cbdddb87f9aa": {
      "content": "link:${1:/example.pdf}[${2:Text}]${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "Relative link",
      "matches": {
        "linkrel": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7e61c590be5b32c94faa69ae91a9df19": {
      "content": "private ${1:int} ${2} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p-": true
      },
      "source": "vim-snippets/snippets"
    },
    "7e628a45f11ebfa27136704facff26ff": {
      "content": "border-bottom: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdb": true
      },
      "source": "vim-snippets/snippets"
    },
    "7e68907fa4f6c5dee30708b1b53f1491": {
      "content": "$.merge(${1:target}, ${0:original});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "merge": true
      },
      "source": "snippets/javascript"
    },
    "7e699b9dc7d8659c7bd1f0b4c5df7c45": {
      "content": "_.flip(${func})",
      "doc": "var flipped = _.flip(function() {\n  return _.toArray(arguments);\n});\n\nflipped('a', 'b', 'c', 'd');\n// => ['d', 'c', 'b', 'a']\n\nCreates a function that invokes `func` with arguments reversed.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-flip",
      "matches": {
        "lodash flip": true
      },
      "source": "javascript/lodash"
    },
    "7e69d6cc8b013316cc241e7eea32a7e2": {
      "content": "def dispatch(self, request, *args, **kwargs):\n\treturn super(${1:CLASS_NAME}, self).dispatch(request, *args, **kwargs)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Dispatch View method",
      "matches": {
        "dispatch": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7e6c4a90860e595c504f3d8cd2730d6d": {
      "content": "import ${0:List}",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "7e6e11983c7f00419d88dcbc0d108344": {
      "content": "border-right: ${1:1}px ${2:solid} #${3:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-right: size style color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7e6f786bda782011af728281a4e95e77": {
      "content": "&#x2318;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cmd": true
      },
      "source": "vim-snippets/snippets"
    },
    "7e878ecd872bd4c2f83c4459b9c3c2b7": {
      "content": "chan ${0:int}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "chan Type",
      "matches": {
        "ch": true
      },
      "source": "gosnippets/snippets"
    },
    "7e8eceb22fe8b5fb6af7d6a5a3dde9b9": {
      "content": "border-top-right-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtri:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "7e8f1f9b64dbe227f24cb2cd3e899e01": {
      "content": "align-items: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai": true
      },
      "source": "vim-snippets/snippets"
    },
    "7e9424a137c1b3817548f90c7486e156": {
      "content": "try\n{\n\t${VISUAL}${1:/*code to try*/}\n}\ncatch($2Exception e)\n{\n\t${3:/*handle exception*/}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "try/catch (try)",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7e98578fca545fb9f76df395c781e1a6": {
      "content": "try\n\t${1:${VISUAL}}\ncatch ${2:error}\n\t${0}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "snippets/coffee"
    },
    "7ea25484c41a81e2f69a46fa4d2a40e8": {
      "content": "componentDidMount() {\n\t${1}\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "componentDidMount",
      "matches": {
        "cdm": true
      },
      "source": "snippets/javascript"
    },
    "7ea33b4e8b794d656005e8401a887a0d": {
      "content": "${1:obj}.offsetParent()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "offsetp": true
      },
      "source": "snippets/javascript"
    },
    "7ea7c071e05d1931ae77ce0fccc556d2": {
      "content": "zoom: 1",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "zoo": true
      },
      "source": "vim-snippets/snippets"
    },
    "7eb92e191847ed1c99684bb885c3b1b5": {
      "content": "_.iteratee(${func})",
      "doc": "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n// => [{ 'user': 'barney', 'age': 36, 'active': true }]\n\n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, _.iteratee(['user', 'fred']));\n// => [{ 'user': 'fred', 'age': 40 }]\n\n// The `_.property` iteratee shorthand.\n_.map(users, _.iteratee('user'));\n// => ['barney', 'fred']\n\n// Create custom iteratee shorthands.\n_.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n  return !_.isRegExp(func) ? iteratee(func) : function(string) {\n    return func.test(string);\n  };\n});\n\n_.filter(['abc', 'def'], /ef/);\n// => ['def']\n\nCreates a function that invokes `func` with the arguments of the created\nfunction. If `func` is a property name, the created function returns the\nproperty value for a given element. If `func` is an array or object, the\ncreated function returns `true` for elements that contain the equivalent\nsource properties, otherwise it returns `false`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-iteratee",
      "matches": {
        "lodash iteratee": true
      },
      "source": "javascript/lodash"
    },
    "7ebcab8d098f240b8884d1bad1b1d692": {
      "content": "counter-reset: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cor": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ec8f0947ed0850781311d9625dd4ba8": {
      "content": "position static",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "7eca300d3c6963430f3a45a7589fc396": {
      "content": "@info \"${1}\" ${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@i": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ecb0704674c33f9b21758b40205143d": {
      "content": "args:\n{{- range $key, $value := .Values.${1:value_key}.extraArgs }}\n  {{- if $value }}\n  - --{{ $key }}={{ $value }}\n  {{- else }}\n  - --{{ $key }}\n  {{- end }}\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "args_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ecd015159a9d089bcdfee9b2279677d": {
      "content": "<svelte:body />",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-body",
      "matches": {
        "svb": true,
        "svelte body": true
      },
      "source": "javascript/svelte"
    },
    "7ed08fe55cdd71d7d589a55788eb0807": {
      "content": "{%- cycle '${1:group name}': '${2:odd}', '${3:even}' -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cyclegroup-": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ed172bdf73c4af95b8ce9008aca3a88": {
      "content": "{% use '${1:#:template}' %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% use '...' %}",
      "matches": {
        "use": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7ee051f5e502155cfacb217dbb0a12e5": {
      "content": "console.assert(${1:expression}, ${2:object})",
      "doc": "If the specified expression is false, the message is written to the console along with a stack trace",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleAssert",
      "matches": {
        "cas": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "7ee6455f9e03ae828f5754e3f63c6fd6": {
      "content": "switch (${1}) {\ncase ${2}:\n\t${3}\n\tbreak\ndefault:\n\t${0}\n\tbreak\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "switch",
      "matches": {
        "sw": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ee7aa3f182ac9d95b5b9df14a35e5b8": {
      "content": "SynthDef(\\\\${1:synthName}, {${2: |${3:x}|}\n\t$0\n}).add;",
      "doc": "",
      "filetype": "supercollider",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sdef": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7eeb6c11d1b5ead32d7539942be8608d": {
      "content": "${1:#:expression} for @${2:#:array};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xfor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7ef26100afc339c385dad6e4764a1760": {
      "content": "for ${1:idx},${2:val} in ipairs(${3:table_name}) do\n\t$0\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "ipair for foop",
      "matches": {
        "fori": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7ef2c5e4655f3488c9516b7dfca594b1": {
      "content": "border-top-right-image: continue;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtri:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ef42525c2a07c3befde4b7827a3aceb": {
      "content": "margin: ${1:0} ${2:0} ${0:0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:3": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ef85dbe8804b3fef9ed39fe6db7a608": {
      "content": "slice:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slice": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7f0b6e84cd1c8ec6235df796ac344809": {
      "content": "Host ${1:name}\n\tHostName $1.${2:domain}\n\tPort ${3}\n\t${4:User }",
      "doc": "",
      "filetype": "sshconfig",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Host": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7f0dcea94d858762ace248a3fbd91b42": {
      "content": "Yii::app()->cache->set('${1:key}', ${2:value}, ${3:expire}, new C${4:}CacheDependency(${0}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ycas": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f13d7c9277585f6dcc2382316840452": {
      "content": "for (${1:auto&& }${2:var} : ${3:container}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "for (:) {}",
      "matches": {
        "for_CPP11": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7f146689a3df55556106f311f7cbb9d0": {
      "content": "while (${1:#:condition}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "while () {}",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7f16719777685c515ed832637d13e8f7": {
      "content": "<option value=\"${1}\">${2:TARGET}</option>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "option": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7f1d5a2383d7be4671bba567ac7d3f49": {
      "content": "border: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bd:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f2c031c0dc8c7a13eaaf37800fa5a8d": {
      "content": "border-top-color: #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtc": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f2c7c8d15fb3bd77885f64dbbde4dcf": {
      "content": "else if ${1} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "else if",
      "matches": {
        "eli": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f2c8069149fb672bb744d6b6190df53": {
      "content": "{% img ${1:class} ${2:URL} ${3:width} ${4:height} ${5:title_text} ${0:alt_text} %}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f31b02696b95c31c8292ef195d09abe": {
      "content": "import ${1:classNames} from 'classnames/bind';",
      "doc": "",
      "filetype": "classnames",
      "grammar": "lsp",
      "label": "classnames-import-bind",
      "matches": {
        "classnames import bind": true
      },
      "source": "javascript/classnames"
    },
    "7f3afbf868f4d25bbf292e1e882aea62": {
      "content": "| round: ${1:0}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "round": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f3baea5c45d2c07720ba2edafcb1aba": {
      "content": "var $1 = new sap.m.Input({\n\tvalue :$2,\n\twidth : $3,\n\tenabled :$4,\n\tvisible :$5,\n\tvalueState :$6,\n\tname : $7,\n\tplaceholder : $8,\n\teditable : $9,\n\ttype : $10,\n\tmaxLength :$11,\n\tvalueStateText :$12,\n\tshowValueStateMessage :$13,\n\tdateFormat :$14,\n\tshowValueHelp :$15,\n\tshowSuggestion :$16,\n\tvalueHelpOnly :$17,\n\tfilterSuggests :$18,\n\tmaxSuggestionWidth :$19,\n\tstartSuggestion : $20,\n\tshowTableSuggestionValueHelp : $21,\n\tdescription : $22,\n\tfieldWidth : $23,\n\tvalueLiveUpdate :$24,\n\tsuggestionItems  :[$25],\n\tsuggestionColumns : [$26],\n\tsuggestionRows : [$27],\n\tliveChange : $28,\n\tvalueHelpRequest :$29,\n\tsuggest : $30,\n\tsuggestionItemSelected : $31\n});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapminput": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f3c543b6b4bc633b6e17727054900c8": {
      "content": "notice(\"${1:message}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "notice": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f4420bb383f12065741987e16892b83": {
      "content": "NSAutoreleasePool${TM_C_POINTER: *}pool = [NSAutoreleasePool new];\n${0}\n[pool drain];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pool": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7f44ad7d529d9c00089029d3b4b2e551": {
      "content": "display: table-column-group;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbclg": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f49a7efb9fd97bbad4e1b0795aad0be": {
      "content": "for ${1:name},${2:val} in pairs(${3:table_name}) do\n\t$0\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "pair for loop",
      "matches": {
        "forp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7f558bcc00b7d5660da81b2ee1eceed2": {
      "content": "Page Should Not Contain Checkbox    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Not Contain Checkbox",
      "matches": {
        "psncc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7f60be027d5b317107c4b073cebe0e59": {
      "content": "it { should respond_to(:${1}).with(${0}).arguments }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isresw": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f6de9a5d2fc9d57c2c6700ce506e416": {
      "content": "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\n\t${4}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f6eede4bfdf65bcbabb8e22d9c50357": {
      "content": "truncatewords:${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "truncatewords": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f72fcd4c8879ffc0c3e87e77fd59870": {
      "content": "position: static",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f76226af9fd2ca8592419d2af5d339d": {
      "content": "source(${1:'${2:}'}${3:, chdir = ${4:TRUE}})",
      "doc": "Source",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "sou",
      "matches": {
        "source": true
      },
      "source": "vscode-R/snippets"
    },
    "7f78146789108456ed74d8f2f8f0cd93": {
      "content": "expect($1).toBeLessThan($0);",
      "doc": "expects the argument is less than",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobelessthan",
      "matches": {
        "jest expect tobelessthan": true,
        "tblt": true
      },
      "source": "javascript/jest"
    },
    "7f7ca3e838a6f338ae5f8cf6738880a7": {
      "content": "/**\n * ${1}\n */\nclass ${2:#:ClassName}${3:#:extends}\n{\n\t$5\n\tfunction ${4:__construct}(${5:#:argument})\n\t{\n\t\t${0:# code...}\n\t}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class_with_constructor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7f7ee4a9282e55467aceb1b0921f813a": {
      "content": "attr_reader :${0:attr_names}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f825dfb272e8bc2873055c5c6c5f6d4": {
      "content": "[super ${1:init}]",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "su": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f85a1ebcd713bf4955bcab5fe73935c": {
      "content": "import { $2 } from '${1:module}';$0",
      "doc": "Imports only a portion of the module in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "importDestructing",
      "matches": {
        "imd": true
      },
      "source": "vscode-javascript/snippets"
    },
    "7f939c829488dbb03b89d6ba65207929": {
      "content": "EventHandler temp = ${1:MyEvent};\nif (${2:temp} != null)\n{\n\t$2();\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inv": true
      },
      "source": "vim-snippets/snippets"
    },
    "7f93f180e6dbce6070a2ee5d58db384d": {
      "content": "beforeEach ->\n\t$0",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "before each (coffee)",
      "matches": {
        "bef": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "7f9640c965a3a50c994c758e19942cd7": {
      "content": "center:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "center": true
      },
      "source": "vim-snippets/snippets"
    },
    "7fa264b982e258740b573105a11ee089": {
      "content": "this.setState({\n\t${1}: ${2}\n});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sst": true
      },
      "source": "snippets/javascript"
    },
    "7fa4907fc13d6608210b27670f2abdea": {
      "content": "#pragma warning ${2:disable} ${3:#:errno}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pragma pragma_warn": true,
        "pragma_warning": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7fb1be1c46d400d8751238a0bc7cbb4b": {
      "content": "font-emphasize-style: circle",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "7fb1eb71a3e6ecb58e111df502af4b40": {
      "content": "export default class ${1:className} {\n\t$0\n};\n",
      "doc": "Export default class in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportClass",
      "matches": {
        "ecl": true
      },
      "source": "vscode-javascript/snippets"
    },
    "7fbe3ae6527f524430f583105df30f61": {
      "content": "\\\\sum^{${1:n}}_{${2:i=1}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\sum^{}_{}",
      "matches": {
        "sum": true
      },
      "source": "vim-snippets/snippets"
    },
    "7fbe49262da651ab7605a2583b741f36": {
      "content": "unless ARGV.${1}\n\tabort \"Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}\"${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "usau": true
      },
      "source": "vim-snippets/snippets"
    },
    "7fc3c1a49e96c6c1600b459a9e6ce7fd": {
      "content": "<html>\n${1}\n</html>",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "html": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7fe3ee1cbdc980333d4ebde6ea443744": {
      "content": "if (${1:true}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "7fe7e82257a5d95b776c285bcfd23909": {
      "content": "Int",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "int": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ff384cadc70a143be046c88031eff3b": {
      "content": "default:\n\t${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "7ffe1e397bc75c41b9ed7fcf05a3d46f": {
      "content": "${1:ModelName}::model()->findAllByPk(${2:pk}, ${3:condition},array('${4:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yfindabp": true
      },
      "source": "vim-snippets/snippets"
    },
    "7fff30888060bca6a948640eabd9d2c5": {
      "content": "resize: horizontal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "800a5bd201ec1b8a3e4cc50a9ffdc05d": {
      "content": "parfor ${1:i} = ${2:1:n}\n\t${0}\nend",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "parfor",
      "matches": {
        "parfor": true
      },
      "source": "vim-snippets/snippets"
    },
    "800e4e7147ec7f4b5715268e18bbb07c": {
      "content": "${1:auto} ${2:var} = new ${3:Object}(${4});\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "new": true
      },
      "source": "vim-snippets/snippets"
    },
    "8010f5a306af98be5a0d4e7409560945": {
      "content": "it { should accept_nested_attributes_for :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isana": true
      },
      "source": "vim-snippets/snippets"
    },
    "8011f381b192a6a0ab7ba8b379150cb0": {
      "content": "source('${0:file}')",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "source": true
      },
      "source": "vim-snippets/snippets"
    },
    "8012c3a6c2058897ca7ac4083b05cf67": {
      "content": "bottom: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "802534677869fdf07cab9e42b2b48f19": {
      "content": "_.unset(${object}, ${path})",
      "doc": "var object = { 'a': [{ 'b': { 'c': 7 } }] };\n_.unset(object, 'a[0].b.c');\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n\n_.unset(object, ['a', '0', 'b', 'c']);\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n\nRemoves the property at `path` of `object`.\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-unset",
      "matches": {
        "lodash unset": true
      },
      "source": "javascript/lodash"
    },
    "802d102df9b99b21c28953ce8da3c7d2": {
      "content": "=${1:name}(${2})\n\t${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mix": true
      },
      "source": "vim-snippets/snippets"
    },
    "8031077ee7a28cb913a6c44c88aad6dc": {
      "content": "{% decrement ${0:variable} %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "decrement": true
      },
      "source": "vim-snippets/snippets"
    },
    "803ea470c6d257f2f090fa3557c1b7a3": {
      "content": "get_digit:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "getdigit": true
      },
      "source": "vim-snippets/snippets"
    },
    "8041de2e567e908fee22b5b60f205b25": {
      "content": "${1:propName}: {\n\ttype: ${2:Number}\n},",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vprops": true
      },
      "source": "vim-snippets/snippets"
    },
    "80443250cca4bc9d89e2be5c2d50c8f6": {
      "content": "struct ${1:#:Name} ${2::} ${3:Interface} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "struct {}",
      "matches": {
        "struct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "804a90f5f7e0e6b7f961152741f385ed": {
      "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "import-react-component-prop-types",
      "matches": {
        "imrcp": true,
        "react import component proptypes": true
      },
      "source": "javascript/react"
    },
    "804fb595c241855e0c1641a4f3a77942": {
      "content": "if ${1} then\n\t${2:${VISUAL}}\nelse\n\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "8061fcfb8a958278e55f07f6cf763377": {
      "content": "{% for ${1} in ${2} %}\n\t${3}\n{% else %}\n\t${0}\n{% endfor %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig for else",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "80630da6f25c26db6afdb07759ab68a2": {
      "content": "create or replace package body ${1:name}\nas\n\t${0:-- body}\nend; -- end of package body $1;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "80650b3b67b2275efffd9aae1a12ceed": {
      "content": "<textarea name=\"$2\"${3: id=\"$4\"}>$5</textarea>",
      "doc": "",
      "filetype": "html_minimal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "textarea": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "80686319c3d5dd867221777c6b64c1d8": {
      "content": "#!/usr/bin/env node",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "#!/usr/bin/env node",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "806f7f9beb680f4e74872293b0599075": {
      "content": "$this->${1:method}()->shouldMatch(${2:'/wizard/i'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldMatch('/wizard/i')",
      "matches": {
        "smatch": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "807471bb79ac439ab91529c307b996e4": {
      "content": "position: relative;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "8079ef8d7fb76dec2834a1f73c15d273": {
      "content": "expect.hasAssertions();$0",
      "doc": "expects the test to make at least one assertion (useful for async)",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-expect-hasassertions",
      "matches": {
        "expha": true,
        "jest expect hasassertions": true
      },
      "source": "javascript/jest"
    },
    "808e279990d0af2bd32b7bec8bfcfa08": {
      "content": "if err != nil {\n\treturn nil, errors.Wrapf(err, \"${1:message %v}\", ${2:args...})\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error return wrapf with two return values",
      "matches": {
        "errn,wf": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "808e8496f96228450ea05339efc002d3": {
      "content": "color ${1:c}${2: = color(}${3:value1, }${4:value2, }${0:value3)};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "color": true
      },
      "source": "vim-snippets/snippets"
    },
    "809445ee9da8f15f8552080a2180c1fa": {
      "content": "PropTypes.bool.isRequired,",
      "doc": "Bool prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeBoolRequired",
      "matches": {
        "ptbr": true
      },
      "source": "vscode-react/snippets"
    },
    "809c211a1dd5c368fe3ff7d54ca46c01": {
      "content": "Long",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lng": true
      },
      "source": "vim-snippets/snippets"
    },
    "80a501a4088c5939a15b99e5b2957841": {
      "content": "include ${0:filetype}.snip",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "include *.snip",
      "matches": {
        "inc": true,
        "include": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "80a5d598a134021b3dfcf7e142c67803": {
      "content": "display: inline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "80a8d5bd2bbc58c32e60ffa1e1951a3a": {
      "content": "must_be_instance_of ${0:Class}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbio": true
      },
      "source": "vim-snippets/snippets"
    },
    "80ab6e30cb36ccad36e8c8be315191d7": {
      "content": "if { [catch {${1:#do something...}} ${2:err}] } {\n\t${0:# handle failure...}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifc": true
      },
      "source": "vim-snippets/snippets"
    },
    "80adc502347b53370d78884ddc5ef3c9": {
      "content": "$.trim('${1:string}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eltrim": true
      },
      "source": "snippets/coffee"
    },
    "80affeb89371c77b84a40fbf755f4a2f": {
      "content": "each_with_object(${1:init}) do |${2:e}, ${3:var}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eawod": true
      },
      "source": "vim-snippets/snippets"
    },
    "80b02f93f4c00c676819b3c0ad002ee8": {
      "content": "unauthorized(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ru": true
      },
      "source": "vim-snippets/snippets"
    },
    "80b0740a4bd24edc951fdccacaf4ee22": {
      "content": "public override bool Equals(object obj) => Equals(obj as ${1:TYPE});\n\npublic bool Equals($1 other)  // IEquatable<$1>\n{\n\tif (object.ReferenceEquals(other, null))\n\t\treturn false;\n\tif (object.ReferenceEquals(this, other))\n\t\treturn true;\n\tif (this.GetType() != other.GetType())\n\t\treturn false;\n\t$0\n\treturn base.Equals(other);\n}\n\npublic override int GetHashCode() => base.GetHashCode();\n\npublic static bool operator ==($1 x, $1 y) =>\n\t(object.ReferenceEquals(x, null) && object.ReferenceEquals(y, null))\n\t|| (!object.ReferenceEquals(x, null) && x.Equals(y));\n\npublic static bool operator !=($1 x, $1 y) => !(x == y);\n",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "Equality for a type",
      "matches": {
        "equals": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "80c149f47a014d773a5ce27626b05a8d": {
      "content": "${1:obj}.focus(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "focus": true
      },
      "source": "snippets/javascript"
    },
    "80c27846b6b111737842738c01bda8a1": {
      "content": "expect(() => {\n\t$0\n}).toThrowErrorMatchingSnapshot();",
      "doc": "expects that the method will throw an error mathing the snapshpot",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tothrowerrormatchingsnapshot",
      "matches": {
        "jest expect tothrowerrormatchingsnapshot": true,
        "ttems": true
      },
      "source": "javascript/jest"
    },
    "80cb5c401f35763bd3a5a2ceb4c2bea2": {
      "content": "@Test\npublic void test${1:Name}() throws Exception {\n\t${0}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "80cea5f49d9bc6cfa9ba249f4433e9dd": {
      "content": "${1:file = }file.choose()${0:}",
      "doc": "file.choose",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "fch",
      "matches": {
        "fch": true
      },
      "source": "vscode-R/snippets"
    },
    "80d09f660847f302eeaef87269acb2c9": {
      "content": "case ${1} is\n\twhen ${2} => ${3},${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "case expression",
      "matches": {
        "case_expression": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "80d3f5654d18fe03c0b4337953bf5432": {
      "content": "for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "80e579f70812487d1512b3f32df96bca": {
      "content": "@yield('$1')",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@yield directive",
      "matches": {
        "yield": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "80ee6ab9118540caa0d7b5eb77263d44": {
      "content": "(for/last ([${1}])\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "for/last",
      "matches": {
        "forla": true
      },
      "source": "vim-snippets/snippets"
    },
    "80fa7bbfee2ca6bf357b000231be5674": {
      "content": "text-align: ${1:left/right/center/justify};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "text-align: left:center:right (txt)",
      "matches": {
        "text": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "80fc63a3ef979aa8ed3ea5874e9df442": {
      "content": "&#x21E4;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "backtab": true
      },
      "source": "vim-snippets/snippets"
    },
    "81026d92c700cb761f1b7a0928c45dff": {
      "content": "{ path: '${1:path}', component: ${2:Name}Component },$0",
      "doc": "Angular eager route path",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Eager Route Path",
      "matches": {
        "a-route-path-eager": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "8102e7adcfa1f0abd0d9e5c948c26953": {
      "content": "class=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        ".": true
      },
      "source": "vim-snippets/snippets"
    },
    "8111006d203708f0e61ce3bf2eef37c1": {
      "content": "rect(${1:x}, ${2:y}, ${3:width}, ${0:height});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rect": true
      },
      "source": "vim-snippets/snippets"
    },
    "81177f26360c870bcc5220250d276367": {
      "content": "<?php if (${1:#:condition}): ?>\n${2:TARGET}\n<?php else: ?>\n${0}\n<?php endif; ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pifelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "81179381a32ccacc8673ee199db2b29c": {
      "content": "\\\\left| ${0:${VISUAL}} \\\\right|",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "left| right|",
      "matches": {
        "lr|": true
      },
      "source": "vim-snippets/snippets"
    },
    "8118374867df5911de18fda974a31a71": {
      "content": "$this->${1:method}()->shouldBeLike(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldBeLike('value')",
      "matches": {
        "sblike": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "811c28db658d697ddf011d90922fdffc": {
      "content": "border-fit: repeat",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "811c8675d1a1cfb12ef59ce49497a5c3": {
      "content": "defmodule ${1:AppName}Web.${2:ViewName}View do\n\tuse $1Web, :view\nend",
      "doc": "",
      "filetype": "phoenix",
      "grammar": "snu",
      "label": "",
      "matches": {
        "view": true
      },
      "source": "vim-snippets/snippets"
    },
    "814fc4a6e5969c1b0af1aa5d4aba5076": {
      "content": "; http://editorconfig.org\nroot = true\n[*]\nindent_style = ${1:space_or_tab}\nindent_size = ${2:indent_size}\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true",
      "doc": "",
      "filetype": "dosini",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec": true
      },
      "source": "vim-snippets/snippets"
    },
    "815617bb10b5507a115ea0454bf2f177": {
      "content": "\\documentclass[${1}]{${2:article}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\documentclass": true,
        "documentclass": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "81594c871945624d1de9cd978831effc": {
      "content": "let ${1} = ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "815d6dbc454422cf84f1934023b711d5": {
      "content": "${1:obj}.clone()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clone": true
      },
      "source": "snippets/coffee"
    },
    "815d7b2f030c73eb067f21821130814f": {
      "content": "&#x238B;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "esc": true
      },
      "source": "vim-snippets/snippets"
    },
    "8161d2e953a785972ac5179d7a256dc1": {
      "content": "{% endcss %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endcss",
      "matches": {
        "endcss": true
      },
      "source": "vim-snippets/snippets"
    },
    "816ecb5d6d678c8c0f2199eb65ee03b0": {
      "content": "\\begin{flushright}\n\t${1:TARGET}\n\\end{flushright}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{flushright} \\flushright": true,
        "flushright": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "816ee280d5dc38f4b19a0d2f9c951b44": {
      "content": "place-content space-evenly",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "816fa5afbc6e8cc6067fa524fc166478": {
      "content": "local ${1:x} = ${0:1}",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "local": true
      },
      "source": "vim-snippets/snippets"
    },
    "8178850a584a66411984a7644d49efcc": {
      "content": "align-self stretch",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "817cd3aca8bf1e48398bb209e3c7d7c9": {
      "content": "{% case ${1:variable} %}\n\t{% when ${2:condition} %}\n\t\t${3}\n\t{% else %}\n\t\t${0}\n{% endcase %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "817d79f5af5b2fe7ac27a1e3e342c638": {
      "content": "(ns ${1:example}\n  (:require [clojure.core.match :as m]))\n; vim: set lispwords+=m/match :",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "require-core-match": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "81897cde6230407c173641db7cb57560": {
      "content": "background-break ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk": true
      },
      "source": "vim-snippets/snippets"
    },
    "818b0b0d6b3349ba07f40d82956ce842": {
      "content": "import Modal from 'react-modal'",
      "doc": "import react-modal",
      "filetype": "react-modal",
      "grammar": "lsp",
      "label": "react-modal-import",
      "matches": {
        "imrm": true,
        "react-modal import": true
      },
      "source": "javascript/react-modal"
    },
    "818e0c7a8add877f6afe51f50e0c753a": {
      "content": "${1|transition,in,out|}:${2:name}={${3:params}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-transition-params",
      "matches": {
        "svelte transition params": true,
        "svtp": true
      },
      "source": "javascript/svelte"
    },
    "819609da814b19d2f5f920a68ba67e57": {
      "content": "text-decoration: underline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "81998b787e78847304bd1b6adb4d60b9": {
      "content": "type ${1:Interface} interface {\n\t${2:/* TODO: add methods */}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "interface I { ... }",
      "matches": {
        "interface": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "81a0350128ab32291b73f895d7be1ef3": {
      "content": "${1:FIELDNAME} = models.URLField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "URLField",
      "matches": {
        "murl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "81a11ae2bef5c346af58d84975623b2f": {
      "content": "procedure ${1:name}(${0:args});",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pps": true
      },
      "source": "vim-snippets/snippets"
    },
    "81a898b4ce3074ef25388e4f034a5259": {
      "content": "direction: ${1:ltr|rtl};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "direction: ltr|rtl (direction)",
      "matches": {
        "direction": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "81a99af1fe68cf3866b3309e94ea848d": {
      "content": "-ms-filter 'progid:DXImageTransform.Microsoft.Alpha(Opacity=${0:100})'",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "op:ms": true
      },
      "source": "vim-snippets/snippets"
    },
    "81aaada3bafd2d5cfed22874abb66bdb": {
      "content": "beforeDestroy () {\n\t${0};\n},",
      "doc": "beforeDestroy lifecycle method",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-lifecycle-beforedestroy",
      "matches": {
        "vbeforedestroy": true,
        "vue lifecycle beforedestroy": true
      },
      "source": "javascript/vue"
    },
    "81babfa902cb351e988585d36bff75c6": {
      "content": "offset: ${1:0}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "offset": true
      },
      "source": "vim-snippets/snippets"
    },
    "81c9a2201f521a84fb9e5eb6d2e3af2d": {
      "content": "debug {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "de": true
      },
      "source": "vim-snippets/snippets"
    },
    "81c9d744b9341ef927de2c810382b1c3": {
      "content": "byte",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "byte",
      "matches": {
        "bt": true
      },
      "source": "vim-snippets/snippets"
    },
    "81ceaec58d2d2cb0cbac8c0cd761046f": {
      "content": "align-self: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "81d0664679515335ba33f2f789535850": {
      "content": "border ${1:1px} ${2:solid} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bd+": true
      },
      "source": "vim-snippets/snippets"
    },
    "81d54c6060b33b31e68d1729cec28bd3": {
      "content": "<samp>\n\t${0}\n</samp>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "samp": true
      },
      "source": "vim-snippets/snippets"
    },
    "81d5bc55da18cd8133ca0318f029084d": {
      "content": "<xsl:for-each select=\"${1:*}\">${2}\n</xsl:for-each>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for-each": true
      },
      "source": "vim-snippets/snippets"
    },
    "81d649bf75a0501faf6dcae18427f3b5": {
      "content": "place-items: stretch",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "81dba4ff43e8cb2f119393b25ae0bbf3": {
      "content": "useLayoutEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:cleanup}\n\t};\n}, [${3:input}])",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useLayoutEffect",
      "matches": {
        "useLayoutEffect": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "81df3f0c7b6277e48f7d87b087f0fde9": {
      "content": "| times: ${1:1}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "times": true
      },
      "source": "vim-snippets/snippets"
    },
    "81df67bb94750b6ebd508dddf5eae007": {
      "content": "place-content flex-start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "81e079f28cae7f08692f06c56037fcf0": {
      "content": "finally {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "finally": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "81e625be758df96e4caeedaa88846437": {
      "content": "<xsl:stylesheet version=\"1.0\"\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">${0}\n</xsl:stylesheet>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stylesheet": true
      },
      "source": "vim-snippets/snippets"
    },
    "81eeca5c6ad666a8ed08cbdfe1abee75": {
      "content": "border-left-width: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlw": true
      },
      "source": "vim-snippets/snippets"
    },
    "81f3b80bd580de0be4348badfffa64e1": {
      "content": "Filename.dirname(__FILE__)",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dir": true
      },
      "source": "vim-snippets/snippets"
    },
    "81f53fbb0c0851b0090520062c2ef470": {
      "content": "Plugin '${0}'",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "Vundle.vim Plugin definition",
      "matches": {
        "bun": true
      },
      "source": "vim-snippets/snippets"
    },
    "81f653d76c89f60ae80f8134ce3fc307": {
      "content": "import React, { Component } from 'react'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
      "doc": "Creates a React component class with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassComponent",
      "matches": {
        "rcc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "81f6e520ad3ae96aee646e947b34ada0": {
      "content": "@property void ${1:/*member_name*/}(${2:/*type*/} rhs) pure nothrow {${3:$1_} = rhs;}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "setter property (set)",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "81f7827b1ae804f3ee7ddb1bad26843e": {
      "content": "class ${1:ExampleCase}(unittest.TestCase):\n\tdef test_${2:description}(self):\n\t\t${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "testcase": true
      },
      "source": "vim-snippets/snippets"
    },
    "8201f7563f685d7f3080bbc6683a38d1": {
      "content": "rep(${1:x}, ${2:...})",
      "doc": "Rep",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "rep",
      "matches": {
        "rep": true
      },
      "source": "vscode-R/snippets"
    },
    "82022e05adc26202c0071d9d7cb491ba": {
      "content": "gl.glColor4f(${1:red}, ${2:green}, ${3:blue}, ${0:alpha});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl color 4f",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "820874937e18d800c4b51548f09fe569": {
      "content": "font-variant small-caps",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fv:sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "820ae3584f8e74cea2146dfd25f30507": {
      "content": "**${1:Strong emphasis}** ${0}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "**": true
      },
      "source": "vim-snippets/snippets"
    },
    "8215ad157793c9ce129aefb892f97330": {
      "content": "find!(${1:p})($2:xs);\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "find": true
      },
      "source": "vim-snippets/snippets"
    },
    "82196671e6703fb27482377271badb7d": {
      "content": "place-self: start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "821e277c070a849881da9d17c48ca3f3": {
      "content": "{@linkplain ${1:#:target} ${0:#:label}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{linkplain": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "82234cef5b24cc9c0f4db204ff56312c": {
      "content": "_.partition(${collection}, ${predicate})",
      "doc": "var users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n\n_.partition(users, function(o) { return o.active; });\n// => objects for [['fred'], ['barney', 'pebbles']]\n\n// The `_.matches` iteratee shorthand.\n_.partition(users, { 'age': 1, 'active': false });\n// => objects for [['pebbles'], ['barney', 'fred']]\n\n// The `_.matchesProperty` iteratee shorthand.\n_.partition(users, ['active', false]);\n// => objects for [['barney', 'pebbles'], ['fred']]\n\n// The `_.property` iteratee shorthand.\n_.partition(users, 'active');\n// => objects for [['fred'], ['barney', 'pebbles']]\n\nCreates an array of elements split into two groups, the first of which\ncontains elements `predicate` returns truthy for, the second of which\ncontains elements `predicate` returns falsey for. The predicate is\ninvoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-partition",
      "matches": {
        "lodash partition": true
      },
      "source": "javascript/lodash"
    },
    "8226e11e834fc69036e168d55deab83e": {
      "content": "fun ${1} => ${0}",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "8227b75079f697d6aada9788b8656b00": {
      "content": "loop (my ${1:$i} = 0; $$1 < ${2:count}; $$1++) {\n\t${3}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loop": true
      },
      "source": "vim-snippets/snippets"
    },
    "822d32aac8ca828fc4db98cb346d2d54": {
      "content": "import ${1:std.stdio};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "import (imp)",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "823c95058976f90e44209ae40f2bb1b2": {
      "content": "else if ($1)\n{\n\t$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "else if",
      "matches": {
        "elif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "824a25364e11bf4d0d54e4bf0afccf5e": {
      "content": "${1:FIELDNAME} = forms.IntegerField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "IntegerField",
      "matches": {
        "fint": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "824c09dc4e96ddec62e817487df0dd72": {
      "content": "text-justify: inter-ideograph;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:ii": true
      },
      "source": "vim-snippets/snippets"
    },
    "824ddc59549796688249cd13d3c82c89": {
      "content": "elseif ${1:condition} then\n\t${0:--body}",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true
      },
      "source": "vim-snippets/snippets"
    },
    "82528926416b0af3c07db1e617d00138": {
      "content": "${1:void} ${2:function_name}()\n{\n\t${3}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defun0": true
      },
      "source": "vim-snippets/snippets"
    },
    "8255e9426c2584d893eb5acb5ae8a99a": {
      "content": "@version ${0:#:version}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ver": true,
        "version": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "82610e2471069c08323e188897962627": {
      "content": "As a special exception, if other files instantiate generics from\nthis unit, or you link this unit with other files to produce an\nexecutable, this unit does not by itself cause the resulting\nexecutable to be covered by the GNU General Public License.\nThis exception does not however invalidate any other reasons why the\nexecutable file might be covered by the GNU Public License.\n${0}",
      "doc": "",
      "filetype": "_",
      "grammar": "snu",
      "label": "linking exception",
      "matches": {
        "GMGPL": true
      },
      "source": "vim-snippets/snippets"
    },
    "826851bfc71c2cad6b66bae01614856b": {
      "content": "caption-side bottom",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cps:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "8268a6eaa6f872fe8803a5e02ec2258d": {
      "content": "!important",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "!important CSS (!)",
      "matches": {
        "!": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "826c754baaba6b92a850df024215b57d": {
      "content": "${1:root} = exports ? this",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "8270874ea7e3d86bc70145b0c7c1597e": {
      "content": "${1:FIELDNAME} = models.ForeignKey(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${0:, to_field=''})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fk": true
      },
      "source": "vim-snippets/snippets"
    },
    "8271c2ad864bf230d61a21556a68d68f": {
      "content": "let ${1} =\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "letf": true
      },
      "source": "vim-snippets/snippets"
    },
    "827398359f255729744fe361f33ec8b8": {
      "content": "${1:property_name}: observer('${3:argument}', function() {\n\t${0://body...}\n}),",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "property_name: observer('...', function() {...}),",
      "matches": {
        "proo": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8275335fa4d135d1a8c64f3da7411ac0": {
      "content": "${1:FIELDNAME} = forms.DateTimeField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "DateTimeField",
      "matches": {
        "fdatetime": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "82782e806835f582cab129058db99680": {
      "content": "<%= radio_button ${1:f}, :${2:field},  ${3:\"value\"} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "radio_button",
      "matches": {
        "rb": true
      },
      "source": "vim-snippets/snippets"
    },
    "8279721cdea77b7512d934be2619c206": {
      "content": "const ${1:value} = get(${2:store});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-store-get",
      "matches": {
        "svelte store-get-value": true,
        "svstoregm": true
      },
      "source": "javascript/svelte"
    },
    "827abe3a7f5a7181be5f4fa496918ae3": {
      "content": "<%doc>\n\t${0:}\n</%doc>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/snippets"
    },
    "828138c8e6bc0df03b74159c489bf58a": {
      "content": "(others => '${1:0}');",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oth": true
      },
      "source": "vim-snippets/snippets"
    },
    "8282aad1b337ff7ea91cde5240186a01": {
      "content": "public void set${1:Name}(${2:String} ${3:name}) {\nthis.$3 = $3;\n}${0:TARGET}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "set": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8287019ea78a355cbd71cd9990f3e9bf": {
      "content": "<motion.${1:div}\n  initial=\"${2:hidden}\"\n  animate=\"${3:visible}\"\n></motion.${1:div}>",
      "doc": "",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-motion",
      "matches": {
        "framer-motion motion": true,
        "motion": true
      },
      "source": "javascript/framer-motion"
    },
    "82885c4bfe38e336a09821a8abe76c17": {
      "content": "font-weight lighter",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:lr": true
      },
      "source": "vim-snippets/snippets"
    },
    "829326bc333a995a1891e8876672aa09": {
      "content": "background-position-y ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgpy": true
      },
      "source": "vim-snippets/snippets"
    },
    "829533a89bec06b74e65aef1957f05b1": {
      "content": "{\n\tblock : '${1:name}',\n\tcontent : [\n\t\t'${2:content}'\n\t]\n}",
      "doc": "",
      "filetype": "javascript-bemjson",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b": true
      },
      "source": "vim-snippets/snippets"
    },
    "82972dd16b7b4cb53adf57cefd447ca8": {
      "content": "font-family: ${0:Capitals,Impact},fantasy",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "8297e72510adf044af5a250a7e5721e1": {
      "content": "outline-style: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "os": true,
        "outline-style": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "829ed4d43f92461ca802d19256d37983": {
      "content": "<router-link :to=\"{name: '${1:name}', params:{${2:id}: '${3:value}'} }\">${4:LinkTitle}</router-link>",
      "doc": "Named routing link w/ params",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Named Routing Link with Params",
      "matches": {
        "vroutenameparam": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "82a2301f899ee905a593fbbe4e0ae5a2": {
      "content": "<% content_for :${1:head} do %>\n\t${0}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "conf": true
      },
      "source": "vim-snippets/snippets"
    },
    "82b2f0d00e8eec4200924d4b08dab21f": {
      "content": "font: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "f": true
      },
      "source": "vim-snippets/snippets"
    },
    "82c4c822b1ca6782eea374b91a0e3d30": {
      "content": "\\textmd{${1:TARGET}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\textmd": true,
        "textmd \\textmd{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "82c8b05f15ff16e012c57653f6acab2c": {
      "content": "${1:obj}.promise(${2:'fx'}, ${3:target})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "promise": true
      },
      "source": "snippets/coffee"
    },
    "82caf5aff29c55d9570eb76cec46fe80": {
      "content": "background-repeat repeat-y",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:y": true
      },
      "source": "vim-snippets/snippets"
    },
    "82cbe4d142ecd9536cdb4c46726cc9a1": {
      "content": "border-left-color: #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlc": true
      },
      "source": "vim-snippets/snippets"
    },
    "82d09c0b96db40b6bdcd0f4db1f16fbb": {
      "content": "id=\"$1\"$2",
      "doc": "",
      "filetype": "html_minimal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "id": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "82d2af45e1cd20e8f960b301c0874e89": {
      "content": "{% codeblock %}\n${0:code_snippet}\n{% endcodeblock %}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "codeblock-short": true
      },
      "source": "vim-snippets/snippets"
    },
    "82d50a4940b300480fde2f240aa89356": {
      "content": "white-space: pre",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:p": true
      },
      "source": "vim-snippets/snippets"
    },
    "82d9f4c58788642d6de28e7d585aa0f3": {
      "content": "```{${1:language}}\n$0\n```",
      "doc": "Insert code chunk",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert code chunk",
      "matches": {
        "code chunk": true
      },
      "source": "vscode-R/snippets"
    },
    "82daec7996e31f1c55517b15be0bcca9": {
      "content": "<${1:}>${2}</$1>",
      "doc": "",
      "filetype": "xml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ti": true
      },
      "source": "vim-snippets/snippets"
    },
    "82dcf99063b724f9e0f626b29f8e9ec0": {
      "content": "\\begin{titlepage}\n\t${1:TARGET}\n\\end{titlepage}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{titlepage} \\titlepage": true,
        "titlepage": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "82dd20c797262af3649fadbccd3163a9": {
      "content": "font-emphasize: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fem": true
      },
      "source": "vim-snippets/snippets"
    },
    "82df15979e8775d9e87859accafa9d10": {
      "content": "extern crate ${0:TARGET};",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "extern crate",
      "matches": {
        "ec": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "82e7f44083312fca89df2912504959ad": {
      "content": "checked (${1:#:var}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "checked () {}",
      "matches": {
        "checked": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "82f00e211351e6698f94e751c02d47e2": {
      "content": "let save_reg_$1 = getreg('${1}')\nlet save_regtype_$1 = getregtype('$1')\ntry\n  ${0}\nfinally\n  call setreg('$1', save_reg_$1, save_regtype_$1)\nendtry",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "use register save",
      "matches": {
        "save_register": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "82f5aa7e61e3cbf86dd2fe8dfda737a8": {
      "content": "_.pullAt(${array}, ${indexes})",
      "doc": "var array = ['a', 'b', 'c', 'd'];\nvar pulled = _.pullAt(array, [1, 3]);\n\nconsole.log(array);\n// => ['a', 'c']\n\nconsole.log(pulled);\n// => ['b', 'd']\n\nRemoves elements from `array` corresponding to `indexes` and returns an\narray of removed elements.\n\n**Note:** Unlike `_.at`, this method mutates `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-pullat",
      "matches": {
        "lodash pullat": true
      },
      "source": "javascript/lodash"
    },
    "82f7d3656a087c383998cfeb8533004f": {
      "content": "pipeline {\n\tagent any\n\tstages {\n\t\tstage('${1:Build}') {\n\t\t\tsteps {\n\t\t\t\tsh '${2:make}'\n\t\t\t}\n\t\t}\n\t\tstage('${3:Test}'){\n\t\t\tsteps {\n\t\t\t\tsh '${4:make check}'\n\t\t\t\tjunit '${5:reports/**/*.xml}'\n\t\t\t}\n\t\t}\n\t\tstage('${6:Deploy}') {\n\t\t\tsteps {\n\t\t\t\tsh '${7:make publish}'\n\t\t\t}\n\t\t}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pipeline_sample": true
      },
      "source": "vim-snippets/snippets"
    },
    "830a2bd12cd548cf2284897009a5a321": {
      "content": "System.Diagnostics",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s.d": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "830b596be44df7febeadf27af95d71fa": {
      "content": "_.findLastKey(${object}, ${predicate})",
      "doc": "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findLastKey(users, function(o) { return o.age < 40; });\n// => returns 'pebbles' assuming `_.findKey` returns 'barney'\n\n// The `_.matches` iteratee shorthand.\n_.findLastKey(users, { 'age': 36, 'active': true });\n// => 'barney'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findLastKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findLastKey(users, 'active');\n// => 'pebbles'\n\nThis method is like `_.findKey` except that it iterates over elements of\na collection in the opposite order.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-findlastkey",
      "matches": {
        "lodash findlastkey": true
      },
      "source": "javascript/lodash"
    },
    "830e584e96798e24c9dedf1d77613dc7": {
      "content": "object ${1} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "kotlin",
      "grammar": "snu",
      "label": "",
      "matches": {
        "obj": true
      },
      "source": "vim-snippets/snippets"
    },
    "830f8f10104fbcd75ec02a2b7c5f890f": {
      "content": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
      "doc": "An object that could be one of many types required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-one-of-type-required",
      "matches": {
        "prop-types oneoftype required": true,
        "ptetr": true
      },
      "source": "javascript/prop-types"
    },
    "83133be951e08a74adb76bf12f54f0b2": {
      "content": "if err != nil {\n\tt.Fatal(err)\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err != nil { t.Fatal(err) }",
      "matches": {
        "errt": true
      },
      "source": "gosnippets/snippets"
    },
    "8316297a83ed493d23cf76e509a1bf5f": {
      "content": "import ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "im": true
      },
      "source": "vim-snippets/snippets"
    },
    "83172a5958a5fe30b176393c431b43db": {
      "content": "expect($1).toBeGreaterThanOrEqual($0);",
      "doc": "expects the argument is greater than",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobegreaterthanorequal",
      "matches": {
        "jest expect tobegreaterthanorequal": true,
        "tbgte": true
      },
      "source": "javascript/jest"
    },
    "831d6ca65925b9d0b18f4626265ad77f": {
      "content": "assertFalse(\"${1:Failure message}\", ${2:condition});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "af": true
      },
      "source": "vim-snippets/snippets"
    },
    "8329464db852ef483f64f28d2ddc1020": {
      "content": "std::priority_queue<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pqueue": true
      },
      "source": "vim-snippets/snippets"
    },
    "832b74ef718b48a89f14c2f499d11c7e": {
      "content": "signal ${1} : std_logic;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "st": true
      },
      "source": "vim-snippets/snippets"
    },
    "832b9bae59c3ccc30ff232061710db22": {
      "content": "place-self end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "83306e09200a042163eaeaf2d9937c1d": {
      "content": "<colgroup>\n\t${0}\n</colgroup>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "colgroup": true
      },
      "source": "vim-snippets/snippets"
    },
    "833c2ddd0e823f4b894f7762954b1823": {
      "content": "${1}(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mix": true
      },
      "source": "vim-snippets/snippets"
    },
    "833dedffeeadbb764d83932c705a6b83": {
      "content": "format!(\"${1:\\{\\}}\", ${0:TARGET});",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "format!",
      "matches": {
        "fm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "834996a3b2adfb4b18478bad88fa6159": {
      "content": "import ${1:Data.List} as ${0:List}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "impq": true
      },
      "source": "vim-snippets/snippets"
    },
    "834bf1fc9ff4363f6b2f31d8c34f6b12": {
      "content": "PropTypes.func.isRequired,",
      "doc": "Func prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeFuncRequired",
      "matches": {
        "ptfr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "834d39f24f79dd77bb5915c178795362": {
      "content": "args <- commandArgs(TRUE)\nif (length(args) == 0)\n    stop(\"Please give ${1:}!\")\nif (!all(file.exists(args)))\n     stop(\"Couln't find input files!\")",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cmdarg": true
      },
      "source": "vim-snippets/snippets"
    },
    "8354e40a7ebd2723d476e212ccf898a8": {
      "content": "<template v-slot:${0:name}>${1:defaultcontent}</template>",
      "doc": "named slot",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Named Slot",
      "matches": {
        "vslot-named": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "83625ebbea94678527a1453abe40a348": {
      "content": "curveVertex(${1:x}, ${0:y});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "curveVertex": true
      },
      "source": "vim-snippets/snippets"
    },
    "8371b202dc7301191e57e1618d4b17fc": {
      "content": "_.toLength(${value})",
      "doc": "_.toLength(3.2);\n// => 3\n\n_.toLength(Number.MIN_VALUE);\n// => 0\n\n_.toLength(Infinity);\n// => 4294967295\n\n_.toLength('3.2');\n// => 3\n\nConverts `value` to an integer suitable for use as the length of an\narray-like object.\n\n**Note:** This method is based on\n[`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-tolength",
      "matches": {
        "lodash tolength": true
      },
      "source": "javascript/lodash"
    },
    "837c3bb76340b32b26942aeb898eb682": {
      "content": "export const query = graphql`${1:query}`;",
      "doc": "Gatsby uses the concept of a page query, which is a query for a specific page in a site.Note that you can only have one page query per file.",
      "filetype": "gatsby",
      "grammar": "lsp",
      "label": "gatsby-export-query",
      "matches": {
        "gatsby export query": true
      },
      "source": "javascript/gatsby"
    },
    "838c5e8cf39a74726b3d333243591ace": {
      "content": "useDebugValue(${1:value})",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-usedebugvalue",
      "matches": {
        "react usedebugvalue": true,
        "usedebugvalue": true
      },
      "source": "javascript/react"
    },
    "838e21ac1baec162d2595ae2bc7aea15": {
      "content": "_.toString(${value})",
      "doc": "_.toString(null);\n// => ''\n\n_.toString(-0);\n// => '-0'\n\n_.toString([1, 2, 3]);\n// => '1,2,3'\n\nConverts `value` to a string. An empty string is returned for `null`\nand `undefined` values. The sign of `-0` is preserved.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-tostring",
      "matches": {
        "lodash tostring": true
      },
      "source": "javascript/lodash"
    },
    "838ea20e0aa31a8d237187cd1ba83981": {
      "content": "${1:obj}.text(${2:'some text'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "text": true
      },
      "source": "snippets/coffee"
    },
    "8391fbd4b71103bcd3c17f4cfa20267d": {
      "content": "{% exit ${1} %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig exit",
      "matches": {
        "exit": true
      },
      "source": "vim-snippets/snippets"
    },
    "8395e5f4d1490005fd17da737d093e26": {
      "content": "chan ${0:int}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "chan Type",
      "matches": {
        "ch": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "8395fcdaa6bd1b525ee8df80bd2439e1": {
      "content": "#import <${1:Cocoa/Cocoa.h}>",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "839d0b4d327f9f61f7c7b1947307f581": {
      "content": "list-style-type: ${1:decimal/decimal-leading-zero/zero};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "list-style-type: numeric (list)",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "839d1556498c34f9980cbc3f4e761d98": {
      "content": "${1:document}.querySelectorAll('${0:CSS selector}')",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "qsa": true
      },
      "source": "snippets/javascript"
    },
    "83a552def79b730a21c42d846dd42c19": {
      "content": "map",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "Map",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "83af3d7afbb4e702553ecdf2fe1c09f4": {
      "content": "this.${1:methodName} = this.${1:methodName}.bind(this)$0",
      "doc": "Binds this to a method",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "bindThis",
      "matches": {
        "bnd": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "83b0d3f48eb9aa7dbdcab65517041d79": {
      "content": "{% paginate ${1} as ${2} %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig paginate",
      "matches": {
        "paginate": true
      },
      "source": "vim-snippets/snippets"
    },
    "83b49a18bdedd707f850f655619b6e37": {
      "content": "<#list ${1:sequence} as ${2:element}>\n\t${0:${VISUAL}}\n</#list>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#list sequence as element>...</#list>",
      "matches": {
        "lis": true
      },
      "source": "vim-snippets/snippets"
    },
    "83b83db0ec1c2f726d45c984221babe4": {
      "content": "font-family: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff": true
      },
      "source": "vim-snippets/snippets"
    },
    "83be0c59daec5ae815760f4f3521aff4": {
      "content": "letter-spacing ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lts": true
      },
      "source": "vim-snippets/snippets"
    },
    "83c9496366244f68e409ed845c9909d6": {
      "content": "printf(\"${1:} = %f\\n\", $1);",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prf": true
      },
      "source": "vim-snippets/snippets"
    },
    "83c9cb440044e729cfe539aacc5a02fe": {
      "content": "each_char { |${1:chr}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "each_char { |chr| .. }",
      "matches": {
        "eac-": true
      },
      "source": "vim-snippets/snippets"
    },
    "83d06de57f89f3231db53442f22f9122": {
      "content": "<style scoped>\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with CSS scoped",
      "matches": {
        "style_with_CSS_scoped": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "83d79f857cc0accc91afea2b743a77e9": {
      "content": "it { should allow_value(${1}).for :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isav": true
      },
      "source": "vim-snippets/snippets"
    },
    "83eab8c20beb5e7ea73de94415d577b4": {
      "content": "LOGGER.debug(${0:msg})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lg": true
      },
      "source": "vim-snippets/snippets"
    },
    "83f8145b2ed238e07c1a7d2532f642e9": {
      "content": "<button type=\"submit\">${1:TARGET}</button>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "buttonsubmit": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "84052a5dd552f7f248451789e6630c5e": {
      "content": "do\n{\n\t${VISUAL}$2\n} while(${1:/*condition*/});",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "do while (do)",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8412cace4a01852fde9713a5a5b8c2ba": {
      "content": "<see cref=\"${1}\"/>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<s": true
      },
      "source": "vim-snippets/snippets"
    },
    "841a8921da9ee35e3ed461c993faa2eb": {
      "content": ":- module(${1:name}, [${0:export}]).",
      "doc": "",
      "filetype": "prolog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "module": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "842797e414e91aa9f5ce317bfa078734": {
      "content": "{@literal ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{literal": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "842c2a8605c5dc4cee84da2fddfe5c41": {
      "content": "NSLog(@\"${1}\")",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "NSLog(...)",
      "matches": {
        "log": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "843ead605869f5f82f22c2e817cc9b0d": {
      "content": "\"${1:link text}\":${0:url}",
      "doc": "",
      "filetype": "textile",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link": true
      },
      "source": "vim-snippets/snippets"
    },
    "84443c89791a1228c315e40710eb747b": {
      "content": "getElementBy${1:Id}('${0}')",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gett": true
      },
      "source": "snippets/javascript"
    },
    "8446a3d8a6a783ad0fa99f6578ba4d0a": {
      "content": "|  ${0:factors}      |    ${1:a}       |  ${2:b}   \t|\n| ------------- |-------------  | ------- |\n|    ${3:f1}    |    Y          | N       |\n|    ${4:f2}    |    Y          | N       |",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tb": true
      },
      "source": "vim-snippets/snippets"
    },
    "844861c900c0c5192e619524b4a3b6bc": {
      "content": "<ol>\n\t<li>${1}</li>\n\tli+${0}\n</ol>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ol+": true
      },
      "source": "vim-snippets/snippets"
    },
    "845455a9536146dabe617e276b771a03": {
      "content": "/// <summary>\n/// ${0}\n/// </summary>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "///": true
      },
      "source": "vim-snippets/snippets"
    },
    "84578883045155096ee37a2c30728126": {
      "content": "_.isNull(${value})",
      "doc": "_.isNull(null);\n// => true\n\n_.isNull(void 0);\n// => false\n\nChecks if `value` is `null`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isnull",
      "matches": {
        "lodash isnull": true
      },
      "source": "javascript/lodash"
    },
    "845b0951dd0bc960eb50a3bee5631cb7": {
      "content": "internal ${1:int} ${2} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p&-": true
      },
      "source": "vim-snippets/snippets"
    },
    "8468035d5f4934858e2ecc72dc3a059e": {
      "content": "<input type=\"search\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:search": true
      },
      "source": "vim-snippets/snippets"
    },
    "846b90926839b71d74968c9fe33c8f56": {
      "content": "/**\n * ${3:undocumented constant}\n */\ndefine(${1}, ${2});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc_d": true
      },
      "source": "vim-snippets/snippets"
    },
    "84737a01c22eedf1a1cdff61f03e7faa": {
      "content": "render text: '${1:text to render}', layout: '${0:layoutname}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rtl": true
      },
      "source": "vim-snippets/snippets"
    },
    "847a56be7864d3ea0ab45de81ac7b100": {
      "content": "_.isMatch(${object}, ${source})",
      "doc": "var object = { 'a': 1, 'b': 2 };\n\n_.isMatch(object, { 'b': 2 });\n// => true\n\n_.isMatch(object, { 'b': 1 });\n// => false\n\nPerforms a partial deep comparison between `object` and `source` to\ndetermine if `object` contains equivalent property values.\n\n**Note:** This method is equivalent to `_.matches` when `source` is\npartially applied.\n\nPartial comparisons will match empty array and empty object `source`\nvalues against any array or object value, respectively. See `_.isEqual`\nfor a list of supported value comparisons.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-ismatch",
      "matches": {
        "lodash ismatch": true
      },
      "source": "javascript/lodash"
    },
    "8489ecb3d84e6118f6f67878bb1b51df": {
      "content": "_.now()",
      "doc": "_.defer(function(stamp) {\n  console.log(_.now() - stamp);\n}, _.now());\n// => Logs the number of milliseconds it took for the deferred invocation.\n\nGets the timestamp of the number of milliseconds that have elapsed since\nthe Unix epoch (1 January 1970 00:00:00 UTC).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-now",
      "matches": {
        "lodash now": true
      },
      "source": "javascript/lodash"
    },
    "848ad36f9349b2b491a98bfdd54316d8": {
      "content": "justify-self: stretch;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "848dbd1c494808bb27f8ef116a3d0891": {
      "content": "redirect_to controller: \"${1:items}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to (controller)",
      "matches": {
        "rec": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "84956529e8951dc1dfb759abb7a93967": {
      "content": "page-break-after: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "849744b93b3579408d831ed4fad6c723": {
      "content": "watch(() => ${1:foo}, (newValue, oldValue) => {\n\t${2}\n})",
      "doc": "Requires watching a specific data source, and applies side effects in a separate callback function.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v3watch",
      "matches": {
        "vue v3 watch": true
      },
      "source": "javascript/vue"
    },
    "849be3a8a7499663943a5ee7e2b7c40b": {
      "content": "@if (${1:condition})\n   ${2}\n@elseif (${3:condition})\n   ${4}\n@else\n   ${5}\n@endif",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "if elseif else endif",
      "matches": {
        "ifelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "84adb78956653777e0f750ffb2985b08": {
      "content": "$.get('${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\tfunction (data, textStatus, jqXHR) {\n\t\t${0:// success callback}\n\t}\n);",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxget": true
      },
      "source": "snippets/javascript"
    },
    "84beeca43335d78be70029ffa32be9b9": {
      "content": "componentDidUpdate(prevProps, prevState) {\n\t${1}\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "componentDidUpdate",
      "matches": {
        "cdup": true
      },
      "source": "snippets/javascript"
    },
    "84c577fcb2dabb35124ab8582c01b9a1": {
      "content": "vertical-align: text-top",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:tt": true
      },
      "source": "vim-snippets/snippets"
    },
    "84c68dceede6b252e57821f4192d7bd5": {
      "content": "array.of()",
      "doc": "array.of(type: Schema): Schema\n\nSpecify the schema of array elements. of() is optional and when omitted the array schema will\nnot validate its contents.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "array-of",
      "matches": {
        "yup array of": true
      },
      "source": "javascript/yup"
    },
    "84d2deb6224d271b80b3987748a37955": {
      "content": "${1:obj}.end()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "end": true
      },
      "source": "snippets/coffee"
    },
    "84debf971d1356f1f8eaedd162785e2f": {
      "content": "PropTypes.instanceOf($0).isRequired,",
      "doc": "Is an instance of a class prop type required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-instance-of-required",
      "matches": {
        "prop-types instanceof required": true,
        "ptir": true
      },
      "source": "javascript/prop-types"
    },
    "84df0760a7b61197b14c61dced739b24": {
      "content": "<command type=\"command\" label=\"${1}\" icon=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "command": true
      },
      "source": "vim-snippets/snippets"
    },
    "84f2f693f7e9828779b747b014d44fb5": {
      "content": "Page Should Contain    ${1:${text}}    ${2:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Contain",
      "matches": {
        "psc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "84f9ebb800d8300a56ed914cd8953023": {
      "content": "for (${1:object} in ${2:array}) {\n\t${0:statements}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "84fd68453726aab7071f55a97a2d6b3c": {
      "content": "extern crate ${1:sync};",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "extern crate",
      "matches": {
        "ec": true
      },
      "source": "vim-snippets/snippets"
    },
    "8508d23ec996bde882740c3c7f17d171": {
      "content": "${1:map}.resource :${0:resource}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapr": true
      },
      "source": "vim-snippets/snippets"
    },
    "851237b6eaccb063969739e7d9118d87": {
      "content": "for ${1} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for ... { ... }",
      "matches": {
        "for": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "851ec3a37fbff739be848d9873ee79ae": {
      "content": "default:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "default": true
      },
      "source": "vim-snippets/snippets"
    },
    "8522d34f36dfe353aad10e762a1b8aa2": {
      "content": "mixed.validateAt()",
      "doc": "mixed.validateAt(path: string, value: any, options?: object): Promise<any, ValidationError>\n\nValidate a deeply nested path within the schema. Similar to how reach works,\nbut uses the resulting schema as the subject for validation.\nNote! The value here is the root value relative to the starting schema, not the value at the nested path.\nlet schema = object({\n  foo: array().of(\n    object({\n      loose: boolean(),\n      bar: string().when(\"loose\", {\n        is: true,\n        otherwise: s => s.strict()\n      })\n    })\n  )\n});\n\nlet rootValue = {\n  foo: [{ bar: 1 }, { bar: 1, loose: true }]\n};\n\nawait schema.validateAt(\"foo[0].bar\", rootValue); // => ValidationError: must be a string\n\nawait schema.validateAt(\"foo[1].bar\", rootValue); // => '1'\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-validate-at",
      "matches": {
        "yup mixed validateat": true
      },
      "source": "javascript/yup"
    },
    "8525d611b331279f2e4f2293921b92a5": {
      "content": "\\\\begin{split}\n\t${0:${VISUAL}}\n\\\\end{split}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "split environment",
      "matches": {
        "spl": true
      },
      "source": "vim-snippets/snippets"
    },
    "852a5a4d3ddd8abf47d87db66eda7578": {
      "content": "\\begin{eqnarray}\n\t${1:${VISUAL}} & ${2:${VISUAL}} & ${0:${VISUAL}}\n\\end{eqnarray}",
      "doc": "",
      "filetype": "texmath",
      "grammar": "snu",
      "label": "Equation array",
      "matches": {
        "eqa": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "852e224b438994abaefa39ba02c03a83": {
      "content": "{% cycle '${1:odd}', '${2:even}' %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cycle": true
      },
      "source": "vim-snippets/snippets"
    },
    "853145669e75243181d76c9a19e934ab": {
      "content": "import _root_.net.liftweb.http._\nimport S._\nimport _root_.net.liftweb.util._\nimport Helpers._\nimport _root_.scala.xml._",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "liftimports": true
      },
      "source": "vim-snippets/snippets"
    },
    "853a6c73bd0213ed70188db10268b5de": {
      "content": "on ${1:#:functionName}(${2:#:arguments})\n\t${3:TARGET}\nend ${1}",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "on": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "853a76bf9b5735fad875af1988278a2a": {
      "content": "align-self baseline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "854d994e2985980e6fe66c846aeb03fd": {
      "content": "${1:obj}.hover(function (${2:e}) {\n\t${3:// event handler}\n}, function ($2) {\n\t${4:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hover": true
      },
      "source": "snippets/javascript"
    },
    "85599b4026810763072bb939b6aedd32": {
      "content": "$.removeData(${1:element}${2:, 'key name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "remdd": true
      },
      "source": "snippets/coffee"
    },
    "8561fb86a5551006073ca0be64d7c31d": {
      "content": "list-style-type: disc;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "8563ab59434b239242b189f2b8e0094a": {
      "content": "left: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "l:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "85687f10b64002ca8430d96a1493416a": {
      "content": "border-bottom-color: #${1:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-bottom-color: size style color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8572de867e1fe7c5eeedf268a8d2b8d0": {
      "content": "text-emphasis: after;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "85795a9c9ab27957e3004413c8c30cf6": {
      "content": "#import <${1:Cocoa/Cocoa.h}>",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "#import <> (Imp)",
      "matches": {
        "Imp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "858f3724fda21210b0a1572622684826": {
      "content": "private ${1}(${2}): ${3:any} {\n\t${0}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts private method",
      "matches": {
        "tprmet": true
      },
      "source": "vim-snippets/snippets"
    },
    "8590e6279ef2e9859638d1c87927db77": {
      "content": "unset key",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "unset key",
      "matches": {
        "key!": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "85920afba900d3430c77320c0ce467e6": {
      "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\tstatic propTypes = {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React component class with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassExportComponentWithPropTypes",
      "matches": {
        "rcep": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "859c962eb700cdf2b08ed364d862bfce": {
      "content": "${1:document}.querySelector('${0:CSS selector}')",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "qs": true
      },
      "source": "snippets/javascript"
    },
    "859d97bcf7ecfa7e714b562a3e08d5bb": {
      "content": "<!DOCTYPE html\nPUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doctypeframeset": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "85a782429c658500d3ec2d41bd24791f": {
      "content": "for ${1:#:value} in ${2:#:list}:\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "for ... in ...: ...",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "85b2909c80d7c13c7d14d9b6e60e007a": {
      "content": "enum ${1:name} {\n\t${2:item1}\n\t${3:item2}\n}",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enum": true
      },
      "source": "vim-snippets/snippets"
    },
    "85bbc504ed526f8da0312300120ff642": {
      "content": "class ${1:Model}Controller < ApplicationController\n\tbefore_action :find_${2:model}\n\n\t$0\n\n\tprivate\n\tdef find_$2\n\t\t@$2 = ${3:$1}.find(params[:id]) if params[:id]\n\tend\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create controller class",
      "matches": {
        "clac": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "85c6c3ba025cbd249a4303282be291ab": {
      "content": "expect(${1:target}).not.toBeLessThan(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to not be less than (js)",
      "matches": {
        "notl": true
      },
      "source": "vim-snippets/snippets"
    },
    "85c96ec5d4e3732f0dd72af30f30538b": {
      "content": "round(precision=${1:0}, method=${2:'common|ceil|floor'})",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "round number",
      "matches": {
        "round": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "85cab61423ea95ec14ea4c8042d72733": {
      "content": "const ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React 17 Arrow Function Component with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_reactArrowFunctionExportComponent",
      "matches": {
        "_rafce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "85cb1432ffced4c2264467f4f47bf7d5": {
      "content": ".. caution::\n\t${0:Watch out!}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cau:": true
      },
      "source": "vim-snippets/snippets"
    },
    "85d3b0b9b0df82d60d52884224f77876": {
      "content": "func ${1:fname}(${2}) ${3:int }{\n  ${0:TARGET:return }\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func ...() { ... }",
      "matches": {
        "fn": true,
        "func": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "85d80684b68c186e09f27a654805f053": {
      "content": "<bdo dir=\"${1}\">${0}</bdo>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdo": true
      },
      "source": "vim-snippets/snippets"
    },
    "85d9ab2550bc763dea2a22b60b82a388": {
      "content": "<ThemeProvider theme={${1}}>\n  ${2}\n</ThemeProvider>",
      "doc": "ThemeProvider",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-theme-provider",
      "matches": {
        "styled-components themeprovider": true,
        "themeprovider": true
      },
      "source": "javascript/styled-components"
    },
    "85e579d222051329245bbf483868843f": {
      "content": "_.findIndex(${array}, ${predicate}, ${fromIndex})",
      "doc": "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.findIndex(users, function(o) { return o.user == 'barney'; });\n// => 0\n\n// The `_.matches` iteratee shorthand.\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findIndex(users, ['active', false]);\n// => 0\n\n// The `_.property` iteratee shorthand.\n_.findIndex(users, 'active');\n// => 2\n\nThis method is like `_.find` except that it returns the index of the first\nelement `predicate` returns truthy for instead of the element itself.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-findindex",
      "matches": {
        "lodash findindex": true
      },
      "source": "javascript/lodash"
    },
    "85e653d272fef6543f087c2630d2a57e": {
      "content": "foreach my $${1:x} (@${2:array}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "85e806d0a11fc4be47f1ff14d64a5b5e": {
      "content": "<FilesMatch \"${1:regex}\">\n\t${0:${VISUAL}}\n</FilesMatch>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filesmatch": true
      },
      "source": "vim-snippets/snippets"
    },
    "85edd1b5afb6d623e9249cdd67cfc20d": {
      "content": "get {${1:TARGET}}${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "get {}",
      "matches": {
        "get": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "85eeb3579ea73099099f7b6cb13b9978": {
      "content": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
      "doc": "Export default function in ES6 syntax",
      "filetype": "base",
      "grammar": "lsp",
      "label": "exportdefaultfunction",
      "matches": {
        "base export default function": true
      },
      "source": "javascript/base"
    },
    "85f104cbb743f61945add04d6734507a": {
      "content": "%% @doc ${0}",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "%d": true
      },
      "source": "vim-snippets/snippets"
    },
    "860943de65dea2bb9ecc31b4e9a0bde9": {
      "content": "std::unordered_map<${1:Key}, ${2:T}> ${3};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "umap": true
      },
      "source": "vim-snippets/snippets"
    },
    "860b0d16134d046360167fa6e64afb0b": {
      "content": "${1:FIELDNAME} = forms.BooleanField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "BooleanField",
      "matches": {
        "fbool": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "860bd6a6307f4d7fe38f06f890262fed": {
      "content": "regsubst(${1:hay stack}, ${2:needle}, \"${3:replacement}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "regsubst": true
      },
      "source": "vim-snippets/snippets"
    },
    "860c9601c35a48d2cd9520f43a381aaa": {
      "content": "#include <${1:iostream}>",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "incc": true
      },
      "source": "vim-snippets/snippets"
    },
    "860fc711fd2a99a6f105540fc2781857": {
      "content": "afterEach(() => {\n\t${0:${VISUAL}}\n});",
      "doc": "",
      "filetype": "javascript-mocha",
      "grammar": "snu",
      "label": "afterEach(() => { ... })",
      "matches": {
        "afte": true
      },
      "source": "vim-snippets/snippets"
    },
    "86156d5b50222dbb3f471d15232dc529": {
      "content": "constructor(props) {\n\tsuper(props)\n\n\tthis.state = {\n\t\t $0\n\t}\n}\n",
      "doc": "Adds a default constructor for it('', () => {})the class that contains props as arguments",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-class-constructor",
      "matches": {
        "rconst": true,
        "react class constructor": true
      },
      "source": "javascript/react"
    },
    "8617b00b4cad231bcf3a82fa4d250232": {
      "content": "$this->input->user_agent();${1}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_input-user_agent": true
      },
      "source": "vim-snippets/snippets"
    },
    "861dfdef1d7f48f86d73eeafccc80135": {
      "content": "min-width ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "miw": true
      },
      "source": "vim-snippets/snippets"
    },
    "861f3dc407a4dbddba967ffd736a8bdf": {
      "content": "&#x21E4;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "backtab": true
      },
      "source": "vim-snippets/snippets"
    },
    "86253a6e0d604ab6bf0989416a561501": {
      "content": ":only-child",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":oc": true
      },
      "source": "vim-snippets/snippets"
    },
    "8626235e72df38e2d5e3f337f53b0d22": {
      "content": "text-outline: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "to:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "862adc08cd0ccc29e57dee05ae348e72": {
      "content": "list-style-type: ${1:none/disc/circle/square};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "list-style-type: marker(list)",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "862c37a36c8501059c8140766c539205": {
      "content": "${1:public} ${2:void} ${3:MyMethod}(${4})\n{\n\t$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "Method",
      "matches": {
        "mth": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "863e775010ad92ea619667ae33d5477a": {
      "content": "\\subsubsection{${1}}\n${0:TARGET}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\subsubsection": true,
        "subsubsection \\subsubsection{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8673f4c438cac276fe5b21807a867796": {
      "content": "${1:div}(:class=\"[${2:classNameA}, ${3:classNameB}]\")",
      "doc": "vue class binding",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Class Binding Object",
      "matches": {
        "vclass-obj": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "86767dd3f1f6863bd57b47d86e27b66a": {
      "content": "getDefaultProps: ->\n\t${1:myvar}: ${2:myvalue}\n\t$3",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define getDefaultProps",
      "matches": {
        "getDefaultProps": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "86790e542ed79eb46110312ddaa8f729": {
      "content": "// Define what props.theme will look like\nconst theme = {\n  ${1}: '${2}'\n};",
      "doc": "styled-component theme",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-styled-component-theme",
      "matches": {
        "sct": true,
        "styled-components theme": true
      },
      "source": "javascript/styled-components"
    },
    "867c6a07e64e2d06301a245b519e40cf": {
      "content": "${1:type} ${2:ptr} = ($1*) calloc(${3:size}, sizeof($1));",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clcd": true
      },
      "source": "vim-snippets/snippets"
    },
    "86825b628599d4453117bcb3fcfd2538": {
      "content": "create sequence ${1:name} start with ${2:1} increment by ${3:1} minvalue ${0:1};",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "seq": true
      },
      "source": "vim-snippets/snippets"
    },
    "8687a403cbee8f6e45d9ce63005d033f": {
      "content": "${1:obj}.mouseenter (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "menter": true
      },
      "source": "snippets/coffee"
    },
    "86921c10b4e15a23f2285a4d22e6cd1b": {
      "content": "match ${1:TARGET} with\n| ${2} -> ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "match",
      "matches": {
        "match": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "869b21a5150c22aec15293b5700c3907": {
      "content": "for (${1:1}, ${2:10}) {${3: |i}|}\n\t$0\n}",
      "doc": "",
      "filetype": "supercollider",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "869c4fab6a1ce8f963002cc7e93d8ff1": {
      "content": "text-emphasis: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "869f212ea4ca31aa12872d4766f3d374": {
      "content": "DROP TABLE IF EXISTS ${1:table};",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "DROP TABLE IF EXISTS ...",
      "matches": {
        "DROP_TABLE": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "86a32dcb2f3cc3c7ad57af789828cdcd": {
      "content": "import ${2:moduleName} from '${1:module}';$0",
      "doc": "Imports entire module statement in ES6 syntax",
      "filetype": "base",
      "grammar": "lsp",
      "label": "import",
      "matches": {
        "base import": true
      },
      "source": "javascript/base"
    },
    "86adae63d87e8c463fb1ce7598ed5d91": {
      "content": "\\\\footcite[${1}]{${2}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\footcite[]{}",
      "matches": {
        "fcite": true
      },
      "source": "vim-snippets/snippets"
    },
    "86b5b17c9a2fe8add384463630f46f8d": {
      "content": "PropTypes.number.isRequired,",
      "doc": "Number prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeNumberRequired",
      "matches": {
        "ptnr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "86b6806501ec24ad18a8fe9580fbf0e4": {
      "content": "else {\n\t${0}\n}",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "86bb67ca37c808a6ecb36f697b4c479a": {
      "content": ".. toctree::\n\t:maxdepth: ${1:2}\n\t${2:#:FILES}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "directive_toctree",
      "matches": {
        "toctree": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "86c058258885a67bb3a4457cff51c6f4": {
      "content": "div(ng-if='${1}')",
      "doc": "",
      "filetype": "jade",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "86c8b61df86e9de278d35cb9b7153ea0": {
      "content": "PropTypes.array.isRequired,",
      "doc": "Array prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeArrayRequired",
      "matches": {
        "ptar": true
      },
      "source": "vscode-react/snippets"
    },
    "86cdf906c32f68686816dafd35e40488": {
      "content": "MsgBox(0, \"${0:VarName}\", $1)",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "showvar": true
      },
      "source": "vim-snippets/snippets"
    },
    "86d2661cba2418fc8bb146cd64cc04fd": {
      "content": "_.gte(${value}, ${other})",
      "doc": "_.gte(3, 1);\n// => true\n\n_.gte(3, 3);\n// => true\n\n_.gte(1, 3);\n// => false\n\nChecks if `value` is greater than or equal to `other`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-gte",
      "matches": {
        "lodash gte": true
      },
      "source": "javascript/lodash"
    },
    "86da86bb24718e5c550ac1b644b87acd": {
      "content": "[[NSUserDefaults standardUserDefaults] setObject:${1:object} forKey:${2:key}];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Write to defaults (setprefs)",
      "matches": {
        "setprefs": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "86e06a7cbb79f1f0787abb6812d62c72": {
      "content": "switch ${1:n}\n\tcase ${2:0}\n\t\t${0}\nend",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "switch",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "86e2e87fcca24463a4b24ac6d85038c2": {
      "content": "align-content: space-evenly",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "86ec768e773b02e07e6f040dfd3d59b4": {
      "content": "class ${1:#:name} {\n    ${2:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "class {}",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "86eccf45263bf72b5aa57a9a98911fb3": {
      "content": "localparam ${1:#:name} = ${2:#:val};${3:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "localparam ... = ...",
      "matches": {
        "localparam": true,
        "lpa": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "86f204a26f681f7ed9cbcd0505e79b5f": {
      "content": "${1:obj}.load('${2:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\t(responseText, textStatus, xhr) ->\n\t\t${0:// success callback}\n})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loadf": true
      },
      "source": "snippets/coffee"
    },
    "86f2755c238b7f72c3c922d6db9753a1": {
      "content": "private def ${1:name}(${2:arg}) = ${0:}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prdef": true
      },
      "source": "vim-snippets/snippets"
    },
    "86f84ce7543387d9bccfbf95c5f1d739": {
      "content": "list-style-type: ${1:hebrew/armenian/georgian};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "list-style-type: other (list)",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "86f954f0f6b16099682b33f244e86762": {
      "content": "try {\n    ${0:TARGET}\n} catch {\n    ${1}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "try {} catch {}",
      "matches": {
        "try_catch_n": true,
        "try_cn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "86fdbe10e65128daba9b4a31a3501a99": {
      "content": "PropTypes.string.isRequired,",
      "doc": "String prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeStringRequired",
      "matches": {
        "ptsr": true
      },
      "source": "vscode-react/snippets"
    },
    "870b1ac7906da6878a26561ae16e2c47": {
      "content": "__${1:bold}__",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "__": true
      },
      "source": "vim-snippets/snippets"
    },
    "87221ced0e6194b65b0a60427ede76a9": {
      "content": "impl Drop for $1 {\n\tfn drop(&mut self) {\n\t\t${0}\n\t}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Drop trait implementation (destructor)",
      "matches": {
        "drop": true
      },
      "source": "vim-snippets/snippets"
    },
    "8724ba256fc026130158ebf9174385fb": {
      "content": "_.each(${collection}, ${iteratee})",
      "doc": "_.forEach([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `1` then `2`.\n\n_.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed).\n\nIterates over elements of `collection` and invokes `iteratee` for each element.\nThe iteratee is invoked with three arguments: (value, index|key, collection).\nIteratee functions may exit iteration early by explicitly returning `false`.\n\n**Note:** As with other \"Collections\" methods, objects with a \"length\"\nproperty are iterated like arrays. To avoid this behavior use `_.forIn`\nor `_.forOwn` for object iteration.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-each",
      "matches": {
        "lodash each": true
      },
      "source": "javascript/lodash"
    },
    "872d42c25e106d273c28ca1ea1042bba": {
      "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "docxt": true
      },
      "source": "vim-snippets/snippets"
    },
    "872f83d09f00a76800b91d915bce9947": {
      "content": "<style lang=\"less\">\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with less",
      "matches": {
        "style_with_less": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "873374a89f61976e6bd1177ce4b175e0": {
      "content": "if (${1:#:condition}) {\n\t${2:TARGET}\n} elsif (${3}) {\n\t${4:#:elsif...}\n} else {\n\t${5:#:else...}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifee": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8733b9267d86257fa7ccfbc0249cfb12": {
      "content": "concat(${1:array1}, ${0:array2});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "concat": true
      },
      "source": "vim-snippets/snippets"
    },
    "87524b581878c8b099552eb65aa42a85": {
      "content": "expect(${1:target}).toBeTruthy()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to be truthy (coffee)",
      "matches": {
        "et": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "87585a0f343b5c32a1f29f5b4b610f33": {
      "content": "_.floor(${number}, ${precision})",
      "doc": "_.floor(4.006);\n// => 4\n\n_.floor(0.046, 2);\n// => 0.04\n\n_.floor(4060, -2);\n// => 4000\n\nComputes `number` rounded down to `precision`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-floor",
      "matches": {
        "lodash floor": true
      },
      "source": "javascript/lodash"
    },
    "87695b7e72d33734d32ebbcf32f863a4": {
      "content": "$this->assertNull(${1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertNull($a)",
      "matches": {
        "asnu": true
      },
      "source": "vim-snippets/snippets"
    },
    "877c379abace97514a6f89d2f9e1ce4d": {
      "content": "(${1:a}, ${2:b}, ${0:c})",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tup2": true
      },
      "source": "vim-snippets/snippets"
    },
    "8782dc1f29b0aea66db26d2e9da93960": {
      "content": "${1:key}: ${2:'value'}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":": true
      },
      "source": "vim-snippets/snippets"
    },
    "8786ad68a60a2b981f79de1d25bd465d": {
      "content": "@extends('${1}')",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@extends",
      "matches": {
        "ext": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "879d458de3641142ae14b54db267d297": {
      "content": "font-effect: outline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "879ea6dfb3c2fc32cfa3a70a4bb53dfd": {
      "content": "return ${0:result};",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ret": true
      },
      "source": "snippets/javascript"
    },
    "87aac725807a38bc82aa8b25c330bc28": {
      "content": "background-repeat: repeat-x",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:x": true
      },
      "source": "vim-snippets/snippets"
    },
    "87b558af0d109f9a52b9cb0fe346ec71": {
      "content": "try\n{\n\t${VISUAL}${1:/*code to try*/}\n}\ncatch($2Exception e)\n{\n\t${3:/*handle exception*/}\n}\nfinally\n{\n\t${4:/*cleanup*/}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "try/catch/finally (tryf)",
      "matches": {
        "tryf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "87bdee24ec3de0a4ead77296774e77ba": {
      "content": "while (${1:#:condition}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "while () {}",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "87c581b26387926d0a7481ebff70d4b8": {
      "content": "for ${1:item} <- ${2:items} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "87cfeb4263a38314f4fb332b664bad0e": {
      "content": "_ = println(${1})",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "p in for",
      "matches": {
        "pf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "87d30fe85f0b2aa6b145bf4e0eeda219": {
      "content": "expect(() => {\n\t$0\n}).toThrowError($1);",
      "doc": "expects that the method will throw an error",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tothrowerror",
      "matches": {
        "jest expect tothrowerror": true,
        "tte": true
      },
      "source": "javascript/jest"
    },
    "87d52c246fdd17e92bf63ae18eca8735": {
      "content": "word-spacing: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wos": true
      },
      "source": "vim-snippets/snippets"
    },
    "87d78dbe53535efe4c8013cf7a608a32": {
      "content": "const ${1:/*variable*/} = ${2:/*value*/};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "const (con)",
      "matches": {
        "con": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "87db44ae8a54db9f41fc015fc6976745": {
      "content": "default:\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "default: ...",
      "matches": {
        "default": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "87e17b74842e2bb1d3fd248bad2b60d9": {
      "content": "list-style-type: upper-roman",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:ur": true
      },
      "source": "vim-snippets/snippets"
    },
    "87fce3be71a4d94eead08cc4a59effae": {
      "content": "/*! \\enum $1\n *\n *  ${2:Detailed description}\n */\nenum ${1:name} { ${0} };",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enum": true
      },
      "source": "vim-snippets/snippets"
    },
    "8809028be0d7343e342db040c3bd3a62": {
      "content": "func (${1:self} ${2:Type}) ${3:Do}(${4}) ${5:error }{\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func (self Type) Method(...) [error] { ... }",
      "matches": {
        "meth": true
      },
      "source": "gosnippets/snippets"
    },
    "880a5592436587e0f83eaed6151fbbd5": {
      "content": "${1:obj}.text(${2:'some text'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "text": true
      },
      "source": "snippets/javascript"
    },
    "880a812a612abb987e7d4f387f8ce67a": {
      "content": "font-weight bold",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "8814a37d2bc7e3ecd425e397ae562ccd": {
      "content": "${1:obj}.keydown (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "kdown": true
      },
      "source": "snippets/coffee"
    },
    "881ad45eefb903700584137b486c8b86": {
      "content": "watchEffect(() => {\n\t${1}\n})",
      "doc": "Vue Composition api - watchEffect",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Composition API - watchEffect",
      "matches": {
        "v3watcheffect": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "882924d09ec82d01c5a37e4d7ea4b831": {
      "content": ".directive('${1:directiveName}', (${2:directiveDeps}) ->\n\t(scope, element, attrs${3:ctrl}) ->\n\t\t${4}\n)",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngdl": true
      },
      "source": "snippets/coffee"
    },
    "882e55a62761c4086ea68a61a716f42f": {
      "content": "# ${0}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "# section heading",
      "matches": {
        "heading": true,
        "section": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8839b953d9d01822ee263185a5cf5e1a": {
      "content": "getSnapshotBeforeUpdate(prevProps, prevState) {\n\t$0\n}\n",
      "doc": "Invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture current values",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "getSnapshotBeforeUpdate",
      "matches": {
        "gsbu": true
      },
      "source": "vscode-react/snippets"
    },
    "88426b1b8bc571aadf6ae65cbb6f91ca": {
      "content": "Result<${1:&str}, ${2:()}>",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Result<T, E>",
      "matches": {
        "res": true
      },
      "source": "vim-snippets/snippets"
    },
    "884345de3ff32b98c4141d4af6dd1257": {
      "content": "protected ${1}: ${0:any}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts create protected field",
      "matches": {
        "tprofi": true
      },
      "source": "vim-snippets/snippets"
    },
    "884eb9bb192d6d4309a7395fdcfe0060": {
      "content": "<iframe src=\"${1}\" frameborder=\"0\"></iframe>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iframe": true
      },
      "source": "vim-snippets/snippets"
    },
    "885004beddeb90bc8d1d79607dda0962": {
      "content": "const [${2:propertyName}] = ${1:arrayToDestruct}",
      "doc": "Creates and assigns a local variable using array destructing",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "destructingArray",
      "matches": {
        "dar": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "8856ffa33a5efa4e253111320d85520c": {
      "content": "font-effect: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "885de0c3a7444847dda70b30f8930999": {
      "content": "align-content: flex-end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "886b8b20f6a711342e8d206c01967058": {
      "content": "unless ${1:condition}, do: ${2}, else: ${0}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "unless .. do: .. else:",
      "matches": {
        "unlesse:": true
      },
      "source": "vim-snippets/snippets"
    },
    "887a22358c752b8411cd5ed8bf0a9747": {
      "content": "\\${3}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${3}",
      "matches": {
        "3": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "887cabbed9fcb89e22910afab06339ba": {
      "content": "ENDFILE {\n\t${0}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "ENDFILE { ... }",
      "matches": {
        "endf": true
      },
      "source": "vim-snippets/snippets"
    },
    "88837a70fe03316bff0d436ad379fcd4": {
      "content": "text-justify: inter-word;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:iw": true
      },
      "source": "vim-snippets/snippets"
    },
    "8888669697dacfe828090ec0a5a01c2f": {
      "content": "border-corner-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdci:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "888de465aa4cc86bd6c68c1313542aaf": {
      "content": "#if\n\t${0}\n#endif",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#if": true
      },
      "source": "vim-snippets/snippets"
    },
    "889b89f334abf22370d16bb8deef4cea": {
      "content": "export type ${1:${TM_FILENAME_BASE}} = {$0}",
      "doc": "",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "Export type",
      "matches": {
        "exptp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "88a59693d18e4a66a7eecaee30001022": {
      "content": "comment on column ${1:table}.${2:column} is '${0:comment}';",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "colcom": true
      },
      "source": "vim-snippets/snippets"
    },
    "88ace99d18392713a74d940f1d972b6b": {
      "content": "expr {${0:#expression here}}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "88af3553e6d580106a08f4dd8a4ee4f0": {
      "content": "debugger;",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "de": true
      },
      "source": "snippets/javascript"
    },
    "88b79d7d9b8fbcd1bec0bdecb7de142a": {
      "content": "${1:obj}.undelegate(${2:selector expression}, ${3:event}, ${4:handler})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "undele": true
      },
      "source": "snippets/javascript"
    },
    "88b9293176fa6a32ca6d466a09f8be64": {
      "content": "${1:FIELDNAME} = forms.FilePathField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "FilePathField",
      "matches": {
        "ffilepath": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "88ba1f3fd8edd0bdde16d71e4b4d6a1d": {
      "content": "submethod ${1:submethod_name}(${2:$attr}) {\n\t${3}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "smth": true
      },
      "source": "vim-snippets/snippets"
    },
    "88bcb8d5e7573c0fec5e75767cc33ca6": {
      "content": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
      "doc": "Invoked before rendering when new props or state are being received. ",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "shouldComponentUpdate",
      "matches": {
        "scu": true
      },
      "source": "vscode-react/snippets"
    },
    "88be3a57a8ca91de7004dc0339f22e6e": {
      "content": "for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "for (..) {..}",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "88c1f7215ca8dfd68856e3eaf5e95e19": {
      "content": "border-top-style ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdts": true
      },
      "source": "vim-snippets/snippets"
    },
    "88c637e69da600876b339ec7b758e914": {
      "content": "border-image: url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${7:stretch};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi": true
      },
      "source": "vim-snippets/snippets"
    },
    "88c9738510fc7aa2fa2c5e3e22128785": {
      "content": "${1:FIELDNAME} = forms.DecimalField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "DecimalField",
      "matches": {
        "fdecimal": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "88ca4c4b39ea5ae72c8b8365dce75436": {
      "content": "any? { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "any": true
      },
      "source": "vim-snippets/snippets"
    },
    "88cf862b0f6285fb592ecc97d0050d18": {
      "content": "font: ${1:1em} ${2:Arial},${3:sans-serif};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "f+": true
      },
      "source": "vim-snippets/snippets"
    },
    "88d697f3394ff259757d3af41e2b82d1": {
      "content": "t.float :${1:title}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcf": true
      },
      "source": "vim-snippets/snippets"
    },
    "88dbcae4631bcd324f878f85af5c66c9": {
      "content": "{\n\tblock : '${1:name}',\n\tmods: { ${2:modName}: '${3:modVal}' },\n\tcontent : [\n\t\t'${4:content}'\n\t]\n}",
      "doc": "",
      "filetype": "javascript-bemjson",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bwm": true
      },
      "source": "vim-snippets/snippets"
    },
    "88ddfc1212a9249e908940f8b2f10277": {
      "content": "bezierTangent(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${0:t});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bezierTangent": true
      },
      "source": "vim-snippets/snippets"
    },
    "88e49e00ecbdd86f1e0a7fb71d64ac05": {
      "content": "border-bottom-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "88f95f6f89fd6d219e1fde1655523bf3": {
      "content": "console.error(${1:object});",
      "doc": "Displays a message in the console and also includes a stack trace from where the method was called",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consoleerror",
      "matches": {
        "base console error": true
      },
      "source": "javascript/base"
    },
    "88fc944d1954a2d497d3cb29dd13fd53": {
      "content": "set ${1:#:axis}label ${2:#:label}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set title '...'",
      "matches": {
        "labelaxis": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "88fd95255dbe7590d1d7b3d3a83b0b63": {
      "content": "return(${0})",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "return",
      "matches": {
        "ret": true
      },
      "source": "vim-snippets/snippets"
    },
    "89002fb0bd9b9f820b1253a26cba25a4": {
      "content": "@ManyToMany\n${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mm": true
      },
      "source": "vim-snippets/snippets"
    },
    "890405c12cb2c631f38f603125d8dc0d": {
      "content": "min-height ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mih": true
      },
      "source": "vim-snippets/snippets"
    },
    "89076d50ebac97085dbca6af01c2705d": {
      "content": "curve(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2}, ${7:x3}, ${8:y3}, ${9:z3}, ${10:x4}, ${11:y4}, ${0:z4});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "3D",
      "matches": {
        "curve": true
      },
      "source": "vim-snippets/snippets"
    },
    "890c49fe9e00612e62c5d2eb14e92095": {
      "content": "($2 *)calloc(${1:N_MEMBERS}, sizeof(${2:TYPE}));\n${0}\nfree(${3:MEM});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "calloc(n, size)",
      "matches": {
        "calloc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "89105ebc713c7358371ce9bec21ac9cf": {
      "content": "font-size ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fz": true
      },
      "source": "vim-snippets/snippets"
    },
    "8915c66cdcff150196541e90bf9103d2": {
      "content": "const [${1:x}, ${2:cycleX}] = useCycle(${3:0}, ${4:50}, ${5:100})",
      "doc": "useCycle(items): CycleState It works similar to useState in React. It is provided an initial array of possible states, and returns an array of two arguments.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-cycle",
      "matches": {
        "framer-motion use-cycle": true,
        "use-cycle": true
      },
      "source": "javascript/framer-motion"
    },
    "89168050ba3d143829d9eb289a4c18dc": {
      "content": "$.unique(${1:array})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "uniq": true
      },
      "source": "snippets/coffee"
    },
    "8919bcc342aeda625369ddfae11bbcd7": {
      "content": "<router-view>$1</router-view>$0",
      "doc": "router-view element",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-routerview",
      "matches": {
        "routerview": true,
        "vue routerview": true
      },
      "source": "javascript/vue"
    },
    "891ed1cd142bba9f3dfffc56c29a3608": {
      "content": "display table-footer-group",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbfg": true
      },
      "source": "vim-snippets/snippets"
    },
    "891fdf806f4eb33d72cf922e89daebfe": {
      "content": "{% if ${1} %}\n\t${0}\n{% endif %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig if",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "8935bde1208ce8496fed95e00d7054e4": {
      "content": "top: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "8937c5acac33195147d801260841f577": {
      "content": "class ${1:${TM_FILENAME_BASE}} extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {};\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a React component class with constructor, empty state, proptypes and export in ES6 module system without imports. (Mostly used when React, Proptypes are provided by webpack provide plugin)",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactWithWebpackDefaults",
      "matches": {
        "rwwd": true
      },
      "source": "vscode-react/snippets"
    },
    "893a92e23a409786acf9b3bfa6dbf63d": {
      "content": "\\node[${1}](${2:name}) ${3};${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\node": true,
        "node": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "893d817d80427c1244cc0f2f4b97faa4": {
      "content": "vertical-align: middle;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "893f18c35e9b1174cff785c2fa22d77e": {
      "content": "text-height text-size",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "89437ddb5dbc7bac3f78564f327838f0": {
      "content": "do\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "8948e78e80b7473979683bd732158e89": {
      "content": "echo CHtml::mailto('${1:text}', '${2:email}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhmt": true
      },
      "source": "vim-snippets/snippets"
    },
    "894ae065bedbcdbc6d61e6a55bfaa208": {
      "content": "${1:definiendum}::\n${2:definiens}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "definition",
      "matches": {
        "def": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "894b654b629ceaac254a0695c0e6e178": {
      "content": "list-style-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisi": true
      },
      "source": "vim-snippets/snippets"
    },
    "894f8e6e8ad63a5b97974c9762edbc48": {
      "content": "for ${1} = ${2}\n\t${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "standard for loop",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "89594f9c93e8606f0f03e019d6833e60": {
      "content": "list-style-image: url($1);$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "list-style-image: url (list)",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "895bbe770da88ffdd1f390260c0c6a30": {
      "content": "removetags:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "removetags": true
      },
      "source": "vim-snippets/snippets"
    },
    "8960b6dd7eca32fd8ad47bf4d72230a1": {
      "content": "expect(${1:})${0};",
      "doc": "",
      "filetype": "javascript-mocha",
      "grammar": "snu",
      "label": "expect(...)",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "89690a97dd445ab44acd8759e6167810": {
      "content": "if !ok {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if !ok { ... }",
      "matches": {
        "ok": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "896a19c7c8444c3957d81a5dce8bb5e0": {
      "content": "font-weight: normal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "8980534095c6f7ce583149823be79fb9": {
      "content": "PropTypes.element.isRequired,",
      "doc": "React element prop type required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-element-required",
      "matches": {
        "prop-types element required": true,
        "ptelr": true
      },
      "source": "javascript/prop-types"
    },
    "8982adb8f82d137f6c5a186d1d403540": {
      "content": "wont_be_within_epsilon ${1:0.1}, ${2:0.1}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wbwe": true
      },
      "source": "vim-snippets/snippets"
    },
    "8992331e9cd82ffb6b386566e7345b41": {
      "content": "place-self: ${1:stretch} ${2:stretch};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps+": true
      },
      "source": "vim-snippets/snippets"
    },
    "89936932e507cea33abb28ae2a2b1b17": {
      "content": "go ${1:funcName}(${0})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "go someFunc(...)",
      "matches": {
        "go": true
      },
      "source": "gosnippets/snippets"
    },
    "89a26ea0ea8af26eb06ee462f9cb85ed": {
      "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
      "doc": "Creates a React component class with PropTypes with connected redux and ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassCompomentReduxPropTypes",
      "matches": {
        "rcreduxp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "89a676db6d2c2d939d5cd5bfe1f8dd71": {
      "content": "{% extends \"${1:template}\" %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "extends",
      "matches": {
        "extends": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "89a9c29562870f06ba39275e9ebab5d0": {
      "content": ":before",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":b": true
      },
      "source": "vim-snippets/snippets"
    },
    "89b895073a63f43d208e099fee90911a": {
      "content": "font-variant: small-caps",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fv:sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "89ca1591628010985ed28714f0935576": {
      "content": "hex(${0:c});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hexadecimal": true
      },
      "source": "vim-snippets/snippets"
    },
    "89ccd2974f437e2d2fe041a0b13a8b8b": {
      "content": "private int ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi-": true
      },
      "source": "vim-snippets/snippets"
    },
    "89d34e6a85858a227fa63331ecc16850": {
      "content": "border-left-width ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlw": true
      },
      "source": "vim-snippets/snippets"
    },
    "89d550702423182f68f27788974d81fa": {
      "content": "$this->refresh();",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yrf": true
      },
      "source": "vim-snippets/snippets"
    },
    "89d7781c2f1369e144429e04c30649c8": {
      "content": "grid: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "g": true
      },
      "source": "vim-snippets/snippets"
    },
    "89d9592c9391e967fb26e9b2068b8ffa": {
      "content": "@slot('${1}')\n    ${2}\n@endslot",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@slot ... @endslot",
      "matches": {
        "slot": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "89ddb64a7d7fe39ac7ac26c5dd214746": {
      "content": "validates_exclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not allowed}\"}, if: proc { |obj| ${7:obj.condition?} }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_exclusion_of if (veif)",
      "matches": {
        "veif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "89e3a82399c488e8a4b40569c58d459c": {
      "content": "- (NSString${$1: *)})${1:#:thing}\n{\n\treturn ${2};\n}\n- (void)set${1}:(NSString${2: *})${3}\n{\n\t${3} = [${3} copy];\n\t[${2} release];\n\t${2} = ${3};\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "str": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "89f3755124c939f7e8a3baf5e5b2639d": {
      "content": "sd(${1:x}${2:, na.rm=${3:FALSE}})",
      "doc": "Standard deviation",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "sd",
      "matches": {
        "sd": true
      },
      "source": "vscode-R/snippets"
    },
    "8a1578b711fde3835acf2fb5fc54415c": {
      "content": "switch (${1}) {\n  ${0}\n}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sw": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a2a5fdea323e82b78d6eeb71f905e02": {
      "content": "package body ${1} is\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "package body {NAME} is {...} end",
      "matches": {
        "package_body": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8a3d0d023f2f8f3b332894226877e66f": {
      "content": "#!/usr/bin/env lua\n$1",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a3d3e60523be59c66a1fb123f343556": {
      "content": "t.date :${1:title}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcda": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a413f862e57a5bbedf638a664182285": {
      "content": "expect(${1:target}).toBeTruthy();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to be truthy (js)",
      "matches": {
        "et": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a4474a4b4dde75299c44cd3d1ae1849": {
      "content": "pluralize:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pluralize": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a47862aac456ab5623f9290b8c8188c": {
      "content": "do\n{\n\t${VISUAL}$0\n} while (${1:true});",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "do loop",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8a4a67911532a65f92c6308c1e64a38a": {
      "content": "defmodule ${1:AppName}Web.${2:ControllerName}Controller do\n\tuse $1Web, :controller\n\t${3}\nend",
      "doc": "",
      "filetype": "phoenix",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cont": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a4afca757c9369133c96bcc51c2c8cd": {
      "content": "${1:FIELDNAME} = models.NullBooleanField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "NullBooleanField",
      "matches": {
        "mnullbool": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8a4c7ca651b2dd9ab70040cf7c6d265c": {
      "content": "(*\n   ${0:TARGET}\n*)",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "multi line comment",
      "matches": {
        "Cc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8a4d21f18edfe1ee9d65870749b803c0": {
      "content": "find_all do |${1:e}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "finad": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a5134f23dbc057142195435fdbcc0b7": {
      "content": "_.toInteger(${value})",
      "doc": "_.toInteger(3.2);\n// => 3\n\n_.toInteger(Number.MIN_VALUE);\n// => 0\n\n_.toInteger(Infinity);\n// => 1.7976931348623157e+308\n\n_.toInteger('3.2');\n// => 3\n\nConverts `value` to an integer.\n\n**Note:** This method is loosely based on\n[`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-tointeger",
      "matches": {
        "lodash tointeger": true
      },
      "source": "javascript/lodash"
    },
    "8a544077e4cf77376746c018ff4a7b31": {
      "content": "_.join(${array}, ${separator})",
      "doc": "_.join(['a', 'b', 'c'], '~');\n// => 'a~b~c'\n\nConverts all elements in `array` into a string separated by `separator`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-join",
      "matches": {
        "lodash join": true
      },
      "source": "javascript/lodash"
    },
    "8a55acbcf7bbc102b3f657df07f68f3a": {
      "content": "<strong>${1:TARGET}</strong>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "strong": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8a62e89d113d70bad389ad6361956c8a": {
      "content": "export const select${1:Feature}${2:Property} = createSelector(\n\tselect$1,\n\t(state: $1State) => state.${3:property}\n);",
      "doc": "Creates an NgRx Selector",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "NgRx Create Selector",
      "matches": {
        "a-ngrx-create-selector": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "8a6397b35ea1867c918c2e0a0a079224": {
      "content": "else if (${1}) {\n\t${2:TARGET}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ei": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8a6524fc4d4872b6eaa8fd595d6d97a8": {
      "content": "{% now \"${1:jS F Y H:i}\" %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "now": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8a66658c6349e207477a0dc303bde489": {
      "content": "int ${1:x} = threadIdx.x + blockIdx.x * blockDim.x;\nint ${3:z} = threadIdx.z + blockIdx.z * blockDim.z;",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Get current X,Z index (2D)",
      "matches": {
        "ixz": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a682707cedc55bcfdc07f227ee55ef4": {
      "content": "<input type=\"submit\" value=\"$2\" $3/>$7",
      "doc": "",
      "filetype": "html_minimal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "submit": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8a6c0c046b6e94f31ad39579574ee8ec": {
      "content": "find_package(${1:library} ${0:REQUIRED})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "find": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a6f78a171cf2a4847a6c486da741868": {
      "content": "logger.info { \"${1:message}\" }$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "logger.info",
      "matches": {
        "logi": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8a75ab28bedf4495ebaf772b7a97ad1c": {
      "content": "if (${1:#:condition})${0:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "if()",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8a7ceb6749281eae7986af2f8b1cc43d": {
      "content": "font-effect none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a7d99f7dea0611d1e43e128fa354cc7": {
      "content": "let rec ${1} =\n\t${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fnr": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a822f7eda068587619205796ca5cae2": {
      "content": "| divided_by: ${1:2}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "divided_by": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a83442c307c29c789a4eb96dbe24121": {
      "content": "elsif (${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a8bd10adb923812ec5baa9bc2dee985": {
      "content": "render action: '${1:action}', layout: '${0:layoutname}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ral": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a917ef3c749a98789649bdbe1306254": {
      "content": "spyOn(${1:object}, '${2:method}')$0;",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "spy on (js)",
      "matches": {
        "s": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a980b7850100737538c61b2663d30d9": {
      "content": "{\n\t block : '${1:name}',\n\t content: '${2:content}'\n}",
      "doc": "",
      "filetype": "javascript-bemjson",
      "grammar": "snu",
      "label": "",
      "matches": {
        "btc": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a996dbdcadb7a6b0158049cc2fb7126": {
      "content": "@moduledoc false",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mdocf": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a9ea56fc5155cd47342f4713baf6346": {
      "content": "list-style-type: square;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "8a9ff2fd1b941610da06dc1252cf281e": {
      "content": "{\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "{ ... }",
      "matches": {
        "block": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8aa2b6ce92ea51d57b5f44886d54af5a": {
      "content": "if isMainModule:\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "if isMainModule: ...",
      "matches": {
        "ifmain": true,
        "main": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8aa7d94983786d50f4f677c56707f140": {
      "content": "<textarea rows=\"${1}\" cols=\"${2}\">\n${3:TARGET}\n</textarea>\n${4}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "textarea": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8aae8514b7003ffe1e23651f6d1e524c": {
      "content": "import styled from 'styled-components/native';",
      "doc": "import styled from 'styled-components/native'",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-import-styled-from-styled-components-native",
      "matches": {
        "imscn": true,
        "styled-components import styled native'": true
      },
      "source": "javascript/styled-components"
    },
    "8aaebe7bb49f44f6b1050661e95583ef": {
      "content": "\\begin{scope}[${1}]\n\t${2:TARGET}\n\\end{scope}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{scope}": true,
        "scope": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8ab2c5e0eef647d4620c5c9374511884": {
      "content": "expect(${1:target}).toBeFalsy();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to be falsy (js)",
      "matches": {
        "ef": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ab302088aa4e47571a14794bf74ee5a": {
      "content": "#!/opt/local/bin/perl\nuse strict;\nuse warnings;\n${1}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "perl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8ab895f8a1fa90b75d86f3a93cc86e09": {
      "content": "println(gl.glGetError());",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl get error",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "8abec8a30328c150790dc8cfb100a9bb": {
      "content": "{% set ${1} %}\n\t${0}\n{% endset %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig set block",
      "matches": {
        "setb": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ac2992a05ee8d66d38b00f51f6d0275": {
      "content": "const axios = require('axios').default;",
      "doc": "require axios",
      "filetype": "axios",
      "grammar": "lsp",
      "label": "axios-require",
      "matches": {
        "axios require": true
      },
      "source": "javascript/axios"
    },
    "8ad16aa3e4a91cfa141080dc8feb2320": {
      "content": "\\begin{align*}\n\t${1:TARGET}\n\\end{align*}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{align*} \\align*": true,
        "align*": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8ad44a2db7e69042f0d7e38a6d96ecba": {
      "content": "class ${1:FormName}(forms.Form):\n\t\"\"\"${2:docstring}\"\"\"\n\t${0}",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "form": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ae0ebd2cedb202ffce10814c61d03a4": {
      "content": "${1:fn} := func() {\n\t${2:${VISUAL}}\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fn := func() { ... }",
      "matches": {
        "anon": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "8ae55e822337e519b6588c1f68ac8d13": {
      "content": "v-once",
      "doc": "Does not expect expression",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-once",
      "matches": {
        "vonce": true,
        "vue v-once": true
      },
      "source": "javascript/vue"
    },
    "8ae78dc199daccc17c520d0c139e97b7": {
      "content": "| abs",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "abs": true
      },
      "source": "vim-snippets/snippets"
    },
    "8aed6c122531c916cb55667c335c3a46": {
      "content": "scan(${1:/pattern/}) { |${2:match}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sca": true
      },
      "source": "vim-snippets/snippets"
    },
    "8aeea3bc580c7937f6a45919f153dc11": {
      "content": "else if ${1:false} {\n    ${0:TARGET}\n}${9}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8af89f45edc82e077b97e65c8df54a22": {
      "content": "${1:obj}.slideToggle('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stoggle": true
      },
      "source": "snippets/javascript"
    },
    "8afdac471f4097b5a04dc3fb12fc9ca6": {
      "content": "repeat\n\t${1:--body}\nuntil ${0:condition}",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "repeat": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b00968b200666cabc5840bec0bc3088": {
      "content": "flex-basis: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxb:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b1993428a73de9c9d3d2c3572052daa": {
      "content": "$.getScript '${1:mydomain.com/url}', (script, textStatus, jqXHR) ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "getscript": true
      },
      "source": "snippets/coffee"
    },
    "8b20cea8853555c09d0b5da2537e04fe": {
      "content": "| truncate: ${1:20}, '${2:...}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "truncate": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b240b70a8e2f6a34f3f0c1b0f47a063": {
      "content": "${1:app}.put('$2', $3);",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "express PUT",
      "matches": {
        "eput": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8b2e19a507d0971c4b007a73f4eb5bc6": {
      "content": "${1:deferred}.promise(${2:target})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dprom": true
      },
      "source": "snippets/coffee"
    },
    "8b3b3be836aa5f42ac397e544d5649d0": {
      "content": "validates_numericality_of",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_numericality_of",
      "matches": {
        "vn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8b41fa559d23c0d74023efe710ff5ff7": {
      "content": "{\n\t:f${0}\n}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eventsmap": true
      },
      "source": "snippets/coffee"
    },
    "8b43f1c4c589fd73cbb57aefc3fe26ea": {
      "content": "\\begin{Vmatrix}\n\t${1:TARGET}\n\\end{Vmatrix}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Vmatrix": true,
        "\\begin{Vmatrix} \\Vmatrix": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8b47f8f9551440d2cc1c50e68b4b3b5c": {
      "content": "template ${1:#:name}(${2}):${3:type} =\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "template": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8b483f434ec4934c89728ad78018165e": {
      "content": "font-weight: bold;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b580d39aa904beb81fe811ec3c26eba": {
      "content": "return ${1} do\n\t${0}\nend return;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "extended return",
      "matches": {
        "return": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8b5f31a70494afaf620fc05ead97708c": {
      "content": "<input type=\"radio\" name=\"${1}\" id=\"${2:$1}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:radio": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b61bf9afbaf5b18db2a41e23dd4a9a4": {
      "content": "{% autoescape ${1:true} %}\n\t$2\n{% endautoescape %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "autoescape",
      "matches": {
        "autoescape": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8b67bc7f719ba200db53a649b3a10b8b": {
      "content": "import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "import-react-pure-component-prop-types",
      "matches": {
        "imrpcp": true,
        "react import purecomponent proptypes": true
      },
      "source": "javascript/react"
    },
    "8b6ef6bbffc12542dfdcd5a4807daf36": {
      "content": "list-style-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b737de0a675dafd8dda6f3b37d0a52a": {
      "content": "validates :${0:attribute}, uniqueness: true",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vu": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b75728223e1bf7f6f58b795eddbe9f9": {
      "content": "class ${1:Class} a where\n\t${0}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b7718a2e1236a5f599367f06f973b7e": {
      "content": "display: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b7795c4279fa09e2574053fa7f5e1f1": {
      "content": "@appear=\"$1\"$0",
      "doc": "@appear=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-appear",
      "matches": {
        "appearevent": true,
        "vue appear": true
      },
      "source": "javascript/vue"
    },
    "8b833b7ff94d2c8b2c6437fbefa3880e": {
      "content": "font-emphasize-position before",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "femp:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b8d8739e027aad6ebca40366dec25e8": {
      "content": "justify-self: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b8fdcc9f58ab6e9f598261e68b21b8d": {
      "content": "afterEach ->\n\t$0",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "after each (coffee)",
      "matches": {
        "aft": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8b910482bd5646db7bf43e22e341707b": {
      "content": "empty-cells: show;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b93082cbaac20ea7472b4c0350f4b14": {
      "content": "_.uniqueId(${prefix})",
      "doc": "_.uniqueId('contact_');\n// => 'contact_104'\n\n_.uniqueId();\n// => '105'\n\nGenerates a unique ID. If `prefix` is given, the ID is appended to it.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-uniqueid",
      "matches": {
        "lodash uniqueid": true
      },
      "source": "javascript/lodash"
    },
    "8b95826fe690e15950ce30a4c769a4c6": {
      "content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "docx": true
      },
      "source": "vim-snippets/snippets"
    },
    "8b963a979ba7a008c5e9f5135eccc02a": {
      "content": "this.${1:service}.${2:function}\n\t.subscribe(${3:arg} => this.${4:property} = ${3:arg});\n$0",
      "doc": "Angular observable subscribe",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "subscribe",
      "matches": {
        "a-subscribe": true,
        "angular subscribe": true
      },
      "source": "javascript/angular"
    },
    "8ba624d8181a104a543dff21afdab098": {
      "content": "place-content: ${1} ${2};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc+": true
      },
      "source": "vim-snippets/snippets"
    },
    "8bac248abb766e0e4e53136225bd3b83": {
      "content": "text-align-last: left;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "8bb358d3c53344a48a4bb4220732e065": {
      "content": "updated () {\n\t${0};\n},",
      "doc": "updated lifecycle method",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle updated",
      "matches": {
        "vupdated": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "8bbeae5e99afb360eda2503b70fb1ff3": {
      "content": "#!/usr/bin/env sh\nset -eu",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "8bcc9920953f985aa594b41ff0093707": {
      "content": "border-bottom-left-radius ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdblrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "8bcf8d10ef2ab9061e8281096aabab53": {
      "content": "procedure ${1:name}(${2:args})\nas\nbegin\n\t${0:-- body}\nend $2;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ppb": true
      },
      "source": "vim-snippets/snippets"
    },
    "8bd75295544700193531d42342080ec0": {
      "content": "lightFalloff(${1:constant}, ${2:linear}, ${0:quadratic});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lightFalloff": true
      },
      "source": "vim-snippets/snippets"
    },
    "8be1be18fbca9b994bf8a80b1d42c5a5": {
      "content": "summary(${1:dataName}, digits = ${2:digits}, maxsum = ${3:maxsum})",
      "doc": "Mean, median, 25th and 75th quartiles, min, and max of variables",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Descriptive statistics summary",
      "matches": {
        "summary": true
      },
      "source": "vscode-R/snippets"
    },
    "8be81d485c9b50781e7092c94b565624": {
      "content": "place-self: end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "8bea43d3559d87a6e9dc28caf9986cd4": {
      "content": "using (${1:resource})\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "using statement",
      "matches": {
        "using": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8beaabc5042d311c03adbdb3436518db": {
      "content": "<%= stylesheet_link_tag ${1::all}, cache: ${0:true} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slt": true
      },
      "source": "vim-snippets/snippets"
    },
    "8bed9c635934083fd75684a3968f639e": {
      "content": "d3.svg.axis()\n  .orient(${1})\n  .scale(${2})",
      "doc": "",
      "filetype": "javascript-d3",
      "grammar": "snu",
      "label": "",
      "matches": {
        "axis": true
      },
      "source": "vim-snippets/snippets"
    },
    "8bf1b1e4eb269f75db2d9ca40bd3c548": {
      "content": "border-bottom-left-image: continue;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbli:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "8bfd32009d68242f0defb2bebd83fddf": {
      "content": "while ${1:#:condition}\n  ${0:TARGET}\nendwhile",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "while endwhile",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8c302bcaab148afa4377fb2bb6197956": {
      "content": "assert_no_difference \"${1:Model}.${2:count}\" do\n\t$0\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "assert_no_difference",
      "matches": {
        "asnd": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8c35dd5ec314b72bca1bcdbc0fd26e07": {
      "content": "componentWillUnmount() {\n\t$0\n}\n",
      "doc": "Invoked immediately before a component is unmounted from the DOM.",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-componentwillunmount",
      "matches": {
        "cwun": true,
        "react componentwillunmount": true
      },
      "source": "javascript/react"
    },
    "8c39720a401777210b32891b5193e962": {
      "content": "(${1:args}) ->\n\t${2}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "8c4bf7ba65774e406857cb166e4830e1": {
      "content": "type ${1} is ${2}\n\twith Default_Value => ${3};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "type with default value",
      "matches": {
        "type_default": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8c4e09d4499ea7e2be7205fd0ae52a42": {
      "content": "fmt.Println(\"${1}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Println(...)",
      "matches": {
        "fn": true
      },
      "source": "gosnippets/snippets"
    },
    "8c58fe1b029db1f46bf8bf7cd21efc19": {
      "content": "<%= link_to '${1:link text...}', controller: '${2:items}', action: '${0:index}' %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lica": true
      },
      "source": "vim-snippets/snippets"
    },
    "8c5ccf76db270405977065d628f06ebf": {
      "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})\n{\n\t${9}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun3": true
      },
      "source": "vim-snippets/snippets"
    },
    "8c67d1ac5e20eb8bfb0eb06419e87117": {
      "content": "<< ${1:EOF}\n\t${0:#:TARGET}\n$1",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h <<": true,
        "heredoc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8c7efd24dd5a2df85b82308216f4fdda": {
      "content": "clear: both;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "8c7f07ae7d8e267cf2582de1bd89038a": {
      "content": "${1:obj}.replaceAll(${2:target})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "repa": true
      },
      "source": "snippets/coffee"
    },
    "8c81011e482086640317d533bfd3a18a": {
      "content": "class $1Admin(admin.ModelAdmin):\n\t'''\n\t\tAdmin View for $1\n\t'''\n\tlist_display = ('$2',)\n\tlist_filter = ('$3',)\n\tinlines = [\n\t\t$4Inline,\n\t]\n\traw_id_fields = ('$5',)\n\treadonly_fields = ('$6',)\n\tsearch_fields = ['$7']\nadmin.site.register($1, $1Admin)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Model Admin View",
      "matches": {
        "adminview": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8c88af1bf6a99cc773cb8fbb974a094f": {
      "content": "const ${1:name} = ref(${2:initialValue})",
      "doc": "Takes an inner value and returns a reactive and mutable ref object.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v3ref",
      "matches": {
        "vue v3ref": true
      },
      "source": "javascript/vue"
    },
    "8c9431a1fe57b3d209154201f26d6dca": {
      "content": "define \"${1:#name}\", [\"${2:#dependencies1}\"], (${3:#dependencies2}) ->\n\t${0:TARGET}",
      "doc": "",
      "filetype": "requirejs_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defn": true
      },
      "source": "snippets/coffee"
    },
    "8c9aaf1b3711e3dce3b3d819e6e8dce1": {
      "content": "$this->assertArraySubset(${1:$subset}, ${2:$array});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertArraySubset($subset, $array)",
      "matches": {
        "assub": true
      },
      "source": "vim-snippets/snippets"
    },
    "8c9d7405437a2fdb9d41513361b43e7e": {
      "content": "\\\\item ${1}\n\t${0:]i}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\item (recursive)",
      "matches": {
        "]i": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ca1971394662eca17ccaf804fb3d6a7": {
      "content": "LOGGER.critical(${0:msg})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lc": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ca936db54daa14ab59bb5018e17970d": {
      "content": "try {\n\t${0:${VISUAL}}\n} catch(${1:Exception} ${2:e}) {\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "8cb29a9680d27a0947d9015f243002b4": {
      "content": "function ${1:void} ${2:name}(${3});\n\t${0}\nendfunction: $2",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "8cb32e6b2da1e93d6e89043e926e8aa2": {
      "content": "Ada.Text_IO.Get(${1});\n${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "Ada.Text_IO.Get",
      "matches": {
        "get": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8cb8cd1d3ce303a00ec3626058bc8f1b": {
      "content": "content: counter(${0})",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "8cbb159c5c4510e33531e513d86a3712": {
      "content": "go ${1:funcName}(${0})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "goroutine named function",
      "matches": {
        "g": true
      },
      "source": "vim-snippets/snippets"
    },
    "8cbec01a841fe1216175d5ef100afe24": {
      "content": "computed: {\n\t${1:name}() {\n\t\treturn this.${2:data} ${0}\n\t}\n},",
      "doc": "computed value",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-computed",
      "matches": {
        "vcomputed": true,
        "vue computed": true
      },
      "source": "javascript/vue"
    },
    "8cc351a4a89e5c2262164555c64165da": {
      "content": "border-style ridge",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "8cd249f6dd65e79ebffe70f86dfd496b": {
      "content": "display: inline-block",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:ib": true
      },
      "source": "vim-snippets/snippets"
    },
    "8cd4da6c2acee3f792ab5f39480e9aff": {
      "content": "white-space-collapse: loose;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "8cd619d3a056e9aab838fe8f73945414": {
      "content": "${1:obj}.mouseout (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mout": true
      },
      "source": "snippets/coffee"
    },
    "8cd7cbfb6938359fc4c194805e9c1907": {
      "content": "echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${0:});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pdd": true
      },
      "source": "vim-snippets/snippets"
    },
    "8cdab2ca0d75ad3f0b03b142e78ec084": {
      "content": "reinterpret_cast<${1}>(${2})${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "reinterpret_cast<>()",
      "matches": {
        "reinterpret_cast": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8cdf26c4ce9ddc0ec6e2cf0de0dc1af1": {
      "content": "border-bottom-right-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbri:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ce15703ba187cad201f966e4899b792": {
      "content": "|> Seq.map (fun ${1} -> ${0})",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "smap": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ce19c22c1d1bf6c39adb8e3113ad5e4": {
      "content": "align-self ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ce3a9c112c3d170f384ec4e44f039dd": {
      "content": "grid-auto-flow: dense;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "8cee1976948681273867d94c9108204f": {
      "content": "t.test(${1:x}, ${0:y})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt": true
      },
      "source": "vim-snippets/snippets"
    },
    "8cfcfeba427a03fd0fdd3408ecca2eba": {
      "content": "if (${1}) {\n\t${2}\n} else {\n\t${0}\n}",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d0600777182460b3e768b7746bdc27c": {
      "content": "height: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h": true,
        "height": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8d06d316a6c80e27928a647c0ae85346": {
      "content": "do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d0fbbd9963e17e69aaa70bfa9263de0": {
      "content": "font-smooth: always;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm:aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d10f0f36580c3aba54b743368208f08": {
      "content": "factor(${1:x})",
      "doc": "Factor",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "fac",
      "matches": {
        "factor": true
      },
      "source": "vscode-R/snippets"
    },
    "8d1965d7fa5f34cb1b913f92c7003d94": {
      "content": "library(cluster)\nclara(${1:xData}, k = ${2:k}, metric = ${3:metric}, stand = ${4:stand}, samples = ${5:samples})",
      "doc": "Cluster data into k clusters (library: cluster)",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Clustering",
      "matches": {
        "clara": true
      },
      "source": "vscode-R/snippets"
    },
    "8d21189040ff946ca8abe2b7bd0d8361": {
      "content": "$scope.$broadcast '${1:eventName}', ${2:eventArgs}\n${3}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$b": true
      },
      "source": "snippets/coffee"
    },
    "8d261e7d1283750616b270e5eb468541": {
      "content": "{% extends '${1:#:template}' %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% extends ... %}",
      "matches": {
        "ext": true,
        "extends": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8d36a8a9a817c431e2e3d42d831c9fbf": {
      "content": "widows: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wid": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d41c899b3db8860d871188cf315ce58": {
      "content": "- (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Method",
      "matches": {
        "M": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8d4277bfc0f9f5234b8f4a144ba87279": {
      "content": "while (${1:/* condition */}) {\n  ${0}\n}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d42af1c0dbd8a889d6346c7bddf23e4": {
      "content": "{% embed \"${1}\" %}\n\t${0}\n{% endembed %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig embed",
      "matches": {
        "embed": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d45f741ae18f4f852670339a3fb9f1f": {
      "content": "func Benchmark${1:name}(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t${2}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "benchmark function",
      "matches": {
        "bench": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d5b127e0595ce6d3ce3dc53eda44429": {
      "content": "border-style: dot-dash;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:dtds": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d628997d74d2905062c26494b20e42b": {
      "content": "id=\"${1}\"${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "id": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8d64de073fdfd0fa08324a70a17b5fcc": {
      "content": "{{-- ${1} --}}",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "{{-- comments --}}",
      "matches": {
        "comment": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8d66d1ce08130d48952fb070a9cfe81c": {
      "content": "\\begin{vmatrix}\n\t${1:TARGET}\n\\end{vmatrix}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{vmatrix} \\vmatrix": true,
        "vmatrix": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8d6dfa9d4a7bd11cd5e3030997ad0d16": {
      "content": "<transition-group$1>\n$2\n</transition-group>",
      "doc": "transition-group element",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-transition-group",
      "matches": {
        "transitiongroup": true,
        "vue transition-group": true
      },
      "source": "javascript/vue"
    },
    "8d6e2339bb19d4d6e737f6051759cc38": {
      "content": "${1:obj}.delegate '${2:selector expression}', '${3:event name}', (${4:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dele": true
      },
      "source": "snippets/coffee"
    },
    "8d81af9770bc01277d28636e05a11c48": {
      "content": "find_all { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fina": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d81dbb98d2cd82e3b0c1706364b0ba9": {
      "content": "-moz-border-image url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:m+": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d8e1584a1a565e929ee3d91538c628f": {
      "content": "exp(${0:value});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d96806aad3734029839ab6200f31dee": {
      "content": "border: ${1:1px} ${2:solid} #${3:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bd+": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d99c0aac159a4b091172b9bdbaa491e": {
      "content": "%table\n\t%tr\n\t\t%th\n\t\t\t${1:headers}\n\t%tr\n\t\t%td\n\t\t\t${0:headers}",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "8d9d3b6927310fb93151b497b2086a82": {
      "content": "list-style-type: circle;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "8da29d45f920103357ad84fe688e947e": {
      "content": "white-space-collapse: break-all;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:ba": true
      },
      "source": "vim-snippets/snippets"
    },
    "8da3c8aac9306eb16b58770cbfd9285d": {
      "content": "= number_to_currency(${1})",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ntc": true
      },
      "source": "vim-snippets/snippets"
    },
    "8db090dd7ba5618243ca49fa825fe2f7": {
      "content": "mailalias { \"${1:localpart}\":\n\trecipient => \"${0:recipient}\",\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mailalias": true
      },
      "source": "vim-snippets/snippets"
    },
    "8db4fda7aa94a57d82c9d78016114b78": {
      "content": "import React, { ReactElement } from 'react'\n\ninterface Props {\n\t\n}\n\nexport default function ${1:${TM_FILENAME_BASE}}({}: Props): ReactElement {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
      "doc": "Creates a React Functional Component with ES7 module system and TypeScript interface",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typeScriptReactFunctionalComponent",
      "matches": {
        "tsrfc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "8db9f274621267f5afdfa6305e1b3a0d": {
      "content": "display table-header-group",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbhg": true
      },
      "source": "vim-snippets/snippets"
    },
    "8dc1534cf5f9e005796e70370b0a9c65": {
      "content": "% for ${1:i} in ${2:iter}:\n\t${0:}\n% endfor",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "8dc86a05132bcc1a6cdd1a6819f33004": {
      "content": "@include('$1')",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@include directive",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8dce42df408d072be70598c5f81309cb": {
      "content": "margin-bottom: ${1:20px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "margin-bottom: length (margin)",
      "matches": {
        "margin": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8dd1da1bc72bf48ece5a51d118cb3377": {
      "content": "@import '${0}'",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@i": true
      },
      "source": "vim-snippets/snippets"
    },
    "8dd43e2cfd3c2817f1914026d64cc89b": {
      "content": "elif ${1:#:condition}:\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "elif ...: ...",
      "matches": {
        "elif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8dd51d30524a6b11e1fbf14879297450": {
      "content": "overflow-style marquee",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:mq": true
      },
      "source": "vim-snippets/snippets"
    },
    "8de56adf2daa61c66bdcc84eb39457aa": {
      "content": "import processing.opengl.*;\nimport javax.media.opengl.*;\nPGraphicsOpenGL pgl;\nGL gl;\nvoid setup(){\n\tsize( ${1:300}, ${2:300}, OPENGL );\n\tcolorMode( RGB, 1.0 );\n\thint( ENABLE_OPENGL_4X_SMOOTH );\n\tpgl = (PGraphicsOpenGL) g;\n\tgl = pgl.gl;\n\tgl.setSwapInterval(1);\n\tinitGL();\n\t${3}\n}\nvoid draw(){\n\tpgl.beginGL();\n\t\t${4}\n\tpgl.endGL();\n\tgetOpenGLErrors();\n}\nvoid initGL(){\n\t${0}\n}\nvoid getOpenGLErrors(){\n\tint error = gl.glGetError();\n\tswitch (error){\n\t\tcase 1280 :\n\t\t\tprintln(\"GL_INVALID_ENUM - An invalid enumerant was passed to an OpenGL command.\");\n\t\tbreak;\n\t\tcase 1282 :\n\t\t\tprintln(\"GL_INVALID_OPERATION - An OpenGL command was issued that was invalid or inappropriate for the current state.\");\n\t\tbreak;\n\t\tcase 1281 :\n\t\t\tprintln(\"GL_INVALID_VALUE - A value was passed to OpenGL that was outside the allowed range.\");\n\t\tbreak;\n\t\tcase 1285 :\n\t\t\tprintln(\"GL_OUT_OF_MEMORY - OpenGL was unable to allocate enough memory to process a command.\");\n\t\tbreak;\n\t\tcase 1283 :\n\t\t\tprintln(\"GL_STACK_OVERFLOW - A command caused an OpenGL stack to overflow.\");\n\t\tbreak;\n\t\tcase 1284 :\n\t\t\tprintln(\"GL_STACK_UNDERFLOW - A command caused an OpenGL stack to underflow.\");\n\t\tbreak;\n\t\tcase 32817 :\n\t\t\tprintln(\"GL_TABLE_TOO_LARGE\");\n\t\tbreak;\n\t}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "opengl": true
      },
      "source": "vim-snippets/snippets"
    },
    "8de8b4f2f4df7377f1d9a74cdb3f5dc1": {
      "content": "_.once(${func})",
      "doc": "var initialize = _.once(createApplication);\ninitialize();\ninitialize();\n// => `createApplication` is invoked once\n\nCreates a function that is restricted to invoking `func` once. Repeat calls\nto the function return the value of the first invocation. The `func` is\ninvoked with the `this` binding and arguments of the created function.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-once",
      "matches": {
        "lodash once": true
      },
      "source": "javascript/lodash"
    },
    "8dec4b9a8ab83b18573c2646f6f4cf4f": {
      "content": "class ${1:MODELNAME}(models.Model):\n\t${2:# TODO: Define fields here}\n\n\tclass Meta:\n\t\tverbose_name = \"$1\"\n\t\tverbose_name_plural = \"$1s\"\n\n\tdef __str__(self):\n\t\treturn super($1, self).__str__()\n\n\tdef save(self):\n\t\treturn super($1, self).save()\n\n\tdef get_absolute_url(self):\n\t\treturn ('')\n\n\t${3:# TODO: Define custom methods here}\n",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Model",
      "matches": {
        "modelfull": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8decfb066ecdc583213d535fcf53718a": {
      "content": "[[NSUserDefaults standardUserDefaults] setObject:${1:object} forKey:${2:key}];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "WriteDefaultsValue",
      "matches": {
        "wdef": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8dfa09a4f484d11b042954fab5eeb4c8": {
      "content": "border: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bd": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e0ca73f61d4b91ac2a4c947c45caf4b": {
      "content": "const ${1:cx} = ${2:classNames}.bind(styles);",
      "doc": "",
      "filetype": "classnames",
      "grammar": "lsp",
      "label": "classnames-bind-usage",
      "matches": {
        "classnames bind usage": true
      },
      "source": "javascript/classnames"
    },
    "8e12af429c8a9a14f10d139278d9e40f": {
      "content": "export ${0}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "expt": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e16a003f8f806008bd213ccbe7333f0": {
      "content": "do\n  ${1:TARGET}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "do...end",
      "matches": {
        "do": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8e23394b1d28c0542affc5b3ae1355d4": {
      "content": "$.trim(${1:str})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$trim": true
      },
      "source": "snippets/javascript"
    },
    "8e2d91c1ccb6b2da0e184f2cb45e0945": {
      "content": "margin-bottom: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e3663a50491ffddc74a0ac6dbe4323e": {
      "content": "white-space: ${1:normal/pre/nowrap};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "white-space:  normal:pre:nowrap (white)",
      "matches": {
        "white": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8e4eaf3ef5b733a99c611b2a91feec75": {
      "content": "\\${2:${0:default}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${2:default}",
      "matches": {
        "2:": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8e4f44a455d2f5debe17857e2ce93e9a": {
      "content": "\"org.mortbay.jetty\" % \"jetty\" % \"${0:version}\" % \"test->default\",",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jettyjar": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e57b0b6dad9a50a9fa3aabd3130169e": {
      "content": "Run Keyword If All Critical Tests Passed    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword If All Critical Tests Passed",
      "matches": {
        "rkiactp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8e5ece3294b806d039c8d09ac4dbdefd": {
      "content": "<table id=\"${1}\">\n\t${0}\n</table>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "table#": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e6bd12aecb4e15f9a2ffc37f99a50bf": {
      "content": "for ${1:needle} in ${2:haystack}; do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fori": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e6f73c609b4389ad09cb6b3d81a8dbf": {
      "content": "\\path[${1}] ${2};${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\path": true,
        "path": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8e78aa288e4f2b5a9d55e7a0168790a7": {
      "content": "max-height: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mah": true,
        "max-height": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8e7bc027e310b6845ebdb281df6ced3e": {
      "content": "{% filter ${1} %}\n\t${0}\n{% endfilter %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filter": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e83eb2bf9eecfadbe7a717548434473": {
      "content": "dispatch(${1:key},${2:data})",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-dispatch-event",
      "matches": {
        "svdpe": true,
        "svelte dispatch event": true
      },
      "source": "javascript/svelte"
    },
    "8e84cdf352e2a57f887274d31e886a38": {
      "content": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
      "doc": "Export default function in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportDefaultFunction",
      "matches": {
        "edf": true
      },
      "source": "vscode-javascript/snippets"
    },
    "8e871ee7467f653f791bb3f7eb2b9400": {
      "content": "try {\n\t${0:${VISUAL}}\n} catch(${1:Exception} ${2:e}) {\n} finally {\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tryf": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e8b19499eff7301bfbd2f2a582733b1": {
      "content": "border-bottom-style ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbs": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e8d315d6a0b03fe94a52155cb33b618": {
      "content": "while ${1:true}\n    ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "while ... end",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8e8f93ee663d34b326beffba85c6730e": {
      "content": "logger.info { '${1:message}' }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "logi": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e9024f9fdca1efa5d8ad7445bc1c6d3": {
      "content": "<form>\n${1:TARGET}\n</form>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "form": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8e947d4f84ad13eca504fa7e2f5a2b78": {
      "content": "sq(${0:value});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sq": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e96b1399f893463a1b1cc2eb3492b6e": {
      "content": "${1:(jpeg,bmp,png,tiff)}(filename = '${2:filename}', width = ${3}, height = ${4}, unit = '${5}')\n${0:plot}\ndev.off()",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img": true
      },
      "source": "vim-snippets/snippets"
    },
    "8e9b82c322a7243d29131a347cee4e9b": {
      "content": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
      "doc": "DEPRECATED!!!. Invoked when a component is receiving new props. This method is not called for the initial render.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentWillReceiveProps",
      "matches": {
        "cwr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "8e9c4f3c2ba880d42039a956985f3a72": {
      "content": "using ${1:#:path};${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "import": true,
        "using_import": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8ea4ce39502991e5d86f62f081bc453d": {
      "content": "${1:slice} = append($1, ${0:value})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "slice = append(slice, value)",
      "matches": {
        "ap=": true
      },
      "source": "gosnippets/snippets"
    },
    "8eba92e28f4ee234e8aa58226d24af65": {
      "content": "archive { \"${1:filename}\":\n\tensure     => ${2:present},\n\turl        => \"http://${3:url}\",\n\textension  => \"${4:tgz}\",\n\ttarget     => \"${5:target}\",\n\tchecksum   => ${6:false},\n\tsrc_target => \"${7:/tmp}\",\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "archive": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ebe90f98d5701939d004b089c67510d": {
      "content": "when {\n\tchangelog '${1:changelog}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whenchangelog": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ec2eb935b293392e28b678c22cb5ae7": {
      "content": "border-color: #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdc": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ed2109ae8044766a65f203485e49820": {
      "content": "each_key do |${1:key}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eakd": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ed2d36d47dc133751c9365b74eba739": {
      "content": "{% block ${1:blockname} %}${VISUAL}{% endblock $1 %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iblock": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8ed59a4465ebe7437f08e6ce8a658cb8": {
      "content": "tan(${0:rad});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tan": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ed78a9c9ec90412e5f75f7a529d968c": {
      "content": "$this->${1:method}()->shouldNotEqual(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotEqual('value')",
      "matches": {
        "snequal": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8ed7c768406ef51c54e5237f6d149116": {
      "content": "_.isSet(${value})",
      "doc": "_.isSet(new Set);\n// => true\n\n_.isSet(new WeakSet);\n// => false\n\nChecks if `value` is classified as a `Set` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isset",
      "matches": {
        "lodash isset": true
      },
      "source": "javascript/lodash"
    },
    "8edc6e77738dd89768e37c8a9bd2fe86": {
      "content": "justify-content: end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "8edfe1acffacc41bbcd14acae4f66bdc": {
      "content": "@see ${0:#:reference}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "see": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8edff595250507ed6fd9b544de7dc01d": {
      "content": "<style lang=\"stylus\" scoped>\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with stylus scoped",
      "matches": {
        "style_with_stylus_scoped": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8ee6d04324c786cad55cc32262f7cba6": {
      "content": "text-transform lowercase",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ee7960920727c0434a6da0c632125aa": {
      "content": "${1:obj}.add('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "add": true
      },
      "source": "snippets/javascript"
    },
    "8eeda3d0807724a586d4196076e24537": {
      "content": "<Link href=\"${1:#}\">\n  <a>${2:content}</a>\n</Link>",
      "doc": "Link accepts the following props: href, as, passHref, prefetch, replace, scroll, shallow",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-link",
      "matches": {
        "next link": true
      },
      "source": "javascript/next"
    },
    "8effbaf48b5e65920585ab16f5e68c40": {
      "content": "dist(${1:x1}, ${2:y1}, ${4:x2}, ${0:y2});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dist": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f01daf8c4789208c1d0043d5e0d8097": {
      "content": "if ($1) {\n\t${2:# body...}\n}\nelse {\n\t${3:# else...}\n}\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "Conditional if..else (ife)",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8f0c7de18363a1d1cbbed9cc7334e78c": {
      "content": "else\n\t${1}",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f11bea6be7a81d36cd6fc67c92e52d9": {
      "content": "else\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f16846ad578aece4f17b21ac3f2b539": {
      "content": "${${1:}}",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "$",
      "matches": {
        "$": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8f18a49e4ec41fca5f3555d29aa2f6cd": {
      "content": "(defprotocol ${1:name}\n\t${0:code})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defp": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f1a8da7be9331676119a38c8d8e07e2": {
      "content": "import { use$1 } from 'react';",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "import React hooks",
      "matches": {
        "irh": true
      },
      "source": "snippets/javascript"
    },
    "8f1b1bfaaffd98546363f8c55724b8a9": {
      "content": "@safe const pure nothrow",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "@safe const pure nothrow (scpn)",
      "matches": {
        "scpn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8f1f21ce6090a0b17ea0d91afac4baba": {
      "content": "components: {\n\t${1:New},\n},",
      "doc": "Import one component into another, within export statement",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-import-into-the-component",
      "matches": {
        "vcomponents": true,
        "vue import into the component": true
      },
      "source": "javascript/vue"
    },
    "8f214465cfd108a790e1d257325d97ef": {
      "content": "each_line do |${1:line}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eald": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f2328283cd2be2799e2991533d2a03c": {
      "content": "System.out.println(${1});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "println": true,
        "sout": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8f2c72f22c9c784a10ad84cb6913cc53": {
      "content": "border-left ${1:1px} ${2:solid} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdl+": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f340449f0701d2a4f7055c00ed25773": {
      "content": "static propTypes = {\n$0\n}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "staticPropTpyes",
      "matches": {
        "ptypes": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "8f38c69774995c17479508ed7fc38748": {
      "content": "override",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "over": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f54fc38df1dd0d3378c7e0fc95658c9": {
      "content": "_.noop()",
      "doc": "_.times(2, _.noop);\n// => [undefined, undefined]\n\nThis method returns `undefined`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-noop",
      "matches": {
        "lodash noop": true
      },
      "source": "javascript/lodash"
    },
    "8f5726dbeccb0ea2b464927990badb8b": {
      "content": "import { PreloadingStrategy, Route } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\nexport class PreloadSelectedModulesList implements PreloadingStrategy {\n\tpreload(route: Route, load: Function): Observable<any> {\n\t\treturn route.data && route.data['${1:preload}'] ? load() : of(null);\n\t}\n}\n$0",
      "doc": "Angular opt-in preload strategy",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-opt-in-preload-strategy",
      "matches": {
        "a-preload-opt-in-strategy": true,
        "angular opt-in preload strategy": true
      },
      "source": "javascript/angular"
    },
    "8f693f07d8926725ce681f6dfad495d3": {
      "content": "type ${1:NewName} = $2;",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Type alias",
      "matches": {
        "ty": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f70b512cf6e15b7794fa55c717da411": {
      "content": "assert(${1:condition});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asr": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f72d3318df53c4e451598733115be5a": {
      "content": "t.text :${1:title}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create text column",
      "matches": {
        "tct": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8f7a6f37283644749d96474915b8581b": {
      "content": "${1|transition,in,out|}:${2:name}|${3:local}={${4:params}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-transition-all",
      "matches": {
        "svelte transition all": true,
        "svta": true
      },
      "source": "javascript/svelte"
    },
    "8f7d8404acf0e8c3d717f4fb00525eeb": {
      "content": "= link_to ${1:name}, ${2:dest}",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lt": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f83ce7e7068d89686228c88cff75f0d": {
      "content": "printf(\"${1:} = %${2}\\n\", $1);",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prx": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f8c5d93695c001e063bc4f06d345a00": {
      "content": "white-space: pre-wrap;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:pw": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f925e109d65e5f479e59dbe8ccbdcfb": {
      "content": "\\${${0:interpolation${VISUAL}}\\}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "${interpolation}",
      "matches": {
        "int": true
      },
      "source": "vim-snippets/snippets"
    },
    "8f933d0af9abe352a645a50966eb09be": {
      "content": "<input type=\"checkbox\" name=\"${1}\">${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inputcheckbox": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8fa7290525a62f32dcd3e1323b3f1f38": {
      "content": "gotoAndPlay(${1});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8fa79c6834b12116b8bec31cff5fee9e": {
      "content": "? ${1:trueExpression} : ${2:falseExpression}\n${0}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "?": true
      },
      "source": "vim-snippets/snippets"
    },
    "8fa7b1238c7e861c8a46d4be6262f9a9": {
      "content": "case ${1} of\n\t${2} ->\n\t\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "8fa98e90503c2395d86d8a174c5c6193": {
      "content": "type ${1:Type} struct {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "type T struct { ... }",
      "matches": {
        "st": true
      },
      "source": "gosnippets/snippets"
    },
    "8fb0760ace7c513ed916c978a67c0ebd": {
      "content": "t.date :${1:title}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.date (tcda)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8fb0e4a05fd4c9540da6db6f0a9c014a": {
      "content": "${1:deferred}.fail(${2:callbacks})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dfail": true
      },
      "source": "snippets/coffee"
    },
    "8fba5781a6802d028a3ad946d53787ed": {
      "content": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms})\n",
      "doc": "Executes the given function after the specified delay in ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "setTimeOut",
      "matches": {
        "sto": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "8fba91bc072b5eefabd74e8e15fd04a6": {
      "content": "{% call ${1:name}(${2:args}) %}\n\t$3\n{% endcall %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "call",
      "matches": {
        "call": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8fbb09259d62a47ccb369a2bf5d1ffd5": {
      "content": "+ (void)initialize\n{\n\t[[NSUserDefaults standardUserDefaults] registerDefaults:[NSDictionary dictionaryWithObjectsAndKeys:\n\t\t$0@\"value\", @\"key\",\n\t\tnil]];\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Initialize Implementation (I)",
      "matches": {
        "I": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8fc736caa728783053339fc9305ef1fd": {
      "content": "\\label{${1}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\label": true,
        "label": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8fc927aa8cf2b115656bab40179a5c50": {
      "content": "case ${1:/*value*/}:\n\t$2\n\tbreak;",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "case (case)",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "8fcaba6c688a62064117d24470e14abf": {
      "content": "main : Program Never ${2:Model} ${3:Msg}\nmain =\n\t${4:Html.}program\n\t\t{ init: ${6:( model, Cmd.none )}\n\t\t, update: ${7:update}\n\t\t, subscriptions: ${8:subscriptions}\n\t\t${9:, view: ${10:view\\}}\n\t\t}\n${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "main : Program",
      "matches": {
        "main": true,
        "prog": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8fcc8d72a0edd7779112dd85a769286e": {
      "content": "$this->db->or_where(\"${1:key}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_db-or_where": true
      },
      "source": "vim-snippets/snippets"
    },
    "8fcdbbbdd5be201186d166f36bed54b9": {
      "content": "spotLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:x}, ${5:y}, ${6:z}, ${7:nx}, ${8:ny}, ${9:nz}, ${10:angle}, ${0:concentration});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "spotLight": true
      },
      "source": "vim-snippets/snippets"
    },
    "8fd0452dbd41b78c6e4326c17853598d": {
      "content": "for ${1:needle} in ${2:haystack} ; do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fori": true
      },
      "source": "vim-snippets/snippets"
    },
    "8fda859bca91d30b293b1c614f9f2fa6": {
      "content": "echomsg string([${0:TARGET}])",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "debug-echomsg",
      "matches": {
        "p": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "8fe57efdf7172813f86877f8a57d5c35": {
      "content": "[ngStyle]=\"{${1:style}: ${2:expression}}\"",
      "doc": "Angular ngStyle",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngStyle",
      "matches": {
        "a-ngStyle": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "8ffa307d9d8751e9939266ae057c2373": {
      "content": "border-right: ${1:1px} ${2:solid} #${3:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdr+": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ffcc96ee72499ba177980e522499994": {
      "content": ".. important::\n\t${0:this is importatnt}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp:": true
      },
      "source": "vim-snippets/snippets"
    },
    "8ffd11d5e3eb3efa0e7a3fe3d74a2273": {
      "content": "fn ${1:function_name}(${2})${3} {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Function definition",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "900a18bb738ca8fc45b281d29b0977fd": {
      "content": "$this->db->insert(\"${1:table}\", $${2:data});${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_db-insert": true
      },
      "source": "vim-snippets/snippets"
    },
    "901093a6a71bae51f73b1c12ca873372": {
      "content": "console.log ${1:\"${2:msg}\"}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Log",
      "matches": {
        "log": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9018df0904115a9cb9c1eb3055999909": {
      "content": "const ${1:name} = reactive({\n\t${2:count}: ${3:0}\n})",
      "doc": "Set reactive property - Vue Composition API",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v3reactive",
      "matches": {
        "vue v3 reactive": true
      },
      "source": "javascript/vue"
    },
    "901a2a0c983440771b20da5501d1273f": {
      "content": "import React from 'react'\n\nexport const ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
      "doc": "Creates a React Arrow Function Component with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactArrowFunctionComponent",
      "matches": {
        "rafc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "902352477948c12a1629d473a235a2a8": {
      "content": "for ${1:i} in ${2:#:words}; do\n\t${0:TARGET}\ndone",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9024e28cc4cb6256f463ad3f63de7ee0": {
      "content": "include::${1:example.doc}[]${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "include::example.doc",
      "matches": {
        "inc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "902577a7c062c3ce33fd380f09646ad2": {
      "content": "use strict;\nuse warnings;",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "strwar": true
      },
      "source": "vim-snippets/snippets"
    },
    "9027d6145c518d75da467b5f46e75fbb": {
      "content": "form_upload(\"${1:name}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_upload": true
      },
      "source": "vim-snippets/snippets"
    },
    "902f1fbed030cd82d833825248da2925": {
      "content": "t.decimal :${1:title}${2:${3:, precision: ${4:10}}${5:, scale: ${6:2}}}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.decimal (tcd)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9034863cfbb4c627f1d55f4a70e6ad3a": {
      "content": "#line ${0:#:number}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "line": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9042b0706edcc2531d66a286d7d6aca9": {
      "content": "text-emphasis: accent;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:ac": true
      },
      "source": "vim-snippets/snippets"
    },
    "904429b8cb78f8bea081f4eb161225b3": {
      "content": "ifeq (${1:cond0}, ${2:cond1})\n\t${3:${VISUAL}}\nelse\n\t${0}\nendif",
      "doc": "",
      "filetype": "make",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "90474afbfeaccc1ecbe63d04369d4b65": {
      "content": "expect(${1:target}).not.toBeFalsy();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to be falsy (js)",
      "matches": {
        "notf": true
      },
      "source": "vim-snippets/snippets"
    },
    "904ae1ae7243174d13164c0d7a34c0fa": {
      "content": "func ${1:name}(${2:#:arguments}) -> ${3:Int}${0}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "func name(...) -> Type { ... }",
      "matches": {
        "func": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "904bb3f0cfc9033d357621aa6eab12bf": {
      "content": "axios.interceptors.response.use(function (response) {\n\t${1:do something}\nreturn response;\n}, function (error) {\n\t${2:do something}\n$return Promise.reject(error);\n});",
      "doc": "You can intercept responses before they are handled by then or catch.",
      "filetype": "axios",
      "grammar": "lsp",
      "label": "axios-interceptors-response",
      "matches": {
        "axios interceptors response": true
      },
      "source": "javascript/axios"
    },
    "904dfb643b7996181f692694d52665b3": {
      "content": "<base href=\"${1}\" target=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "base": true
      },
      "source": "vim-snippets/snippets"
    },
    "904f0e08937ba08356eaaa47abc2c8d5": {
      "content": "Import library    Dialogs\nPause execution",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Pause test execution",
      "matches": {
        "pause": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "904fa467e6b179871471f678f7c38eae": {
      "content": "while getopts '${1:o}' ${2:opts}\ndo\n\tcase $$2 in\n\t${3:o0})\n\t\t${0:#staments};;\n\tesac\ndone",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "go": true
      },
      "source": "vim-snippets/snippets"
    },
    "906e15e4016bd44b031d8aa4369da5cb": {
      "content": "#[cfg(test)]\nmod tests {\n\tuse super::${1:*};\n\ttest${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Test module",
      "matches": {
        "testmod": true
      },
      "source": "vim-snippets/snippets"
    },
    "90763ac14f2f3318c05ea914d5826e9b": {
      "content": "${1:obj}.prevAll('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "preva": true
      },
      "source": "snippets/coffee"
    },
    "907dc166b94b7998cf1f5c9f66424c1d": {
      "content": "<address>\n\t${0}\n</address>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "address": true
      },
      "source": "vim-snippets/snippets"
    },
    "908563bda742640cfc221d49bfb5d209": {
      "content": "_.take(${array}, ${n})",
      "doc": "_.take([1, 2, 3]);\n// => [1]\n\n_.take([1, 2, 3], 2);\n// => [1, 2]\n\n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.take([1, 2, 3], 0);\n// => []\n\nCreates a slice of `array` with `n` elements taken from the beginning.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-take",
      "matches": {
        "lodash take": true
      },
      "source": "javascript/lodash"
    },
    "908cf4e25ea44d8c4bd06dab404cbfe2": {
      "content": "t.remove :${0:column}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trc": true
      },
      "source": "vim-snippets/snippets"
    },
    "908e7d93ff7f2f6c54ce84f04571a41b": {
      "content": "_Static_assert(${1:#:condition}, ${2:#:message});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_Static_assert": true,
        "_static_assert": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9091fd0b0517a20782c201766d2f528b": {
      "content": "default:\n    ${0:TARGET}\n    break;",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "default": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "909f97726a9a991f6d6212b42a5b5bf5": {
      "content": "<th>${1:TARGET}</th>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "90ad065601868b0258a92da69ef5d1d0": {
      "content": "\\item[${1}] ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "itd": true,
        "item[ \\item[": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "90b10e0be6c5f89afa0f4f70a8cedeee": {
      "content": "foreach (${1:var} ${2:entry} in ${3})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "90bb7d5e8c85da06348a1f44e843f483": {
      "content": "-webkit-border-image: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "90cd37704d10c7618dac581328455f6e": {
      "content": "render layout: \"${1:layoutname}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (layout) (rl)",
      "matches": {
        "rl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "90d6fd8183763175ee12bb0142d8c0f1": {
      "content": "try:\n\t${1:${VISUAL}}\nexcept ${2:Exception} as ${3:e}:\n\t${0:raise $3}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "Try/Except",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "90d7a598a069d6b4baa7581bbad9579a": {
      "content": "call themis#log(${TARGET})",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "p",
      "matches": {
        "themis#log": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "90db7a4370e22aeaa1a6d6630c0335f3": {
      "content": "mixed.validateSync()",
      "doc": "mixed.validateSync(value: any, options?: object): any\n\nRuns validatations synchronously if possible and returns the resulting value,\nor throws a ValidationError. Accepts all the same options as validate.Synchronous validation only works if there are no configured async tests, e.g tests that return a Promise.\nFor instance this will work:let schema = number().test(\n  \"is-42\",\n  \"this isn't the number i want\",\n  value => value != 42\n);\n\nschema.validateSync(23); // throws ValidationError\nhowever this will not:let schema = number().test(\"is-42\", \"this isn't the number i want\", value =>\n  Promise.resolve(value != 42)\n);\n\nschema.validateSync(42); // throws Error\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-validate-sync",
      "matches": {
        "yup mixed validatesync": true
      },
      "source": "javascript/yup"
    },
    "90e36b6aa7fcb68d6c44574b0c62ec49": {
      "content": "install.packages(${1:pkgs}, ${2:lib}, ${3:repos = ${4:getOption(\"repos\")}}, ${5:contriburl = ${6:contrib.url(repos, type)}})",
      "doc": "Install package",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "ins",
      "matches": {
        "insall": true
      },
      "source": "vscode-R/snippets"
    },
    "90e4ece35378d63f1b5c2cd8e42e9c39": {
      "content": "${1:FIELDNAME} = models.PositiveIntegerField(${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "posint": true
      },
      "source": "vim-snippets/snippets"
    },
    "90f09de160f6e353ea74e6932d512e51": {
      "content": "$this->assertFalse(${1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertFalse($a)",
      "matches": {
        "asf": true
      },
      "source": "vim-snippets/snippets"
    },
    "90f0e7729ed1cddabeb618fda24702bc": {
      "content": "std.array",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "arr": true
      },
      "source": "vim-snippets/snippets"
    },
    "90f4f37357d579640be257832a8a2c6c": {
      "content": "if let ${1:Some($2)} = $3 {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "if let (...)",
      "matches": {
        "ifl": true
      },
      "source": "vim-snippets/snippets"
    },
    "90f517dfc2db6254d16599a60add94d0": {
      "content": "[${1:#:link}][${2:id}]${3}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "[link][id]",
      "matches": {
        "linkid": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "90f6110611e6f6ab7160458cf0c1a2e4": {
      "content": "@else if ${1:condition} {\n\t${0}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "910e5e327b57ee68cde73549b6c25a19": {
      "content": "text-emphasis ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te": true
      },
      "source": "vim-snippets/snippets"
    },
    "910f455716576bdcf69a2cee67540a6b": {
      "content": "<details>${0}</details>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "details": true
      },
      "source": "vim-snippets/snippets"
    },
    "9110045735939e6d6842e6ce9ac467e1": {
      "content": "switch (${1:statement})\n{\n\tcase ${2:value}:\n\t\tbreak;\n\n\tdefault:\n\t\t$0break;\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "switch statement",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "911e4c23f6bfd78475e96c9745e7e5fb": {
      "content": "remove_column :${1:table}, :${2:column}${3: [press tab twice to generate add_column]}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Migration Remove and Add Column (mrac)",
      "matches": {
        "mcol": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9121e796f3aba113546fe2105aad9fb6": {
      "content": "text-wrap ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw": true
      },
      "source": "vim-snippets/snippets"
    },
    "91245b18d5272e6d49cf2905f35842c1": {
      "content": "{% from '${1:#:module}' import ${2:#:macro} %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% from '...' import ... %}",
      "matches": {
        "from": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "91268ca473b370a755217e5bb07303c6": {
      "content": "function ${1:name}(${2:args})\n  return ${0:type};",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pfs": true
      },
      "source": "vim-snippets/snippets"
    },
    "9126bfff22f1c1847ca1523ec6b16521": {
      "content": "background-repeat: no-repeat;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "91298686c5103fdeafd18bf607440eb2": {
      "content": "${1:expression} while ${2:condition};\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "Loop one-line (xwhile)",
      "matches": {
        "xwhile": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "912d8464f738043ce67e035eab4ff3f0": {
      "content": "{-| ${0}\n-}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/snippets"
    },
    "91379088c8c75c9234f718b626da43ca": {
      "content": "edition = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "edition": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "914025a685f7fff64fa102f57b7ef0f6": {
      "content": "\\\\left${1} ${0:${VISUAL}} \\\\right$1",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "left right",
      "matches": {
        "lr": true
      },
      "source": "vim-snippets/snippets"
    },
    "91423ab1c9a35399506c3ab0f6882643": {
      "content": "const { GraphQLClient } = require('graphql-request');",
      "doc": "",
      "filetype": "graphql-request",
      "grammar": "lsp",
      "label": "graphql-request-require-client",
      "matches": {
        "graphql-request require client": true
      },
      "source": "javascript/graphql-request"
    },
    "91438a7e890eaa4b572f3e7af141c506": {
      "content": "text-decoration: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "914884904838aa22047de85665d5b5e7": {
      "content": "_.entries(${object})",
      "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.toPairs(new Foo);\n// => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n\nCreates an array of own enumerable string keyed-value pairs for `object`\nwhich can be consumed by `_.fromPairs`. If `object` is a map or set, its\nentries are returned.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-entries",
      "matches": {
        "lodash entries": true
      },
      "source": "javascript/lodash"
    },
    "914a3e6e4468d58e15e748a452ab33c6": {
      "content": "return ${0};",
      "doc": "return",
      "filetype": "base",
      "grammar": "lsp",
      "label": "return",
      "matches": {
        "base return": true
      },
      "source": "javascript/base"
    },
    "914a5e4b6c546a41b46efbc89c59364e": {
      "content": "text-wrap: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:no": true
      },
      "source": "vim-snippets/snippets"
    },
    "914c0f9e3a0a0ed5a569da7544e66622": {
      "content": "return (\n\t${0}\n);",
      "doc": "return complex value (such as JSX components)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "return-complex-value-such-as-jsx-components-",
      "matches": {
        "base return complex value": true
      },
      "source": "javascript/base"
    },
    "91544f8b3568433f2b1de9cc2ece6b60": {
      "content": "background-size: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz": true
      },
      "source": "vim-snippets/snippets"
    },
    "915544da592fdb70276b0e017f040d2e": {
      "content": "cursor text",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "91677e098a9c581e71069e8c8e90eeb3": {
      "content": "__import__('pudb').set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pudb": true
      },
      "source": "vim-snippets/snippets"
    },
    "9169cd1767b8bb3b8be2420c964d8915": {
      "content": "qr/\n     ${0:regex}\n/xms",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "qrx": true
      },
      "source": "vim-snippets/snippets"
    },
    "916dabeda5df345c481e056f1b4e7fa9": {
      "content": "@doc \"\"\"\n${0}\n\"\"\"",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/snippets"
    },
    "918413c3c91f26b3dc37d8b82dc1ba1b": {
      "content": "<time datetime=\"${1}\" pubdate=\"${2:$1}\">${0:$1}</time>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "time": true
      },
      "source": "vim-snippets/snippets"
    },
    "918632ee59db77bf5c1aed4fd54a607e": {
      "content": "<#list ${1:hashmap}?keys as ${2:key}>\n\t\\${$2\\}: \\${$1[$2]\\}${0:${VISUAL}}\n</#list>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#list hashmap?keys as element>...</#list>",
      "matches": {
        "lish": true
      },
      "source": "vim-snippets/snippets"
    },
    "918fc605eb9ba83ac0eafc1ae156b600": {
      "content": "(let ([${1}]) ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "9192bae9b04fccbb8358a1d210969275": {
      "content": "word-wrap none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:no": true
      },
      "source": "vim-snippets/snippets"
    },
    "91989d5d01e98255eb554008b661c74e": {
      "content": "\\\\citen{${1}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\citen",
      "matches": {
        "citen": true
      },
      "source": "vim-snippets/snippets"
    },
    "9199bf04b2992cd14067a8a81b38d40c": {
      "content": "\\${5:#${0:optional}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${5:#optional}",
      "matches": {
        "5#": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "919a82a5862fc56f1ee0a96d9e9b0404": {
      "content": "border-style: inset;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "91a9789cd46025a4213b01239c7144df": {
      "content": "try {\n\t${0:TARGET}\n};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ty": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "91b0fa8eb619e3d48c410f792fa2a194": {
      "content": "@safe pure nothrow",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "@safe pure nothrow (spn)",
      "matches": {
        "spn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "91bc049fd95e1fdcbb36c7413679d73d": {
      "content": "padding: ${1:0} ${0:0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:2": true
      },
      "source": "vim-snippets/snippets"
    },
    "91bc5deebb5f3c1f34395b7a92327d75": {
      "content": "{% endjs %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endjs",
      "matches": {
        "endjs": true
      },
      "source": "vim-snippets/snippets"
    },
    "91c53e44c7031a3830761fe8b449ab93": {
      "content": "\\\\part{${1:part name}} % (fold)%\n\\\\label{prt:${2:$1}}\n${0}\n% part $2 (end)",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "document \\part",
      "matches": {
        "part": true
      },
      "source": "vim-snippets/snippets"
    },
    "91c85d1a426eb7fec47bcb0e864bb587": {
      "content": "<bdi>${0}</bdo>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi": true
      },
      "source": "vim-snippets/snippets"
    },
    "91ca810b597deb9a8f6d3bc30cd21720": {
      "content": "always_latch begin\n    if (${1:enable}) begin\n        ${2:TARGET}\n    end\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "always_latch",
      "matches": {
        "all": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "91cffe47ce0db920e3bc71707eaa2e24": {
      "content": "$this->session->set_flashdata(\"${1:item}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_session_set_flashdata": true
      },
      "source": "vim-snippets/snippets"
    },
    "91d2d521c7327630d6e51c46a62f3ac2": {
      "content": "@extend .${1}\n${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@ext": true
      },
      "source": "vim-snippets/snippets"
    },
    "91d90759e233e1300e3fa93a501c58bf": {
      "content": "template<typename ${1:T}> ${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "template <T>",
      "matches": {
        "template": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "91d91f8059feef62f1aa02fce1171e91": {
      "content": "_.sampleSize(${collection}, ${n})",
      "doc": "_.sampleSize([1, 2, 3], 2);\n// => [3, 1]\n\n_.sampleSize([1, 2, 3], 4);\n// => [2, 3, 1]\n\nGets `n` random elements at unique keys from `collection` up to the\nsize of `collection`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-samplesize",
      "matches": {
        "lodash samplesize": true
      },
      "source": "javascript/lodash"
    },
    "91e688dcb07cc37247c5fbd38bc608e5": {
      "content": "PropTypes.arrayOf($0),",
      "doc": "An array of a certain type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-array-of",
      "matches": {
        "prop-types arrayof": true,
        "ptao": true
      },
      "source": "javascript/prop-types"
    },
    "91e747a82c17959d5c2086f89c8c1575": {
      "content": "caption-side: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cps": true
      },
      "source": "vim-snippets/snippets"
    },
    "91ec66d68909417af913a2c0e2c3d026": {
      "content": "${1:obj}.not('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "not": true
      },
      "source": "snippets/coffee"
    },
    "91fe9daaef9fff9e5be10148e33b0247": {
      "content": "${1:obj}.fadeTo 'slow/400/fast', ${2:0.5}, ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadetoc": true
      },
      "source": "snippets/coffee"
    },
    "9204aa7c2478c0167b8b7562d13acfb1": {
      "content": "async function ${1:function_name}(${2}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "async function",
      "matches": {
        "asf": true
      },
      "source": "snippets/javascript"
    },
    "920a34c08262db22e3b721cf97ab3542": {
      "content": "with timeout ${1:#:number} seconds\n\t${0:TARGET}\nend timeout",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "timeout": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "920c209c83f9508a8c9e7306a8432bb2": {
      "content": "function ${1} return ${2} is\n\t(${3});${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "expression function",
      "matches": {
        "function_expr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "920ff05092a18a1890ab2981791dcf71": {
      "content": "order('${0:field} DESC')",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "od": true
      },
      "source": "vim-snippets/snippets"
    },
    "92153a5f2ef9e9feb09d51e95ae65458": {
      "content": "spec:\n  replicas: {{ .Values.$1.replicaCount }}\n  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}\n  template:\n\tmetadata:\n\t{{- if .Values.$1.podAnnotations }}\n\t  annotations:\n{{ toYaml .Values.$1.podAnnotations | indent 8 }}\n\t{{- end }}\n\t  labels:\n\t\tapp: {{ template \"${2:chartName}.name\" . }}\n\t\tcomponent: \"{{ .Values.$1.name }}\"\n\t\trelease: {{ .Release.Name }}\n\t\t{{- if .Values.$1.podLabels }}\n{{ toYaml .Values.${1:value_key}.podLabels | indent 8 }}\n\t\t{{- end }}\n\tspec:\n\t  {{- if .Values.imagePullSecrets }}\n\t  imagePullSecrets:\n{{ toYaml .Values.imagePullSecrets | indent 8 }}\n\t  {{- end }}\n\t  ${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "spec_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "9215a207ac5de6bfb3be6d142d29dfaa": {
      "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React, { Component } & PropTypes",
      "matches": {
        "imrcp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "921a0c4432a23fdfcf6c349b74099c2c": {
      "content": "import { ${1:moduleName} } from 'react-native'",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativeImport",
      "matches": {
        "imrn": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "921fed6735795bed54e46991cb8b5192": {
      "content": "\\\\begin{frame}[${1:t}]\n\t\\frametitle{${2:title}}\n\t\\framesubtitle{${3:subtitle}}\n\t${0:${VISUAL}}\n\\\\end{frame}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "frame environment",
      "matches": {
        "frame": true
      },
      "source": "vim-snippets/snippets"
    },
    "9222e024d0f5f8629bb7e8fb78f966fc": {
      "content": "catch ${1:/${2:#:pattern: empty, E484, Vim(cmdname):{errmsg\\\\}\\}/}",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "catch /pattern/",
      "matches": {
        "catch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "922308b5184b56fc5c9b5c2d94124852": {
      "content": "border-top-style: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "border-top-style": true,
        "bts": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "923027d92b8920e98824b2389afd3bc2": {
      "content": "connect(${1:mapStateToProps}, ${2:mapDispatchToProps})(<${3:VISUAL}/>);",
      "doc": "",
      "filetype": "javascript-redux",
      "grammar": "snu",
      "label": "",
      "matches": {
        "con": true
      },
      "source": "snippets/javascript"
    },
    "92304e016131b8d944b0589732cf0185": {
      "content": "@OneToMany${1:(cascade=CascadeType.ALL)}\n${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "om": true
      },
      "source": "vim-snippets/snippets"
    },
    "9231f3a3846ec48ce0a96f2e1e05d78a": {
      "content": "console.log('${1:object} :>> ', ${1:object});",
      "doc": "Displays an object in the console with its name",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consolelogobject",
      "matches": {
        "base console log object": true
      },
      "source": "javascript/base"
    },
    "92358a797636f03b7edfed8366f0573a": {
      "content": "font-emphasize-style: dot",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "923958fbae76dd0c42c6b56912e868d4": {
      "content": "white-space: pre-wrap",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:pw": true
      },
      "source": "vim-snippets/snippets"
    },
    "923aac92521b0924b00b51ec1afcc157": {
      "content": "place-content space-around",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:sa": true
      },
      "source": "vim-snippets/snippets"
    },
    "92468fabbbf3b08b4ca1af03d56b805c": {
      "content": "=begin rdoc\n\t${0}\n=end",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "=b": true
      },
      "source": "vim-snippets/snippets"
    },
    "92510d6576a371bad78033834e6722c0": {
      "content": "-ifdef(TEST).\n-include_lib(\"eunit/include/eunit.hrl\").\n${0}\n-endif.",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ieunit": true
      },
      "source": "vim-snippets/snippets"
    },
    "92546f5082a22da63fc722b5d2873375": {
      "content": "while (${1:#:expression}) {\n    ${2:#:commands}\n}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "while (...) {...}",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "925b7011e6cf54fc15cfc29ad3efc2dc": {
      "content": "_.over(${iteratees})",
      "doc": "var func = _.over([Math.max, Math.min]);\n\nfunc(1, 2, 3, 4);\n// => [4, 1]\n\nCreates a function that invokes `iteratees` with the arguments it receives\nand returns their results.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-over",
      "matches": {
        "lodash over": true
      },
      "source": "javascript/lodash"
    },
    "92629179cc04f861934970e09f18324e": {
      "content": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n}",
      "doc": "When called, it should examine this.props and this.state and return a single child element.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentRender",
      "matches": {
        "ren": true
      },
      "source": "vscode-react/snippets"
    },
    "9269b560f22a7534d88af57d1f8368d7": {
      "content": "\\${5}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${5}",
      "matches": {
        "5": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "926c00669e5d975000c9568c2e403652": {
      "content": "{% empty %}\n${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "empty": true
      },
      "source": "vim-snippets/snippets"
    },
    "928cf4d2bdb855eb7c7a3d4478db44e6": {
      "content": "<pre>\n\t{{ dump(${0:TARGET}) }}\n</pre>",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "<pre> {{ dump(...) }} </pre>",
      "matches": {
        "dump": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "92a3fb64fcb4cc746b71f13131df884d": {
      "content": "word-break: break-all",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:ba": true
      },
      "source": "vim-snippets/snippets"
    },
    "92a42ea6409364faf423b220e234beb5": {
      "content": "\\\\begin{subfigure}[${1}]{${2:\\\\textwidth}}\n\\\\begin{center}\n\t${3}\n\\\\end{center}\n\\\\caption{${4}}\n\\\\label{fig:${5}}\n\\\\end{subfigure}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "subfigure environment",
      "matches": {
        "subfig": true
      },
      "source": "vim-snippets/snippets"
    },
    "92a6fc3094e8c4773029573334d513cc": {
      "content": "function let()\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "function let() { ... }",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "92a8fe09cbd2ef1aaf68987369a909ba": {
      "content": "t.date :${1:title}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create date column",
      "matches": {
        "tcda": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "92ac13fc091545f1c786ea993420ff9c": {
      "content": "right: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "92acec416a4374e3c4ba6036849ceae2": {
      "content": "font-effect: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef": true
      },
      "source": "vim-snippets/snippets"
    },
    "92ada0e8c6c51013922d239ee74c3ff9": {
      "content": "float: left",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "92b4ec31cb0035153848f1c4ed2ad9d9": {
      "content": "forces\n{\n\ttype\t\t\t\tforces;\n\tfunctionObjectLibs\t(\"libforces.so\");\n\tenabled\t\t\t\ttrue;\n\toutputControl\t\t${1:timeStep};\n\toutputInterval\t\t${2:1};\n\tpatches\t\t\t\t(${3});\n\tlog\t\t\t\t\t${4:true};\n\tCofR\t\t\t\t(${0:0 0 0});\n}",
      "doc": "",
      "filetype": "openfoam",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forces": true
      },
      "source": "vim-snippets/snippets"
    },
    "92b5ca5c2c7445597dfb1d91f9cfc4be": {
      "content": "{% assign ${1:#:var} = ${2:#:value} %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "assign": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "92bb67c401b4194082cb225f7a24cfef": {
      "content": "object (self)\n\t${2:methods}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "object",
      "matches": {
        "Obj": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "92c0f682759b69243217b57483a00014": {
      "content": "export const ${1:action} = createAction('[${2:Source}] ${3:Event}');",
      "doc": "Creates an NgRx Action",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrx-create-action",
      "matches": {
        "a-ngrx-create-action": true,
        "angular ng rx create action": true
      },
      "source": "javascript/angular"
    },
    "92df56d63bb8ca27db323328174ae51d": {
      "content": "border-left-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdli:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "92ef4c950ecaf4c504ee4549230245a6": {
      "content": "tag=\"$1\"$0",
      "doc": "tag=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-tag",
      "matches": {
        "tag": true,
        "vue tag": true
      },
      "source": "javascript/vue"
    },
    "92f5f77f49719d8c3f32e7fd7f0e78bb": {
      "content": "@import url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@i": true
      },
      "source": "vim-snippets/snippets"
    },
    "92f62421972ac02355e11121204d21fd": {
      "content": "${1:obj}.offset()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "offset": true
      },
      "source": "snippets/javascript"
    },
    "92f70f7a28765b61f269faae3eef144f": {
      "content": "border-right-style none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "93008a860b9546ba637669343a05b5d7": {
      "content": "background-size: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz": true
      },
      "source": "vim-snippets/snippets"
    },
    "9307f194546764d66037fbba3c9d9ae4": {
      "content": "lua << EOF\n${0}\nEOF",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "lua <<EOF | EOF",
      "matches": {
        "lua": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9308f635de13adb0e504412f764dab3b": {
      "content": "background-repeat: repeat-x;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:x": true
      },
      "source": "vim-snippets/snippets"
    },
    "93090203ec152d2c9ff55e5ef31342a6": {
      "content": "{% section '${1:snippet}' %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "section": true
      },
      "source": "vim-snippets/snippets"
    },
    "930b343aa9f5bfd24444d8223373ae92": {
      "content": "filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='${1}',sizingMethod='${0:crop}');",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg:ie": true
      },
      "source": "vim-snippets/snippets"
    },
    "930b42cf82f3a5351a157ff560bf7c16": {
      "content": "module ${1:modulename}\n\t${0}\nend module $1",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mod": true
      },
      "source": "vim-snippets/snippets"
    },
    "93125cf93656041deab280cbf2f7e9fe": {
      "content": "jasmine.stringMatching(\"${1:matcher}\")",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "string matching (js)",
      "matches": {
        "strm": true
      },
      "source": "vim-snippets/snippets"
    },
    "931368b249155b6f10ff782c8eefbc54": {
      "content": "implements ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "9314474b30d050d00f6d9f8f5cadb60f": {
      "content": "_.rest(${func}, ${start})",
      "doc": "var say = _.rest(function(what, names) {\n  return what + ' ' + _.initial(names).join(', ') +\n    (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n});\n\nsay('hello', 'fred', 'barney', 'pebbles');\n// => 'hello fred, barney, & pebbles'\n\nCreates a function that invokes `func` with the `this` binding of the\ncreated function and arguments from `start` and beyond provided as\nan array.\n\n**Note:** This method is based on the\n[rest parameter](https://mdn.io/rest_parameters).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-rest",
      "matches": {
        "lodash rest": true
      },
      "source": "javascript/lodash"
    },
    "932b26378ceee9d38921357a19be9716": {
      "content": "font-effect: engrave;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:eg": true
      },
      "source": "vim-snippets/snippets"
    },
    "932db1b754746b793cd5f16fbfcc628d": {
      "content": "${1:obj}.load (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "load": true
      },
      "source": "snippets/coffee"
    },
    "933038ea9c3d6919d93fb64d2a363bfa": {
      "content": "<img src=\"$1\"${2: alt=\"$3\"}/>",
      "doc": "",
      "filetype": "html_minimal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "933105040582dd1725e42d024eb6c8ca": {
      "content": "list-style: ${1:none/disc/circle/square/decimal/zero} ${2:inside/outside} url($3);$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "list-style: type position image (list)",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "93313d326c5049384e4cb01d317bdb10": {
      "content": "\\\\left( ${0:${VISUAL}} \\\\right)",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "left( right)",
      "matches": {
        "lr(": true
      },
      "source": "vim-snippets/snippets"
    },
    "933167a20b0e8d86fea2d40b8ab11812": {
      "content": "import React, { useState } from 'react'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React, {useState}",
      "matches": {
        "imrs": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "93354cce8825af77880957d5a1b3430b": {
      "content": "@disable ${1:/*method*/};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "@disable (dis)",
      "matches": {
        "dis": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "933d5f995d77a1ceddd9e380248efc47": {
      "content": "@protected",
      "doc": "",
      "filetype": "javascript-jsdoc",
      "grammar": "snu",
      "label": "@protected",
      "matches": {
        "@pro": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "93409235d96d7578936ff66894293fc1": {
      "content": "assert_response :${1:success}, @response.body$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Test Assert Response (are)",
      "matches": {
        "asre": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9341290c3f26c8e04bab30ed8f8bdf58": {
      "content": "Ada.Text_IO.New_Line(${1:1});\n${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "Ada.Text_IO.New_Line",
      "matches": {
        "newline": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "934ad411cb35d0caeb78cdf1e075b670": {
      "content": "input {\n\tmessage '${1:Should we continue?}'\n\tok '${2:Yes, we should.}'\n\tsubmitter '${3:alice,bob}'\n\tparameters {\n\t\tstring(name: '${4:PERSON}' , defaultValue: '${5:Mr Jenkins}' , description: '${6:Who should I say hello to?}')\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input": true
      },
      "source": "vim-snippets/snippets"
    },
    "935025cf2c93ebc69f145dc8ca0db82d": {
      "content": "(defmacro ${1:name} \"${2:doc-string}\" ${0:dispatch-fn})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defma": true
      },
      "source": "vim-snippets/snippets"
    },
    "935161460883d8d2f34effb194e3d83f": {
      "content": "echo CHtml::activeRadioButtonList(${1:model}, '${2:attribute}', array(${3}),array('${4:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yharbl": true
      },
      "source": "vim-snippets/snippets"
    },
    "935a5b9b9e0cad1cd677d3db81a6b4d3": {
      "content": "${1:FIELDNAME} = forms.ImageField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "ImageField",
      "matches": {
        "fimg": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9365aaa0586193542711cc68f6f29902": {
      "content": "${1:deferred}.state()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dstate": true
      },
      "source": "snippets/javascript"
    },
    "936895d973a2aba7321ac8bbf1bf4893": {
      "content": "align-items: start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "936bee07c05dd4f8d2f3d3f78caf138d": {
      "content": "{#each ${1:items} as ${2:item}}\n\t${3: <!-- content here -->}\n{:else}\n\t${4: <!-- empty list -->}\n{/each}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-each-else-block",
      "matches": {
        "sveach-else": true,
        "svelte each else": true
      },
      "source": "javascript/svelte"
    },
    "93828a2aed98721c397eb3e82edbac0f": {
      "content": "List${1:[T]}${0:()}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/snippets"
    },
    "9388756fd455d7b30e1f035236d83036": {
      "content": "-webkit-border-radius: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrz:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "9395ede2f291c71b94e7b2942ea72898": {
      "content": "[${1:X} || ${2:X} <- ${3:List}${4:, gen}]",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "List Comprehension",
      "matches": {
        "||": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "939903bdfedcfc9cb83b8bd12de3c39a": {
      "content": "typeof ${1:source} === '${2:undefined}'",
      "doc": "typeof",
      "filetype": "base",
      "grammar": "lsp",
      "label": "typeof",
      "matches": {
        "base typeof": true
      },
      "source": "javascript/base"
    },
    "939e5fc5437d3316297581de9aa1dac3": {
      "content": "Return From Keyword If    '\\${${1:rc}}' != '${2:abc}'    ${3:${optional return value}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Return From Keyword If",
      "matches": {
        "rfki": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "93a052d005200867b8dda48af4841a34": {
      "content": "_.trim(${string}, ${chars})",
      "doc": "_.trim('  abc  ');\n// => 'abc'\n\n_.trim('-_-abc-_-', '_-');\n// => 'abc'\n\n_.map(['  foo  ', '  bar  '], _.trim);\n// => ['foo', 'bar']\n\nRemoves leading and trailing whitespace or specified characters from `string`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-trim",
      "matches": {
        "lodash trim": true
      },
      "source": "javascript/lodash"
    },
    "93a7336d51e068ba429d1ea018a6f037": {
      "content": "expect($1).toBeNull();$0",
      "doc": "expects the argument is null",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobenull",
      "matches": {
        "jest expect tobenull": true,
        "tbn": true
      },
      "source": "javascript/jest"
    },
    "93aa26c4bf95f3ea634b395c1f138d2c": {
      "content": "std::array<${1:T}, ${2:N}> ${3};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "array": true
      },
      "source": "vim-snippets/snippets"
    },
    "93aead75fe9d8e1f897805a829bfe52c": {
      "content": "#define ${1}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#def, #define": true,
        "def": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "93c8cc82c2d075177e48ad85a34ef48e": {
      "content": "border-bottom-color: #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbc": true
      },
      "source": "vim-snippets/snippets"
    },
    "93cb903971f4dc670e7fb08461776a3d": {
      "content": "border-top-width: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtw": true
      },
      "source": "vim-snippets/snippets"
    },
    "93d3ce2b5b0601b1163798152f7bca28": {
      "content": "self.assertEqual(${0}, ${1})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "a=": true
      },
      "source": "vim-snippets/snippets"
    },
    "93d4b5e258eaa375f8dff89e4b6bf4b4": {
      "content": "static_assert( ${1}, \"${2}\" );${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "static_assert(,\"\")",
      "matches": {
        "static_assert": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "93d8ebad8df1697c5c0cd02a6302dee6": {
      "content": "fail(\"${1:message}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fail": true
      },
      "source": "vim-snippets/snippets"
    },
    "93e1e55c7b1f81a8d847f1703a3ebcee": {
      "content": "expect(${1:target}).toBeLessThan(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to be less than (js)",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "93ee370c70252cb8b93b2df4115d5533": {
      "content": "include Comparable\ndef <=>(other)\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Comp": true
      },
      "source": "vim-snippets/snippets"
    },
    "93fc3840c8ee01d076f5c8fa5fc7f0fd": {
      "content": "jasmine.anything()",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "anything (js)",
      "matches": {
        "anyt": true
      },
      "source": "vim-snippets/snippets"
    },
    "93ffed97b6c16da87dbb16fead4f7481": {
      "content": "let ${1} = ${2};",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "let variable declaration with type inference",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "940261661cbf5c83ef570ebd4a146c05": {
      "content": "${1:${VISUAL}} match {\n\tcase ${2} => ${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mat": true
      },
      "source": "vim-snippets/snippets"
    },
    "9409d0e6732151c19978b6fdf19f9f19": {
      "content": "validates :${1:terms}${2:, acceptance: ${3:{ accept: \"${4:1}\"${5:, message: \"${6:You must accept the terms of service}\"}}} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_acceptance_of",
      "matches": {
        "vao": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "941412a636e8517ae0671de5f7358eff": {
      "content": "validates_confirmation_of",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_confirmation_of",
      "matches": {
        "vc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "94194268a06938ee2b9a5012c5ba7d2d": {
      "content": "_.meanBy(${array}, ${iteratee})",
      "doc": "var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.meanBy(objects, function(o) { return o.n; });\n// => 5\n\n// The `_.property` iteratee shorthand.\n_.meanBy(objects, 'n');\n// => 5\n\nThis method is like `_.mean` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be averaged.\nThe iteratee is invoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-meanby",
      "matches": {
        "lodash meanby": true
      },
      "source": "javascript/lodash"
    },
    "941a58f1163cefb30badb8d223526192": {
      "content": "yup.ref()",
      "doc": "yup.ref(path: string, options: { contextPrefix: string }): Ref\n\nCreates a reference to another sibling or sibling descendant field. Refs are resolved\nat validation/cast time and supported where specified. Refs are evaluated in the proper order so that\nthe ref value is resolved before the field using the ref (be careful of circular dependencies!).let schema = object({\n  baz: ref(\"foo.bar\"),\n  foo: object({\n    bar: string()\n  }),\n  x: ref(\"$x\")\n});\n\nschema.cast({ foo: { bar: \"boom\" } }, { context: { x: 5 } });\n// => { baz: 'boom',  x: 5, foo: { bar: 'boom' } }\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "yup-ref",
      "matches": {
        "yup ref": true
      },
      "source": "javascript/yup"
    },
    "941b2f076c9ba3de21021ba3e68465f2": {
      "content": "#region $0",
      "doc": "Folding Region Start",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Region Start",
      "matches": {
        "#region": true
      },
      "source": "vscode-R/snippets"
    },
    "9423b8e534a5f2b9cb7f866727e4d5fd": {
      "content": "tear_down(function()\n  ${0:TARGET}\nend)",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "tear_down(func)",
      "matches": {
        "tear_down": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "94263df4eab26886cf9a0149770dfec4": {
      "content": "$.getJSON('${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\tfunction (data, textStatus, jqXHR) {\n\t\t${0:// success callback}\n\t}\n);",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "getjson": true
      },
      "source": "snippets/javascript"
    },
    "942b3642b55b1e3684ccf9d2662e89ca": {
      "content": "named_scope :name${1:, joins: :${2:table}}, conditions: ${3:['${4:${5:field} = ?}', ${6:true}]}\n",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "named_scope",
      "matches": {
        "nc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "94344226e92cbe881d49f518ec7ba098": {
      "content": "${1:FIELDNAME} = models.SmallIntegerField(${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "smallint": true
      },
      "source": "vim-snippets/snippets"
    },
    "943e6c85eee5f2fdc49d20c3a3238e6c": {
      "content": "_.snakeCase(${string})",
      "doc": "_.snakeCase('Foo Bar');\n// => 'foo_bar'\n\n_.snakeCase('fooBar');\n// => 'foo_bar'\n\n_.snakeCase('--FOO-BAR--');\n// => 'foo_bar'\n\nConverts `string` to\n[snake case](https://en.wikipedia.org/wiki/Snake_case).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-snakecase",
      "matches": {
        "lodash snakecase": true
      },
      "source": "javascript/lodash"
    },
    "9442cfb449d146b26c4fa64de7e0f5cb": {
      "content": "import React from 'react'\n\nexport default function ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
      "doc": "Creates a React Functional Component with ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-functional-component",
      "matches": {
        "react component functional": true,
        "rfc": true
      },
      "source": "javascript/react"
    },
    "944c67baf57eb5c610e37d88710dfbdc": {
      "content": "public ${1}: ${0:any}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts create public field",
      "matches": {
        "tpfi": true
      },
      "source": "vim-snippets/snippets"
    },
    "944cd2feae02da45a685298c25b079b7": {
      "content": "for(int ${1:i} = 0; $1 < ${2:count}; $1++) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "944fd1db2362b71ac9f343cdad548dc6": {
      "content": "// FIXME: $0",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "FIXME comment",
      "matches": {
        "fixme": true
      },
      "source": "vim-snippets/snippets"
    },
    "944ff1e3fe0d4c479ca7a4f5c4214593": {
      "content": "content counter(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "94519f9ad3c9d5d9fad71a7f3c9e0e60": {
      "content": "font-effect emboss",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:eb": true
      },
      "source": "vim-snippets/snippets"
    },
    "94661a81bf14dcf9a039342785026818": {
      "content": "publisher = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "publisher": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "946ff71bf4d842cfe472c36838cbee76": {
      "content": "while (${1:true})\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "9475447f0b46e9c17717e0a7746349cf": {
      "content": "try {\n    ${0:TARGET}\n} catch (${1:Exception} ${2:e}) {\n    ${3:e.printStackTrace();}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "94787b1037dae940f7adcd7e7c15b25b": {
      "content": "#!/usr/bin/env Rscript",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "947b10e37f2fe835743fef205b43205d": {
      "content": "func main() {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func main() { ... }",
      "matches": {
        "main": true
      },
      "source": "gosnippets/snippets"
    },
    "947c40e7ca0b4cd3d464ded1c9b9ab98": {
      "content": "text-indent: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ti": true
      },
      "source": "vim-snippets/snippets"
    },
    "9482eed50d1dbb0ff4165d38f0c067f4": {
      "content": "background-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgi": true
      },
      "source": "vim-snippets/snippets"
    },
    "948473a82a528fab801a06ca658a4d8e": {
      "content": "append(${1:slice}, ${0:value})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "append(slice, value)",
      "matches": {
        "ap": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "9488838be216a7e0c55a8f3d49c74fa1": {
      "content": "float right",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "948cb3361e338f9a30da9ae8172a7137": {
      "content": "<param name=\"${1}\">${2}</param>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "XML pramameter comment",
      "matches": {
        "<p": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "949c79fb0cb01644c98d02f5eda6a194": {
      "content": "mutable.HashSet${1:[T]}${0:()}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mhset": true
      },
      "source": "vim-snippets/snippets"
    },
    "94a16ce0d3e4010b8a396d43cda62b6f": {
      "content": "${1:m a} -> ${0:a}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "->": true
      },
      "source": "vim-snippets/snippets"
    },
    "94a4482e4afa55be35dbdfba4f7672f9": {
      "content": "padding-left: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pl": true
      },
      "source": "vim-snippets/snippets"
    },
    "94bfa0d8942f0468da331c29387eae52": {
      "content": "PropTypes.objectOf($0).isRequired,",
      "doc": "An object with property values of a certain type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeObjectOfRequired",
      "matches": {
        "ptoor": true
      },
      "source": "vscode-react/snippets"
    },
    "94d38dd9dfa5d973abc4e0226e73c35e": {
      "content": "_.reduceRight(${collection}, ${iteratee}, ${accumulator})",
      "doc": "var array = [[0, 1], [2, 3], [4, 5]];\n\n_.reduceRight(array, function(flattened, other) {\n  return flattened.concat(other);\n}, []);\n// => [4, 5, 2, 3, 0, 1]\n\nThis method is like `_.reduce` except that it iterates over elements of\n`collection` from right to left.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-reduceright",
      "matches": {
        "lodash reduceright": true
      },
      "source": "javascript/lodash"
    },
    "94d5bbe109ece871b418d1473f586d95": {
      "content": "font-emphasize-style: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems": true
      },
      "source": "vim-snippets/snippets"
    },
    "94dca71e8711ed6343b4df8ba70e8ee5": {
      "content": "System.Text",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s.t": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "94e201fd60989911711329639ce86e77": {
      "content": "struct ${1:name} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "struct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "94e4e5dcef26291af614dd466fe0be4a": {
      "content": "has_many :${1:object}, through: :${0:object}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hmt": true
      },
      "source": "vim-snippets/snippets"
    },
    "94efc8530d921b0782779fa6bf857b9e": {
      "content": "describe \"${1:describe_name}\" do\n  ${2:TARGET}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "describe .. do .. end",
      "matches": {
        "describe": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "94f27c24bfd807c69c91c45f0f7e1085": {
      "content": "void mousePressed(){\n\t${0}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mousePressed": true
      },
      "source": "vim-snippets/snippets"
    },
    "94f70e0a9871b99e05636ab4733afa65": {
      "content": "elseif ${1:#:condition}\n    ${0:TARGET}",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elseif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "94fb3505d1742d9dbc2a9adbf736ade6": {
      "content": "visibility: ${1:visible/hidden/collapse};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "visibility: type (visibility)",
      "matches": {
        "visibility": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "94fc988fd10db01ffcfc742e337f3bec": {
      "content": "[${1:#:link}](https://${2:#:url})${3}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "[link](url)",
      "matches": {
        "linkurl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "95090e7203ce1e8df0ab8e4a3febeb1c": {
      "content": "<legend><span>${0}</span></legend>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "legend+": true
      },
      "source": "vim-snippets/snippets"
    },
    "950dc0a1a12ab2e0a007835e4713f8f9": {
      "content": ".. todo::\n\t${0}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tod:": true
      },
      "source": "vim-snippets/snippets"
    },
    "951670aef77f345163ca8f41918e0def": {
      "content": "border-collapse: separate;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdcl:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "951a924d7ee3cc7f129818d5c4e28ff5": {
      "content": "{% macro ${1:#:name}(${2:#:args}) %}\n\t${0:TARGET}\n{% endmacro %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% macro ...(...) %} ... {% endmacro %}",
      "matches": {
        "macro": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "951c940bcf3d97b1decadfece4263ea5": {
      "content": "<h3>${0}</h3>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h3": true
      },
      "source": "vim-snippets/snippets"
    },
    "951ecfc5d4e50ca255a36a3abe02030a": {
      "content": "break;",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "break": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "95209bc4321e4a3e9301eb041e0526b2": {
      "content": "<nav>\n\t${0}\n</nav>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nav": true
      },
      "source": "vim-snippets/snippets"
    },
    "9522b1dfb499f5e27dd7e4931952e743": {
      "content": "while(${1:/*condition*/})\n{\n\t${VISUAL}$2\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "while (wh)",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "95295369fbe6af85e53d249848e9c90a": {
      "content": "display inline-block",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:ib": true
      },
      "source": "vim-snippets/snippets"
    },
    "952ce191373e500ed8573b1d83bb9013": {
      "content": "{% cycle ${1:#:TARGET} %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cycle": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "952eb0d0692087d6186740041dec5b9a": {
      "content": "$${1:foo} = ${2:true} ? ${3:a} : ${0};",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "=?:": true
      },
      "source": "vim-snippets/snippets"
    },
    "952ee4704854db84ecc217f99ac296c1": {
      "content": "#!/usr/bin/env tclsh",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "952f75c36d2ca35e0008979b4ab0c6a5": {
      "content": "return true;",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rett": true
      },
      "source": "vim-snippets/snippets"
    },
    "953c009863c568cebcd939f25c8e0766": {
      "content": "font-stretch semi-condensed",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "9546b6fb9b7da43520d38ed0c0de08ba": {
      "content": "NSArray * array;",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aa": true
      },
      "source": "vim-snippets/snippets"
    },
    "95481714ab755df6c386ef0fd43e983f": {
      "content": "background-attachment: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ba": true,
        "backattachment": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "954867b82bfd91029bb61593ddcb72dc": {
      "content": "{% flush %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% flush %}",
      "matches": {
        "flush": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "954b8aa2b36816b8a0f38cadaf1f7806": {
      "content": "text-decoration: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td": true,
        "text-decoration": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "954b91a0804b20b4dc1b57ccaf2991d2": {
      "content": "loop { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loo": true
      },
      "source": "vim-snippets/snippets"
    },
    "9552f8098e3ecc3a3560473fb013f8f4": {
      "content": "truncatewords_html:$1",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "truncatewordshtml": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "95564b968f2de182edc47fbd5bdc40e8": {
      "content": "/**\n * ${3:undocumented class variable}\n *\n * @var ${4:string}\n */\n${1:var} $${2};",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc_v": true
      },
      "source": "vim-snippets/snippets"
    },
    "95569e44b155c17e2da8ac75152b3a24": {
      "content": "float ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl": true
      },
      "source": "vim-snippets/snippets"
    },
    "955aaeb55d90ef57d24f9e29fb991b4d": {
      "content": "while ${1}\n\t${0:${VISUAL}}\nendw",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "while loop",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "955d302f60d61a12769dc476862b1407": {
      "content": "background-size auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "955dff84a3d6898cc2e018d0983a6941": {
      "content": "chisq.test(${1:x}, ${0:y})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "chi": true
      },
      "source": "vim-snippets/snippets"
    },
    "955f8066aba39f31201c27e7ac9b99ef": {
      "content": "<h5 id=\"${1}\">${0}</h5>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h5#": true
      },
      "source": "vim-snippets/snippets"
    },
    "9565588fca98fcd7bf638b6fc4f9bb0a": {
      "content": "[${1:link}](http://${2:url} \"${3:title}\")${4}",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[": true
      },
      "source": "vim-snippets/snippets"
    },
    "957ed3dc8f57f654eb9994ff515eee8e": {
      "content": "// TODO: $1",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "TODO (todo)",
      "matches": {
        "todo": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "95890f7786110dfc2fec0647d3f9c226": {
      "content": "(/ $1 /) ${2:,&} ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "/": true
      },
      "source": "vim-snippets/snippets"
    },
    "9592bcc2a7c621c248fb2c85df132ffd": {
      "content": "function${1:# nbit} ${1:func_name};\n    ${2:portlist};\n    begin\n        ${0:TARGET};\n    end\nendfunction",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "function ... endfunction",
      "matches": {
        "func": true,
        "function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "959685af016676d7b89c922342b0d64a": {
      "content": "font-stretch: ultra-condensed",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:uc": true
      },
      "source": "vim-snippets/snippets"
    },
    "95aa46b7bdb8a8b1791a39dd65796ddd": {
      "content": "PropTypes.number,",
      "doc": "Number prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeNumber",
      "matches": {
        "ptn": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "95ad108cafae6bf715ce7af63d94a6c6": {
      "content": "find { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fin": true
      },
      "source": "vim-snippets/snippets"
    },
    "95b1ba9564346ebb15864c9ed853bdc9": {
      "content": "border-right ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdr": true
      },
      "source": "vim-snippets/snippets"
    },
    "95b52ee39271feb155a81130fb4b787e": {
      "content": "list-style: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lis": true
      },
      "source": "vim-snippets/snippets"
    },
    "95b7902a83df7601447daed44b2e62b6": {
      "content": "_.value()",
      "doc": "_([1, 2, 3]).value();\n// => [1, 2, 3]\n\nExecutes the chain sequence to resolve the unwrapped value.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-value",
      "matches": {
        "lodash value": true
      },
      "source": "javascript/lodash"
    },
    "95c1957993444af5c55e0a096e017178": {
      "content": "${1:obj}.fadeTo('${2:slow/400/fast}', ${3:0.5})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadeto": true
      },
      "source": "snippets/javascript"
    },
    "95c3786a265eff0438bd331402c01695": {
      "content": "validates_uniqueness_of",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_uniqueness_of",
      "matches": {
        "vu": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "95ca7e78c39887a0119aa640895bb1eb": {
      "content": "ifel ensuring(${1:a}==${0:b})",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ensuring": true
      },
      "source": "vim-snippets/snippets"
    },
    "95d0f19b809e2884f5f29336d0c047cb": {
      "content": "cursor: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur": true
      },
      "source": "vim-snippets/snippets"
    },
    "95d8edf2bb1966b40898c7f64bea78f8": {
      "content": "word-break: keep-all",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:k": true
      },
      "source": "vim-snippets/snippets"
    },
    "95d9406752ccdb6c143a7cd81d6d3bc3": {
      "content": "import { mapMutations } from 'vuex'\n\nexport default {\n\tmethods: {\n\t\t...mapMutations([\n\t\t\t${1:'nameOfMutation'}, //also supports payload `this.nameOfMutation(amount)` \n\t\t])\n\t},\n}",
      "doc": "mapmutations inside a vue component",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-mapmutations",
      "matches": {
        "vmapmutations": true,
        "vue mapmutations": true
      },
      "source": "javascript/vue"
    },
    "95d9a33b5014aef57d4728aced9ae2be": {
      "content": "public ${1:int} ${2:MyProperty} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "propg": true
      },
      "source": "vim-snippets/snippets"
    },
    "95d9a65fa19d3b13a3178cbc03ac06e1": {
      "content": "<label>${1}: <input type=\"${2:TARGET}\" /></label>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "label": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "95e38d6af3a483a10617defbcb0485a5": {
      "content": "\\begin{frame}{${1:#:frametitle}}\n\t${2:TARGET}\n\\end{frame}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{frame} \\frame": true,
        "frame": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "95f184b16dabea9aff276ce299926725": {
      "content": "case ${1:value}:\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "case ...:",
      "matches": {
        "case": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "95f396238b5e304b4c41b908fddbb125": {
      "content": "${1:FIELDNAME} = models.IntegerField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "IntegerField",
      "matches": {
        "mint": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "96093ec1836abb5db42d9c30cc03ff9f": {
      "content": "background-size: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "960bb4d859eb27716975438a26fbc687": {
      "content": "${1:name}.isInstanceOf[${2:T}]",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "is": true
      },
      "source": "vim-snippets/snippets"
    },
    "961102b3ae246eaa686e7ab54284414e": {
      "content": "vertical-align: baseline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:bl": true
      },
      "source": "vim-snippets/snippets"
    },
    "961a38e5950d98865855a39d27ba6da1": {
      "content": "this.${1:service}.${2:function}\n\t.subscribe(${3:arg} => this.${4:property} = ${3:arg});\n$0",
      "doc": "Angular observable subscribe",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Subscribe",
      "matches": {
        "a-subscribe": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "9629edf33b8a9e0e0dbde66498e23ba4": {
      "content": "{% layout '${1:layout}' %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "layout": true
      },
      "source": "vim-snippets/snippets"
    },
    "962e5cd62a69a50e3a824aa84a6ee38d": {
      "content": ".. contents:: ${1:#:contents_name}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "contnents": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "963595f31645f831c50aeac86a692882": {
      "content": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.$4 = $4\n\t\t${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl": true
      },
      "source": "vim-snippets/snippets"
    },
    "96370527eb3d0cbf926770b540f98471": {
      "content": "border-bottom-left-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbli:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "96387111a8fb65ba89793e7a4ea887fe": {
      "content": "_.identity(${value})",
      "doc": "var object = { 'a': 1 };\n\nconsole.log(_.identity(object) === object);\n// => true\n\nThis method returns the first argument it receives.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-identity",
      "matches": {
        "lodash identity": true
      },
      "source": "javascript/lodash"
    },
    "963fb950c04ec122a358dca2a31f3567": {
      "content": "border-bottom-right-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbri": true
      },
      "source": "vim-snippets/snippets"
    },
    "9644baf84b46066ed1bde1715fd882be": {
      "content": "return new Promise((resolve, reject) => {\n\t${0}\n});",
      "doc": "return Promise (ES6)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "return-promise-es6-",
      "matches": {
        "base return promise": true
      },
      "source": "javascript/base"
    },
    "9647370df064493116f0b3ad94b138d4": {
      "content": "<?xml version=\"1.0\"?>\n",
      "doc": "",
      "filetype": "xml",
      "grammar": "snu",
      "label": "XML declaration",
      "matches": {
        "xml": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "964d6f4f922c20d6226c6e71fcb49607": {
      "content": "RemoteIPHeader X-Forwarded-For",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "RemoteIPHeader": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "964f5d72a4170b0fe7f1549c48a705ce": {
      "content": "const initialState = {\n\n}\n\nexport default (state = initialState, { type, payload }) => {\n\tswitch (type) {\n\n\tcase ${1:typeName}:\n\t\treturn { ...state, ...payload }\n\n\tdefault:\n\t\treturn state\n\t}\n}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reduxReducer",
      "matches": {
        "rxreducer": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "965b5021a0f02f55c13a84cd963d01ff": {
      "content": "<router-link to=\"${1:path}\">${2:LinkTitle}</router-link>",
      "doc": "Path routing link",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Path Routing Link",
      "matches": {
        "vroutepath": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "965f0b150142b4b70eb4c2e0dc34eb7e": {
      "content": "background-clip: no-clip",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:nc": true
      },
      "source": "vim-snippets/snippets"
    },
    "9663199b4f6db2665776ab22932045e1": {
      "content": "func main() {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func main() { ... }",
      "matches": {
        "main": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "966d75c9506d9a9dfd1b1e5029ad3a99": {
      "content": "dictsortreversed:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dictsortrev": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "96729755130842e8f439bbd50fa5bb13": {
      "content": "border-collapse: collapse",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdcl:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "96739994895c1dae5ec9465a73b5c639": {
      "content": ".. _${1:#:NAME}:\n${2:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "label",
      "matches": {
        "label": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9675fffbd2cffdad5c5f1cb6e9f6273e": {
      "content": "if ($1)\n{\n\t${VISUAL}$0\n}\nelse\n{\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "if else statement",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "967f8d8cdc9b29bb4149994a314120cb": {
      "content": "overflow-y: hidden;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "96828791e8532cd11942c1d04e42165e": {
      "content": "display table-row-group",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbrg": true
      },
      "source": "vim-snippets/snippets"
    },
    "9682881cc6617e1a94cf14091641aa4d": {
      "content": "justify-content left",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "96836b1f570c9e198ab93de7b3fa427d": {
      "content": "form_submit(\"${1:name}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_submit": true
      },
      "source": "vim-snippets/snippets"
    },
    "9684b29b7850a603b19d2e53cf6a6e52": {
      "content": "max-height none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mah:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "968df4adaf6ecccdaefda9d885ec6058": {
      "content": "console.assert(${1:expression}, ${2:object});",
      "doc": "If the specified expression is false, the message is written to the console along with a stack trace",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consoleassert",
      "matches": {
        "base console assert": true
      },
      "source": "javascript/base"
    },
    "9693c2991228139163f2777619bb085f": {
      "content": "test(${1:case}, [true(${2:var} = ${3:value})]) :-\n  ${0:goal}.",
      "doc": "",
      "filetype": "prolog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9694065daa0656346a3fab247682e71d": {
      "content": "// Typedef is deprecated. Use alias instead.\ntypedef",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td": true
      },
      "source": "vim-snippets/snippets"
    },
    "969fea0520d4c25b163b45fe43493f2d": {
      "content": "@includeIf('$1')",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@includeIf directive",
      "matches": {
        "includeIf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "96a3055e98dcb4fb56767b3124de0be8": {
      "content": "require('${1:package}');",
      "doc": "Require a package",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "require",
      "matches": {
        "rqr": true
      },
      "source": "vscode-javascript/snippets"
    },
    "96a70d891e282c77a3cade479a94b764": {
      "content": "font-stretch: extra-expanded;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:ee": true
      },
      "source": "vim-snippets/snippets"
    },
    "96ab4e3325c0deadaf1fba06603c6840": {
      "content": "set terminal ${1:#:terminal}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set terminal",
      "matches": {
        "term": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "96ac737affa3b4f2c33cfafa5ae2a9b2": {
      "content": "\\begin{Bmatrix}\n\t${1:TARGET}\n\\end{Bmatrix}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Bmatrix": true,
        "\\begin{Bmatrix} \\Bmatrix": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "96acf660879faa2f176ef44e03d7fac3": {
      "content": "internal int ${1}(${2})\n{\n\t${0:return 0;}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mi&": true
      },
      "source": "vim-snippets/snippets"
    },
    "96afde027fca38aa4d00b92aaf00ba0d": {
      "content": "{% if ${1:expr} %}\n\t$2\n{% endif %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "if",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "96b167b34274ecfbd0be3d42836575ed": {
      "content": "grid-column-end ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gce": true
      },
      "source": "vim-snippets/snippets"
    },
    "96b25d8b6e0078ddfbf20bce48a25d76": {
      "content": "Wait Until Page Contains Element    ${1:${locator}}    ${2:${timeout=None}}    ${3:${error=None}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Wait Until Page Contains Element",
      "matches": {
        "wupce": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "96b4c992a88d869cbe41cb6cda290abf": {
      "content": "align-content first baseline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:fb": true
      },
      "source": "vim-snippets/snippets"
    },
    "96b86518db7afe7811119db6dc6d8e93": {
      "content": "<%= link_to '${1:link text...}', controller: '${0:items}' %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lic": true
      },
      "source": "vim-snippets/snippets"
    },
    "96c1317fe4d4c27f3df79d4323e9077b": {
      "content": "protected string ${1} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps|-": true
      },
      "source": "vim-snippets/snippets"
    },
    "96c2727b08ef21617905b13b22dce5ca": {
      "content": "content: close-quote",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:cq": true
      },
      "source": "vim-snippets/snippets"
    },
    "96c85e05d850ff9b5d90328ac3279105": {
      "content": "#endregion",
      "doc": "Folding Region End",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "Region End",
      "matches": {
        "#endregion": true
      },
      "source": "vscode-R/snippets"
    },
    "96d47704bbba8c589f57b8512e442a05": {
      "content": "<input type=\"range\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:range": true
      },
      "source": "vim-snippets/snippets"
    },
    "96d4fbc890b339140604da2b1461ef07": {
      "content": "$this->db->from(\"${1:table}\");${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_db-from": true
      },
      "source": "vim-snippets/snippets"
    },
    "96e004a9505719a9f697616ceadc8206": {
      "content": "empty-cells: hide",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "970558a841a80b809c5b510f3b90a57e": {
      "content": "page-break-inside: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbi": true
      },
      "source": "vim-snippets/snippets"
    },
    "970f23d84262f2db26fef444afca3657": {
      "content": "# -*- coding: utf-8 -*-",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cutf8": true
      },
      "source": "vim-snippets/snippets"
    },
    "97146a231500db82a216d6dc6eb707d3": {
      "content": "{% unless ${1:#:TARGET} %}\n  ${0:TARGET}\n{% endunless %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "unless endunless",
      "matches": {
        "unless": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "971a43e81ea214d3a45c19aa3034f1ef": {
      "content": "class ${1} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cla": true
      },
      "source": "snippets/javascript"
    },
    "971d0a107af109e439379da34a659f36": {
      "content": "$this->shouldReturnAnInstanceOf($1);",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldReturnAnInstanceOf('Type')",
      "matches": {
        "srinstance": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "971dc25844bed6335d3011719bac11ce": {
      "content": "vertical-align text-top",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:tt": true
      },
      "source": "vim-snippets/snippets"
    },
    "971e180f31cffeddbf7d459451553152": {
      "content": "points(${1:x}, ${2:y = ${3:NULL}}, ${4:type = ${5:\"p\"}}, ${6:...})",
      "doc": "Points",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "poi",
      "matches": {
        "point": true
      },
      "source": "vscode-R/snippets"
    },
    "9725d9f13df57bd8159f744cf8aae921": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\nimport { reactive, toRefs } from 'vue'\n\nexport default {\n\tsetup () {\n\t\tconst state = reactive({\n\t\t\t${0:count}: ${1:0},\n\t\t})\n\t\n\t\treturn {\n\t\t\t...toRefs(state),\n\t\t}\n\t}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
      "doc": "Base for Vue File Composition API with SCSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component Composition API Reactive",
      "matches": {
        "vbase-3-reactive": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "9732bed6916d5858a84ab38efacf723a": {
      "content": "(if ${1}\n\t(let (${2})\n\t\t${3})\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifl": true
      },
      "source": "vim-snippets/snippets"
    },
    "97356746c86dcb10fac75b7f34e48969": {
      "content": "_.stubFalse()",
      "doc": "_.times(2, _.stubFalse);\n// => [false, false]\n\nThis method returns `false`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-stubfalse",
      "matches": {
        "lodash stubfalse": true
      },
      "source": "javascript/lodash"
    },
    "9745c4d770760b4adebee6729e2a936f": {
      "content": "<input type=\"checkbox\" name=\"${1}\" id=\"${2:$1}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:checkbox": true
      },
      "source": "vim-snippets/snippets"
    },
    "9747d82b2e4261f08d584f575f2f988e": {
      "content": "{% import \"${1}\" as ${2} %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig import",
      "matches": {
        "import": true
      },
      "source": "vim-snippets/snippets"
    },
    "9748cb5277e909ea9739b441d26b36fb": {
      "content": "test '${1:should do something}' do\n\t${0}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "974d3c466874777d832ac9e1786213ad": {
      "content": "file_exists(${1:file})$0",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "file_exists",
      "matches": {
        "fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "9752d70281318ba340350aa44384ef80": {
      "content": "Digest::SHA1.hexdigest(${0:string})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sha1": true
      },
      "source": "vim-snippets/snippets"
    },
    "97531bd81c179a2ca7c4c037da5e6abe": {
      "content": "mixed.isType()",
      "doc": "mixed.isType(value: any): boolean\n\nRuns a type check against the passed in value. It returns true if it matches,\nit does not cast the value. When nullable() is set null is considered a valid value of the type.\nYou should use isType for all Schema type checks.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-is-type",
      "matches": {
        "yup mixed istype": true
      },
      "source": "javascript/yup"
    },
    "9769b04cbae76c4338a005a2896f991e": {
      "content": "align-content flex-start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "976df2cfc36989f0f2abc7be5f77dc94": {
      "content": "\\\\subsubsection{${1:subsubsection name}}%\n\\\\label{ssub:${2:$1}}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\subsubsection",
      "matches": {
        "ssub": true
      },
      "source": "vim-snippets/snippets"
    },
    "977483191bac62be33af4e85627deede": {
      "content": "function(d) { ${1} }",
      "doc": "",
      "filetype": "javascript-d3",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fd": true
      },
      "source": "vim-snippets/snippets"
    },
    "978029fec14a558e09eb6514db766986": {
      "content": "vertical-align: text-top;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:tt": true
      },
      "source": "vim-snippets/snippets"
    },
    "978a5fff018bd7a278b201a74854e3c7": {
      "content": "if (${1:#:condition}) {\n    ${2:TARGET}\n} else {\n    ${3}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "if () {} else {}",
      "matches": {
        "ifelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "978ca222708bffc1a15700e3097dec6c": {
      "content": "${1:obj}.focusOut (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "focusout": true
      },
      "source": "snippets/coffee"
    },
    "97908880f9c2666691aaff073b349b0b": {
      "content": "render inline: \"${1:<%= 'hello' %>}\", locals { ${2::name}: \"${3:value}\"$4 }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (inline,locals) (ril)",
      "matches": {
        "ril": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "97a095d9d93c0f943b633bb251e69d54": {
      "content": "t.timestamp :${1:title}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcts": true
      },
      "source": "vim-snippets/snippets"
    },
    "97a7f2ae67eb94b3df1d36512782ab1b": {
      "content": "<%= link_to \"${1:name}\", ${0:dest} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lt": true
      },
      "source": "vim-snippets/snippets"
    },
    "97b24e5cecccde7dcb548d0fe9284945": {
      "content": "echo CHtml::script('${0:test}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhjs": true
      },
      "source": "vim-snippets/snippets"
    },
    "97b2d435209cc8e40032facc4f92454d": {
      "content": "<button type=\"${1:submit}\">${0}</button>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "button": true
      },
      "source": "vim-snippets/snippets"
    },
    "97b663e0f953bf471e044edf36bca3bd": {
      "content": "kmeans(${1:x}, ${2:centers}, ${3:iter.max = ${4:10}}, ${5:nstart = ${6:1}}, ${7:algorithm = ${8:c(\"Hartigan-Wong\", \"Lloyd\", \"Forgy\",\"MacQueen\")}}, ${9:trace = ${10:FALSE}})",
      "doc": "Kmeans",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "km",
      "matches": {
        "kmeans": true
      },
      "source": "vscode-R/snippets"
    },
    "97b9303a914d4f5c3c7fcbbdc4036fca": {
      "content": "console.trace(${1:object});",
      "doc": "Prints a stack trace from the point where the method was called",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consoletrace",
      "matches": {
        "base console trace": true
      },
      "source": "javascript/base"
    },
    "97c2b7934122af413df7fd5a1733b3c7": {
      "content": ":before",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":b": true
      },
      "source": "vim-snippets/snippets"
    },
    "97d0f4a4ab1659244843e1d8150124d9": {
      "content": "font-emphasize-position: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "femp": true
      },
      "source": "vim-snippets/snippets"
    },
    "97d1648cf8a568cc9787691704dedcfe": {
      "content": "${1:obj}.off('${2:events}', '${3:selector expression}'${4:, handler})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "off": true
      },
      "source": "snippets/coffee"
    },
    "97d8db675cea8dea68dc4371bd842545": {
      "content": "number.round()",
      "doc": "number.round(type: 'floor' | 'ceil' | 'trunc' | 'round' = 'round'): Schema\n\nAdjusts the value via the specified method of Math (defaults to 'round').booleanDefine a boolean schema. Supports all the same methods as mixed.let schema = yup.boolean();\n\nawait schema.isValid(true); // => true\ndateDefine a Date schema. By default ISO date strings will parse correctly,\nfor more robust parsing options see the extending schema types at the end of the readme.\nSupports all the same methods as mixed.let schema = yup.date();\n\nawait schema.isValid(new Date()); // => true\nThe default cast logic of date is pass the value to the Date constructor, failing that, it will attempt\nto parse the date as an ISO date string.Failed casts return an invalid Date.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "number-round",
      "matches": {
        "yup number round": true
      },
      "source": "javascript/yup"
    },
    "97dd50de48046b4c94752e858f8cc73d": {
      "content": "final switch(${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsw": true
      },
      "source": "vim-snippets/snippets"
    },
    "97ec58c2ba3e50f0b201be08ab5b4268": {
      "content": "useLayoutEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:cleanup}\n\t};\n}, [${3:input}])",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-uselayouteffect",
      "matches": {
        "react uselayouteffect": true,
        "uselayouteffect": true
      },
      "source": "javascript/react"
    },
    "9803ba5ea8605c8b97b48432409ae2ba": {
      "content": "{% include '${0:snippet}' %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/snippets"
    },
    "9808d9ba222f48476d9d8ccb9058ac7d": {
      "content": "class ${1:MODELNAME}(models.Model):\n\t$0\n\tclass Meta:\n\t\tverbose_name = \"$1\"\n\t\tverbose_name_plural = \"$1s\"\n\n\tdef __str__(self):\n\t\treturn super($1, self).__str__()\n",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Model",
      "matches": {
        "model": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "980af052a4dda4ee87aad5062fdcfe7e": {
      "content": "head () {\n\treturn {\n\t\ttitle: ${1:'Page Title'},\n\t\tmeta: [\n\t\t\t// hid is used as unique identifier. Do not use `vmid` for it as it will not work\n\t\t\t{ hid: 'description', name: 'description', content: ${2:'My custom description'} }\n\t\t]\n\t}\n},",
      "doc": "Nuxt Head",
      "filetype": "nuxt-script",
      "grammar": "lsp",
      "label": "Nuxt Head",
      "matches": {
        "nhead": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "980cc0447d9f0820061c5a91055aaa91": {
      "content": "\\${${3:result}}=    Run Keyword And Return Status    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword And Return Status",
      "matches": {
        "rkars": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "981a2423a78ee78afc3c8b2b0ae9e2b6": {
      "content": "const ${1} = styled.${2}.attrs({\n  ${3}: ${4}\n})`\n  ${5}\n`;",
      "doc": "Styled-Component with attributes",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-styled-component-with-attributes",
      "matches": {
        "scattrs": true,
        "styled-components component with attributes": true
      },
      "source": "javascript/styled-components"
    },
    "98268277eb357c63547216161508f884": {
      "content": "import { Helmet } from 'react-helmet';",
      "doc": "",
      "filetype": "react-helmet",
      "grammar": "lsp",
      "label": "react-helmet-import",
      "matches": {
        "react-helmet import": true
      },
      "source": "javascript/react-helmet"
    },
    "982f189fb5cfd395a6e584bc9fed0533": {
      "content": "formControlName=\"${1:control}\"",
      "doc": "Angular formControlName",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngFormControlName",
      "matches": {
        "a-formControlName": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "98329187f4dda30357630a56a2053857": {
      "content": "text-align=\"right\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alignr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "98377aed2786583998b9a12f4a4f9be0": {
      "content": "expect(${1:target}).toBeDefined()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to be defined (coffee)",
      "matches": {
        "ed": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "984375855019475a11c00dd6f70b3864": {
      "content": "process.stderr",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stderr": true
      },
      "source": "snippets/javascript"
    },
    "98564550f83e882f3c0574761769b12f": {
      "content": "void keyPressed(){\n\t${0}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "keyPressed": true
      },
      "source": "vim-snippets/snippets"
    },
    "985acd57ecee70b9f0321a2957364592": {
      "content": "final",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fin": true
      },
      "source": "vim-snippets/snippets"
    },
    "985cf50e1d7b98d2afb7a36ec0a80d66": {
      "content": "background-break: each-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk:eb": true
      },
      "source": "vim-snippets/snippets"
    },
    "985d94c65842a3be31a7be38c9b61956": {
      "content": "console.assert(${1:expression}, ${2:object});",
      "doc": "If the specified expression is false, the message is written to the console along with a stack trace",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleAssert",
      "matches": {
        "cas": true
      },
      "source": "vscode-javascript/snippets"
    },
    "985e645ab15a0ad10d76e0c0a0520d3f": {
      "content": "<input type=\"url\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:url": true
      },
      "source": "vim-snippets/snippets"
    },
    "986eff7e11d40061cdd291868a199edb": {
      "content": "(for/and ([${1}])\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "for/and",
      "matches": {
        "fora": true
      },
      "source": "vim-snippets/snippets"
    },
    "986f24b7e40646ac989b9c1dbc6c4271": {
      "content": "else\n\t${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "else part of statement",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "987076f8ff34bd836c22560209388ced": {
      "content": "# -*- coding: utf-8 -*-",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "# -*- coding ...",
      "matches": {
        "coding": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9871d76041ca7c47d1ef581bcc5833fb": {
      "content": "@doc \"\"\"\n${1:doc string}\n\"\"\"\n@spec ${2:name}(${3:arg types}) :: ${4:no_return}\ndef $2(${5:args}) do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defsd": true
      },
      "source": "vim-snippets/snippets"
    },
    "987344e11842ce13c23e4437511c573b": {
      "content": "def ${1:foo}():\n\tdoc = \"${2:The $1 property.}\"\n\tdef fget(self):\n\t\t${3:return self._$1}\n\tdef fset(self, value):\n\t\t${4:self._$1 = value}\n\tdef fdel(self):\n\t\t${0:del self._$1}\n\treturn locals()\n$1 = property(**$1())",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "property": true
      },
      "source": "vim-snippets/snippets"
    },
    "98736176066f6992a3e71e2a5561662d": {
      "content": "<style type=\"text/css\" media=\"${1:all}\">\n\t${0}\n</style>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "style": true
      },
      "source": "vim-snippets/snippets"
    },
    "988b3ed55b3b90662729125e159b9250": {
      "content": "display: table-row;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbr": true
      },
      "source": "vim-snippets/snippets"
    },
    "988efed19b4cd5daa5569f7e54752c2a": {
      "content": "if (${1}) {\n\t${2:${VISUAL}}\n} else {\n\t${0}\n}",
      "doc": "",
      "filetype": "kotlin",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "9890715085f1c5f390268bd77e5ad00b": {
      "content": "(lambda (${1}) ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lambda": true
      },
      "source": "vim-snippets/snippets"
    },
    "989c7df1c2f5d44d696eb2ac3e5dcc4d": {
      "content": "*ngFor=\"let ${1:item} of ${2:list}; trackBy:${1:item}.id\"${0}",
      "doc": "Angular *ngFor with trackBy",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngFor with trackBy",
      "matches": {
        "a-ngFor-trackBy": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "989db0ef9a139ff9942d96bc24fb3d61": {
      "content": "<c:out value=\"${1}\" default=\"${0}\" />",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cout": true
      },
      "source": "vim-snippets/snippets"
    },
    "98a03e788fa9ea3179f41760a45bcf27": {
      "content": "case ${1:/* variable case */}:\n\t${2}\n\t${3:break;}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "98a2b455e48fc73ac4234d54ac4c9eb7": {
      "content": "// Package $1 provides ${2:...}\npackage ${1:main}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "package ...",
      "matches": {
        "package": true
      },
      "source": "gosnippets/snippets"
    },
    "98a7d5a41662fd3470798f022887aaf5": {
      "content": "${1:obj}.offsetParent()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "offsetp": true
      },
      "source": "snippets/coffee"
    },
    "98ad4b57ce46402afc0f7ebc4a5eda55": {
      "content": "<ol class=\"${1}\">\n\t${0}\n</ol>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ol.": true
      },
      "source": "vim-snippets/snippets"
    },
    "98b2885caca98cd647887d93f5fcef83": {
      "content": "{\n\tpath: '${1:path}', \n\tloadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})\n},",
      "doc": "Angular lazy route path",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-lazy-route-path",
      "matches": {
        "a-route-path-lazy": true,
        "angular lazy route path": true
      },
      "source": "javascript/angular"
    },
    "98b750601c5c86b847a1e2ef7aee8389": {
      "content": "analogRead(${1});",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ar": true
      },
      "source": "vim-snippets/snippets"
    },
    "98bde7e92fa8198cb3475ca412afb925": {
      "content": "use JMS\\SecurityExtraBundle\\Annotation\\Secure;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use JMS\\..\\Secure",
      "matches": {
        "usesecure": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "98c1dd0cd1029bf6c7f57ccfa5ae50ee": {
      "content": "each_slice(${1:2}) do |${2:group}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "easd-": true
      },
      "source": "vim-snippets/snippets"
    },
    "98c2777de2f4dc8635c964bc70ce6122": {
      "content": "<?php echo $this->${0} ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pethis": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "98cbaad059eaa69750dea81ca4d1f022": {
      "content": "import { ${0:component} } from '@/composables/${0:component}.js'\n\nexport default {\n\tsetup () {\n\t\tconst { ${1:name} } = ${0:component}()\n\t\n\t\treturn {\n\t\t\t${1:name}\n\t\t}\n\t}\n}",
      "doc": "Use Composition API within Options API",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Use Composition API within Options API",
      "matches": {
        "v3useinoptions": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "98d00b4cad500a559f88318b805220e4": {
      "content": "font-emphasize-style dot",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "98d6cac03aac0489e4d04fdd8498d234": {
      "content": "<slot name=\"${1:x}\">${2:<!-- optional fallback -->}</slot>",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-slot-name",
      "matches": {
        "svelte slot name": true,
        "svsn": true
      },
      "source": "javascript/svelte"
    },
    "98dee4eac86f8ca3650c869c3049118f": {
      "content": "<${1:div} :class=\"{ ${2:className}: ${3:data} }\"></${1:div}>",
      "doc": "vue class binding",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Class Binding",
      "matches": {
        "vclass": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "98e0fdac107c0bea234e26b7731df30e": {
      "content": "> ${0}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "quote block",
      "matches": {
        "blockquote": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "98e429ad54a7df1f237890e6a70ae4c7": {
      "content": "${1:fn} : ${2:a} -> ${3:a} -> ${4:a}\n$1 ${5} =\n\t${0}",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn2": true
      },
      "source": "vim-snippets/snippets"
    },
    "98f71ffe7b1db1efa7bb48d8d2b5e6c5": {
      "content": "lapply(${1:list}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lapply": true
      },
      "source": "vim-snippets/snippets"
    },
    "98f7f84d74ab99459d291225eece69ac": {
      "content": "ports:\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ports_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "98fee8316919751546da75c8c667f726": {
      "content": "package:\n\t${1:/*members*/}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "package (pack)",
      "matches": {
        "pack": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "99006fab284f06552a2ab53929b937ad": {
      "content": "<router-link $1>$2</router-link>$0",
      "doc": "router-link element",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-routerlink",
      "matches": {
        "routerlink": true,
        "vue routerlink": true
      },
      "source": "javascript/vue"
    },
    "99032b9f9b0b7f61fbae1b8ccce6492e": {
      "content": "import ${1:Html} exposing (${0:..})",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "impe": true
      },
      "source": "vim-snippets/snippets"
    },
    "990d18036b703cf4ffd1516c29d8eeae": {
      "content": ":only-child",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":oc": true
      },
      "source": "vim-snippets/snippets"
    },
    "99119574b81409340596f2695f53adfa": {
      "content": "#ifndef $1\n#define ${1:SYMBOL} ${2:value}\n#endif /* ifndef $1 */",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ndef": true
      },
      "source": "vim-snippets/snippets"
    },
    "9915967718b3fe5bb52b09f6b25436e0": {
      "content": "${1:FIELDNAME} = forms.ModelMultipleChoiceField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "ModelMultipleChoiceField",
      "matches": {
        "fmomuchoice": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "99163d831481272143524a00cffdd339": {
      "content": "_.functionsIn(${object})",
      "doc": "function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n\nFoo.prototype.c = _.constant('c');\n\n_.functionsIn(new Foo);\n// => ['a', 'b', 'c']\n\nCreates an array of function property names from own and inherited\nenumerable properties of `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-functionsin",
      "matches": {
        "lodash functionsin": true
      },
      "source": "javascript/lodash"
    },
    "991df6d6819ad47a1ac652c4e77c8d16": {
      "content": "if ${1:true} do\n  ${2:TARGET}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "if .. do .. end",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "991f0a55186319b1d42612be98027efe": {
      "content": "$.grep(${1:array}, (item, index) >\n\t${2}\n${0:, true})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grep": true
      },
      "source": "snippets/coffee"
    },
    "99317a92aa8ff867b568acf61b536f36": {
      "content": "~w(${0})",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "word list",
      "matches": {
        "wl": true
      },
      "source": "vim-snippets/snippets"
    },
    "9935f6a4274c448229090fa111873d95": {
      "content": "make(${1:[]string}, ${0:0})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "make",
      "matches": {
        "mk": true
      },
      "source": "vim-snippets/snippets"
    },
    "99416bd3ef592990a875a44a01a437d0": {
      "content": "<meta name=\"viewport\" content=\"${1:width=device-width, initial-scale=1}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "metaviewport": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9948cc86fd9ce3ff0350d16a164f0c5a": {
      "content": "def edit\n\t@${1:model_class_name} = ${0:ModelClassName}.find(params[:id])\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defedit": true
      },
      "source": "vim-snippets/snippets"
    },
    "994ae852058769688cae4b8d5fa9ea2a": {
      "content": "outline-width ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ow": true
      },
      "source": "vim-snippets/snippets"
    },
    "99528daf087ed26daf40a234774effca": {
      "content": "case class ${1}(${2}: ${0})",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "case class ..(..: ..)",
      "matches": {
        "cclass": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "99588f30d037ae7ffca5e2f83b4e0805": {
      "content": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n});",
      "doc": "event handler",
      "filetype": "base",
      "grammar": "lsp",
      "label": "event-handler",
      "matches": {
        "base event handler": true
      },
      "source": "javascript/base"
    },
    "995c914b12de859b782ff77c2cc164b3": {
      "content": "{% trans %}\n\t$1\n{% endtrans %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "translation",
      "matches": {
        "trans": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "996493b4ac0fcdd145211cefaffd0561": {
      "content": "<map name=\"${1}\">\n\t${0}\n</map>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/snippets"
    },
    "99696e818bc5d6e7437c0e2e022f269a": {
      "content": "File.dirname(File.expand_path(__FILE__))",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "File.dirname(...)",
      "matches": {
        "__dir__": true,
        "filedir-legacy-compatibility": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "996bb844e341b33d20d3f0e7fa1416c9": {
      "content": "grid-gap 0",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gg:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "996ce6a5721151f364c60e056903b0e2": {
      "content": "${1:obj}.focusIn(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "focusin": true
      },
      "source": "snippets/javascript"
    },
    "997026711419edf2cecf6d9c79d95cb7": {
      "content": "{% embed '${1:template}' %}\n\t{% block ${2} %}\n\t\t${0:TARGET}\n\t{% endblock %}\n{% endembed %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% embed ... %} ... {% endembed %}",
      "matches": {
        "embed": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "99737032ff38469face3d4ce0ac38412": {
      "content": "\\${1:TARGET}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${1:TARGET}",
      "matches": {
        "1T": true,
        "1t": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9977d12d1a5126eea537ad96f0a2de10": {
      "content": "TRUNCATE TABLE ${1:table};",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "TRUNCATE TABLE ...",
      "matches": {
        "TRUNCATE_TABLE": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9984aa8fe25fbea2f2efc695f4d06a4d": {
      "content": ":${1:tag}:${3}",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": ":tag1:tag2:",
      "matches": {
        "tag": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9992139b59363589480eac934eb1ca45": {
      "content": "{% block $1 %}\n\t$2\n{% endblock $1 %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "block": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "99a4114bcc8f2c3cfe8468b3eee7eeaa": {
      "content": "<xsl:apply-templates select=\"${1:*}\">\n\t<xsl:with-param name=\"${2:param}\">${3}</xsl:with-param>${4}\n</xsl:apply-templates>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "with-param",
      "matches": {
        "apply-templates": true
      },
      "source": "vim-snippets/snippets"
    },
    "99a4f75449ea8090b850e43e0ac48a62": {
      "content": "mounted () {\n\t${0};\n},",
      "doc": "mounted lifecycle method",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-lifecycle-mounted",
      "matches": {
        "vmounted": true,
        "vue lifecycle mounted": true
      },
      "source": "javascript/vue"
    },
    "99add6405509df55f64cb3531eeec8bb": {
      "content": "${1:obj}.nextAll('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nexta": true
      },
      "source": "snippets/coffee"
    },
    "99b7c32c956419ed127611b776069b5d": {
      "content": "border-bottom: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdb": true
      },
      "source": "vim-snippets/snippets"
    },
    "99baa66e1d1c4d47732bc93a7b3599dc": {
      "content": "<pre>\n\t{{ dump(${1}) }}\n</pre>",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig dump",
      "matches": {
        "dump": true
      },
      "source": "vim-snippets/snippets"
    },
    "99bb6e1b724360f252988fc11d78a58f": {
      "content": "${1}.map((${2:item}) => {\n\t${0}\n});",
      "doc": "map",
      "filetype": "base",
      "grammar": "lsp",
      "label": "map",
      "matches": {
        "base map": true
      },
      "source": "javascript/base"
    },
    "99bf70c18687f80c676f9e006068e9ac": {
      "content": "CFLAGS=-Wall -g ${0: -llua -lzeromq}",
      "doc": "",
      "filetype": "make",
      "grammar": "snu",
      "label": "",
      "matches": {
        "CFLAGS": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "99cc3d39ba268f66dbb2efd01dc9aa07": {
      "content": "private bool ${1}(${2})\n{\n\t${0:return false;}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb-": true
      },
      "source": "vim-snippets/snippets"
    },
    "99d219b4f66ef2e91f2abdb664e5a118": {
      "content": "margin auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "99d4f78505a35c6633b45ef7459ec374": {
      "content": "_.trimStart(${string}, ${chars})",
      "doc": "_.trimStart('  abc  ');\n// => 'abc  '\n\n_.trimStart('-_-abc-_-', '_-');\n// => 'abc-_-'\n\nRemoves leading whitespace or specified characters from `string`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-trimstart",
      "matches": {
        "lodash trimstart": true
      },
      "source": "javascript/lodash"
    },
    "99d56985a85e4924140ec013a3b8efd9": {
      "content": "error_log(print_r($${1:foo}, true), 3, '${2:/tmp/debug.log}');",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vdf": true
      },
      "source": "vim-snippets/snippets"
    },
    "99d577e7169f24af685053b734157359": {
      "content": "@for ${1:$i} from ${2:1} through ${3:3}\n\t${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "99da56c209be6b7b1bf19a72544e08ea": {
      "content": "const { ${1:scrollYProgress} } = useElementScroll(${2:ref})",
      "doc": "useElementScroll(ref): Returns MotionValues that update when the provided element scrolls.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-element-scroll",
      "matches": {
        "framer-motion use-element-scroll": true,
        "use-element-scroll": true
      },
      "source": "javascript/framer-motion"
    },
    "99dcb28ddabff21d744992769593cd9a": {
      "content": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
      "doc": "DEPRECATED!!!. Invoked when a component is receiving new props. This method is not called for the initial render.",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-componentwillreceiveprops",
      "matches": {
        "cwr": true,
        "react componentwillreceiveprops": true
      },
      "source": "javascript/react"
    },
    "99df8ad0d4eba8ba360ed778fcf4472c": {
      "content": "{%- capture ${1:variable} -%}${0}{%- endcapture -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "capture-": true
      },
      "source": "vim-snippets/snippets"
    },
    "99e30680223e838335e6bc1944002b2d": {
      "content": "require([\"${1:#dependencies1}\"], function (${2:#dependencies2}) {\n\treturn ${0:TARGET};\n});",
      "doc": "",
      "filetype": "javascript-requirejs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reqjs": true
      },
      "source": "snippets/javascript"
    },
    "99e308f84cad69ff6b54ead9142d24e9": {
      "content": "case ${1:object}\nwhen ${2:condition}\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "99e34a6c231c5bac6349aed9b381b8c1": {
      "content": "{namespace ${1:name}}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "Namespace",
      "matches": {
        "ns": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "99f4973f0da560ce4b4c4ea2c7f30f57": {
      "content": "${${1:0}:${0:default}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${X:default}",
      "matches": {
        "$:": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9a03ce28e7257ec0f24b657bdd983fdf": {
      "content": "constructor(props) {\n\tsuper(props);\n\t$0\n}\n",
      "doc": "Adds a default constructor for the class that contains props as arguments",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "classConstructor",
      "matches": {
        "con": true
      },
      "source": "vscode-react/snippets"
    },
    "9a0822b819828cb4e3333830a82e6842": {
      "content": "pub fn ${1:#:func_name}(${2:#:args}) -> ${3:#:()} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "pubfn () {}",
      "matches": {
        "pubfn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9a15786a21e8952b32abc86a28cad775": {
      "content": "help: ## Prints help for targets with comments\n\t@cat $(MAKEFILE_LIST) | grep -E '^[a-zA-Z_-]+:.*?## .*$$' | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $\\$1, $\\$2}'\n${0}",
      "doc": "",
      "filetype": "make",
      "grammar": "snu",
      "label": "",
      "matches": {
        "help": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a1b33715ecb0560926bc52ac7fe2ca4": {
      "content": "<meta name=\"theme-color\" content=\"#${1}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "metatheme": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9a1dc3ecb850df6cd2595e3de603a6be": {
      "content": "echo CHtml::error(${1:model}, '${0:attribute}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yherr": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a2132af06274b767cb407904de24615": {
      "content": "imap ${1} ${2}",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "im": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a2f3474d10d004ef9ee7dcb17530916": {
      "content": "method ${1:method_name}(${2:$attr}) {\n\t${3}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mth": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a2fcf63c927e9ec4d92c4c0a8063865": {
      "content": "margin: ${1:0} ${2:0};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:2": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a362f23c2a50192cbdcbd94f0f984d6": {
      "content": "beforeEach(inject(function($1) {\n\t$0\n}));",
      "doc": "",
      "filetype": "javascript-angular",
      "grammar": "snu",
      "label": "before each (js, inject)",
      "matches": {
        "befi": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9a42f09d4afa7b4bb7699d85918df204": {
      "content": "if !ok {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if !ok { ... }",
      "matches": {
        "ok": true
      },
      "source": "gosnippets/snippets"
    },
    "9a440d708a1291f5f812c0981a10ec6e": {
      "content": "// set the current texture coordinates - 2 floats\ngl.glTexCoord2f(${1:0.0f}, ${0:0.0f});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl tex coord 2f",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a45d23bf55508ba1385131e055ab124": {
      "content": "_.mean(${array})",
      "doc": "_.mean([4, 2, 8, 6]);\n// => 5\n\nComputes the mean of the values in `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-mean",
      "matches": {
        "lodash mean": true
      },
      "source": "javascript/lodash"
    },
    "9a4657885a6dea9688f587a373fd43cf": {
      "content": "${1:fn} : ${2:a} -> ${3:a}\n$1 ${4} =\n\t${0}",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a46590ef8d6a78beb77a03cf3405d51": {
      "content": "border-style: wave;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a47e511efc23140148d6c7fdabe2366": {
      "content": "{{ $1 }}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "variable",
      "matches": {
        "{{": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9a49f3beaca5b53c7759e04790323069": {
      "content": "list-style-position: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisp": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a4a25af94c61a8d3ab9ea0667fdd655": {
      "content": "&#x238B;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "esc": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a4ec5882cb53430661649e1b5a061b5": {
      "content": "\\textbf{${1:TARGET}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\textbf": true,
        "textbf \\textbf{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9a4fe04f0788b639955e80c8f1996a82": {
      "content": "it('${1:}', () => {\n\t${0:${VISUAL}}\n});",
      "doc": "",
      "filetype": "javascript-mocha",
      "grammar": "snu",
      "label": "it('should do', () => { ... })",
      "matches": {
        "it": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a5024a2951842f5d90fcd97904cbed9": {
      "content": "assert_no_difference '${1:Model}.${2:count}' do\n\t${0}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asnd": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a613e73dd26b49f01416a710480adfd": {
      "content": "@version ${1:0.1.0}$0",
      "doc": "",
      "filetype": "javascript-jsdoc",
      "grammar": "snu",
      "label": "@version Semantic version",
      "matches": {
        "@ver": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9a6ab0aae87f13931f7ccdc8271678e9": {
      "content": "try\n\t${1}\nwith ${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a70939246c351f3294883853c734f2c": {
      "content": "// http://snipplr.com/view.php?codeview&id=1986 // modified\nclass CSVIterator implements Iterator\n{\n\tprivate $f;\n\tprivate $curr;\n\tprivate $rowCounter;\n\t /* opts keys:\n\t\t* row_size\n\t\t* escape\n\t\t* enclosure\n\t\t* delimiter\n\t\t*/\n\tpublic function __construct( $file_or_handle, $opts = [4096, ','] )\n\t{\n\t\t$d = function($n) use(&$opts){ return isset($opts[$n]) ? $opts[$n] : false; };\n\t\t$this->combine = $d('combine');\n\t\t$this->headers = $d('headers');\n\t\t$this->headerCheckFunction = $d('header_check_function');\n\t\t$this->f =\n\t\t\tis_string($file_or_handle)\n\t\t\t? fopen( $file_or_handle, 'r' )\n\t\t\t: $file_or_handle;\n\t\tif (!$this->f) throw new Exception('bad file descriptor');\n\t\t$this->fgetcsv_args = [\n\t\t\t\t$this->f,\n\t\t\t\tisset($opts['row_size']) ? $opts['row_size'] : 4096,\n\t\t\t\tisset($opts['delimiter']) ? $opts['delimiter'] : ',',\n\t\t\t\tisset($opts['enclosure']) ? $opts['enclosure'] : '\"',\n\t\t\t\tisset($opts['escape']) ? $opts['escape'] : '\\\\',\n\t\t];\n\t\t$this->start();\n\t}\n\tprotected function readRow(){\n\t\t$this->curr = call_user_func_array('fgetcsv', $this->fgetcsv_args );\n\t\t$this->rowCounter++;\n\t\tif ($this->rowCounter == 1){\n\t\t\t$this->processHeader();\n\t\t} elseif ($this->curr) {\n\t\t\t$this->processRow();\n\t\t}\n\t}\n\tpublic function processHeader(){\n\t\tif ($this->headers || $this->combine){\n\t\t\t$this->header = $this->curr;\n\t\t\tif ($this->headerCheckFunction){\n\t\t\t\t$f = $this->headerCheckFunction;\n\t\t\t\t$f($this->header);\n\t\t\t}\n\t\t\t$this->readRow();\n\t\t}\n\t}\n\tpublic function processRow(){\n\t\tif ($this->combine)\n\t\t\t$this->curr = array_combine($this->header, $this->curr);\n\t}\n\tpublic function start(){\n\t\t$this->rowCounter = 0;\n\t\trewind( $this->f );\n\t\t$this->readRow();\n\t}\n\tpublic function rewind()\n\t{\n\t\t$this->start();\n\t}\n\tpublic function current()\n\t{\n\t\t$curr = $this->curr;\n\t\t$this->readRow();\n\t\treturn $curr;\n\t}\n\tpublic function key()\n\t{\n\t\treturn $this->rowCounter;\n\t}\n\tpublic function next()\n\t{\n\t\treturn $this->curr;\n\t}\n\tpublic function valid(){\n\t\tif( !$this->next() )\n\t\t{\n\t\t\tfclose( $this->f );\n\t\t\treturn FALSE;\n\t\t}\n\t\treturn TRUE;\n\t}\n} // end class",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "CSVIterator": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a76f5e4fda7c60eddfd8193f84dfa58": {
      "content": "${1:obj}.select(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "select": true
      },
      "source": "snippets/javascript"
    },
    "9a77635082c87537b1412b31abec2058": {
      "content": "export const ${1:constantName} = '${1:constantName}'",
      "doc": "",
      "filetype": "redux",
      "grammar": "lsp",
      "label": "redux-const",
      "matches": {
        "redux const": true,
        "rxconst": true
      },
      "source": "javascript/redux"
    },
    "9a79a6e8dbd524f51429eca2857017e5": {
      "content": "${1:name} <- function (${2:variables}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a7b5bcc1a5704d353e9f4cf6750c04d": {
      "content": "before_each(function()\n  ${0:TARGET}\nend)",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "before_each(func)",
      "matches": {
        "before_each": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9a7cbe48f16618b7427cf8117c8b053e": {
      "content": "has_many :${1:objects}, through: :${2:join_association}${3:, source: :${4:$2_table_foreign_key_to_$1_table}}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "has_many (through)",
      "matches": {
        "hmt": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9a7f6946e09ce1b4af6b83b5bd910ec0": {
      "content": "for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a8837806590b50f3c9299c2b9447371": {
      "content": "border-bottom-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a88cc7c56f211620b24cb2e3688f414": {
      "content": "font-emphasize-style: disc",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:ds": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a8d882df6ce9c3aab18e8b3481034d1": {
      "content": "// Empties buffers. Call this when all previous issues commands completed\ngl.glFlush();\n${0}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl flush",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a9642ace487c2a61c1c6c316de72d15": {
      "content": "align-content: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a97795c799d0e0f1fc8f196682139de": {
      "content": "std::unordered_multimap<${1:Key}, ${2:T}> ${3};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ummap": true
      },
      "source": "vim-snippets/snippets"
    },
    "9a98af5bc4e2a3d4185f068d8444b6cb": {
      "content": "(if ${1}\n\t(begin\n\t\t${2})\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifb": true
      },
      "source": "vim-snippets/snippets"
    },
    "9aa008761e4546fafd1575132f713c6d": {
      "content": "<%= ${1:TARGET} -%>${2}",
      "doc": "",
      "filetype": "eruby",
      "grammar": "snu",
      "label": "<%= -%>",
      "matches": {
        "ruby_print_nonl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9aa28086f7f182cd01507dd5436a0d4b": {
      "content": "module ${1:(* Name *)} : sig\n\t${2:(* SIGNATURE *)}\nend = struct\n\t${3:(* BODY *)}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "Module with anonymous signature",
      "matches": {
        "module": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9aa3ae39e148a734b25d1d67176c29fe": {
      "content": "#ifdef ${1:FOO}\n\t${2:#define }\n#endif",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifdef": true
      },
      "source": "vim-snippets/snippets"
    },
    "9aa47c219e500fa41645da680202ad7b": {
      "content": "<pre>\n\t${0}\n</pre>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pre": true
      },
      "source": "vim-snippets/snippets"
    },
    "9aa51d236d626d402a48eb1be12463b8": {
      "content": "Url:redirect('${1:path}');",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_url_redirect": true
      },
      "source": "vim-snippets/snippets"
    },
    "9aac9ba30b46642f3e12b11dd6fbb06c": {
      "content": "getter? ${0:name}",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r?": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ab04e544c904e70e5e4679f5bc786ee": {
      "content": "pub fn ${1:function_name}(${2})${3} {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Function definition",
      "matches": {
        "pfn": true
      },
      "source": "vim-snippets/snippets"
    },
    "9aba6cb3c00d7e56c37afb4e8e5295f8": {
      "content": "verify only: [:$1], method: :post, render {:status: 500, text: \"use HTTP-POST\"}\n",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "verify -- render",
      "matches": {
        "verify": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9abc16157ca398a7b971735f46d4042a": {
      "content": "$scope.${1:functionName} = (${2:args}) ->\n\t${3}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$f": true
      },
      "source": "snippets/coffee"
    },
    "9ac4b96b4eda8841d33c8481d9e9ad4f": {
      "content": "${1:reg}_w = $1_r;${2:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "_w = _r",
      "matches": {
        "regkeep": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9ad280744d1237548e3b950b7a44d3ed": {
      "content": "downto(${1:0}) { |${2:n}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dow": true
      },
      "source": "vim-snippets/snippets"
    },
    "9add9da0a49ad892313caa690458d904": {
      "content": "PropTypes.arrayOf($0),",
      "doc": "An array of a certain type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeArrayOf",
      "matches": {
        "ptao": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "9ae84ebe95c5d0335123ff9282f599fb": {
      "content": "grid-column-gap ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gcg": true
      },
      "source": "vim-snippets/snippets"
    },
    "9afc13a55b682238e7de4407492f73ff": {
      "content": "expect(${1:list}).toContain($0);",
      "doc": "expects the list contains the item (===)",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tocontain",
      "matches": {
        "jest expect tocontain": true,
        "tc": true
      },
      "source": "javascript/jest"
    },
    "9b0b318c9a947aa4182db29c05bd7503": {
      "content": "const express = require('express');\nconst app = express();\nconst port = process.env.PORT || ${1:port};\nconst www = process.env.WWW || '${2:./}';\napp.use(express.static(www));\nconsole.log(`serving \\${www}`);\napp.get('*', (req, res) => {\n\tres.sendFile(`index.html`, { root: www });\n});\napp.listen(port, () => console.log(`listening on http://localhost:\\${port}`));\n$0",
      "doc": "Node.js Express Server",
      "filetype": "javascript",
      "grammar": "lsp",
      "label": "Node.js Express Server",
      "matches": {
        "ex-node-server-simple": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "9b0f779e6f62e07c76280b05d4fdce57": {
      "content": "_.pullAllWith(${array}, ${values}, ${comparator})",
      "doc": "var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n\n_.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\nconsole.log(array);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n\nThis method is like `_.pullAll` except that it accepts `comparator` which\nis invoked to compare elements of `array` to `values`. The comparator is\ninvoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike `_.differenceWith`, this method mutates `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-pullallwith",
      "matches": {
        "lodash pullallwith": true
      },
      "source": "javascript/lodash"
    },
    "9b1df6db11f299adc6e31521a90975db": {
      "content": "$scope.${1:variable} = ${2:value}\n${3}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$v": true
      },
      "source": "snippets/coffee"
    },
    "9b24aa216dfb17a3515b53cc6755e60d": {
      "content": "@interface ${1} : ${2:NSObject}\n{${3}\n}\n${0}\n@end",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "ClassInterface",
      "matches": {
        "cli": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9b24cd17d61772976b9095308b734187": {
      "content": "for ${1:v} := range ${2:#:iterator} {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for range",
      "matches": {
        "range": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9b24f89fab07279484a3db86670ef528": {
      "content": "align-content: first baseline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:fb": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b25bb8f486ad3dab9580c4fdb862058": {
      "content": "if (${1})\n\t${2:${VISUAL}}\nelse\n\t${0}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b2a1b570631a0ee12310b4f2fea8660": {
      "content": "#include <iostream>\nint main(int argc, char* argv[])\n{\n    std::cout << \"hello, world!\" << std::endl;\n    return 0;\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "#include<iostream> int main...",
      "matches": {
        "helloworld": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9b3304bc1ec21024e817a696b9bc105b": {
      "content": "const mapStateToProps = (state) => ({\n\t${1}\n})\n\nconst mapDispatchToProps = {\n\t\n}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "mappingToProps",
      "matches": {
        "reduxmap": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "9b41abd2ff21876affedecd040d2e9e6": {
      "content": "IF ${1:Condition}\nTHEN ${2:Action}\n${3:ELSE ${4:OtherWise}}",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b4ae19484658d2b59b086684b4432b6": {
      "content": "@inject('$1', '$2')",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@inject directive",
      "matches": {
        "inject": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9b4f5e29502df86b45acde7123c5bd5a": {
      "content": "${1:ModelName}::model()->findAllByAttributes(array('${2:attributeName}'=>${3:attributeValue}), ${4:condition}, array('${5:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yfindaba": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b4fa192470787a74914bda393c4323e": {
      "content": "<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\nclass ${1:ClassName_model} extends CI_Model\n{\n\tfunction __construct()\n\t{\n\t\tparent::__construct();\n\t\t${2:// code...}\n\t}\n}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_model": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b589f04056c3cca055ae58f5f8643a1": {
      "content": "if (${1}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "if {...}",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b5b3697acb2568ab614672b833cee7c": {
      "content": "return false;",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "retf": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b5fb7f9063f008e3d27f5cb26d43403": {
      "content": "resources :${1:posts}${2: do\n\t$3\nend}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "resources",
      "matches": {
        "res": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9b6761834871838158544f54bf02e372": {
      "content": "private fun ${1:name}(${2}): ${3:String} {\n\t${4}\n}",
      "doc": "",
      "filetype": "kotlin",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pfun": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b6b0dc415448a38d5314ff76c1834bc": {
      "content": "${1:obj}.click (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "click": true
      },
      "source": "snippets/coffee"
    },
    "9b739dcfd65135030972065109ae84e6": {
      "content": "${1:FIELDNAME} = models.BigIntegerField(${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bigint": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b7434bbfbf4740be23f3f2b74757d0d": {
      "content": "{{ STATIC_URL }}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "staticu": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9b7bc118ce2239e122a29a5e7b27bada": {
      "content": "\"puppet://puppet/${1:module name}/${0:file name}\"",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b7ddb0f4cf34a397f3ff49fc5965363": {
      "content": "{% nav ${1} in ${2} %}\n\t${0}\n{% endnav %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig nav",
      "matches": {
        "nav": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b8ab67ad5086bdecce084eec50597bc": {
      "content": "typedef ${1:#:base_type} ${2:#:custom_type};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "typedef": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9b9653dfce6aceb76dd4b0835ba24881": {
      "content": "<style lang=\"stylus\">\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with stylus",
      "matches": {
        "style_with_stylus": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9b9b271d993465a5b600e61ab121527c": {
      "content": "property ${0:name}",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rw": true
      },
      "source": "vim-snippets/snippets"
    },
    "9b9f43e703256c8ff9c3aa72c8f7277f": {
      "content": "Run Keyword And Return If    '\\${${1:rc}}' != '${2:abc}'    ${3:${kw}}    ${4:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword And Return If",
      "matches": {
        "rkari": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9ba7a89f96b2c65db6a0005e6de6d57a": {
      "content": "<% ${1}.each do |${2}| %>\n\t${0}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ead": true
      },
      "source": "vim-snippets/snippets"
    },
    "9baa1f9af22c8be2355d4ce7a1a3405a": {
      "content": "private int ${1}(${2})\n{\n\t${0:return 0;}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mi-": true
      },
      "source": "vim-snippets/snippets"
    },
    "9baeeb47de93ddbbdc3f73cf1dbc1174": {
      "content": "this.props.$0",
      "doc": "Access component's props",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-component-props",
      "matches": {
        "props": true,
        "react component props": true
      },
      "source": "javascript/react"
    },
    "9bb6603419ef695b81735791b7f2adff": {
      "content": "resize: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "9bba31640ae77c83aaff83f4992f4d49": {
      "content": "<style lang=\"postcss\">\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with postcss",
      "matches": {
        "style_with_postcss": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9bbd9d6b0d358bc617be19910300b85f": {
      "content": "expect(${1:target}).not.toHaveAttr('${2:attr}'${3:, '${4:value}'})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to not have attribute (coffee)",
      "matches": {
        "notha": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9bc10b5282041cf09f29eaa0cc6b1985": {
      "content": "\\begin{tikzpicture}[${1}]\n\t${2:TARGET}\n\\end{tikzpicture}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{tikzpicture}": true,
        "tikzpicture": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9bc43cb71ac390065dc7d5ba70135f52": {
      "content": "<% $0 %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<% %>",
      "matches": {
        "%": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9bc51d090efbcc50ffa343ec5437a43f": {
      "content": "\\ **${1:Strong emphasis}**\\ ${0}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "**c": true
      },
      "source": "vim-snippets/snippets"
    },
    "9bc7e83479f0c90f9b835326d1bf27da": {
      "content": "@import '${0}';",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "9bcc5044ba3eb1cfce683d5feecbf7bd": {
      "content": "stopDrag();",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9bd5fe4341eb20824a95a3f4f818d389": {
      "content": "\\left${1:(} ${3:#:body} \\right${2:)}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\left \\right",
      "matches": {
        "\\left": true,
        "left": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9bdb9d454c5bea0aa08f414cf13a9ce3": {
      "content": "\\\\langle ${0:${VISUAL}} \\\\rangle",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "langle rangle",
      "matches": {
        "lra": true
      },
      "source": "vim-snippets/snippets"
    },
    "9bddc92369f42e8640160b6a08d74ca2": {
      "content": "<svelte:options ${1|immutable,accessors,namespace,tag|}={${2:value}}/>",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-options",
      "matches": {
        "svelte options": true,
        "svop": true
      },
      "source": "javascript/svelte"
    },
    "9bdef3d3f507892870813e531c01c36b": {
      "content": "try {\n\t${0:${VISUAL}}\n} catch(${1:Exception} ${2:e}) {\n\t${3}\n} finally {\n\t${4}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcf": true
      },
      "source": "vim-snippets/snippets"
    },
    "9bdf66074692f9501fe9c48bb8c213b8": {
      "content": "include_directories(${${0:include_dir}})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/snippets"
    },
    "9be1393814e25daf90611601243d42d2": {
      "content": "break",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "break",
      "matches": {
        "br": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "9be678a720850289391f2bfdcc791509": {
      "content": "background-size: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "9bf0b1f5d04156f3d51e0bf2f315aacf": {
      "content": "{% static \"${VISUAL}\" %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "static": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9bf4b804e0b7d11b9480bf1788cb6088": {
      "content": "\\\\left\\\\{ ${0:${VISUAL}} \\\\right\\\\}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "left\\{ right\\}",
      "matches": {
        "lr{": true
      },
      "source": "vim-snippets/snippets"
    },
    "9bf75d6217ce6991b63045a764edca97": {
      "content": "Else\n\t${0}",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "9bf9110aa8fbdd20b4e075c538c8fe65": {
      "content": "@synthesize ${1:#:property};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "syn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9c051654201a94d448cf76077c5744ee": {
      "content": "use Doctrine\\ORM\\Mapping as ORM;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Doctrine\\..\\Mapping as ORM",
      "matches": {
        "useorm": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9c0750549b402cf0e4afb765ef535243": {
      "content": "page-break-after: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c1033cb7832e7c91d65b40b73a0642e": {
      "content": "(require ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c142bc7b88d010358adca3d8366c3a6": {
      "content": "import React from 'react'\nimport renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\n\nimport store from 'src/store'\nimport { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(\n\t\t<Provider store={store}>\n\t\t <${1:${TM_FILENAME_BASE}} {...defaultProps} />\n\t\t</Provider>,\n\t)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
      "doc": "Create test component",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "setupReactComponentTestWithRedux",
      "matches": {
        "srtest": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "9c14cc97a5ad0cba5ddbf88ed959c982": {
      "content": "${1:callbacks}.empty()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cempty": true
      },
      "source": "snippets/javascript"
    },
    "9c190c3eeb8b6293871c675c17f4508d": {
      "content": "cast(${1:T})(${2:val});",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cast": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c1aba33c9e12ae8c6eed163ddb26d9e": {
      "content": "validates :${0:attribute}, numericality: true",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vn": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c1f9ca28c9f8137f7024fd33a215488": {
      "content": "if !reflect.DeepEqual(${1:expected}, ${2:actual}) {\n\t_, file, line, _ := runtime.Caller(0)\n\tfmt.Printf(\"%s:%d:\\n\\n\\texp: %#v\\n\\n\\tgot: %#v\\n\\n\", filepath.Base(file), line, $1, $2)\n\tt.FailNow()\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "equals: test two identifiers with DeepEqual",
      "matches": {
        "eq": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "9c20dc23099daaaf02f2b4e21f169905": {
      "content": "@book{${1:name},\n\tauthor={${2:author}},\n\ttitle={${3:title}},\n\tsubtitle={${4:subtitle}},\n\tyear={${5:YYYY}},\n\tlocation={${6:somewhere}},\n\tpublisher={${7:publisher}},\n\tpages={${8:NN}--${9:NN}}\n}\n$0",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "Book reference",
      "matches": {
        "book": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9c28722888f89cc64e851e03f696aab0": {
      "content": "visibility: collapse;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c3e89c8d9d170f748295188b56c9e8c": {
      "content": "border-left: ${1:1px} ${2:solid} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdl+": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c47e5547fb3b258351dfe124946e8e8": {
      "content": "alias_method_chain :${1:method_name}, :${0:feature}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "amc": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c573f6cd4d8cc5275c153ae69bd8254": {
      "content": "int ${1:z} = threadIdx.z + blockIdx.z * blockDim.z;",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Get current Z index (1D)",
      "matches": {
        "iz": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c5863560d116b98449d05b11191ec73": {
      "content": "const (\n\t${1:NAME} ${2:Type} = iota\n\t${0}\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "const ( ... = iota )",
      "matches": {
        "iota": true
      },
      "source": "gosnippets/snippets"
    },
    "9c59a14f6f5546211f8cfe8a58084727": {
      "content": "def self.${1:class_method_name}\n\t${0}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defs": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c5ddd8a58a0692f114d88a556f64d39": {
      "content": "<style lang=\"sass\">\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with sass",
      "matches": {
        "style_with_sass": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9c68fa8c78dcab478287102c1fc89070": {
      "content": "v-on:${1:event}=\"${2:handle}\"",
      "doc": "Expects: Function | Inline Statement",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-on",
      "matches": {
        "von": true,
        "vue v-on": true
      },
      "source": "javascript/vue"
    },
    "9c6e6dc88505d4238d211d80de40139c": {
      "content": ":before",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":b": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c724e76f902a48d413240e741268d55": {
      "content": "refute_instance_of ${1:UnexpectedClass}, ${2:actual_instance}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rfio": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c757c07a9b3dc123993ce279dfb2952": {
      "content": "@yield('${1}')",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@yield",
      "matches": {
        "yl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9c7e9bb7584b5fd9b1f19cd91dae44f9": {
      "content": "text-align center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c854809d48c8ab0fcb042d8b2d73c9b": {
      "content": "{{#${1:value}}}\n${2:${VISUAL}}\n{{/$1}}\n{{^$1}}\n${3}\n{{/$1}}",
      "doc": "",
      "filetype": "mustache",
      "grammar": "snu",
      "label": "# {{#value}} ... {{/value}} {{^value}} ... {{/value}}",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c889ed6548a1ce52449a0b3d89a3397": {
      "content": "import (\n\t\"${1:package}\"\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Import declaration",
      "matches": {
        "/^import/": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9c8ab978ec22bb68aac55fb0afee031d": {
      "content": "<span>${0}</span>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "span": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c93ed17e1460ff3e979dc39e7c9753e": {
      "content": "$${1:#:retVal} = (${2:#:condition}) ? ${3:#:a} : ${4:#:b};",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if?": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9c955908efb60d5a78933cebed0edf0f": {
      "content": "expect($1).resolves$0",
      "doc": "expect promise resolves to",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-expect-resolves",
      "matches": {
        "expr": true,
        "jest expect resolves": true
      },
      "source": "javascript/jest"
    },
    "9c9c6cb480dcdcfb75d2e6f3d583148b": {
      "content": "public int ${1}(${2})\n{\n\t${0:return 0;}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mi+": true
      },
      "source": "vim-snippets/snippets"
    },
    "9c9e52a0b7366524ea3275d7c06ad4e1": {
      "content": "task ${1} is\n\tentry ${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "task",
      "matches": {
        "task": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ca3234da50acf70ae8cfdf256210258": {
      "content": "border-style: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds": true
      },
      "source": "vim-snippets/snippets"
    },
    "9cab258521ffa10b47e23963ab98c1cb": {
      "content": "<nuxt>$1</nuxt>$0",
      "doc": "",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-view",
      "matches": {
        "nuxt view": true
      },
      "source": "javascript/nuxt"
    },
    "9cad368faa595e0947a180b7b96cbf98": {
      "content": "display: block",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "9cafd85cc8960aba4c8455cd9aed2678": {
      "content": "<i>${0}</i>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "i": true
      },
      "source": "vim-snippets/snippets"
    },
    "9cb6c21f3bae8637d5d146eeedf34590": {
      "content": "<%= ${1:f}.password_field :${0:attribute} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffpf": true
      },
      "source": "vim-snippets/snippets"
    },
    "9cb89321e69b352026390a1901fe8ac4": {
      "content": "<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "end": true
      },
      "source": "vim-snippets/snippets"
    },
    "9cb8ebf8a8dea844eb4db8d06d11e0ea": {
      "content": "import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nconst styles = StyleSheet.create({})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativeFunctionalComponentWithStyles",
      "matches": {
        "rnfs": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "9cc375b07928351ce1d59b4ade29c15b": {
      "content": "${1:/*return type*/} opDispatch(string s)()\n{\n\t$2;\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "opDispatch (opDis)",
      "matches": {
        "opDis": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9cccf5d7273b79a51f71564ec6fb8245": {
      "content": "must_be_within_epsilon ${1:0.1}, ${2:0.1}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbwe": true
      },
      "source": "vim-snippets/snippets"
    },
    "9cd56e6be62e6f95d30d130f9827265a": {
      "content": "camera(${1:eyeX}, ${2:eyeY}, ${3:eyeZ}, ${4:centerX}, ${5:centerY}, ${6:centerZ}, ${7:upX}, ${8:upY}, ${0:upZ});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "camera": true
      },
      "source": "vim-snippets/snippets"
    },
    "9cee23e2a24027f67f85d10d7558de5b": {
      "content": "date.min()",
      "doc": "date.min(limit: Date | string | Ref, message?: string | function): Schema\n\nSet the minimum date allowed. When a string is provided it will attempt to cast to a date first\nand use the result as the limit.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "date-min",
      "matches": {
        "yup date min": true
      },
      "source": "javascript/yup"
    },
    "9cefd13ef13a685f1311e26803243c04": {
      "content": "import ${1:Name} from '@/components/${1:Name}.vue'\n\nexport default {\n\tcomponents: {\n\t\t${1:Name}\n\t},\n}",
      "doc": "import a component and include it in export default",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-import-export",
      "matches": {
        "vimport-export": true,
        "vue import export": true
      },
      "source": "javascript/vue"
    },
    "9cf139c5f91a7963a78356e84fce9319": {
      "content": "text-height: text-size",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "9cfc21772963541c0773c8c7bc8affac": {
      "content": "static propTypes = {\n\t${1}: PropTypes.${2}\n};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "static propTypes",
      "matches": {
        "spt": true
      },
      "source": "snippets/javascript"
    },
    "9cff8c69472d38a3172037f7202f826c": {
      "content": "filters: {\n\t${1:fnName}: function(${2:value}) {\n\t\treturn;\n\t}\n}",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vfilter": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d08e17fb613411c4e002f63c61e0978": {
      "content": "case ${1:value}:\n\t${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "case ...:",
      "matches": {
        "case": true
      },
      "source": "gosnippets/snippets"
    },
    "9d117eeaad699cae64649b56b5c8ce28": {
      "content": "defmodule ${1:module_name} do\n  ${2:TARGET}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "def module",
      "matches": {
        "defm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9d17303dcc259475ffe44339794ef0c2": {
      "content": "if $${1:variable} {\n\t${0}\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d1ef0a8117a524d1a558c47ae4cd3d2": {
      "content": "white-space: pre-line;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:pl": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d1fbda1ae571038a261929c21d7a2c0": {
      "content": "NSException *${1:badness};\n$1 = [NSException exceptionWithName:@\"${2:$1Name}\"\n                             reason:@\"${0}\"\n                           userInfo:nil];\n[$1 raise];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "except": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d20690d49d889e5b2b0be2e5afa0c2a": {
      "content": "{% if ${1:condition} %}\n\t${0:${VISUAL}}\n{% endif %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d272aaf70528a7cd17e7ccae19d5eef": {
      "content": "require [\"${1:#dependencies1}\"], (${2:#dependencies2}) ->\n\t${0:TARGET}",
      "doc": "",
      "filetype": "requirejs_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reqjs": true
      },
      "source": "snippets/coffee"
    },
    "9d2879613132d3b63084f7cb178b98cb": {
      "content": "after ${1:ms} ${0:#do something}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "af": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d2ac5c26b3ea46c945566310d184ad0": {
      "content": "public ${1:int} ${2:MyProperty} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "propr": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d3117b10190592ebb8146ac37c574e0": {
      "content": "#lang datalog",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#d": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d32596478ec78c5e321b1f47e2849ab": {
      "content": "| strip_newlines",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "strip_newlines": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d391e109617f025de6ecde2b533e475": {
      "content": "var ${1:x} ${2:Type}${3: = ${0:value}}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "var x Type [= ...]",
      "matches": {
        "var": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "9d392c08febee686cf732f2ac3d28b66": {
      "content": "if(${1:#:condition})\n\t${0}\nendif()",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "if() endif()",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9d408ba2f2eca6eefbd5c0ebc030b2b4": {
      "content": "import Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n\tstate: {\n\t\t${1:key}: ${2:value}\n\t}\n});",
      "doc": "Base for Vuex store",
      "filetype": "vuex",
      "grammar": "lsp",
      "label": "vuex-store",
      "matches": {
        "vstore": true,
        "vuex store": true
      },
      "source": "javascript/vuex"
    },
    "9d43c798485dec871abc8984b423db22": {
      "content": "import { compose, graphql } from 'react-apollo'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "graphQLForComponent",
      "matches": {
        "graphql": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "9d45522c7940601e0ed4bf1662a104f5": {
      "content": "parameters{\n\t${1}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parameters": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d57cbeaab646d9a1e1d6d7b820fc82e": {
      "content": "${1:deferred}.notify(${2:args})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dnotify": true
      },
      "source": "snippets/coffee"
    },
    "9d59c1becd706029db896da146bae441": {
      "content": "attr_accessor :${0:attr_names}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rw": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d5bcc6f5d939d21c8abd3f8fcedda3f": {
      "content": "assert_kind_of ${1:ExpectedKind}, ${2:actual_instance}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asko": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d6105ec91ed31f73c40e201acbe17ec": {
      "content": "if defined(${1:Resource}[\"${2:name}\"]) {\n\t${0}\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifd": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d7f7303f6b0f8f3e32d34892dcb4c72": {
      "content": "throw new ${1}Exception(${2:\"${3:#:Error Processing Request}\"}${4:});\n${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "throw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9d8535d6b1881b4f9801dc1f969fa5de": {
      "content": "#if ${1:FOO}\n\t${0:${VISUAL}}\n#endif",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#if": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d88a70cb88831dbd2ede8f70c25118c": {
      "content": "<div id=\"${1}\">\n\t${0}\n</div>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "div#": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d89be77563b75237f9b3124f0ce6ae0": {
      "content": "componentWillUnmount() {\n\t$0\n}\n",
      "doc": "Invoked immediately before a component is unmounted from the DOM.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentWillUnmount",
      "matches": {
        "cwun": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "9d8aa971e668b72e05baec4dd85087de": {
      "content": "<mark>${0}</mark>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mark": true
      },
      "source": "vim-snippets/snippets"
    },
    "9d8ca621066f7fa69ed5d166609f33ea": {
      "content": "${1:name}=\"${2:something}\"",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "var-assign",
      "matches": {
        "assign": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9da36244588e8979d1c0157185520a6c": {
      "content": "${1:deferred}.progress(${2:callbacks})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dprog": true
      },
      "source": "snippets/coffee"
    },
    "9dabdd008a9f1d371fdfa98e3c1f7171": {
      "content": "when {\n\tbuildingTag '${1:tag}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whenbuildingTag": true
      },
      "source": "vim-snippets/snippets"
    },
    "9daddeb3ea9c582462ca2af5894255d2": {
      "content": "\\nocite{${1}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\nocite": true,
        "nocite": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9dae0cc918ea965216e5f242d30d8863": {
      "content": "must_include ${0:what}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mi": true
      },
      "source": "vim-snippets/snippets"
    },
    "9dafa561b5b1bed56883f800c3ee029a": {
      "content": "\\begin{columns}\n\t\\begin{column}{${1:#:width}${2:\\\\\\textwidth}}\n\t\t${0:#:body}\n\t\\end{column}\n\\end{columns}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{columns} \\columns": true,
        "columns": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9db146df5266d0e51afaf9a1466f3c4d": {
      "content": "NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "NSDictionary (dict)",
      "matches": {
        "dict": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9db20133f80e0df9b1b7646fef89cd36": {
      "content": "Yii::app()->cache->get('${0:key}');",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ycag": true
      },
      "source": "vim-snippets/snippets"
    },
    "9dc747bb8120d7c3a8391a3a0b1d7edf": {
      "content": "const initialState = {\n\n}\n\nexport default (state = initialState, { type, payload }) => {\n\tswitch (type) {\n\n\tcase ${1:typeName}:\n\t\treturn { ...state, ...payload }\n\n\tdefault:\n\t\treturn state\n\t}\n}\n",
      "doc": "Redux reducer template",
      "filetype": "redux",
      "grammar": "lsp",
      "label": "redux-reducer",
      "matches": {
        "redux reducer": true,
        "rxreducer": true
      },
      "source": "javascript/redux"
    },
    "9dc9dd95c82c8f81181b9d3a18bcbbe1": {
      "content": "# -*- coding: latin-1 -*-",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clatin1": true
      },
      "source": "vim-snippets/snippets"
    },
    "9dd1015ba8ef51dbb86eeccc06b941c0": {
      "content": "class ${1} {\n\t${2}\n\tconstructor(public ${3}: ${4: any}) {\n\t\t${5}\n\t}\n\t${0}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts class",
      "matches": {
        "tcla": true
      },
      "source": "vim-snippets/snippets"
    },
    "9dda1e9a028b400b1574da2381d3b84d": {
      "content": "render json:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render :json",
      "matches": {
        "rj": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9ddc18136ffe190d6e8edd73a7bc6a72": {
      "content": "/**\n * {@inheritdoc}\n */",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "@inheritdoc docblock",
      "matches": {
        "inheritdoc": true
      },
      "source": "vim-snippets/snippets"
    },
    "9de7a5334be8baf6efe276bba3c3d983": {
      "content": "render",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render",
      "matches": {
        "rr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9dee9459909ac7ff2fdde6407ef6da2d": {
      "content": "def ${1:#:name}(${2}):\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "def function(...): ...",
      "matches": {
        "def": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9df264d546c7126b4555a3c0ae6245b5": {
      "content": "${1:callbacks}.add(${2:callbacks})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cadd": true
      },
      "source": "snippets/javascript"
    },
    "9df294c4ae9040c06e044bbfae3e6eb1": {
      "content": "switch(${1}){\n\tcase ${2}:\n\t\t${0}\n\tbreak;\n\tdefault:\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "9df782326a342f94f7288113b1b5aea6": {
      "content": "<aside id=\"${1}\">\n\t${0}\n</aside>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aside#": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e01258eaf713dca1c111fca4eea0b9d": {
      "content": "PropTypes.node.isRequired,",
      "doc": "Anything that can be rendered: numbers, strings, elements or an array required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-node-required",
      "matches": {
        "prop-types node required": true,
        "ptndr": true
      },
      "source": "javascript/prop-types"
    },
    "9e0813fe3ebb99a0a6d64ab1afde62b9": {
      "content": "left: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "l:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e10bc8f7f120b127b0097704d987898": {
      "content": "map(&:${0:id})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mp": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e14d250eb96ad37e2520866ba23b164": {
      "content": "align-content: last baseline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:lb": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e1b0046db1b1e594d3386cbe3ff02e5": {
      "content": "SCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sdir": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e295517943259982135772ad8424c4a": {
      "content": "blockDim.${0}",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Block Dimension",
      "matches": {
        "bdim": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e2c570d5912323eef86f3218793fe0e": {
      "content": "\\${2}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${2}",
      "matches": {
        "2": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9e3a42c71bcb98f4d5699bcad156ed39": {
      "content": "<hr>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9e3ff50b5b35a076baeed339ffe7c32d": {
      "content": ".. caution:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "caution",
      "matches": {
        "caution": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9e53103f522a025492a5b0db26354ca4": {
      "content": "<script lang=\"ts\">\nimport Vue from 'vue'\nexport default Vue.extend({\n  ${0}\n})\n</script>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <script> with TypeScript",
      "matches": {
        "script_with_TypeScript": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9e55609fed59bae5d9e7db22e9d955bc": {
      "content": "import gsap from 'gsap';",
      "doc": "import gsap library",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Import GSAP",
      "matches": {
        "vimport-gsap": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "9e5758bfb009e87564f3212e50e5fa74": {
      "content": "vertical-align super",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:sup": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e5d993c24545ab5025f35d6d9296f4c": {
      "content": "border-fit: space;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:sp": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e69d409dc22672a0fc64cb0f9ac7722": {
      "content": "grid-auto-flow ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e6a025e9707f60c4930596ec136f508": {
      "content": "if ${1}\n\t${2}\nelse\n\t${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "full if-else statement",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e6ce590f1fba7aa5770990443f5fc0b": {
      "content": "align-items stretch",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e74b3b232c7fa57c7fb7cfd94e44772": {
      "content": "{% set ${1:#:var} = ${2:#:value} %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% set ... = ... %}",
      "matches": {
        "set": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9e74f2014943fc7d4a6ffeba7e858242": {
      "content": "while {${1}} {\n\t${0}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e8380404e3dfdfaf86831ab603855a2": {
      "content": "${1:void} ${2:function_name}()\n{\n\t${3}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun0": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e8bc58f1fdf375373ae79c6c6fc61d2": {
      "content": "caption-side: bottom;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cps:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e8dac5c8cadc58baf45b84e0488303b": {
      "content": "reverse_each do |${1:e}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reved": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e9c857e455f4245016bf171db3e198b": {
      "content": "each_key {|${1:#:variable}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each_key": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9e9db8daeea812baf7e164160b42860a": {
      "content": "word-break break-strict",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:bs": true
      },
      "source": "vim-snippets/snippets"
    },
    "9e9dd6e11fbff320d16ee5d6731630e6": {
      "content": "console.time(`${1:object}`)",
      "doc": "Console time wrapper",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleTime",
      "matches": {
        "ctm": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "9ea4f802dc47510ed75362271bae870c": {
      "content": "make(${1:[]string}, ${2:0})${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "make(Type, size)",
      "matches": {
        "make": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "9ea79242fb3ddd6bd244422d66a8a950": {
      "content": "float: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl": true
      },
      "source": "vim-snippets/snippets"
    },
    "9eb9413a7d2a6942cd80bdf082fbab1b": {
      "content": "enum ${1}\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enum": true
      },
      "source": "vim-snippets/snippets"
    },
    "9eba1c0e73e70ebbf6edcd908f0169c6": {
      "content": "{% layout none %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "layoutnone": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ebd8c5c234c736d874492d1b5daa6f8": {
      "content": "scope(${1:exit})\n{\n\t${VISUAL}$2\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "scope (scope)",
      "matches": {
        "scope": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9ec9404595dac1749f0a0ba6138271e2": {
      "content": "elif ${1:#:condition}:\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "elif ...: ...",
      "matches": {
        "elif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9ecb88ade8bb96423e7325cfb30939dd": {
      "content": "has_many :${0:object}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hm": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ece255f3f5564bd1e5467dc16518d69": {
      "content": "@import url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@i": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ed04814be99ab187217f2c333477660": {
      "content": "var _self = this;",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_sthis": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ed4fd72e41a39454d910cb2b4fbcae4": {
      "content": "function ${1:}(${2})\n\t${3}\nend function $1",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "function",
      "matches": {
        "fu": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9edcc9f48e6c02965477a76efc0f5df4": {
      "content": "enum ${1:Name} {\n\t${2},\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "enum definition",
      "matches": {
        "enum": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ee018baad7f2584ff0b42b467b6e6a9": {
      "content": "place-self center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ee06797f5f6f8621015c831886d9365": {
      "content": "alpha(${0:color});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alpha": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ee99c0bd1ca48022a366211a5e87e54": {
      "content": "$this->renderDynamic('${0:callback}');",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yrd": true
      },
      "source": "vim-snippets/snippets"
    },
    "9eea344ee8b6c8b15abe18f07697430b": {
      "content": "@selector(${1:method}:)",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "@selector",
      "matches": {
        "sel": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9ef5e7f1f4903db81b8cc6f11c9f6204": {
      "content": "<?php $this->${0} ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pthis": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9efd17de1290861ee5ac6be204f481d3": {
      "content": "join(${1:strgArray}${2: , }${0:seperator});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "join": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f003538683c9b10511f1b73c8ede7bf": {
      "content": "@spec ${1:name}(${2:arg types}) :: ${3:no_return}\ndef $1(${4:args}) do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defs": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f03490c80b6fe51ebf4e52164501bd9": {
      "content": "display: table-footer-group;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbfg": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f04e285a1c7e5a4b55459e63032b19b": {
      "content": "if ${1} {\n\t${2:${VISUAL}}\n} else {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "if / else",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f074f19bc4382c86039836454838e3b": {
      "content": "error_log(var_export(${1}, true));",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "error_log(var_export($var, true));",
      "matches": {
        "log": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f0a3c696a34026e2a49de830e385485": {
      "content": "display: -moz-inline-stack;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:mis": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f0b9c353cdb3935fadce8dabffae02d": {
      "content": "{% apply ${1:function} %}\n  ${0}\n{% end %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "apply": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f0d57fac7fa3991178442914188f58c": {
      "content": "align-self: flex-start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f0fe18f15d350f8aa4ef88326e78b4f": {
      "content": "def ${1:#:name}(self, ${2}):\n\t\"\"\"${3:#:method documentation}\"\"\"\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "def method(self, ...): \"...\"",
      "matches": {
        "defmd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9f27429b43a72fe93dcb32f969ce46f7": {
      "content": "this.props.$0",
      "doc": "Access component's props",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentProps",
      "matches": {
        "props": true
      },
      "source": "vscode-react/snippets"
    },
    "9f35d5bb5fde1b8409649c3e595b83d8": {
      "content": "var tests = []struct {\n    name string\n    expected string\n    given string\n}{\n    {\"${2}\", \"${3}\", \"${4}\",},\n}\nfor _, tt := range tests {\n    tt := tt\n    t.Run(tt.name, func(t *testing.T){\n        actual := ${1:Function}(tt.given)\n        if actual != tt.expected {\n            t.Errorf(\"given(%s): expected %s, actual %s\", tt.given, tt.expected, actual)\n        }\n    })\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "var test = {...}{...} for {t.Run(){...}}",
      "matches": {
        "tt": true
      },
      "source": "gosnippets/snippets"
    },
    "9f35fbf35226a7b2f8ef3a68fb950a95": {
      "content": "cy.clearCookies();",
      "doc": "Clear all browser cookies for current domain and subdomain.",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-cookies-clear-all",
      "matches": {
        "cypress cookies clear all": true
      },
      "source": "javascript/cypress"
    },
    "9f3cdc921884a8b496442618750eeb87": {
      "content": "padding: ${1:0} ${2:0} ${3:0};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:3": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f4bb8bf517b19dd25614f7647f8cf34": {
      "content": "\\${1}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${1}",
      "matches": {
        "1": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9f4d7f768ce36106e7a9942988a5d007": {
      "content": "<IfModule ${1:mod_example.c}>\n\t${0:${VISUAL}}\n</IfModule>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifmodule": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f4d810030da5dbf2f555d282262b31d": {
      "content": "for ${2:i} := 0; $2 < ${1:count}; $2${3:++} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for int loop",
      "matches": {
        "fori": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f4e7b9cf23b5c290f9d3c98a9681eae": {
      "content": "Execute Javascript    ${1:${code line 1}}    ${2:${code line 2}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Execute Javascript",
      "matches": {
        "ej": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9f5d937fc772fe5a23ac0ac7d6261396": {
      "content": "${1:obj}.find('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "find": true
      },
      "source": "snippets/coffee"
    },
    "9f60e9d7c7963ae352c67b6c30e1f3c5": {
      "content": "nfs(${2:value}, ${3:left}${4:, }${0:right});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nfs": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f6a43c68ba7c96c6b30d2a8c79c455c": {
      "content": "<${1:div} v-for=\"${2:item} in ${2:item}s\" :key=\"${2:item}.id\">\n\t{{ ${2:item} }}\n</${1:div}>",
      "doc": "vfor statement",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue v-for",
      "matches": {
        "vfor": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "9f77ff921ec5f9a816bd6b6c15ce0f02": {
      "content": "main : Program ${1:Flags} ${2:Model} ${3:Msg}\nmain =\n\t${4:Html.}programWithFlags\n\t\t{ init: ${6:initWithFlags}\n\t\t, update: ${7:update}\n\t\t, subscriptions: ${8:subscriptions}\n\t\t${9:, view: ${10:view\\}}\n\t\t}\n${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "main : Program",
      "matches": {
        "progf mainf": true,
        "programWithFlags": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9f7c6f0161435acc4d5b7bda03c502d5": {
      "content": "<typeparam name=\"${1:#:name}\">${0:#:description}</typeparam>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<typeparam name=\"\"></typeparam>",
      "matches": {
        "typeparam": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9f89b593d5b247ad0c83ca06f5ebd590": {
      "content": "set title ${1:#:title}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set title '...'",
      "matches": {
        "title": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "9f93bb27b82d83bdddef68e517eb1901": {
      "content": "<input type=\"hidden\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:hidden": true
      },
      "source": "vim-snippets/snippets"
    },
    "9f96fffaf294dbc74f097cf10734fc24": {
      "content": "display ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d": true
      },
      "source": "vim-snippets/snippets"
    },
    "9fa48a6a346f68fae7494876f939040e": {
      "content": "{{ ${0} }}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{": true
      },
      "source": "vim-snippets/snippets"
    },
    "9fad6bfa2a37dafa7735b761f30e4513": {
      "content": "this.props.$0",
      "doc": "Access component's props",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentProps",
      "matches": {
        "props": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "9fb84d5a54b995e84abf865e505fb46a": {
      "content": "list-style-type ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/snippets"
    },
    "9fbf5e2c523ea3cc75dbe90501195b7e": {
      "content": "perspective(${1:fov}, ${2:aspect}, ${3:zNear}, ${0:zFar});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "perspective": true
      },
      "source": "vim-snippets/snippets"
    },
    "9fc8ecf5b3b34bfa4eca614bf8756ff4": {
      "content": "-webkit-border-radius ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrz:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "9fcc82795325b4f85a0e5ff04f46f850": {
      "content": "overflow: hidden",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "9fe115b2e9517d2fe2fe4c69190994a3": {
      "content": "getters: {\n\t${1:value}: state => {\n\t\treturn state.$1;\n\t}\n}",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vgetters": true
      },
      "source": "vim-snippets/snippets"
    },
    "9feb714a3e23d6e301fbf27872094098": {
      "content": "for ${2:k}, ${3:v} := range ${1} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for k, v := range items { ... }",
      "matches": {
        "forr": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "9ff040f6fc5da31afd1fedbbe601d687": {
      "content": "align-self: flex-end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ff369ee4a59045028748c652ed1efec": {
      "content": "t.binary :${1:title}${2:, limit: ${3:2}.megabytes}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.binary (tcbi)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "9ffc23a6b4650dc170797cd85bc6e371": {
      "content": "var ${1:t} ${0:string}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "variable initialization",
      "matches": {
        "vr": true
      },
      "source": "vim-snippets/snippets"
    },
    "9ffd298311cea82caab983ef8b837da9": {
      "content": "fmt.Printf(\"${1} = %+v\\n\", $1)\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Printf(...)",
      "matches": {
        "ff": true
      },
      "source": "gosnippets/snippets"
    },
    "9ffd8d810b701f382218bb5206201e02": {
      "content": "word-break normal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "a008288e14e5bc67dbb72f1f345fb09f": {
      "content": "<section id=\"${1}\">\n\t${0}\n</section>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "section#": true
      },
      "source": "vim-snippets/snippets"
    },
    "a00d11b01679e7efd200e06531586c73": {
      "content": "<button id=\"${1}\" type=\"${2:submit}\">${0}</button>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "button#": true
      },
      "source": "vim-snippets/snippets"
    },
    "a00dc139217ac02ac4838952542bcd2f": {
      "content": "grid-template-areas ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gta": true
      },
      "source": "vim-snippets/snippets"
    },
    "a00faca748ab3c0d920ac54960f9ec5d": {
      "content": "std::queue<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "queue": true
      },
      "source": "vim-snippets/snippets"
    },
    "a012792a7b0a5678bc4c5859edfb1dfd": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script setup lang=\"ts\">\n\n</script>\n\n<style scoped>\n\n</style>",
      "doc": "Base for Vue File Setup Composition API - Typescript",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component Setup Composition API with Typescript",
      "matches": {
        "vbase-3-ts-setup": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "a0135b5017653e2053e828d7662f89ca": {
      "content": "${1:f}: (${2:args}) =>\n  ${0:TARGET}",
      "doc": "",
      "filetype": "moon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a0152f75969393133071bcf04bf71fc5": {
      "content": "align-content: last baseline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:lb": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0231475c3d24f85d2d88cf47ac58c84": {
      "content": "align-self start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0261d423aadf6c90ca6e5ed307931bf": {
      "content": "${1}\t=> ${0}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        ">": true
      },
      "source": "vim-snippets/snippets"
    },
    "a027925c286f19ccdc0dbb1229b58455": {
      "content": "if err != nil {\n\t${1}\n\treturn\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err != nil { ... return }",
      "matches": {
        "errh": true
      },
      "source": "gosnippets/snippets"
    },
    "a027db9f9579fefbe096714d8d612645": {
      "content": "case ${1:#:expression} :\n\t${1:TARGET}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "ce",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a029bd38e42741fe965ed13c8ce0478a": {
      "content": "# given: ${1}\n# when: ${2}\n# then: ${3}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tgwt": true
      },
      "source": "vim-snippets/snippets"
    },
    "a02ddcaa085f3f3186339c1f8b35de21": {
      "content": "=head2 $1\nSummary of $1\n=cut\nsub ${1:subroutine_name} {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "subpod": true
      },
      "source": "vim-snippets/snippets"
    },
    "a03159dbdb4fd89d83db25fd2d5c5d53": {
      "content": "@enter-cancelled=\"$1\"$0",
      "doc": "@enter-cancelled=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-enter-cancelled",
      "matches": {
        "entercancelledevent": true,
        "vue enter-cancelled": true
      },
      "source": "javascript/vue"
    },
    "a03370536402be11da13cd5cf2db34b3": {
      "content": "-> { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "->": true
      },
      "source": "vim-snippets/snippets"
    },
    "a03584118be74a8df377da0b63eb12af": {
      "content": "Console.ReadLine();",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "Console.ReadLine",
      "matches": {
        "cr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a03b25ec0a7c121762eb84a9870e39c7": {
      "content": "/**\n * ${0}\n */",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a03f912e7130ae2c82845aea5a112e51": {
      "content": "message(STATUS \"${1}\")",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "message(STATUS \"...\")",
      "matches": {
        "status_message": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a044d9a1d218fda2124795dd2a939c62": {
      "content": "import Mixin from '@ember/object/mixin';\n\nexport default Mixin.create({\n\t${0://Properties here...}\n});",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "App.MixinName = Ember.Model.extend({...});",
      "matches": {
        "emix": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a05c06c9cbc347d1e5f297457a749ab9": {
      "content": "trim(${0:str});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trim": true
      },
      "source": "vim-snippets/snippets"
    },
    "a05c26baf47c382477b780a03c0f2519": {
      "content": "margin: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0777c9558e4564fcc3777353efda3ff": {
      "content": "${1:FIELDNAME} = forms.MultiValueField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "MultiValueField",
      "matches": {
        "fmuval": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a07c0de05b74e331bf9854e2288d6ca7": {
      "content": "direction: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d": true,
        "direction": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a081afba021ab39585328291762d7e30": {
      "content": "border-corner-image continue",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtli:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0825c352862a29d0ab0d85451515b90": {
      "content": "componentDidMount() {\n\t$0\n}\n",
      "doc": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentDidMount",
      "matches": {
        "cdm": true
      },
      "source": "vscode-react/snippets"
    },
    "a082c581c1e7363ac962a452414fc1c7": {
      "content": "[self lockFocus];\n$0\n[self unlockFocus];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Lock Focus",
      "matches": {
        "focus": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a08fc5d68ffa9df56de55ac558fa6554": {
      "content": "render inline: \"${0:<%= 'hello' %>}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ri": true
      },
      "source": "vim-snippets/snippets"
    },
    "a095aa10a0c279980a12a952bea29ed0": {
      "content": "justify-self end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "a097c877b0f26c263bb494984332e1cc": {
      "content": "<textarea name=\"${1}\" id=\"${2:$1}\" rows=\"${3:8}\" cols=\"${4:40}\">${5}</textarea>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "textarea": true
      },
      "source": "vim-snippets/snippets"
    },
    "a09973f9f7644050bd520960748232ca": {
      "content": "while ${1:condition} do\n\t${0:--body}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "while": true
      },
      "source": "vim-snippets/snippets"
    },
    "a09d67595c9fef13f5264be40ef69773": {
      "content": "<meta http-equiv=\"refresh\" content=\"text/html;charset=UTF-8\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "meta:refresh": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0a9414bf4fd25ab8f59263ce6b18588": {
      "content": "foreach ${1:var} ${2:\\$list} {\n\t$3\n}\n",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "foreach... (foreach)",
      "matches": {
        "foreach": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a0b696f117c79316b3e9e49b4dec296c": {
      "content": "font-style: ${1:normal/italic/oblique};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "font-style:   normal:italic:oblique (font)",
      "matches": {
        "font": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a0b96e300774fe648c2f3d59362e916f": {
      "content": "_.assignWith(${object}, ${sources}, ${customizer})",
      "doc": "function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = _.partialRight(_.assignWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n\nThis method is like `_.assign` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-assignwith",
      "matches": {
        "lodash assignwith": true
      },
      "source": "javascript/lodash"
    },
    "a0bcd9ad5db2a1e22f31cc8d401cfe70": {
      "content": "place-content: stretch;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0c113dc64a066af981116a833130fa1": {
      "content": "page-break-before: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0c795dee59bd9ee59e7375d2248a6aa": {
      "content": "if (!${1}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "if (!condition) { ... }",
      "matches": {
        "ifn": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0c8ff3d7f4ca494683bfec7b7c12186": {
      "content": "${1:obj}.bind('${2:event name}', function (${3:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bind": true
      },
      "source": "snippets/javascript"
    },
    "a0c8ffc77bbf6e3617fadf033fe127a2": {
      "content": "const ${1} = new ${0};",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "constn": true
      },
      "source": "snippets/javascript"
    },
    "a0c95a4874226a3a1cc018fa1f03e883": {
      "content": "|> Seq.map (fun x -> printfn \"%A\" x; x) // tap",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stap": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0c987e79b0d899f19bc7fc27cb593dc": {
      "content": "head () {\n\treturn {\n\t\ttitle: '${1:title}',\n\t\tmeta: [\n\t\t\t{ hid: '${2:description}', name: '${3:description}', content: '${4:custom description}' }\n\t\t]\n\t}\n},",
      "doc": "Use the head method to set the HTML Head tags for the current page",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-head",
      "matches": {
        "nuxt head": true
      },
      "source": "javascript/nuxt"
    },
    "a0cabce63ce94c333300438bf20e119f": {
      "content": "?assertNot(${0})",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asn": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0cb8727508361432f5f82f3a449c381": {
      "content": "{\n\t\"type\": \"npm\",\n\t\"script\": \"${1:start}\",\n\t\"isBackground\": true,\n\t\"presentation\": {\n\t\t\"focus\": true,\n\t\t\"panel\": \"dedicated\"\n\t},\n\t\"group\": {\n\t\t\"kind\": \"build\",\n\t\t\"isDefault\": true\n\t},\n\t\"problemMatcher\": {\n\t\t\"owner\": \"typescript\",\n\t\t\"source\": \"ts\",\n\t\t\"applyTo\": \"closedDocuments\",\n\t\t\"fileLocation\": [\"relative\", \"\\${cwd\\}\"],\n\t\t\"pattern\": \"\\$tsc\",\n\t\t\"background\": {\n\t\t\t\"activeOnStart\": true,\n\t\t\t\"beginsPattern\": {\n\t\t\t\t\"regexp\": \"(.*?)\"\n\t\t\t},\n\t\t\t\"endsPattern\": {\n\t\t\t\t\"regexp\": \"Compiled |Failed to compile.\"\n\t\t\t}\n\t\t}\n\t}\n}",
      "doc": "",
      "filetype": "jsonc",
      "grammar": "lsp",
      "label": "Create task to start Angular",
      "matches": {
        "a-task-start": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "a0d0cbc6e6aa2afda2124bc323b9a324": {
      "content": "$this->shouldNotImplement($1);",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldNotImplement('Type')",
      "matches": {
        "snimplement": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a0d18ae833d7c60dddfee5b8a97b99fe": {
      "content": "text-justify: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0d2e355b701d746990bf332fab73f05": {
      "content": "[$1 for ${1:x} in ${2:#:list} if ${3:#:condition}]",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "[x for x in {list} if {condition}]",
      "matches": {
        "filter": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a0de5a4cfbaaa0a9196ea92a0d2c2f9b": {
      "content": "PropTypes.string.isRequired,",
      "doc": "String prop type required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-string-required",
      "matches": {
        "prop-types string required": true,
        "ptsr": true
      },
      "source": "javascript/prop-types"
    },
    "a0df08dce4bc26e3512abb6dd68aa1f2": {
      "content": "list-style-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisi": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0eb2bb18b4faa97ec9edd64080e06a3": {
      "content": "Vue.directive('${1:directiveName}', {\n\tbind(el, binding, vnode) {\n\t\tel.style.${2:arg} = binding.value.${2:arg};\n\t}\n});",
      "doc": "vue custom directive",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Custom Directive",
      "matches": {
        "vc-direct": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "a0ec0751ba35d14d340439dd7960b726": {
      "content": "has ${1:Type} ${2:$!identifier};",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "has": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0ecce00eab5ae2d45157d9223e8490e": {
      "content": "return render_to_response('${1:template.html}', {\n\t\t${2}\n\t}${0:, context_instance=RequestContext(request)}\n)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r2r": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0fa74dc27c471f5ee5f8b9269fabc0b": {
      "content": "<%= password_input ${1:f}, :${2:password} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "password_input",
      "matches": {
        "pi": true
      },
      "source": "vim-snippets/snippets"
    },
    "a0fb16b875f0b4315176c7fc289e17c3": {
      "content": "<q>${0}</q>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q": true
      },
      "source": "vim-snippets/snippets"
    },
    "a10a8131d5ecbf35108411f94da62162": {
      "content": "System.err.println(\"${0:Message}\");",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "errln": true
      },
      "source": "vim-snippets/snippets"
    },
    "a10b9ba7560037482e1fd9a8e256ef57": {
      "content": "$_COOKIE['${1:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "C": true
      },
      "source": "vim-snippets/snippets"
    },
    "a10c3ea0cd5e650a431f3803c1c38925": {
      "content": "justify-content: start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1146cb97b4a9006c7f27dd37eab2e75": {
      "content": "-webkit-border-image: url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${7:stretch};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:w+": true
      },
      "source": "vim-snippets/snippets"
    },
    "a120507cfb298d6bedcc88168c716197": {
      "content": "console.groupEnd()",
      "doc": "Closes out the corresponding console.group().",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleGroupEnd",
      "matches": {
        "cge": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "a125008d6dd62c75e1b18d1fc572b28c": {
      "content": "using ${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "load a package",
      "matches": {
        "use": true
      },
      "source": "vim-snippets/snippets"
    },
    "a13b1bea8dc86b1b7de535be68787e69": {
      "content": "\\\\begin{multicols}{2}\n\t${1}\n\t\\columnbreak\n\t${0}\n\\\\end{multicols}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "two-column environment with multicol",
      "matches": {
        "multicol2": true
      },
      "source": "vim-snippets/snippets"
    },
    "a140edfcbcee0420a8c703ad523348c6": {
      "content": "**${1:bold}**",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "**": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1428c8414087c086591e82ccdff3300": {
      "content": "cursor: url($1);$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "cursor: url (cursor)",
      "matches": {
        "cursor": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a14835f8c6fd52556561f17ef1051593": {
      "content": "border-top-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdti": true
      },
      "source": "vim-snippets/snippets"
    },
    "a14c03aca4c658dadc8b00043039de90": {
      "content": "set output '${1:#:filename}'",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set output 'filename'",
      "matches": {
        "out": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a14da255175c92f8bd79885d44ff7b31": {
      "content": "if ${1:TARGET}\nthen ${2}\nelse ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "if..then..else",
      "matches": {
        "If": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a151f05b5b9ccfb120c9a9b07605aeae": {
      "content": "switch ${1:expression}\n\tcase ${2:item}\n\tcase ${0:item}\n\tdefault\nend",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "a154a9e1917bc720a5d23e53438d358d": {
      "content": "import { css } from 'styled-components';",
      "doc": "import { css } from 'styled-components'",
      "filetype": "styled-components",
      "grammar": "lsp",
      "label": "styled-components-import-css-from-styled-components",
      "matches": {
        "imsccss": true,
        "styled-components import css": true
      },
      "source": "javascript/styled-components"
    },
    "a15bfa345f302976ed4df4ef7942fd18": {
      "content": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n});",
      "doc": "Add the .then and .catch methods to handle promises",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "thenCatch",
      "matches": {
        "thenc": true
      },
      "source": "vscode-javascript/snippets"
    },
    "a16475c78f0cdcb5dc60988b67a3a4da": {
      "content": "${1:fn} : ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}\n$1 ${6} =\n\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn3": true
      },
      "source": "vim-snippets/snippets"
    },
    "a164e36029fcf710a1564b6db8a5ab78": {
      "content": "align-content: baseline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "a164fd4cd54aa62377db85e8ccf74449": {
      "content": "{% endswitch %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endswitch",
      "matches": {
        "endswitch": true
      },
      "source": "vim-snippets/snippets"
    },
    "a175021cda265cb5bd6dc9528585b570": {
      "content": "<ol type=\"a\">${1:TARGET}</ol>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ola": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a176760fefa96a4fa3f0f699205f7c63": {
      "content": "<router-link to=\"$1\">$2</router-link>$0",
      "doc": "<router-link to=''></router-link>. router-link element",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-routerlinkto",
      "matches": {
        "routerlinkto": true,
        "vue routerlinkto": true
      },
      "source": "javascript/vue"
    },
    "a1779bb1898fc1d78f488e9341662a69": {
      "content": "font-emphasize-style accent",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:ac": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1788c243d72c3f9095979f174830e15": {
      "content": "<%call expr=\"${1:name}\">\n\t${0:}\n</%call>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "call": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1850e654f1a06ed239ae4594a69e452": {
      "content": "<a href=\"${1}\" target=\"_blank\" rel=\"noopener\">${2:TARGET}</a>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ahref_blank": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a18b50c86044b7b4950a4acdb5c3d1de": {
      "content": "func ${1:name}(${2:#:arguments})${0}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "func name(...) { ... }",
      "matches": {
        "void": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a191fd0b7e260d9b78511370240006be": {
      "content": "${1} ->\n\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "-": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1932f30172ffb75666b473f733cdcda": {
      "content": "require 'test/unit'\nrequire 'tc_${1:test_case_file}'\nrequire 'tc_${2:test_case_file}'",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ts": true
      },
      "source": "vim-snippets/snippets"
    },
    "a195c4ce2eaccdade992f3d95df22f0c": {
      "content": "${1:FIELDNAME} = models.USStateField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "USStateField",
      "matches": {
        "musstate": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a197c0c9a1c93b3d5051c39b93bd99f1": {
      "content": "render action:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render :action",
      "matches": {
        "ra": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a19bee1e25ac3a7194839b9c5c8017c4": {
      "content": "cummax(${1:x}",
      "doc": "Cummulative max",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "cuma",
      "matches": {
        "cumaax": true
      },
      "source": "vscode-R/snippets"
    },
    "a1a5e0ad9a5bd7efdca8676247bd62d3": {
      "content": "# Development & Debugging, don't forget to uncomment afterwards!\n#--------------------------------------------------------------------------------\n#setwd(\"~/Projekte/${1:}\")\n#opt <- list(${2:}\n#            )\n#--------------------------------------------------------------------------------",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "debug": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1a890078dcd093d1e9801df5381472a": {
      "content": "_.isArrayLike(${value})",
      "doc": "_.isArrayLike([1, 2, 3]);\n// => true\n\n_.isArrayLike(document.body.children);\n// => true\n\n_.isArrayLike('abc');\n// => true\n\n_.isArrayLike(_.noop);\n// => false\n\nChecks if `value` is array-like. A value is considered array-like if it's\nnot a function and has a `value.length` that's an integer greater than or\nequal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isarraylike",
      "matches": {
        "lodash isarraylike": true
      },
      "source": "javascript/lodash"
    },
    "a1aa3b3657a527c9f6499b74636c82c1": {
      "content": "$(this)",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "this": true
      },
      "source": "snippets/coffee"
    },
    "a1aab91c02cf6282af0902e84c713ae5": {
      "content": "<returns>${1}</returns>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<r": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1ab73d602a8a6b968fbd267fe8c5ffd": {
      "content": "subtest '${1: test_name}' => sub {\n\t${2}\n};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "subtest": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1ae543e7f48b12fef533ad25342e537": {
      "content": "<%= ${1:f}.collection_select(:${2:method}, ${3:collection}, :${4:value_method}, :${5:text_method}, options = {${0:prompt: true}}) %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fcs": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1b57b3226fc17b93071d0729140c343": {
      "content": "- (IBAction)${1:method}:(${2:id})sender\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iba": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1b72cf5e5f0177f96ce577813adb96c": {
      "content": "background-repeat: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "backrepeat": true,
        "br": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a1b8e60a5f280e816d65d9ef1df81ae9": {
      "content": "unittest\n{\n\t$1\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "unittest (unittest)",
      "matches": {
        "unittest": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a1bde7487316f1fac1aa2a1075a7a694": {
      "content": "else {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "else",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1c1df1c4948fa28e8eb911a442a6ea7": {
      "content": "word-break: normal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1c8e859073ce220111c525c4eb0c30a": {
      "content": "t.integer :lock_version, null: false, default: 0\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.lock_version (tcl)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a1c93c760b411c51455c135db3e8d355": {
      "content": "<select name=\"${1}\" id=\"${2:$1}\" class=\"${3}>\n\t${0}\n</select>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "select.": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1ce86def80de6380298830f8b6eea26": {
      "content": "(map ${1} ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1cf5187f282df6431945f4c4192c4b9": {
      "content": "console.dirxml(${1:object});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.dirxml",
      "matches": {
        "cdirx": true
      },
      "source": "snippets/javascript"
    },
    "a1d362a67ab58466ad2c9b3a2c567b7b": {
      "content": "{% ifequal ${1} ${2} %}\n\t${0}\n{% endifequal %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifequal": true
      },
      "source": "vim-snippets/snippets"
    },
    "a1db351c47207faca1a74a4ea05ffd8e": {
      "content": "this.state.${1};",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tst": true
      },
      "source": "snippets/javascript"
    },
    "a1eeb386a5cdc6cba6c6cef0cbfe597d": {
      "content": "require_once '${1:file}';",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req1": true
      },
      "source": "vim-snippets/snippets"
    },
    "a20e0c92d049ac1787458275481cb77a": {
      "content": "log.Printf(\"%${1:s}\", ${2:var})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "log printf",
      "matches": {
        "lf": true
      },
      "source": "vim-snippets/snippets"
    },
    "a21a1bf5e0f2bf7c3d129d5f7cddd530": {
      "content": "try\n{\n\t${0:${VISUAL}}\n}\nfinally\n{\n\t${1}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tryf": true
      },
      "source": "vim-snippets/snippets"
    },
    "a21e8d0ded84677679aa762c7525aa20": {
      "content": "echo CHtml::closeTag('${0:tag}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhct": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2213bbc10405fd02b1391a1214fd10c": {
      "content": "export default $1$0",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportDefault",
      "matches": {
        "exp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "a2217953f75c1964d41b05f78eda323d": {
      "content": "${1:obj}.change (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "change": true
      },
      "source": "snippets/coffee"
    },
    "a225bc7b5276056f39cd8f4590aceeea": {
      "content": "file(GLOB_RECURSE ${1:#:var} ${2:#:glob_paths})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "file(GLOB_RECURSE ...)",
      "matches": {
        "file_GLOBE_RECURSE": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a2260a612dc9e02a6e0c06588ff24e5d": {
      "content": "${1:public} static void Main(string[] args)\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "svm": true
      },
      "source": "vim-snippets/snippets"
    },
    "a22697a9dc8c227f95a3243aeb7af1c4": {
      "content": "{%- if ${1:condition} -%}\n\t${0:${VISUAL}}\n{%- endif -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if-": true
      },
      "source": "vim-snippets/snippets"
    },
    "a227e5f4f9064fd8625b886d37e872f2": {
      "content": "case ${1:word} in\n\t${2:pattern})\n\t\t${0};;\nesac",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "a229b5319062e660ea75b680ea23dd5b": {
      "content": "do ${1:i} = ${2:start}, ${3:end}, ${4:incr}\n\t${0}\nend do",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "a22d9c753c4c36a951e712b2bacf6593": {
      "content": "$this->${1:method}()->shouldNotStartWith(${2:'string'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotStartWith('string')",
      "matches": {
        "snstart": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a23169ff8ce2fa058171532dfe0f53a5": {
      "content": "mixed.clone()",
      "doc": "mixed.clone(): Schema\n\nCreates a deep copy of the schema. Clone is used internally to return a new schema with every schema state change.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-clone",
      "matches": {
        "yup mixed clone": true
      },
      "source": "javascript/yup"
    },
    "a2324500d9b0640e0f127d9f10b1a154": {
      "content": "border: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bd": true
      },
      "source": "vim-snippets/snippets"
    },
    "a23af1a50738b95fb2aa8055074a70a8": {
      "content": "Dir[${1:'glob/**/*.rb'}]",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "Dir[\"..\"]",
      "matches": {
        "Dir": true
      },
      "source": "vim-snippets/snippets"
    },
    "a23ca583b5a76740fd7d7d21fa931eb9": {
      "content": "**${1:#:text}**",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "strong": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a2428956b2448fcfaa060d7b2f275ea2": {
      "content": "l_ply(${1:list}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "l_": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2448983e4d56ecc148518d570054abc": {
      "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}})\n",
      "doc": "Creates a React component class with PropTypes with connected redux and ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-class-component-redux-proptypes",
      "matches": {
        "rcreduxp": true,
        "react component class redux proptypes": true
      },
      "source": "javascript/react"
    },
    "a245ca8cb0185d10636cd8c9a8701c2f": {
      "content": "switch ${1:object}\ncase ${2:value}\n\t${3}\ndefault void",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "swi": true
      },
      "source": "vim-snippets/snippets"
    },
    "a24887556356dd0e6c887a5602454917": {
      "content": "${1:obj}.empty()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "empty": true
      },
      "source": "snippets/javascript"
    },
    "a25065c3cbe31db5016d216699771dbe": {
      "content": "@article{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    journal = {${4}},\n    year = {${5}},\n    memo = {volume, number, pages, month, note}\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@article": true,
        "article": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a25b762b99287081ea0771a3d8bab722": {
      "content": "grid-template: ${1} / ${2};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gt+": true
      },
      "source": "vim-snippets/snippets"
    },
    "a27fba5f322a2424946a375165b5fc11": {
      "content": "<c:when test=\"${${1}}\">\n\t${0}\n</c:when>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cwhen": true
      },
      "source": "vim-snippets/snippets"
    },
    "a290a4d0410c8f6060c40400211c0d18": {
      "content": "@section('$1')",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@section directive",
      "matches": {
        "section": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a291dd18494aaabbb2e7c3e0ad19b0b2": {
      "content": "test('${1:should }', async () => {\n\t$0\n});",
      "doc": "creates an test block with async callback function",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-test-async",
      "matches": {
        "jest test async": true,
        "testa": true
      },
      "source": "javascript/jest"
    },
    "a29de419438b077fd1763fc46eeffca0": {
      "content": "read(${1:*},${2:*}) ${3}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "read",
      "matches": {
        "read": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a2aacc67d98cd533831c42c29ab5ad1f": {
      "content": "<xsl:attribute name=\"${1:name}\">\n\t<xsl:value-of select=\"${2:*}\" />\n</xsl:attribute>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "value-of",
      "matches": {
        "attribute": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2b37e7fc6a6557c5061d325c934ed16": {
      "content": "align-content center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2b4ad9956d0322a0b16cbf7f2d810e8": {
      "content": "{{- if and .Values.persistence.enabled .Values.persistence.$1.hostPath (not\n.Values.persistence.$1.existingClaim) -}}\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: {{ template \"${2:chartName}.fullname\" . }}-$1\nspec:\n  accessModes:\n\t- {{ .Values.persistence.$1.accessMode | quote }}\n  capacity:\n\tstorage: {{ .Values.persistence.$1.size | quote }}\n  hostPath:\n\tpath: {{ .Values.persistence.${1:value_key}.hostPath | quote }}\n{{- end -}}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pvc_hostpath_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2b64b9bf0e3fc3efaa6723a9fab6b91": {
      "content": "font-weight: bolder;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:br": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2c54c13e29ef03236dd361192443f27": {
      "content": "<c:forEach items=\"${${1}}\" var=\"${2}\" varStatus=\"${3}\">\n\t${0:<c:out value=\"$2\" />}\n</c:forEach>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cfore": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2cdb86c01f340eec68741e38f8be57b": {
      "content": "for ${1:name} in ${2:array}\n\tlet $1\n\t\t${3}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forinlet": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2ce9aca6f7bd61fc75a352a60d0b86c": {
      "content": "import ${0:module}",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2d08f0a179651fe304d7f517e91dc16": {
      "content": "%% TODO: ${0}",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "todo": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2d95c93ee10cb0ebd42373d3993a3ee": {
      "content": "<see cref=\"${1:#:member}\"/>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<see cref=\"\"/>",
      "matches": {
        "see": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a2df6f0677a428a3f466d43248e978c1": {
      "content": "echo \"${1:#:string}\";",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "echo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a2e0af5467343e02fc50c8655e7a5b11": {
      "content": ";(function(${1}) {\n\t${0:${VISUAL}}\n}(${2}))",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        ";fe": true
      },
      "source": "snippets/javascript"
    },
    "a2ebaab11577fb2ffcb0fd1e2acbd6ce": {
      "content": "<?php\n\tnamespace Models;\n\tuse Core\\Model;\n\tclass ${1:class_name} extends Model\n\t{\n\t\tprivate $${2:table};\n\t\tfunction __construct()\n\t\t{\n\t\t\tparent::__construct();\n\t\t}\n\t\tpublic function getRow($where)\n\t\t{\n\t\t\treturn $this->db->select('SELECT * FROM '.$table.' WHERE ${3:where}', $data);\n\t\t}\n\t\tpublic function getRows($where)\n\t\t{\n\t\t\treturn $this->db->select('SELECT * FROM '.$table.');\n\t\t}\n\t\tpublic function insert($data)\n\t\t{\n\t\t\t$this->db->insert($table, $data);\n\t\t}\n\t\tpublic function update($data, $where)\n\t\t{\n\t\t\t$this->db->update($table ,$data, $where);\n\t\t}\n\t\tpublic function delete($where)\n\t\t{\n\t\t\t$this->db->delete($table, $where);\n\t\t}\n\t}",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_model_crud": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2fa95d481d93138cfedb84465900485": {
      "content": "package ${1:package}{\n\t${0}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "package": true
      },
      "source": "vim-snippets/snippets"
    },
    "a2fa9eda2250a48cb25be22f7b9dc3b0": {
      "content": "clear none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "a307a1964953552327e463d84007cf8a": {
      "content": "task body ${1} is\n\t${2}\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "task body",
      "matches": {
        "task_body": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a30b414944ba560d097bc0ba30ed2754": {
      "content": "goto case ${1:#:Val};${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "goto": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a30d856169227f9e0c7e8ae20068462d": {
      "content": "/*! \\brief ${1:Brief function description here}\n *\n *  ${2:Detailed description of the function}\n *\n * \\return ${3:Return parameter description}\n */\n${4:void} ${5:function_name}()\n{\n\t${6}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dfun0": true
      },
      "source": "vim-snippets/snippets"
    },
    "a31154d3259e776eeb7c4ab6f93a2f07": {
      "content": "Plug '${1}', { 'on': '${0}' }",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "vim-plug Plugin definition with { 'on': '' }",
      "matches": {
        "plugon": true
      },
      "source": "vim-snippets/snippets"
    },
    "a311dd7cec11a06c021dd7ddd94681e9": {
      "content": "border-corner-image: continue",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtli:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "a316d30113daacde4c628742d49fd6a2": {
      "content": "grid-row-gap ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grg": true
      },
      "source": "vim-snippets/snippets"
    },
    "a31e0b2179e7fbe65e5159bcb0683b87": {
      "content": "require '${1:file}';",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req": true
      },
      "source": "vim-snippets/snippets"
    },
    "a3224fd2cf1dcf94b8e31cdd39c5123d": {
      "content": "text-align: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta": true
      },
      "source": "vim-snippets/snippets"
    },
    "a325b9d4ef3cfac373820b12fd445405": {
      "content": "border-top-style: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdts": true
      },
      "source": "vim-snippets/snippets"
    },
    "a32fb1287e95c052614f0129fcecfc16": {
      "content": "const ${1:mixinName} = {\n\tmounted() {\n\t\tconsole.log('hello from mixin!');\n\t},\n};",
      "doc": "vue mixin",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Mixin",
      "matches": {
        "vmixin": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "a33afca1b03ef12eb90584e39f9635b4": {
      "content": "if (${1:true}) {\n  ${0}\n}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "a33f0687398e16c254b28645757da67a": {
      "content": "realize(${1:Resource}[${2:name}])",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "realize": true
      },
      "source": "vim-snippets/snippets"
    },
    "a3471995f70866b3adcdedc960e463bc": {
      "content": "{-| ${0}\n-}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/snippets"
    },
    "a34b62ce4644c2ee1475177e9579b81b": {
      "content": "<dd>${0}</dd>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dd": true
      },
      "source": "vim-snippets/snippets"
    },
    "a358b5ab5f3bf7c3e7cbea22d88fa509": {
      "content": "@describetag :${1:describe tag}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "destag": true
      },
      "source": "vim-snippets/snippets"
    },
    "a358d465107e91e382119a36ecd5e104": {
      "content": "page-break-inside auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbi:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "a35a2c9da90e738e4ea7da9e572ae9f7": {
      "content": "{#if ${1:condition}}\n\t${2: <!-- content here -->}\n{:else}\n\t${3: <!-- else content here -->}\n{/if}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-if-else-block",
      "matches": {
        "svelte if else": true,
        "svif-else": true
      },
      "source": "javascript/svelte"
    },
    "a360229f7e4b5a9e0e3c0b1e74759377": {
      "content": "border-top: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdt:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "a360b9dc8bb5ad816621a11bd3130f23": {
      "content": "${1:obj}.serialize()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "serialize": true
      },
      "source": "snippets/coffee"
    },
    "a36144873670ff2988edc113ecc79e4e": {
      "content": "def ${1:method_name}\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "a37aac3e8e0ae1a0747659cf619cf2bb": {
      "content": "\\\\begin{${1:tabular}}{${2:c}}\n\t${0:${VISUAL}}\n\\\\end{$1}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "tabular (or arbitrary) environment",
      "matches": {
        "tab": true
      },
      "source": "vim-snippets/snippets"
    },
    "a37cff30c63e27f5c34f50e5ed196c6d": {
      "content": "return this.httpClient.get('${1:url}');$0",
      "doc": "Angular HttpClient.get",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "HttpClient.get",
      "matches": {
        "a-httpclient-get": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "a37f7f2bfbeda6a2ec736a9d3f9cc539": {
      "content": "return ${0:${VISUAL}}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "return",
      "matches": {
        "rt": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "a38a77abadabd891b7f9dc0224ca92e8": {
      "content": "CJSON::encode(${0:text});",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yjec": true
      },
      "source": "vim-snippets/snippets"
    },
    "a38e222b4aff9a575c28fe5ac8971bcd": {
      "content": "if ${1} {\n\t${2}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "a38f2056588081992e1c2061315b654b": {
      "content": "let ${1} = ${2} in\n${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "a38f721fd46816b75a35380a46a5d42e": {
      "content": "mlply(${1:matrix}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ml": true
      },
      "source": "vim-snippets/snippets"
    },
    "a395248e86d0589b5852e8a5c126b04a": {
      "content": "elif ${1} then\n\t${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "a3ab48cc931aee60b8d192b68d24e987": {
      "content": "#if ${1:FOO}\n\t${0:${VISUAL}}\n#endif",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#if": true
      },
      "source": "vim-snippets/snippets"
    },
    "a3b8a066ce123ca78a2245dca2e373a8": {
      "content": "duplicateMovieClip(${1:#:target}, ${2:#:newName}, ${3:#:depth});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a3bad761093731e4d051dfec8a92a667": {
      "content": "${1:obj}.fadeOut 'slow/400/fast', ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadeoutc": true
      },
      "source": "snippets/coffee"
    },
    "a3c17f7a59a632aafa1d67a9fd0ca8fc": {
      "content": "extlookup(\"${1:variable}\", \"${2:default}\", \"${3:data source}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "Extlookup with defaults and custom data file",
      "matches": {
        "extlookup": true
      },
      "source": "vim-snippets/snippets"
    },
    "a3c6fe80b26b088230f44f190e6966ea": {
      "content": "import { store } from './store/index';",
      "doc": "import vuex store into main.js",
      "filetype": "vue-script-vuex",
      "grammar": "lsp",
      "label": "Vue Import Vuex Store",
      "matches": {
        "vstore-import": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "a3cc0016a474c617bff5db1bac557b3e": {
      "content": "useImperativeHandle(${1:ref}, ${2:createHandle});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "useImperativeHandle",
      "matches": {
        "usei": true
      },
      "source": "snippets/javascript"
    },
    "a3ce339b229a10b1c4b5f1c7eddbb0eb": {
      "content": "background-repeat: repeat;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "a3ce4d1db50acb358664a0f421d9012e": {
      "content": "${1:obj}.ajaxSend(function (${1:request, settings}) {\n\t${2:// error callback}\n});\n${0}",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxsend": true
      },
      "source": "snippets/javascript"
    },
    "a3dac4a60bf8e4a0b0113f5cb5aab253": {
      "content": "if (${1:true}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "if (condition) { ... }",
      "matches": {
        "if": true
      },
      "source": "snippets/javascript"
    },
    "a3dc060805d73db1bb18fd8677fa8d7d": {
      "content": "defp ${1:name}(${2:args}) when ${3:guard} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defpw": true
      },
      "source": "vim-snippets/snippets"
    },
    "a3dd1aa6bbc1cf6e7abd990b4a5c419b": {
      "content": "PropTypes.instanceOf($0).isRequired,",
      "doc": "Is an instance of a class prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeInstanceOfRequired",
      "matches": {
        "ptir": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "a3dec0ff855f895c239d6b36ceba57a4": {
      "content": "_.pullAllBy(${array}, ${values}, ${iteratee})",
      "doc": "var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n\n_.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]\n\nThis method is like `_.pullAll` except that it accepts `iteratee` which is\ninvoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The iteratee is invoked with one argument: (value).\n\n**Note:** Unlike `_.differenceBy`, this method mutates `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-pullallby",
      "matches": {
        "lodash pullallby": true
      },
      "source": "javascript/lodash"
    },
    "a3eab077d95bc9a2793ed6af1f42cc38": {
      "content": "${1} : in std_logic;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ist": true
      },
      "source": "vim-snippets/snippets"
    },
    "a3f359852e1581b9b3fadb90a6628371": {
      "content": "typedef enum ${2:logic[15:0]}\n{\n\t${3:REG = 16'h0000}\n} ${1:my_dest_t};",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tde": true
      },
      "source": "vim-snippets/snippets"
    },
    "a3f42d1683912a1d32855f1d75be68ee": {
      "content": "let\n\t${1} =\n\t\t${2}\nin\n\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "let ... in ...",
      "matches": {
        "let": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a3f794b1d06c67ad41718626e72714d7": {
      "content": "{% regroup ${1} by ${2} as ${0} %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "regroup": true
      },
      "source": "vim-snippets/snippets"
    },
    "a3fcf6c33758837f45c5b132e44ded45": {
      "content": "overflow-y: hidden",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "a40b74d8e749136214e75b2f8e8173a0": {
      "content": "${1:$foo}->set${2:Bar}(${0});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$s": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4196c914d0109578b8c16ed3f20b88b": {
      "content": "function ${1:name}(${2:arguments}) {\n\t${0}\n}",
      "doc": "named function",
      "filetype": "base",
      "grammar": "lsp",
      "label": "named-function",
      "matches": {
        "base function named": true
      },
      "source": "javascript/base"
    },
    "a41fece49a927c89b3b43ddb84166ba3": {
      "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t\n\t\t}\n\t}\n\n\tstatic getDerivedStateFromProps() {\n\t\treturn null\n\t}\n\n\tcomponentDidMount() {\n\t\t\n\t}\n\n\t// shouldComponentUpdate(nextProps, nextState) {}\n\n\tgetSnapshotBeforeUpdate(prevProps, prevState) {\n\t\treturn null\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\n\t\t\n\t}\n\n\tcomponentWillUnmount() {\n\t\t\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a React component class with PropTypes and all lifecycle methods and ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassComponentWithMethods",
      "matches": {
        "rcfc": true
      },
      "source": "vscode-react/snippets"
    },
    "a4248dbf771fb153b580c285d112f2f8": {
      "content": "/* ${1:#:comment} */\n${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "/*": true,
        "comment": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a436aa30b46dddca51e03c56c3f595b5": {
      "content": "&#x2318;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cmd": true
      },
      "source": "vim-snippets/snippets"
    },
    "a43edc0974f0af63132802a61b393bb9": {
      "content": "fetch(${1:name}) { |${2:key}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fet": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4490c7b6efffd91ab3f9f26bcb95153": {
      "content": "align-content: flex-start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "a44ddb4bc7a2d46be2323ea3b9fbb744": {
      "content": "console.log(${1:object});",
      "doc": "Displays a message in the console",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleLog",
      "matches": {
        "clg": true
      },
      "source": "vscode-javascript/snippets"
    },
    "a4555430cd715484f35d39c82a18ec7f": {
      "content": "${1:var_name} = kwargs.get('$1', ${2:None})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lkwg": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4571fc35c952756151c6536ec4f0733": {
      "content": "red(${0:color});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "red": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4579d5d7b8957a85eef4a88d5a8bf2d": {
      "content": "{% elseif ${1} %}\n\t${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig elseif",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "a45ac00855ea9f07fa74ffba92ed8039": {
      "content": "#!/bin/${1:sh}\n${0}",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "#!/bin/sh",
      "matches": {
        "#!": true,
        "shebang": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a4629562f2c8a94a298bf642c56fbea0": {
      "content": "for (const ${1:prop} of ${2:object}) {\n\t${0:$1}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "for (const prop of object}) { ... }",
      "matches": {
        "foro": true
      },
      "source": "snippets/javascript"
    },
    "a475805f051e8a99d87acfdcab5a5589": {
      "content": "<c:param name=\"${1}\" value=\"${2}\" />\ncparam+${0}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cparam+": true
      },
      "source": "vim-snippets/snippets"
    },
    "a48763c80e0d27e0a242a261ba9e1f5d": {
      "content": "{% hook \"${1}\" %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig hook",
      "matches": {
        "hook": true
      },
      "source": "vim-snippets/snippets"
    },
    "a48ae09a507820209780689dc1b7091c": {
      "content": ";;\n;; @brief      ${1:function description}\n;;\n;; @details    ${2:detailed description}\n;;\n;; @param      ${3:param}\n;;\n;; @return     ${4:return}\n;;",
      "doc": "",
      "filetype": "asm",
      "grammar": "snu",
      "label": ";; @brief ...",
      "matches": {
        "doxy": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a49284c23f19bfb71b5a6de7db827d38": {
      "content": "${1:#:set shell_stdout to }do shell script ${3:\"${2:#script}\"}\n\twithout altering line endings\n${0}",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "shell": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a499b88f724d49468f05de19d2d25abe": {
      "content": "watch([${1:foo}, ${2:bar}], ([new${1}, new${2}], [prev${1}, prev${2}]) => {\n\t${3}\n})",
      "doc": "Requires watching an array, and applies side effects in a separate callback function.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v3watch-array",
      "matches": {
        "vue v3 watch-array": true
      },
      "source": "javascript/vue"
    },
    "a49ac72f759a7a87ff6df7afbae8e4f0": {
      "content": "${1:obj}.slideDown('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sdown": true
      },
      "source": "snippets/coffee"
    },
    "a49f1ce12f6d98f973004ce90843afd7": {
      "content": "<% for ${2:item} in ${1} %>\n\t${0}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4a53d7e1e11c9f771f75027838b7e02": {
      "content": "const ${1}: ${2:any} = ${3};\n${0}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts const",
      "matches": {
        "tconst": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4aa030ba6d1e04284fc5240b033be13": {
      "content": "when ${1} =>\n\t${2}",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4ae2556537bcfb3c2360f70491f26a6": {
      "content": "echo CHtml::activeTextArea(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhata": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4b5ca7db90a383c01e87b7c6a23ad44": {
      "content": "$this->input->cookie(\"${1:index}\");${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_input-cookie": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4bcad0b4ec56a46066a101e76a059e0": {
      "content": "export default ${0}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ed": true
      },
      "source": "snippets/javascript"
    },
    "a4bd0a73faf376eaac71d9cdab758144": {
      "content": "for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cfor": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4c34240a5968a1d8549bbecba7245e7": {
      "content": "border-top none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdt:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4c5ef6e89f8e30083ba1ac89903057d": {
      "content": "fprintf(${1:stderr}, \"${2}\\n\"${3});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "fprintf(..., \"...\\n\", ...);",
      "matches": {
        "fprintf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a4cb493ceba636194635aec090d51630": {
      "content": "word-break: normal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4d49bec58525f96be5264082573369f": {
      "content": "t.boolean :${1:title}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create boolean column",
      "matches": {
        "tcb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a4d75e8d2fb3610d802dc0282b1381d5": {
      "content": "<% require IEx; IEx.pry %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pry": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4d829f56cdddd5a6a2da8ef109c4fb1": {
      "content": "position: fixed;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "a4f8681346cd40df40006db39cdeb149": {
      "content": "v-for=\"(${1:item}, ${2:index}) in ${3:items}\" :key=\"${4:index}\"",
      "doc": "Expects: Array | Object | number | string",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-for",
      "matches": {
        "vfor": true,
        "vue v-for": true
      },
      "source": "javascript/vue"
    },
    "a4f8b367fb8f4eff4851bd52beac3007": {
      "content": "const ${1:results} = await ${2:client}.request(\n  ${3:query}\n);",
      "doc": "",
      "filetype": "graphql-request",
      "grammar": "lsp",
      "label": "graphql-request-client-request",
      "matches": {
        "graphql-request client request": true
      },
      "source": "javascript/graphql-request"
    },
    "a4fe0343c02fc484189ecf9964c8a050": {
      "content": "#if ${1:DEBUG}\n${VISUAL}$0\n#endif",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "#if #endif",
      "matches": {
        "#if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a501e2028a46afb19fb17cd46eb3a0bf": {
      "content": "it { should respond_to :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isres": true
      },
      "source": "vim-snippets/snippets"
    },
    "a504ca240d214195e7d43116ceb96d81": {
      "content": "const ${1:memoizedCallback} = useCallback(\n() => {\n\t${2}(${3})\n},\n[$3]\n);",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "useCallback",
      "matches": {
        "usecb": true
      },
      "source": "snippets/javascript"
    },
    "a50bdc7f7080dc63d0aa8e93d37125a4": {
      "content": "func ${1:function}(${2}) ${3:error }{\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func function(...) [error] { ... }",
      "matches": {
        "func": true
      },
      "source": "gosnippets/snippets"
    },
    "a50cae164144e33530294db64d4c0890": {
      "content": "impl ${1} for ${2} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "implfor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a510c72f2dd57d7f09c59b00c759da10": {
      "content": "<#assign\n\t${1:variable_name} = ${0:value${VISUAL}}\n/>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#assign <#-- multiple lines --> />",
      "matches": {
        "assm": true
      },
      "source": "vim-snippets/snippets"
    },
    "a51adb5f1ebe726700c01c93c1ea8064": {
      "content": "font-emphasize-position after",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "femp:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "a51d83e7930708adfeefd8919d8349d8": {
      "content": "redirect_to(${2:${10:model}s_path})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to (path plural)",
      "matches": {
        "repp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a526af765a65c9143814b159bf1f3e73": {
      "content": ":nth-last-child(${0})",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":nlc": true
      },
      "source": "vim-snippets/snippets"
    },
    "a52761d8235ef9cc8b3f7768dbcb4d9c": {
      "content": "import Component from '@ember/component';\n\nexport default Component.extend({\n\t${0://Properties here...}\n});",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "import Component from '@ember/component';",
      "matches": {
        "ecomponent": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a52f59cee80281bd5b9035508e1d9040": {
      "content": "mapply(${1:function}, ${0:...})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapply": true
      },
      "source": "vim-snippets/snippets"
    },
    "a52f623e07d712ff9f311b559337aa81": {
      "content": "for ${1} in ${2}\n\t${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "for loop iterating over iterable container",
      "matches": {
        "forc": true
      },
      "source": "vim-snippets/snippets"
    },
    "a539eb28cd971dc6204e6c7adf65e38a": {
      "content": "[Category(\"${0:#:category}\")]",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "category": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a53bed4f8346711722771221c96cc603": {
      "content": "background-attachment: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bga": true
      },
      "source": "vim-snippets/snippets"
    },
    "a541e35601f97eb86035cc9765ea60fa": {
      "content": "beforeEnter(el) {\n\tconsole.log('beforeEnter');\n},\nenter(el, done) {\n\tconsole.log('enter');\n\tdone();\n},\nbeforeLeave(el) {\n\tconsole.log('beforeLeave');\n},\nleave(el, done) {\n\tconsole.log('leave');\n\tdone();\n},",
      "doc": "transition component js hooks",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-transition-methods-with-javascript-hooks",
      "matches": {
        "vanimhook-js": true,
        "vue transition methods with javascript hooks": true
      },
      "source": "javascript/vue"
    },
    "a545441016374032e1ae0f300a95e0f9": {
      "content": "bool",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "bool",
      "matches": {
        "bl": true
      },
      "source": "vim-snippets/snippets"
    },
    "a545f967dc539c9d44c9d77beca4c02e": {
      "content": "div(ng-repeat='${1} in ${2}' | ${3})",
      "doc": "",
      "filetype": "jade",
      "grammar": "snu",
      "label": "",
      "matches": {
        "repf": true
      },
      "source": "vim-snippets/snippets"
    },
    "a553278c510aba0f43431d9eb5c7416a": {
      "content": "list-style-type: upper-roman;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:ur": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5539e7e385ce370462670731410cce4": {
      "content": "console.log(${1:object})",
      "doc": "Displays a message in the console",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleLog",
      "matches": {
        "clg": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "a5581549c5bc8cf88d6a3aebf50698a0": {
      "content": "program ${1:program_name} ();\n\t${0}\nendprogram : $1",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prog": true
      },
      "source": "vim-snippets/snippets"
    },
    "a563f9224a9efdc0c4e4b01d8bf2e1c9": {
      "content": "text-emphasis disc",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:ds": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5678545476980b109086ca040f4757d": {
      "content": "/*! TODO: ${1:Todo description here}\n *  \\todo $1\n */",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "todo": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5728f1cda915aa273bfd0567cb4e06c": {
      "content": "lambda {|${1:#:args}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lambda-keyword": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a57b52eff694fc082b063336e36277b2": {
      "content": "${1:obj}.filter('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filter": true
      },
      "source": "snippets/coffee"
    },
    "a57e55fb8748efa84b2399cfc095a656": {
      "content": "text-transform ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt": true
      },
      "source": "vim-snippets/snippets"
    },
    "a57f013e5a45c035d54179d7adf05732": {
      "content": "list-style-type: ${1:cjk-ideographic/hiragana/katakana/hiragana-iroha/katakana-iroha};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "list-style-type: asian (list)",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a58428ba3e936596355a0b8627737e96": {
      "content": "@type ${1:type_name} :: ${2:type}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ty": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5845109adca99159be29e4adfd5ab74": {
      "content": "select {\ncase ${1:v1} := <-${2:chan1}\n\t${3}\ndefault:\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "select",
      "matches": {
        "sl": true
      },
      "source": "vim-snippets/snippets"
    },
    "a587ff7d2a776bfa67ba1fdef36c4f95": {
      "content": "_.conforms(${source})",
      "doc": "var objects = [\n  { 'a': 2, 'b': 1 },\n  { 'a': 1, 'b': 2 }\n];\n\n_.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n// => [{ 'a': 1, 'b': 2 }]\n\nCreates a function that invokes the predicate properties of `source` with\nthe corresponding property values of a given object, returning `true` if\nall predicates return truthy, else `false`.\n\n**Note:** The created function is equivalent to `_.conformsTo` with\n`source` partially applied.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-conforms",
      "matches": {
        "lodash conforms": true
      },
      "source": "javascript/lodash"
    },
    "a5940b2bff48286ad3268ad209be5b70": {
      "content": "form_radio(\"${1:name}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_radio": true
      },
      "source": "vim-snippets/snippets"
    },
    "a595f0c638bffc712fbb87830bcb61fa": {
      "content": "flex-flow: ${1:row} ${0:nowrap};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxf": true
      },
      "source": "vim-snippets/snippets"
    },
    "a599e23e7600aa5e81cb92f23f0523e4": {
      "content": "override ${1:/*function*/}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "override (over)",
      "matches": {
        "over": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a59acbbc64fc2dfc81347379a127362a": {
      "content": "{% if ${1} %}\n\t${0:TARGET}\n{% endif %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% if ... %} ... {% endif %}",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a59c07dfdb03a424c96a86fbce9b1814": {
      "content": "(for/first ([${1}])\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "for/first",
      "matches": {
        "forfi": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5a26600d7c03a79055f5144ad2d349d": {
      "content": "| script_tag",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "script_tag": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5a45e1ab88505fa341031e154d03910": {
      "content": "NO-LOCK NO-ERROR",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nle": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5a677d6590cdfe199136a1f98a3e8eb": {
      "content": "if __FILE__ == $PROGRAM_NAME\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "app": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5ab1576a0e809f48f25d6d7e58230c0": {
      "content": "set ${1:setting};",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "se": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5c08c55011d85009bc19bed59e1165b": {
      "content": "margin-bottom auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5c2434135f759db5b3237d5d9948e4d": {
      "content": "| money_with_currency",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "money_with_currency": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5c5feed5faaad9347f50752e53b1a06": {
      "content": "<% ${1:TARGET} -%>${2}",
      "doc": "",
      "filetype": "eruby",
      "grammar": "snu",
      "label": "<% -%>",
      "matches": {
        "ruby_code_nonl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a5c869fb1d4f5071184d8d6b5b283552": {
      "content": "try {\n\t${1:TARGET}\n} catch (${2:#:Exception} $e) {\n\t${3:#:code}\n} finally {\n\t${4:#:code}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tryf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a5c8cfbe631ef59ae562fb5495f145c4": {
      "content": "around_destroy :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mard": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5c9ae66c4f61c4dd385a0d43e2b761c": {
      "content": "set",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "Set",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5cc0b84f8ef6b2c318cd687b75f5c45": {
      "content": "$this->db->where(\"${1:key}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_db-where": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5cdd5749ae0aabe162be8e6e0c5679a": {
      "content": "border-length: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlt:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5ce0c8474fa63426245e03bf7a40a17": {
      "content": "while (${1:/* condition */}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5d3443f90d0d2f6e7ee5e6070ed1536": {
      "content": "elsif ${1:condition}\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5d9438fd6e3be27f2741bf022e90fb9": {
      "content": "\\\\frac{\\\\partial {$1}}{\\\\partial {$2}} {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "partial derivation",
      "matches": {
        "pdv": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5e1f9c31358bdbd85d3623f06fc1969": {
      "content": "#include \"${1}\"${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#inc2, #include2": true,
        "inc2": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a5ec4b69ea8e7770e2f221bae1a0bf7c": {
      "content": "page-break-inside: avoid",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbi:av": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5f2429c6224714b875524b5368a7379": {
      "content": "${1:FIELDNAME} = models.OneToOneField(${2:OtherModel}${3:, parent_link=True}${4:, related_name=''}${5:, limit_choices_to=}${0:, to_field=''})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o2o": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5f307a57511672a4f53cfbe00551a81": {
      "content": "class ${1} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "kotlin",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cla": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5f9473a16de657a1250a9f5d73f5879": {
      "content": "_.padEnd(${string}, ${length}, ${chars})",
      "doc": "_.padEnd('abc', 6);\n// => 'abc   '\n\n_.padEnd('abc', 6, '_-');\n// => 'abc_-_'\n\n_.padEnd('abc', 3);\n// => 'abc'\n\nPads `string` on the right side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-padend",
      "matches": {
        "lodash padend": true
      },
      "source": "javascript/lodash"
    },
    "a5fad9c4c4a2036ef71e1dacfa4eb3a5": {
      "content": "d3.scale.linear()\n  .domain(${1})\n  .range(${2})",
      "doc": "",
      "filetype": "javascript-d3",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scale": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5fd4968e833eba98640c5370497d6ad": {
      "content": "reduce!(${1:f})(${2:xs});\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reduce": true
      },
      "source": "vim-snippets/snippets"
    },
    "a5ff61f001b863e49d009d2971bc488f": {
      "content": "<%= link_to '${1:link text...}', controller: '${2:items}', action: '${3:edit}', id: ${0:@item} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "licai": true
      },
      "source": "vim-snippets/snippets"
    },
    "a60007705fe319285c6d73ec64c0426f": {
      "content": "# SCM Resource, Chef::Provider::Subversion\nsvn ${1:\"/destination/path\"} do # Path to clone/checkout/export the source to\n\t${2:#}repository ${3} # URI of the repository\n\t${4:#}revision ${5:\"HEAD\"} # revision to checkout. can be symbolic, like \"HEAD\" or an SCM specific revision id\n\t${6:#}reference ${7} # (Git only) alias for revision\n\t${8:#}user ${9:nil} # System user to own the checked out code\n\t${10:#}group ${11:nil} # System group to own the checked out code\n\t${12:#}svn_username ${13} # (Subversion only) Username for Subversion operations\n\t${14:#}svn_password ${15} # (Subversion only) Password for Subversion operations\n\t${16:#}svn_arguments ${17} # (Subversion only) Extra arguments passed to the subversion command\n\t${18:#}${19:action :sync} # Update the source to the specified revision, or get a new checkout (Default)\n\t${20:#}${21:action :checkout} # Checkout the source. Does nothing if a checkout is available\n\t${22:#}${0:action :export} # Export the source, excluding or removing any version control artifacts\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "svn": true
      },
      "source": "vim-snippets/snippets"
    },
    "a6127327401d99b7c13c610a2b82cced": {
      "content": "${1:obj}.hasClass('${2:className}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hasc": true
      },
      "source": "snippets/coffee"
    },
    "a612dec788ca57ed1a674b6cb88aeba8": {
      "content": "\\section{${1}}\n${0:TARGET}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\section": true,
        "section \\section{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a61be66caee339c80c13ad1c21ca0f3c": {
      "content": "min(${1:value1}, ${2:value2}${3:, }${0:value3});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "min": true
      },
      "source": "vim-snippets/snippets"
    },
    "a633e148fc48547a15b032029ab74a6c": {
      "content": "else {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a635ca250c4ade6011762692c3f386e0": {
      "content": "watch: {\n\t${1:data}(${2:newValue}, ${3:oldValue}) {\n\t\t${0}\n\t}\n},",
      "doc": "vue watcher",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Watchers",
      "matches": {
        "vwatcher": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "a640985d4806123f8d326ddfa344f34e": {
      "content": "{${1:expression}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-expression",
      "matches": {
        "svelte expression": true,
        "svexp": true
      },
      "source": "javascript/svelte"
    },
    "a64312bdc99975b3b9c3d295edf9eab7": {
      "content": "define ${1} (${2}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "define": true
      },
      "source": "vim-snippets/snippets"
    },
    "a64f218e585f51d6e675c0d3852a0d8d": {
      "content": "covergroup ${1:group_name} @(${2:posedge} ${3:clk});\n\t${0}\nendgroup : $1",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cg": true
      },
      "source": "vim-snippets/snippets"
    },
    "a659112232dc4c91344ad800bc8a91a5": {
      "content": "text-justify inter-ideograph",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:ii": true
      },
      "source": "vim-snippets/snippets"
    },
    "a66359ccef396a15e4bc91507cd90406": {
      "content": "before_update :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbu": true
      },
      "source": "vim-snippets/snippets"
    },
    "a6656505729a1baae98bbb3eb3710208": {
      "content": "bind:${1|innerWidth,innerHeight,outerWidth,outerHeight,scrollX,scrollY,online|}={${2:variable}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-window-bind",
      "matches": {
        "svelte window bind": true,
        "svwb": true
      },
      "source": "javascript/svelte"
    },
    "a6700a972e1b8e90b2a024da3fcd10f9": {
      "content": "+${1:mixin}(${2})",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc": true
      },
      "source": "vim-snippets/snippets"
    },
    "a67d5253773a18eb93889cf1de0b45ce": {
      "content": "@show",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@show directive",
      "matches": {
        "show": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a680ccbff0abbbc583ad3e746f9c7b76": {
      "content": "$this->assertNotCount(${1:$count}, ${2:$haystack});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertNotCount($count, $haystack)",
      "matches": {
        "asnco": true
      },
      "source": "vim-snippets/snippets"
    },
    "a68e753543b176924c2996e004ec1c8f": {
      "content": "<h4 class=\"${1}\">${0}</h4>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h4.": true
      },
      "source": "vim-snippets/snippets"
    },
    "a69512c5916253367c6c6f335b661811": {
      "content": "resize: both",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "a697632b79a834649771bc01b1a90f09": {
      "content": "when {\n\texpression '${1:expression}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whenexpression": true
      },
      "source": "vim-snippets/snippets"
    },
    "a6998167b0dbc7c18e5762fbef4387c4": {
      "content": "def initialize(${1})\n\t${0}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defi": true
      },
      "source": "vim-snippets/snippets"
    },
    "a6a14be1b8fc38626d8dcc21e3e0df5c": {
      "content": "{% ifequal $1 $2 %}\n\t$3\n{% endifequal %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifequal": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a6dd8075b1f2fd28cedc47fe2883c805": {
      "content": "<LocationMatch \"${1:regex}\">\n        ${2:config}\n</LocationMatch>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "locationmatch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a6efe5f70a463debaa856a827a0a9e16": {
      "content": "refute_nil ${1:instance}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rfn": true
      },
      "source": "vim-snippets/snippets"
    },
    "a6f7de144e8b547747735e4c7ff9e84c": {
      "content": "<slot>${1:<!-- optional fallback -->}</slot>",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-slot",
      "matches": {
        "svelte slot": true,
        "svsl": true
      },
      "source": "javascript/svelte"
    },
    "a6fb9846cfde996cd6327b2881f1d178": {
      "content": "console.log(${0:TARGET});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl": true,
        "console-log": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a6fd1ddc3991c9c10a1a6f293d32e537": {
      "content": "Session::get(${1:key});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_session_get": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7044127ac2d6f3baae394319c5e6809": {
      "content": "for ${1} {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a705c0950b009adbd1229c5895680970": {
      "content": "quotes: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q": true
      },
      "source": "vim-snippets/snippets"
    },
    "a70720259d052979784d30b19eed63df": {
      "content": "cursor help",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:he": true
      },
      "source": "vim-snippets/snippets"
    },
    "a707b8317cc491286efef48c468e04b8": {
      "content": "marker-offset: auto;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "marker-offset: auto (marker)",
      "matches": {
        "marker": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a7088929a91e4ea4910b7eae76fc1120": {
      "content": "case ${1:0}:\n\t${2}\n\tbreak;",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cs": true
      },
      "source": "vim-snippets/snippets"
    },
    "a71d8ad2a7fa43b50679d71aa92d3666": {
      "content": "void opAssign($1 rhs) ${2:@safe pure nothrow}\n{\n\t$2\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "opAssign (op=)",
      "matches": {
        "op=": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a722cc3214f51ea2da998198277162ea": {
      "content": "for ${1:name} from ${2:start} to ${3:finish} by ${4:step}\n\t${5}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forrb": true
      },
      "source": "vim-snippets/snippets"
    },
    "a73ac3498a03d1cc683e1f21b47fd56a": {
      "content": "async function ${1:name}() {\n\ttry {\n\t\tconst response = await axios.get('${2:uri}');\n\t\t${3:success}\n\t}\tcatch (error) {\n\t\t${4:error}\n\t}\n}",
      "doc": "Use Axios to make a get request - async-await",
      "filetype": "axios",
      "grammar": "lsp",
      "label": "axios-get-async-await",
      "matches": {
        "axios get async await": true
      },
      "source": "javascript/axios"
    },
    "a73e2c4aa4d0099d357676a75b16fc1a": {
      "content": "{%- include '${1:snippet}', ${2:variable}: ${0:value} -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "includewith-": true
      },
      "source": "vim-snippets/snippets"
    },
    "a73e6e4528525a587e89b37a24f6779c": {
      "content": "PropTypes.shape({\n\t$0\n}).isRequired,",
      "doc": "An object taking on a particular shape required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-shape-required",
      "matches": {
        "prop-types shape required": true,
        "ptshr": true
      },
      "source": "javascript/prop-types"
    },
    "a7425e0f295525e1ebfc6f8cb7ebe698": {
      "content": "{%- layout none -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "layoutnone-": true
      },
      "source": "vim-snippets/snippets"
    },
    "a743fe359244fe8cd7a3fa48125d0e8c": {
      "content": "${1:kernel}<<<${2:args}>>>(${3});${0}",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Kernel call",
      "matches": {
        "call": true
      },
      "source": "vim-snippets/snippets"
    },
    "a74669d5685c09490791d51b07f5e108": {
      "content": "${1:expression} foreach @${2:array};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7514fa913195f06302a32b2e2b02cbd": {
      "content": "${1:obj}.keyup(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "kup": true
      },
      "source": "snippets/javascript"
    },
    "a7543bcefe2908ac2907f3410aca108f": {
      "content": "_.random(${lower}, ${upper}, ${floating})",
      "doc": "_.random(0, 5);\n// => an integer between 0 and 5\n\n_.random(5);\n// => also an integer between 0 and 5\n\n_.random(5, true);\n// => a floating-point number between 0 and 5\n\n_.random(1.2, 5.2);\n// => a floating-point number between 1.2 and 5.2\n\nProduces a random number between the inclusive `lower` and `upper` bounds.\nIf only one argument is provided a number between `0` and the given number\nis returned. If `floating` is `true`, or either `lower` or `upper` are\nfloats, a floating-point number is returned instead of an integer.\n\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-random",
      "matches": {
        "lodash random": true
      },
      "source": "javascript/lodash"
    },
    "a755b6e1250cc60fd8e09f5805edda97": {
      "content": "when {\n\tnot '${1:not}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whennot": true
      },
      "source": "vim-snippets/snippets"
    },
    "a75a60471b9d8f67bead5c1bed7c6d00": {
      "content": "[class]=\"${1:expression}\"",
      "doc": "Angular [class] binding",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "class",
      "matches": {
        "a-class": true,
        "angular class": true
      },
      "source": "javascript/angular"
    },
    "a75bdbeedcc1f1e8547feafe87157e1f": {
      "content": "display: compact;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:cp": true
      },
      "source": "vim-snippets/snippets"
    },
    "a75cb7d020c9b612dc0d97fe1a51d693": {
      "content": "case ${1}:\n    ${2:TARGET}\n${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a75f3b43c1f94ec9c02f001407a33f28": {
      "content": "place-content: space-evenly",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7621ba11574e4c6733b0a0817706d6e": {
      "content": "${1:obj}.removeProp('${2:property name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "remp": true
      },
      "source": "snippets/coffee"
    },
    "a762de4ae75ed8bb543b9508eaba9a8b": {
      "content": "place-content: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc": true
      },
      "source": "vim-snippets/snippets"
    },
    "a76c9ca91f8642b382524d895dd4039c": {
      "content": "background-repeat ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr": true
      },
      "source": "vim-snippets/snippets"
    },
    "a76f7f38c2fa83b679854b1ea7c1a2cd": {
      "content": "is_null($${1:var})$0",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "is_null",
      "matches": {
        "in": true
      },
      "source": "vim-snippets/snippets"
    },
    "a77c010ce93e0d9cb40616e3a75c6375": {
      "content": "<script>\nexport default {\n  ${0}\n}\n</script>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <script> with JavaScript",
      "matches": {
        "script_with_JavaScript": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a77cdde1f7823cbed0437e4c2147eb0e": {
      "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:ServiceName}Service {\n\tconstructor(private httpClient: HttpClient) { }\n\t$0\n}",
      "doc": "Angular service with HttpClient",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular HttpClient Service",
      "matches": {
        "a-service-httpclient": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "a782fda3a46d8115f467ef7132b4fa70": {
      "content": "counter-reset: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cor": true
      },
      "source": "vim-snippets/snippets"
    },
    "a785534b78b4998f933058134691cea3": {
      "content": "$.ajaxSuccess (${1:e}, xhr, settings) ->\n\t${2:// handler for when any AJAX call is successfully completed}\n${0}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxsuccess": true
      },
      "source": "snippets/coffee"
    },
    "a78a003c380fe964f782be3cb3910b3c": {
      "content": "border-left: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdl": true
      },
      "source": "vim-snippets/snippets"
    },
    "a78bad9d7029a7365f2c3ed688ad0dbf": {
      "content": "white-space normal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "a78c2671f52a962fb9b183660e0c35c6": {
      "content": "elseif (${1}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "elseif(condition) { ... }",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "a79106f9cc5af029bbb9f0dcf19dab6c": {
      "content": "module.exports = ${1};",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ex": true
      },
      "source": "snippets/javascript"
    },
    "a799d6b088ebb50109c5c01f0a076e36": {
      "content": "components: {\n\t${1:New},\n},",
      "doc": "Import one component into another, within export statement",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Import into the Component",
      "matches": {
        "vcomponents": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "a7a05f0e729b7fdb8464423a0d04ff87": {
      "content": "object.noUnknown()",
      "doc": "object.noUnknown(onlyKnownKeys: boolean = true, message?: string | function): Schema\n\nValidate that the object value only contains keys specified in shape, pass false as the first\nargument to disable the check. Restricting keys to known, also enables stripUnknown option, when not in strict mode.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "object-no-unknown",
      "matches": {
        "yup object nounknown": true
      },
      "source": "javascript/yup"
    },
    "a7a627090e926bfe6ca14b029b64e367": {
      "content": "assert_redirected_to ${1:parent}_${2:child}_path(${3:@$1}, ${0:@$2})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "artnp": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7afb1352cb220a9a3cb1c8243f88a9f": {
      "content": "else if ${1:#:condition}\n  ${0:TARGET}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a7b1905de720426ab1b8b6482f909553": {
      "content": "_.spread(${func}, ${start})",
      "doc": "var say = _.spread(function(who, what) {\n  return who + ' says ' + what;\n});\n\nsay(['fred', 'hello']);\n// => 'fred says hello'\n\nvar numbers = Promise.all([\n  Promise.resolve(40),\n  Promise.resolve(36)\n]);\n\nnumbers.then(_.spread(function(x, y) {\n  return x + y;\n}));\n// => a Promise of 76\n\nCreates a function that invokes `func` with the `this` binding of the\ncreate function and an array of arguments much like\n[`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n\n**Note:** This method is based on the\n[spread operator](https://mdn.io/spread_operator).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-spread",
      "matches": {
        "lodash spread": true
      },
      "source": "javascript/lodash"
    },
    "a7b90dbba7481ac7728eac0a482dc233": {
      "content": "outline ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7c70bc4ac04b06675b004f199d835f6": {
      "content": "align-content: space-between;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7c8cb51400113c3bdf3c42767d378bc": {
      "content": "elsif ${1} then\n\t${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ei": true,
        "elseif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a7cb0ff78c711a76f72d7d1e32999162": {
      "content": "each_line { |${1:line}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eal": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7cd27778b27c3f69f9b1cec59bbed16": {
      "content": "font-weight ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7d039652460f6e73eb40355b226716d": {
      "content": "assertTrue(\"${1:Failure message}\", ${2:condition});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "at": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7d7529061409568d2f9323ce1a947ef": {
      "content": "grid-auto-flow: row dense;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:rd": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7dac31fb824d01537df9df083affd18": {
      "content": "border-style: hidden",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7ddb11f1d877861ea8727786ec3ef4b": {
      "content": "_.intersectionWith(${arrays}, ${comparator})",
      "doc": "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.intersectionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }]\n\nThis method is like `_.intersection` except that it accepts `comparator`\nwhich is invoked to compare elements of `arrays`. The order and references\nof result values are determined by the first array. The comparator is\ninvoked with two arguments: (arrVal, othVal).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-intersectionwith",
      "matches": {
        "lodash intersectionwith": true
      },
      "source": "javascript/lodash"
    },
    "a7efdb22eafbba655b6eb8e6fba9ba15": {
      "content": "t.references :${1:taggable}, polymorphic: { default: '${2:Photo}' }\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcr": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7f944ee394169e6bc0bca146b95f7eb": {
      "content": "grid-row-start: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grs": true
      },
      "source": "vim-snippets/snippets"
    },
    "a7ff350a861a1ac263e9066ae4a1415c": {
      "content": "\\begin{trivlist}\n\t${1:TARGET}\n\\end{trivlist}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{trivlist} \\trivlist": true,
        "trivlist": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a80f63cac855a661d6e8cdaaedf6e97a": {
      "content": "do |${1:v}|\n\t${2}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dov": true
      },
      "source": "vim-snippets/snippets"
    },
    "a8145355bf2ba7bea8142a041486fd58": {
      "content": "{#await ${1:promise} then ${2:value}}\n\t${3: <!-- content when promise was fulfilled -->}\n{/await}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-await-short-block",
      "matches": {
        "svawait-short": true,
        "svelte await short": true
      },
      "source": "javascript/svelte"
    },
    "a82505d33208ebcc91bb0035828a6862": {
      "content": "\"\"\"${0:doc}\n\"\"\"",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\"": true
      },
      "source": "vim-snippets/snippets"
    },
    "a82d69feb3d521fdd96e69e34fdb4cd0": {
      "content": "$.contains(${1:container}, ${0:contents})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "contains": true
      },
      "source": "snippets/coffee"
    },
    "a831413dbae5abd5bce19fd5e4426f89": {
      "content": "private static immutable ${1:int} ${2:Constant} = ${3:1};\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "psi": true
      },
      "source": "vim-snippets/snippets"
    },
    "a8348170979e7d8635b4a96c44a82f59": {
      "content": "- (IBAction)${1:method}:(${2:id})sender;",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ibad": true
      },
      "source": "vim-snippets/snippets"
    },
    "a83ba3c444ed8c9f691ddabb99ffb678": {
      "content": "white-space: nowrap;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:nw": true
      },
      "source": "vim-snippets/snippets"
    },
    "a83f13ed14912d3136498df275f66d3a": {
      "content": "${1:#:macro_name}!(${2})${3}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "macro": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a8428c62cee5afb3db53a181b496d3af": {
      "content": "(begin\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "begin": true
      },
      "source": "vim-snippets/snippets"
    },
    "a842c71a6f8e84d7e0e525bfbb8aabe9": {
      "content": "<xsl:apply-templates select=\"${1:*}\" />",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "plain",
      "matches": {
        "apply-templates": true
      },
      "source": "vim-snippets/snippets"
    },
    "a855c758a19e5258093439e311a1a256": {
      "content": "$.extend(${1:true, }${2:target}, ${3:obj})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "extend": true
      },
      "source": "snippets/coffee"
    },
    "a85c6fd072244752494cb3f161bbe354": {
      "content": "display: table-column-group",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbclg": true
      },
      "source": "vim-snippets/snippets"
    },
    "a86b12f19f08ed9b75d7df4a21a34bf4": {
      "content": "frustrum(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${0:far});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "frustrum": true
      },
      "source": "vim-snippets/snippets"
    },
    "a86b9ebef9cfa4b707473eaa2a4243f0": {
      "content": "array.compact()",
      "doc": "array.compact(rejector: (value) => boolean): Schema\n\nRemoves falsey values from the array. Providing a rejecter function lets you specify the rejection criteria yourself.array()\n  .compact()\n  .cast([\"\", 1, 0, 4, false, null]); // => [1, 4]\n\narray()\n  .compact(function(v) {\n    return v == null;\n  })\n  .cast([\"\", 1, 0, 4, false, null]); // => ['', 1, 0, 4, false]\nobjectDefine an object schema. Options passed into isValid are also passed to child schemas.\nSupports all the same methods as mixed.yup.object().shape({\n  name: string().required(),\n  age: number()\n    .required()\n    .positive()\n    .integer(),\n  email: string().email(),\n  website: string().url()\n});\nYou can also pass a shape to the object constructor as a convenience.object().shape({\n  num: number()\n});\n// or\nobject({\n  num: number()\n});\nThe default cast behavior for object is: JSON.parseFailed casts return: null;",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "array-compact",
      "matches": {
        "yup array compact": true
      },
      "source": "javascript/yup"
    },
    "a8883059471a14c5b39171ffdc50a676": {
      "content": "startDrag(${1:#:target}, ${2:#:lockcenter}, ${3:#:l}, ${4:#:t}, ${5:#:r}, ${6:#:b} );",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a8896dc2f9496ee57d3899b7e88a322b": {
      "content": "for ${1:i} in ${2} ${3:to} ${4} loop\n\t${5}\nend loop;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "a8b159a66cc854e8c0e3b6ad83617738": {
      "content": "repeat while ${1:#:condition}\n\t${0:TARGET}\nend repeat",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "rep",
      "matches": {
        "repwh": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a8b4c8381afe0d5bb13ee4a2bff01fdb": {
      "content": "text-justify inter-word",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:iw": true
      },
      "source": "vim-snippets/snippets"
    },
    "a8b7659181a89a6f4d5cf6c9701542c3": {
      "content": "<xsl:template match=\"${1:*}\">${0}\n</xsl:template>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "template": true
      },
      "source": "vim-snippets/snippets"
    },
    "a8bfbe033df79aec3cb24be1fa71fba3": {
      "content": "const styles = StyleSheet.create({\n\t${1:style}\n})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativeStyles",
      "matches": {
        "rnstyle": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "a8d6ff8f5214f1dfac98ac8066a5e471": {
      "content": "type(${1:name})\n\t${0}\nend type",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "type": true
      },
      "source": "vim-snippets/snippets"
    },
    "a8db378bcb9aedffe75d987f765bb35d": {
      "content": "text-wrap: suppress;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "a8e107a9f27c20d22a95f6d37c9ebfbe": {
      "content": "stroke(${1:value1}, ${2:value2}, ${3:value3}${4:, }${0:alpha});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stroke": true
      },
      "source": "vim-snippets/snippets"
    },
    "a8ebc9123b98c03b1e7187a6d49c9a30": {
      "content": "entry ${1}(${2}) when ${3} is\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "entry ... when",
      "matches": {
        "ent": true
      },
      "source": "vim-snippets/snippets"
    },
    "a8f4872715554fa4eb41e1bdce88737b": {
      "content": "${1:fn} : ${2:a}\n$1 =\n\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn0": true
      },
      "source": "vim-snippets/snippets"
    },
    "a8f948bf8f5815d1306fedf27c03c278": {
      "content": "jasmine.arrayContaining([${1:value1}]);",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "array containing (js)",
      "matches": {
        "arrc": true
      },
      "source": "vim-snippets/snippets"
    },
    "a903521e13d4404c3d05b7dc80b077cf": {
      "content": "${1:callbacks}.fireWith(${2:this}, ${3:args})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cfirew": true
      },
      "source": "snippets/javascript"
    },
    "a9047dbe16d1317745d5211cbefd631b": {
      "content": "font-family: ${0:'Monotype Corsiva','Comic Sans MS'},cursive;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "a909a56d260f3b447d8e0f74be9cf058": {
      "content": "function (${1})${2: use } {\n\t${3:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "function () {}",
      "matches": {
        "function_literal": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a91f277987e32dde6c34d35d3e565582": {
      "content": "font-style: italic;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9249d05aebed84fa89eaba1a3e1fc02": {
      "content": "redirect_to action: \"${1:index}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to (action)",
      "matches": {
        "rea": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a92542050136350cd46e3309f6792f34": {
      "content": "parameter ${1:#:name} = ${2:#:val};${3:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "parameter ... = ...",
      "matches": {
        "pa": true,
        "parameter": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a92f61e12cfa8c0ee80257cf7abdb0a7": {
      "content": "{\n\t\"name\": \"Launch Angular\",\n\t\"type\": \"${1:edge}\",\n\t\"version\": \"${2:dev}\",\n\t\"request\": \"launch\",\n\t\"preLaunchTask\": \"${3:npm: start}\",\n\t\"url\": \"http://localhost:${4:4200}/\",\n\t\"webRoot\": \"${5:\\${workspaceFolder\\}}\"\n}",
      "doc": "",
      "filetype": "jsonc",
      "grammar": "lsp",
      "label": "Create launch config for Edge",
      "matches": {
        "a-launch-edge": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "a93ec1b0e67c4f461977148748f73255": {
      "content": "static ${0}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "st": true
      },
      "source": "vim-snippets/snippets"
    },
    "a94076b9b0028f0edc3d7c4299aef52a": {
      "content": "typedef enum {${2:TARGET}} ${1:name};",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enum": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a941a9201cd3d12a6f4f820a001555c3": {
      "content": "word-break keep-all",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:k": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9444e0c23bb6fa6a7a4025f962b7320": {
      "content": "resize horizontal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "a949d45229ed1ba0bb80a8dd5b8de959": {
      "content": "{% include \"${1:template}\" %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "include",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a94ecf28c8c4657678539158689a69cf": {
      "content": "if (${1}) begin\n\t${0}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "a94f5177d0a38ebb6cef050e816df8ac": {
      "content": "border-corner-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtli:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "a95b9d40432391004ef726dc06b5c5ce": {
      "content": "file_put_contents(${1:file}, ${2:content}${3:, FILE_APPEND});$0",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "file_put_contents",
      "matches": {
        "fpc": true
      },
      "source": "vim-snippets/snippets"
    },
    "a964ce13e44ae86422da938e2130bf47": {
      "content": "_.extendWith(${object}, ${sources}, ${customizer})",
      "doc": "function customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = _.partialRight(_.assignInWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n\nThis method is like `_.assignIn` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-extendwith",
      "matches": {
        "lodash extendwith": true
      },
      "source": "javascript/lodash"
    },
    "a96c5760a9393fcef0dc2298d56c73ba": {
      "content": "<%= for ${1:item} <- ${2:items} ${3:@conn} do %>\n\t${0}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "a96dd251ced0d91921ae81bbb81e6303": {
      "content": "{% if ${1:expr} %}\n\t$2\n{% elif %}\n\t$3\n{% else %}\n\t$4\n{% endif %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "if/elif/else",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a97287cc6d72c68897348f401a4dc2ca": {
      "content": "{% spaceless %}${0}{% endspaceless %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "spaceless": true
      },
      "source": "vim-snippets/snippets"
    },
    "a97a86d8ca36da4f8cb18652e3bd6c01": {
      "content": "while $1 do\n\t$0\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "while loop",
      "matches": {
        "while": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a983e38b09c0dce38e074a1d7ef0c822": {
      "content": "~this(${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dtor": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9869ba190c100e4c80b298c5b8edf51": {
      "content": "- (void) dealloc\n{\n\t${0:deallocations}\n\t[super dealloc];\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dealloc": true
      },
      "source": "vim-snippets/snippets"
    },
    "a98a8b58d4a28cf10135917800e5b2d1": {
      "content": "cy.scrollTo('${1:position}');",
      "doc": "Scroll to a specified position. Valid positions are topLeft, top, topRight, left, center, right, bottomLeft, bottom, and bottomRight.",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-scroll-to-position",
      "matches": {
        "cypress scroll to position": true
      },
      "source": "javascript/cypress"
    },
    "a9905b38a2929d6175974b85d8e4bd36": {
      "content": "vertical-align: bottom;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9952152aafd4b0405592ff37b34a2eb": {
      "content": "text-decoration: overline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "a99bd37473e1ddd6d98c0fd92881b970": {
      "content": "def __eq__(self, other):\n\t${1:pass}\ndef __ne__(self, other):\n\t${2:pass}\ndef __lt__(self, other):\n\t${3:pass}\ndef __le__(self, other):\n\t${4:pass}\ndef __gt__(self, other):\n\t${5:pass}\ndef __ge__(self, other):\n\t${6:pass}\ndef __cmp__(self, other):\n\t${7:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "methods implementing rich comparison",
      "matches": {
        "cmp": true
      },
      "source": "vim-snippets/snippets"
    },
    "a99d425bcd0f4d0cfb942e37ab763e02": {
      "content": "content attr(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9a33a199ca66fc9973b94e91dc21a71": {
      "content": "overflow-style: panner",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:p": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9b815b06acf05bdd249040bb19a6099": {
      "content": "sub ${1:function_name}(${2:Str $var}) {\n\t${3}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sub": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9bc44838ebbb16fd3d5695c2a950a8d": {
      "content": "clear: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9bd20246330f400e3d9f200f70160b5": {
      "content": "console.group(\"${1:label}\");\n${0:${VISUAL}}\nconsole.groupEnd();",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.group",
      "matches": {
        "cgroup": true
      },
      "source": "snippets/javascript"
    },
    "a9bed75fe7182e9f08bba9da798f047d": {
      "content": "<meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "meta:utf": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9bedede5066d51c428763b451f57955": {
      "content": "${1:deferred}.then(${2:doneFilter}, ${3:failFilter}, ${4:progressFilter})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dpipe": true
      },
      "source": "snippets/coffee"
    },
    "a9bf6999ccc1171018338992b984b16f": {
      "content": "overflow: scroll",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9c9a3c60d233a3cb03dce5b7fc643ef": {
      "content": "<link rel=\"stylesheet\" href=\"${1:style.css}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9cbf3ddd72263c4846c81b1372a6af1": {
      "content": "function(${1}) { ${0:TARGET} };",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "f": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "a9d21b000f14b65c8b07284b33ee40e3": {
      "content": "cat(${1:file}, ${2:sep = ${3:\"\"}}, ${4:fill = ${5:FALSE}}, ${6:labels = ${7:NULL}}, ${8:append = ${9:FALSE}})",
      "doc": "Cat",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "cat",
      "matches": {
        "cat": true
      },
      "source": "vscode-R/snippets"
    },
    "a9d37e8f4db79acb25d287935160a366": {
      "content": "counter-increment: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "coi": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9dd0dc27acc0310d5b2e26707edd86b": {
      "content": "${1:FIELDNAME} = forms.SplitDateTimeField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "SplitDateTimeField",
      "matches": {
        "fsdatetime": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a9de51bd15ce4cdb5ad58cfc9fb10e72": {
      "content": "define('${1:VARIABLE_NAME}', ${2:'definition'});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "define('VARIABLE_NAME', 'definition')",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9e62e35a837ccd74660dffb55bcc8fc": {
      "content": "{% for $1 in $2 %}\n\t$3\n{% endfor %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "a9ef0143a3280ec38b1cc0db7c162b58": {
      "content": "text-justify: inter-cluster",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:ic": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9ef30f86eec3317d247cbc1f8d0c4b0": {
      "content": "{% codeblock ${1:title} lang:${2:language} ${3:URL} ${4:link_text} %}\n${0:code_snippet}\n{% endcodeblock %}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "codeblock-full": true
      },
      "source": "vim-snippets/snippets"
    },
    "a9f8ae520953c85a2654a615271266ba": {
      "content": "_.plant(${value})",
      "doc": "function square(n) {\n  return n * n;\n}\n\nvar wrapped = _([1, 2]).map(square);\nvar other = wrapped.plant([3, 4]);\n\nother.value();\n// => [9, 16]\n\nwrapped.value();\n// => [1, 4]\n\nCreates a clone of the chain sequence planting `value` as the wrapped value.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-plant",
      "matches": {
        "lodash plant": true
      },
      "source": "javascript/lodash"
    },
    "aa02c0efe03afe1d577d55116fb7624b": {
      "content": "=>",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        ".": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa0b2f1c5be7ed213aa647debd5b3d67": {
      "content": "$('${1:selector}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jj": true
      },
      "source": "snippets/javascript"
    },
    "aa0c0654336a1aed890dfe979ac73c1e": {
      "content": "_.stubArray()",
      "doc": "var arrays = _.times(2, _.stubArray);\n\nconsole.log(arrays);\n// => [[], []]\n\nconsole.log(arrays[0] === arrays[1]);\n// => false\n\nThis method returns a new empty array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-stubarray",
      "matches": {
        "lodash stubarray": true
      },
      "source": "javascript/lodash"
    },
    "aa1145b973e99183677ffba2a7411d20": {
      "content": "letter-spacing: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "letter-spacing": true,
        "ls": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aa1dd65f4d08191c1d669526291d7b4e": {
      "content": "{% stylesheet '${1:scss}' %}\n\t${0}\n{% endstylesheet %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stylesheet_scss": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa1fb9d84dee103a4eda41ec6a049efb": {
      "content": "padding ${1:0} ${0:0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:2": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa270cd25158887d31fd61b03d6daae7": {
      "content": "if (${1:#:condition}) {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aa33bdbd9e159dd4782f10f0d135b6a3": {
      "content": "visibility visible",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa36d18bcdd37a039f98b504b565892f": {
      "content": "<%= javascript_include_tag \"${0}\" %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jsit": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa3d83308db104bd068fbeceaf4fc333": {
      "content": "${1:obj}.delegate('${2:selector expression}', '${3:event name}', function (${4:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dele": true
      },
      "source": "snippets/javascript"
    },
    "aa3efe7db2b6e1072d51258545211a34": {
      "content": "select do |${1:e}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "seld": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa421706214da629dd8828a6bb593d9d": {
      "content": "echo CHtml::activeCheckBox(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhacb": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa4863c7989fae13ccd710eaeb7d0b63": {
      "content": "${1:obj}.next('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "next": true
      },
      "source": "snippets/coffee"
    },
    "aa4966cddaf740b4838f099b4c2bbf30": {
      "content": "public void test${1:#:Name}() throws Exception {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aa4e779b8bc061b42f688c381a48986b": {
      "content": "play();",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aa5df184b3902e4003e2aad41d24757e": {
      "content": "(if-let [${1:result} ${2:test-expr}]\n\t(${3:then-expr} $1)\n\t(${0:else-expr}))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if-let": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa62826342929ba0d55841a23ba495e8": {
      "content": "case ${1:object}\nwhen ${2:condition}\n\t${0}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa634c3ebc7cb5592829a942915b10b0": {
      "content": "${1:obj}.filter (${2:index}) ->\n\t${3}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filtert": true
      },
      "source": "snippets/coffee"
    },
    "aa6493c6f9bcf19408bbba5e53cdcad1": {
      "content": "class ${1:#:name}(${2:object}):\n\t\"\"\"${3:#:class documentation}\"\"\"\n\tdef __init__(self, ${4}):\n\t\t\"\"\"${5:#:__init__ documentation}\"\"\"\n\t\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "class Class(...): \"...\"",
      "matches": {
        "classd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aa6a22766407cb67b3ba8122d6508d01": {
      "content": "<div v-for=\"${1:item} in ${2:items}\" :key=\"$1.id\">\n\t{{ $1 }}\n</div>",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vfor": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa6d4f9f0b95d1233a6ea81fc55843a2": {
      "content": "${1:div}(:style=\"{ fontSize: ${2:data} + 'px' }\")",
      "doc": "vue inline style binding",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Style Binding",
      "matches": {
        "vstyle": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "aa72c0d00cf937b687ceb55a2d1a6904": {
      "content": "import React from 'react';\nimport PropTypes from 'prop-types';\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a stateless React component as a named function with PropTypes",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactStatelessFunctionProps",
      "matches": {
        "rsfp": true
      },
      "source": "vscode-react/snippets"
    },
    "aa7c8e32c0d1e42b758ff2cea1a45215": {
      "content": "${1:U}\n{\n\tsolver          PBiCG;\n\tpreconditioner  DILU;\n\ttolerance       1e-${2:6};\n\trelTol          ${0:0.0};\n}",
      "doc": "",
      "filetype": "openfoam",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pbicg": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa84b472722c8c7890af5b5fa66e3c94": {
      "content": "exec { \"${1:name}\":\n\tcommand => \"${2:$1}\",\n\tuser    => \"${3:root}\",\n\t${4}    => ${0},\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exec": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa89dcc2933dfa48b0f86fdb49664501": {
      "content": "for ${1:e} := range ${2:collection} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for range loop",
      "matches": {
        "forr": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa9058317851416d68f1e2bdf1d92d32": {
      "content": "import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: ${1:'root'} })\nexport class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {\n\tresolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {\n\t\treturn ${0};\n\t}\n}",
      "doc": "Angular Resolver",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Resolver",
      "matches": {
        "a-resolver": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "aa92256413edf50673ca81ea093996e5": {
      "content": "break;",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "br": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aa9d3fb09963451992644c016382a70d": {
      "content": "var_export(${1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "var_export($var)",
      "matches": {
        "var": true
      },
      "source": "vim-snippets/snippets"
    },
    "aa9ea994bb991c3f8402345b6e57a9e9": {
      "content": "import PropTypes from 'prop-types'\n\nexport default (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_hocComponent",
      "matches": {
        "_hoc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "aaaea0275163a4684c754e21e0500dcc": {
      "content": "@each('$1', $$2, '$3')",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@each directive",
      "matches": {
        "each": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "aab99e328b3d6bafb7e33f69172ec4a2": {
      "content": "&#x21E7;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "shift": true
      },
      "source": "vim-snippets/snippets"
    },
    "aabd29f329d84a42751ebf3d28179f2a": {
      "content": "try ${1:TARGET}\nwith ${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "try..with",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aabe3579f4627340b1e0185e64cccb85": {
      "content": "<?php if (${1}): ?>\n\t${0:${VISUAL}}\n<?php else: ?>\n\t${2}\n<?php endif; ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "<?php if (condition): ?> ... <?php else: ?> ... <?php endif; ?>",
      "matches": {
        "ifeil": true
      },
      "source": "vim-snippets/snippets"
    },
    "aac06c757e70261600dc4d9d480d9777": {
      "content": "for ${1:name} in ${2:array}\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fora": true
      },
      "source": "snippets/coffee"
    },
    "aac62f2fc5d56c273bb2df84b2ead968": {
      "content": "$.ajaxStop ->\n\t${1:// handler for when all AJAX calls have been completed}\n${0}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxstop": true
      },
      "source": "snippets/coffee"
    },
    "aac84584afe44f2d2ac4906345d9dd39": {
      "content": "System.out.print(${1});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "print": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aacf5ae711048c46ebb4151542d1f380": {
      "content": "array.ensure()",
      "doc": "array.ensure(): Schema\n\nEnsures that the value is an array, by setting the default to [] and transforming null and undefined\nvalues to an empty array as well. Any non-empty, non-array value will be wrapped in an array.array()\n  .ensure()\n  .cast(null); // => []\narray()\n  .ensure()\n  .cast(1); // => [1]\narray()\n  .ensure()\n  .cast([1]); // => [1]\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "array-ensure",
      "matches": {
        "yup array ensure": true
      },
      "source": "javascript/yup"
    },
    "aae415a9acafd8e73564a1d771f49c6d": {
      "content": "justify-self: end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "aaf5980c78b201dd22b199b45d0679d9": {
      "content": "<hr>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hr": true
      },
      "source": "vim-snippets/snippets"
    },
    "aaf8cca94715bb9c14e47af26b0260ea": {
      "content": "unchecked\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "unchecked block",
      "matches": {
        "unchecked": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "aaff9f9070fbf19877102d93d1edb8a4": {
      "content": "${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}\n$1 ${5} = ${0:undefined}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn2": true
      },
      "source": "vim-snippets/snippets"
    },
    "aaffef2ee3997833a4af699c38408c02": {
      "content": "margin-left: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ml": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab02d9ccd6d035d38df669efa517f8ac": {
      "content": "\\\\href{${1}}{${2}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "href": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab0a5edfe62fec699ddfd95a78a1b865": {
      "content": "else {\n    ${1:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ab0b51daa8c16ab14f2a7b0486203834": {
      "content": "vertical-align middle",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab147ffc2ea765a730f473365d4786e5": {
      "content": "content: normal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab2695d53a55ce28dba987358be26c85": {
      "content": "${1:class_name}.prototype.${2:method_name} = function(${3}) {\n\t${0:${VISUAL}}\n};",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "proto": true
      },
      "source": "snippets/javascript"
    },
    "ab2f100c1343b2602863b4c26a98bd14": {
      "content": "_.unzip(${array})",
      "doc": "var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n\n_.unzip(zipped);\n// => [['a', 'b'], [1, 2], [true, false]]\n\nThis method is like `_.zip` except that it accepts an array of grouped\nelements and creates an array regrouping the elements to their pre-zip\nconfiguration.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-unzip",
      "matches": {
        "lodash unzip": true
      },
      "source": "javascript/lodash"
    },
    "ab3ce2da70ed094e4eb3ebdac49e70bd": {
      "content": "member do\n\t${1:get :${2:action}}\n\t${3:put :${4:action}}\n\t${5:post :${6:action}}\n\t${7:delete :${8:action}}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "member routes",
      "matches": {
        "member": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ab423bd1ccf794e0082281cd95f3f686": {
      "content": "quote\n    ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "quote ... end",
      "matches": {
        "quote": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ab46bdfc8fcacae0691573c406649783": {
      "content": "spyOn(${1:object}, '${2:method}').and.callThrough();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "spy on and call through (js)",
      "matches": {
        "sct": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab575d799f3a4ddfffca75550537cb05": {
      "content": "expect(${1:target}).toMatch(${2:pattern});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to match (js)",
      "matches": {
        "em": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab58b94425672d97ba59c5c069cb3215": {
      "content": "_.isBoolean(${value})",
      "doc": "_.isBoolean(false);\n// => true\n\n_.isBoolean(null);\n// => false\n\nChecks if `value` is classified as a boolean primitive or object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isboolean",
      "matches": {
        "lodash isboolean": true
      },
      "source": "javascript/lodash"
    },
    "ab59162853559dda9eaa2fbb62a30327": {
      "content": "form_reset(\"${1:name}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_reset": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab5d2626a5965e717cffcc76f02063bd": {
      "content": "do\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab600df925293dca983c76fa41d0c489": {
      "content": "<%= render partial: '${1:item}', locals: { :${2:name} => '${3:value}'${0} } %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rpl": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab6ef5b00b61f21041345bcfc5c39b1c": {
      "content": "Page Should Not Contain Image    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Not Contain Image",
      "matches": {
        "psnci": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ab6fa3c74a1cecf25359092cd4deea7d": {
      "content": "$.grep(${1:array}, function (item, index) {\n\t${2}\n}${0:, true});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grep": true
      },
      "source": "snippets/javascript"
    },
    "ab7029c8015a9ac8b23d15e4b411b3a8": {
      "content": "for ${1:i} in ${2} {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "for ... in ... loop",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab758d6e5437c7fcfa1cb666a2f375b3": {
      "content": "use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Cache;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Sensio\\..\\Cache",
      "matches": {
        "usecache": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ab78d26197586eb980433ed6c840d620": {
      "content": "_.toUpper(${string})",
      "doc": "_.toUpper('--foo-bar--');\n// => '--FOO-BAR--'\n\n_.toUpper('fooBar');\n// => 'FOOBAR'\n\n_.toUpper('__foo_bar__');\n// => '__FOO_BAR__'\n\nConverts `string`, as a whole, to upper case just like\n[String#toUpperCase](https://mdn.io/toUpperCase).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-toupper",
      "matches": {
        "lodash toupper": true
      },
      "source": "javascript/lodash"
    },
    "ab7d13e080e50742b08a5a430df371ba": {
      "content": "page-break-after always",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab7f3000445fdd0900952e899159b69e": {
      "content": "= render :partial => \"${0:item}\"",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rp": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab7f8580d46f3da4d8b19fcf63ac1817": {
      "content": "until ($1) {\n\t${2:# body...}\n}\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "until",
      "matches": {
        "until": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ab80c4b94c222c5844c9562023d57476": {
      "content": ",,${1},,${2}",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": ",,sub,,",
      "matches": {
        "sub": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ab959b4863b9164ed1e9837ccc4e907f": {
      "content": "${1:FIELDNAME} = models.ManyToManyField(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, symmetrical=False}${6:, through=''}${0:, db_table=''})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m2m": true
      },
      "source": "vim-snippets/snippets"
    },
    "ab9b24cb52d305942f5a56117c57c691": {
      "content": "formArrayName=\"${1:control}\"",
      "doc": "Angular formArrayName",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngFormArrayName",
      "matches": {
        "a-formArrayName": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "ab9cccbd7ace6a0c4d29829d96f67ee0": {
      "content": "form_password(\"${1:name}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_password": true
      },
      "source": "vim-snippets/snippets"
    },
    "aba4f240f1268b981c8d6fa66838cbc5": {
      "content": "word-wrap: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:no": true
      },
      "source": "vim-snippets/snippets"
    },
    "aba8aaf1133b3ecca425cbe12459e6fc": {
      "content": "empty-cells: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec": true
      },
      "source": "vim-snippets/snippets"
    },
    "abb0c85492c5d237a8c40bfecc65a037": {
      "content": "_.clamp(${number}, ${lower}, ${upper})",
      "doc": "_.clamp(-10, -5, 5);\n// => -5\n\n_.clamp(10, -5, 5);\n// => 5\n\nClamps `number` within the inclusive `lower` and `upper` bounds.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-clamp",
      "matches": {
        "lodash clamp": true
      },
      "source": "javascript/lodash"
    },
    "abc2333c2a324df5ef6f25393432d744": {
      "content": "std::unordered_multiset<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "umset": true
      },
      "source": "vim-snippets/snippets"
    },
    "abc5a94358ab2835e3213222ab90f07c": {
      "content": "floatformat:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "floatformat": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "abcdd6864372eb23993332e3b12492a3": {
      "content": "border-bottom-width: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbw": true
      },
      "source": "vim-snippets/snippets"
    },
    "abcef554e495f865343ac7eed52c39c5": {
      "content": "const ${1:NAME} ${2:Type} = ${0:0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "const XXX Type = ...",
      "matches": {
        "con": true
      },
      "source": "gosnippets/snippets"
    },
    "abe0632cdd1da2c1b06226b30a57738b": {
      "content": "(println ${0})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "print": true
      },
      "source": "vim-snippets/snippets"
    },
    "abebd56e5adc2051325f74c38cdaf4bd": {
      "content": "spyOn(${1:object}, '${2:method}').and.throwError(${3:exception});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "spy on and throw (js)",
      "matches": {
        "st": true
      },
      "source": "vim-snippets/snippets"
    },
    "abf1b3b63fa2d39b87e5af8b2ebb2b86": {
      "content": "content open-quote",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:oq": true
      },
      "source": "vim-snippets/snippets"
    },
    "abf2f459a9b8e8e0546c5bedd1fc122d": {
      "content": "for(let ${1:item} in ${2:object}) {\n\t${0}\n}\n",
      "doc": "Iterating over property values of iterable objects",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "forIn",
      "matches": {
        "fin": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "abf62ee6beefcb71ec55b86a7b667477": {
      "content": "for (my $${1:var} = 0; $$1 < ${2:expression}; $$1++) {\n\t${3:# body...}\n}\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "for",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ac06ccfeb3878709be5812a59293e928": {
      "content": "let rec ${1:f} =\n\t${2:expr}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "let rec",
      "matches": {
        "lr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ac0a56be88038acd488eae4894cb0cd4": {
      "content": "\\\\begin{align${1:ed}}\n\t\\\\label{eq:${2}}\n\t${0:${VISUAL}}\n\\\\end{align$1}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "align(ed) environment",
      "matches": {
        "ali": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac0b821f3afd90a574610994f827e306": {
      "content": "ortho(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${0:far});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ortho": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac0d3986c459f2b3d8892d367175e94f": {
      "content": "expect($1).toBeFalsy();$0",
      "doc": "expects the argument is falsy",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobefalsy",
      "matches": {
        "jest expect tobefalsy": true,
        "tbf": true
      },
      "source": "javascript/jest"
    },
    "ac0fcd5066902d8d981f41fa20a40d38": {
      "content": "= render partial: '${0}'",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "renp": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac1eda8c377671e3b2a1015ba62d2466": {
      "content": "it \"${1}\" do\n\t${0}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "it": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac1f559c1bcd745c702a2497bfda5cbb": {
      "content": "@proceedings{${1:LABEL},\n    title = {${2}},\n    year = {${3}},\n    memo = {editor, publisher, organization, address, month, note},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@proceedings": true,
        "proceedings": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ac201709e0902d042fac4e0a667831b4": {
      "content": "${1:obj}.siblings('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sib": true
      },
      "source": "snippets/javascript"
    },
    "ac201bc2c2bd6de1822f1f0bab39b1d3": {
      "content": "macro ${1:#:name}(${2}):${3:type} =\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "macro": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ac2a7aa703437ec544adadd8c6cb3c84": {
      "content": "case ${1:expression} :\n\t${0}\nbreak;",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac38784e3244989507ef450341c9c196": {
      "content": "do {\n    ${0:TARGET}\n}${9}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ac3966afbb1baaa76c1e386cf19cd1d4": {
      "content": "/*! \\enum $2\n *\n *  ${4:Detailed description}\n */\ntypedef enum {\n\t${1:Data} /*!< ${3:Description} */\n} ${2:foo};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tde": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac4d4e4ca110920059f099dcd05bdfa5": {
      "content": "with ${1:open}(${2:#:filename, mode}) as ${3:f}:\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "with {func}({file}) as :",
      "matches": {
        "with": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ac54aa732a88baa870b403b48ee3fd05": {
      "content": "<code>${0:#:content}</code>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<code></code>",
      "matches": {
        "code": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ac58bb69f11089c3e6ef489cfbd048e2": {
      "content": "align-content: flex-start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac5942955453f8c022246c74ba79278f": {
      "content": "@function ${1:name}(${2:args}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac5a5722ea8964ba095aee1b5cf492d2": {
      "content": "import ${1:New} from '@/components/${1:New}.vue';",
      "doc": "Import one component into another",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Import File",
      "matches": {
        "vimport": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "ac5e0cc257d698ab72aa200b529fd83c": {
      "content": ".. figure:: ${1:img}\n\t:alt: ${2:alter text}\n\t$0",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fig:": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac5e3a52c6fd213dfe71fc1bcaa76c50": {
      "content": "def __add__(self, other):\n\t${1:pass}\ndef __sub__(self, other):\n\t${2:pass}\ndef __mul__(self, other):\n\t${3:pass}\ndef __div__(self, other):\n\t${4:pass}\ndef __truediv__(self, other):\n\t${5:pass}\ndef __floordiv__(self, other):\n\t${6:pass}\ndef __mod__(self, other):\n\t${7:pass}\ndef __divmod__(self, other):\n\t${8:pass}\ndef __pow__(self, other):\n\t${9:pass}\ndef __lshift__(self, other):\n\t${10:pass}\ndef __rshift__(self, other):\n\t${11:pass}\ndef __and__(self, other):\n\t${12:pass}\ndef __xor__(self, other):\n\t${13:pass}\ndef __or__(self, other):\n\t${14:pass}\ndef __neg__(self):\n\t${15:pass}\ndef __pos__(self):\n\t${16:pass}\ndef __abs__(self):\n\t${17:pass}\ndef __invert__(self):\n\t${18:pass}\ndef __complex__(self):\n\t${19:pass}\ndef __int__(self):\n\t${20:pass}\ndef __long__(self):\n\t${21:pass}\ndef __float__(self):\n\t${22:pass}\ndef __oct__(self):\n\t${22:pass}\ndef __hex__(self):\n\t${23:pass}\ndef __index__(self):\n\t${24:pass}\ndef __coerce__(self, other):\n\t${25:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "methods for emulating a numeric type",
      "matches": {
        "numeric": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac60b24d3097e986965a26a64b6ccce8": {
      "content": "process.stdout",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stdout": true
      },
      "source": "snippets/javascript"
    },
    "ac6190e164ad44c26bd505c1e20d8780": {
      "content": "<keep-alive$1>\n$2\n</keep-alive>$0",
      "doc": "keep-alive element",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-keep-alive",
      "matches": {
        "keepalive": true,
        "vue keep-alive": true
      },
      "source": "javascript/vue"
    },
    "ac62d46f4c6422cafa4cf4af5f3471d1": {
      "content": "->(${1:args}) { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "->a": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac829ddbcbe32a42908e1fd5665ffc77": {
      "content": "display: table-header-group;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbhg": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac8aaf5602bed102804bbfe152e9155e": {
      "content": "{% endwith %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endwith",
      "matches": {
        "endwith": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac8c23ec45e644cdb7706784965ee080": {
      "content": "throw ${0}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac92b881cde225139d3aeb66e07ac10b": {
      "content": "word-break: loose;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "ac97667d70e1e96dcce0494b9d5adfc0": {
      "content": "${1:obj}.mousemove (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mmove": true
      },
      "source": "snippets/coffee"
    },
    "aca5d4c1145ab2347c97c45be93d8663": {
      "content": "logger.debug { '${1:message}' }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "logd": true
      },
      "source": "vim-snippets/snippets"
    },
    "acb054bcfc7838af75dd42ebeafeab3d": {
      "content": "<p id=\"${1}\">${0}</p>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p#": true
      },
      "source": "vim-snippets/snippets"
    },
    "acb3b15fbe3af58a2dea2cab1ef9b44c": {
      "content": "color: #${1:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "c": true
      },
      "source": "vim-snippets/snippets"
    },
    "acb76bd2c704f40dec9d783db1cfa89f": {
      "content": "unset grid",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "unset grid",
      "matches": {
        "grid!": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "acc82f89b6a61d353e97d7b047b9f9c9": {
      "content": "@synthesize ${1:property};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "syn": true
      },
      "source": "vim-snippets/snippets"
    },
    "acd57d3296478f2064b11e5473bdb7cc": {
      "content": "${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {\n\t${0}\n};",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lambda": true
      },
      "source": "vim-snippets/snippets"
    },
    "acdc9285025b7dae175ec673adf12991": {
      "content": "echo CHtml::submitButton('${1:label}',array('${2:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhsb": true
      },
      "source": "vim-snippets/snippets"
    },
    "acdd4ee41bac3d65af10564ec23bce27": {
      "content": "if ${1} then\n\t${2}\nelse\n\t${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "acdf236a0f611013ce3cf9eaad140dea": {
      "content": "interface ${1:program_name} ();\n\t// nets\n\t${0}\n\t// clocking\n\t// modports\nendinterface : $1",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "intf": true
      },
      "source": "vim-snippets/snippets"
    },
    "acea3415b483223e2156f5cb753b4c66": {
      "content": "#!/usr/bin/env ruby\n${0}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "#!/usr/bin/env ruby",
      "matches": {
        "#!": true,
        "shebang": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aceaf407702af08c447f3a52862294d1": {
      "content": "justify-content: flex-start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "acf18765f17c3dcae4bb1e87fc8b9782": {
      "content": "font-emphasize ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fem": true
      },
      "source": "vim-snippets/snippets"
    },
    "acfc92fa10f06c6a49f7d9bd1e2eae68": {
      "content": "enum ${1:#:Name} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "enum {}",
      "matches": {
        "enum": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "acfdf74d6c42035e7eeef66f9cf4cf37": {
      "content": "where\n\t${1:fn} = ${0:undefined}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "where": true
      },
      "source": "vim-snippets/snippets"
    },
    "acfe0eb64ce997506aad0fc70560cc01": {
      "content": "text-transform: ${1:none};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "text-transform",
      "matches": {
        "tt": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ad035217d101548dc99b80423e2f3fa8": {
      "content": "foreach ${1:my $${2:x}} (@${3:array}) {\n\t${4:# body...}\n}\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "foreach",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ad0a525fbde21de4372d2b97cb754867": {
      "content": "set multiplot\n${1:#:plot code}\nunset multiplot",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set multiplot ... unset multiplot",
      "matches": {
        "multiplot": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ad0a6fc9db84ad210cd41a51996ddc67": {
      "content": "_.toArray(${value})",
      "doc": "_.toArray({ 'a': 1, 'b': 2 });\n// => [1, 2]\n\n_.toArray('abc');\n// => ['a', 'b', 'c']\n\n_.toArray(1);\n// => []\n\n_.toArray(null);\n// => []\n\nConverts `value` to an array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-toarray",
      "matches": {
        "lodash toarray": true
      },
      "source": "javascript/lodash"
    },
    "ad0f888fc73881e006bdfc7006943b48": {
      "content": "{{ \"${1}\"|t }}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig translate",
      "matches": {
        "translate": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad1bdb35c05d5d066bbd4735eb4f070d": {
      "content": "border-fit ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad202f9e31c1f411f807f7786d4432dd": {
      "content": "a_ply(${1:array}, ${2:margin}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "a_": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad226a3e8cd9b3dfd1f1d16cf5461c09": {
      "content": "${1:obj}.focusOut(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "focusout": true
      },
      "source": "snippets/javascript"
    },
    "ad22e03fe91eceefb2e4b7a4217c8ff2": {
      "content": "${1:void} ${2:function_name}(${3});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fund": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad2fb6a0555defd5b2b35ccb782769ab": {
      "content": "v-html=\"${1:html}\"",
      "doc": "Expects: string. Updates the element’s innerHTML.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-html",
      "matches": {
        "vhtml": true,
        "vue v-html": true
      },
      "source": "javascript/vue"
    },
    "ad2fbbffb5044efd94c3255c12bc6dbd": {
      "content": "[Test]\npublic void ${1:#:Name}Test() {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ad38f1c01f9c4867ebe1d9df9bf2f21a": {
      "content": "${1:callbacks}.remove(${2:callbacks})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Crem": true
      },
      "source": "snippets/coffee"
    },
    "ad42780026cf7e3f4cba83692cae0592": {
      "content": "public",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pub": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad44a3e3ac7a2949573dbc2ed9fdc740": {
      "content": "expect(${1:target}).toContain(${2:value})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to contain (coffee)",
      "matches": {
        "ec": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ad50c2f3118becf750dbcf83ffaacccb": {
      "content": "text-justify kashida",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:k": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad5135fb0c76acc02fae22b7d85c4089": {
      "content": "display: table-cell",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbc": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad55c66fdf43d5c5f2d63665fa6e3e98": {
      "content": "<command type=\"radio\" radiogroup=\"${1}\" label=\"${2}\" icon=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "command:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad58dd352e946835f2841b003b45e0c6": {
      "content": "div(ng-repeat='${1} in ${2}')",
      "doc": "",
      "filetype": "jade",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rep": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad644c52b3f0c8fbc49a8551b4c1e2f9": {
      "content": "task ${1:name}(${2});\n\t${0}\nendtask: $1",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "task": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad659dde53f6a7ea98ffaea24120ceb1": {
      "content": "componentWillMount() {\n\t$0\n}\n",
      "doc": "DEPRECATED!!!. Invoked once, both on the client and server, immediately before the initial rendering occurs",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-componentwillmount",
      "matches": {
        "cwm": true,
        "react componentwillmount": true
      },
      "source": "javascript/react"
    },
    "ad69757d559a5031f3084c05f0f9ec3a": {
      "content": "$.data('${1:selector expression}', '${2:key}'${3:, 'value'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dataa": true
      },
      "source": "snippets/coffee"
    },
    "ad6c3a7ea8800a4ff4aef469f585265d": {
      "content": "margin: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad6e7629dfc34a1c4788d82db6f82530": {
      "content": "onErrorCaptured(() => {${1}})",
      "doc": "Vue onErrorCaptured Lifecycle hook",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle Hooks - onErrorCaptured",
      "matches": {
        "v3onerrorcaptured": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "ad737b0fe87e180ee7203bc2b29bc17e": {
      "content": "assert_throws :${1:expected} do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "astd": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad7854d28552a10a90652669a19a36c2": {
      "content": "rename_column :${1:table_name}, :${2:old_column_name}, :${0:new_column_name}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mrnc": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad7b4e06257e2f7693e2c2111663a808": {
      "content": "font-weight: bold",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad7e3afd9d5d30a5cceb41759a8425e6": {
      "content": "overflow-x: visible;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad8739a170262400a21bbacf5817a030": {
      "content": "function(${1:x}) ${3:{$0\\}}",
      "doc": "Function",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "fun",
      "matches": {
        "function": true
      },
      "source": "vscode-R/snippets"
    },
    "ad8a67b91939d38884e4a1560e0c2702": {
      "content": "<%include file=\"${1:filename}\" />",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "include",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ad9335b1e720188789b27969911e2154": {
      "content": "Logger.warn(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "warn": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad95ddf70cdd030f9da15a054494d095": {
      "content": "return new Promise((resolve, reject) => {\n\t${1}\n});",
      "doc": "Creates and returns a new Promise in the standard ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "promise",
      "matches": {
        "prom": true
      },
      "source": "vscode-javascript/snippets"
    },
    "ad99236ca0551db9515a0e8a5ecb7b55": {
      "content": "for (let ${1:key} of ${2:array}) {\n\t${0}\n}",
      "doc": "for of loop (ES6)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "for-of-loop-es6-",
      "matches": {
        "base for of": true
      },
      "source": "javascript/base"
    },
    "ad9e61e45b8c89d17a40a5e07a8fd7b6": {
      "content": "import { Injectable } from '@angular/core';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:ServiceName}Service {\n\tconstructor() { }\n\t$0\n}",
      "doc": "Angular Service with Injectable ProvidedIn Root",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Service",
      "matches": {
        "a-service": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "ad9f5311d3822a600794c14361ccba9e": {
      "content": "display table-column-group",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbclg": true
      },
      "source": "vim-snippets/snippets"
    },
    "ad9f67cc7cd71150d57c6cf6454cd2f0": {
      "content": "${1:page}~\\\\pageref{${2}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "reference to a page",
      "matches": {
        "page": true
      },
      "source": "vim-snippets/snippets"
    },
    "ada22b0f9749f69b5c9647820018393c": {
      "content": "has_many :${1:other}s, class_name: '${2:$1}', foreign_key: '${3:$1}_id', dependent: :destroy",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hmd": true
      },
      "source": "vim-snippets/snippets"
    },
    "ada3689887ce46a7c301dc8f3aefafc7": {
      "content": "curveVertex(${1:x}, ${2:y}, ${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "3D",
      "matches": {
        "curveVertex": true
      },
      "source": "vim-snippets/snippets"
    },
    "ada8b4cdde0fb24e1820e7af937fb44b": {
      "content": "<dl>\n\t<dt>${1}</dt>\n\t<dd>${2}</dd>\n\tdt+${0}\n</dl>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dl+": true
      },
      "source": "vim-snippets/snippets"
    },
    "adadb487ae27ef958c431f312b50b12a": {
      "content": "\\begin{note}\n\t${1:TARGET}\n\\end{note}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{note} \\note": true,
        "note": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "adaf701281956c845abaa1a76ff147b3": {
      "content": "PropTypes.shape({\n\t$0\n}),",
      "doc": "An object taking on a particular shape",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeShape",
      "matches": {
        "ptsh": true
      },
      "source": "vscode-react/snippets"
    },
    "adb10dc5915a19579f748a688b1504b9": {
      "content": "augroup ${1:#:augroup_name}\n  autocmd!\n  autocmd ${2:#:event}\naugroup END",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "augroup with autocmds",
      "matches": {
        "augroup": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "adb31bda44ac37059ee2f0f3e05b348b": {
      "content": "let [${1:name}] = ${2:value};",
      "doc": "Array destructing",
      "filetype": "base",
      "grammar": "lsp",
      "label": "destructuring-let-array",
      "matches": {
        "base let destruct array": true
      },
      "source": "javascript/base"
    },
    "adb8c7fa38c12d92ad7ea7ae6aa345b3": {
      "content": "{% case ${1:#:condition} %}\n{% when ${2:#:TARGET} %}\n  ${3}\n{% endcase%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "case when endcase",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "adbc612958502acbfd406039f6117725": {
      "content": "@foreach (${1} as ${2})\n    ${3}\n@endforeach",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@foreach ... @endforeach",
      "matches": {
        "foreach": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "adc1b3123a98b39d493f9bad345fb86f": {
      "content": "![${1:id}]: ${2:url} \"${3:title}\"",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "![:\"": true
      },
      "source": "vim-snippets/snippets"
    },
    "adc1fe3727ca725248705c6dfe9dda53": {
      "content": "Ada.Text_IO.Get_Line(${1});\n${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "Ada.Text_IO.Get_Line",
      "matches": {
        "get_line": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "adc207c9bcb2218a47d73af4ffc7470b": {
      "content": "${1:method}(${2:arguments}) {\n\t${0}\n}",
      "doc": "method (ES6 syntax)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "method-es6-syntax-",
      "matches": {
        "base method": true
      },
      "source": "javascript/base"
    },
    "adc209c058c278f4a7cac79dc010efa3": {
      "content": "it { should ensure_exclusion_of :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isee": true
      },
      "source": "vim-snippets/snippets"
    },
    "adcb0fcff9d4dbe2e497e521e83923d4": {
      "content": "<Link href={{ pathname: '${1:/path}', query: { ${2:paramName}: '${3:paramValue}' } }}>\n  <a>${4:content}</a>\n</Link>",
      "doc": "",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-link-url-object",
      "matches": {
        "next link url object": true
      },
      "source": "javascript/next"
    },
    "adcb734b2749b06ce7c95455efd92b32": {
      "content": "position: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos": true
      },
      "source": "vim-snippets/snippets"
    },
    "adcc0d21489ec905f0258d2abbbdf117": {
      "content": "background-clip padding-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "add9070ec0e8d693b51b01d566fe25f0": {
      "content": "place-content: space-evenly;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "ade686e3791fae47519a6ef707b7d9dc": {
      "content": "when ${1:condition}\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when": true
      },
      "source": "vim-snippets/snippets"
    },
    "adebe760bdcf5a91b35435b5ec79d933": {
      "content": "align-content: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "adec059a9165b084e78e99203dd015bd": {
      "content": "type ${1} struct {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "struct": true,
        "ts": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "adf5efe698a0f2634a2850847cac46be": {
      "content": "{% case \"${1}\" %}\n\t${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig switch case",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "adfa41f50f4912ea0eddc59e32c6dbac": {
      "content": "for ${1:i} := 0; $1 < ${2:N}; $1++ {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for 0..N-1 { ... }",
      "matches": {
        "fori": true
      },
      "source": "gosnippets/snippets"
    },
    "ae006406020fc02ea890e3fe568e2937": {
      "content": "{% cycle '${1:group name}': '${2:odd}', '${3:even}' %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cyclegroup": true
      },
      "source": "vim-snippets/snippets"
    },
    "ae01b4bd7cf5075089685d7edb057fd0": {
      "content": "import Application from '@ember/application';\n\nexport default Application.extend({\n\t${0://Properties here...}\n});",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "App.Name = Ember.Application.create({});",
      "matches": {
        "eapp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ae0f3db02ac8ef9ee67c9a98c1f2a90c": {
      "content": "<map class=\"${1}\" name=\"${2}\">\n\t${0}\n</map>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map.": true
      },
      "source": "vim-snippets/snippets"
    },
    "ae0f59a1fb93e998fd6ba793bb307b0c": {
      "content": "_.isTypedArray(${value})",
      "doc": "_.isTypedArray(new Uint8Array);\n// => true\n\n_.isTypedArray([]);\n// => false\n\nChecks if `value` is classified as a typed array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-istypedarray",
      "matches": {
        "lodash istypedarray": true
      },
      "source": "javascript/lodash"
    },
    "ae101e79c0ae336758843a82e29d78d8": {
      "content": "$${1:foo} = array_map(function($${2:v}) {\n\t${0}\n\treturn $$2;\n}, $$1);",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "am": true
      },
      "source": "vim-snippets/snippets"
    },
    "ae19a13c7befc7aa5a210d6459bce5ae": {
      "content": "echo CHtml::ajaxSubmitButton('${1:label}', '${2:url}',array('${3:ajaxOptionName}'=>${4:ajaxOptionValue}),array('${5:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhajsb": true
      },
      "source": "vim-snippets/snippets"
    },
    "ae1c6d8798d42409a5003d343d9f8234": {
      "content": "- (${1:#:id})${2:#:thing};\n- (void)set${2}:(${1})aValue;",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iobj": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ae49cc7bf9eafc8444b82ab8599f1899": {
      "content": "padding: ${1:20px} ${2:0px} ${3:40px} ${4:0px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "padding:   T R B L (padding)",
      "matches": {
        "padding": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ae52c5e9946ae79305474e06b58e59f1": {
      "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-hoc",
      "matches": {
        "hoc": true,
        "react hoc": true
      },
      "source": "javascript/react"
    },
    "ae53fa9700d901ee4e267c7286601f7b": {
      "content": "@interface ${1:NSObject)} (${2:Category)})\n${0}\n@end",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "CategoryInterface",
      "matches": {
        "cati": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ae56e958b9331222302e29319e7b87b8": {
      "content": "letter-spacing: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lts": true
      },
      "source": "vim-snippets/snippets"
    },
    "ae674afa9e6491a44b0513362f516f59": {
      "content": "font-stretch semi-expanded",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "ae6ed303606a4b03d9131a7a8395047e": {
      "content": "#[test]\nfn ${1:#:test_function_name}() {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ae6f910dff514aaba6c3616b44e7ceee": {
      "content": "_.map(${collection}, ${iteratee})",
      "doc": "function square(n) {\n  return n * n;\n}\n\n_.map([4, 8], square);\n// => [16, 64]\n\n_.map({ 'a': 4, 'b': 8 }, square);\n// => [16, 64] (iteration order is not guaranteed)\n\nvar users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\n// The `_.property` iteratee shorthand.\n_.map(users, 'user');\n// => ['barney', 'fred']\n\nCreates an array of values by running each element in `collection` thru\n`iteratee`. The iteratee is invoked with three arguments:\n(value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like\n`_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n\nThe guarded methods are:\n`ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n`fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n`sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n`template`, `trim`, `trimEnd`, `trimStart`, and `words`",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-map",
      "matches": {
        "lodash map": true
      },
      "source": "javascript/lodash"
    },
    "ae70ff2cc23c8aabd0c4a264b5b61d1e": {
      "content": "/**\n * ${4:#:undocumented function}\n *\n * @return ${5:void}\n * @author ${6}\n **/\n${1}function ${2}(${3})\n{\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc_function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ae7639bbfd87597cf741554c4436c912": {
      "content": "border-bottom-right-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbri:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "ae7a25771c4738a43a074419ef516d82": {
      "content": "background(${1:value1}, ${2:value2}, ${3:value3}${4:, }${0:alpha});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg": true
      },
      "source": "vim-snippets/snippets"
    },
    "ae84731b91b175cd1cdf6215efbeee31": {
      "content": "render partial:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render :partial",
      "matches": {
        "rp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ae8b138d9976f6195925b1eed0664a5f": {
      "content": "getters: {\n\t${1:value}: state => {\n\t\treturn state.${1:value};\n\t}\n}",
      "doc": "vuex getter",
      "filetype": "vuex",
      "grammar": "lsp",
      "label": "vuex-getters",
      "matches": {
        "vgetter": true,
        "vuex getters": true
      },
      "source": "javascript/vuex"
    },
    "ae928fe8147ee24fe6c4d519f8c239bc": {
      "content": "font-emphasize-style: circle;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "ae9422cd19f600cf3c2ddc927fd62f7b": {
      "content": "{call ${1:tmpl}}\n\t$0\n{/call}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "template call",
      "matches": {
        "call": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ae95934967027ac22e7e5cee59e7193b": {
      "content": "componentDidMount: ->\n\t$1",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define componentDidMount",
      "matches": {
        "componentDidMount": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ae9b4820c7389c7dae4fd0f355a52927": {
      "content": "if ${1:condition} then ${2:value} else ${0:other}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifte": true
      },
      "source": "snippets/coffee"
    },
    "aea6b9d3918e4774423c81069d4b0d68": {
      "content": "require('./${1:module}');",
      "doc": "require local",
      "filetype": "base",
      "grammar": "lsp",
      "label": "require-local",
      "matches": {
        "base require local": true
      },
      "source": "javascript/base"
    },
    "aea7afdfbdac4b1b5b64267e688f9178": {
      "content": "overflow-y: scroll;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "aeabfc739d61ee5eaf8b91fba5883ccb": {
      "content": "__SOURCE_FILE__",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "__FILE__",
      "matches": {
        "sourcef": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aead76dcb566d50f08f867bb2642bf3c": {
      "content": "| replace_first: '${1:target}', '${2:replace}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "replace_first": true
      },
      "source": "vim-snippets/snippets"
    },
    "aeb3bb009ff4330d6eee560e51da2625": {
      "content": "with(\n\t${1:item} <- ${2:items}\n) do\n\t${3}\nelse\n\t${4} ->\n\t\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wie": true
      },
      "source": "vim-snippets/snippets"
    },
    "aeb75bd638d0f3bfea899986b8312027": {
      "content": "page-break-inside: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbi:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "aebd96b7956e9b4653ff5f6c04f89be7": {
      "content": "caption-side: bottom",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cps:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "aebe85c311c905cea9562893088dfd46": {
      "content": "background-break each-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk:eb": true
      },
      "source": "vim-snippets/snippets"
    },
    "aec2ea76b997fa9dbc933b6bb8dafac7": {
      "content": "min-height: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mih": true
      },
      "source": "vim-snippets/snippets"
    },
    "aec2f641a2548d48880abaaddadf7e39": {
      "content": "include Enumerable\ndef each(&block)\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Enum": true
      },
      "source": "vim-snippets/snippets"
    },
    "aec3f22ec23205894bd5355628621112": {
      "content": "page-break-before: always",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "aed85c10fb28e6438d9e1df2b14bd8ba": {
      "content": "text-emphasis: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te": true
      },
      "source": "vim-snippets/snippets"
    },
    "aeddcbb51a9e5af615647e0c4e7224d3": {
      "content": "getURL(${1});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gu": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "aee472b2a6b2eb6f0cd3de33f668c3cc": {
      "content": "page-break-before: left",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "aee594888269e945019c8384d67b70c8": {
      "content": "<c:set var=\"${1}\" value=\"${0}\" />",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cset": true
      },
      "source": "vim-snippets/snippets"
    },
    "aef7835966a11e7630aeed5971becc8c": {
      "content": "else {\n    ${1:#:commands}\n}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "else {...}",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "af00112d40a87b047177db75feebf04d": {
      "content": "for {\n\t${1:item} <- ${2:obj}\n} yield ${0}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fory": true
      },
      "source": "vim-snippets/snippets"
    },
    "af16a633f00a9dd0a423d80436d060b0": {
      "content": "@moduledoc \"\"\"${0:TARGET}\"\"\"",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "@moduledoc \"\"\"...\"\"\"",
      "matches": {
        "mdoc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "af1b263c07ebef9a293242c4a0951fa0": {
      "content": "<h1 class=\"${1}\">${0}</h1>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h1.": true
      },
      "source": "vim-snippets/snippets"
    },
    "af1d9f55ca893e17de0e724943172287": {
      "content": "text-align-last left",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "af1e60a1b01d4501a52e16710569167a": {
      "content": "switch ${1:n}\n\tcase ${2:0}\n\t\t${3}${4:\n\totherwise\n\t\t${5}}\nend",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "switch ... otherwise",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "af1ff3aad667b0d1a57d18d7936a5445": {
      "content": "expect(${1:target}).not.toMatch(${2:pattern})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect not to match (coffee)",
      "matches": {
        "notm": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "af221f4b888912206af4c9ee382930c7": {
      "content": "content: no-close-quote;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:ncq": true
      },
      "source": "vim-snippets/snippets"
    },
    "af2a1f4af2106017c97e230af44079a4": {
      "content": ".. csv-table:: ${1:#:TITLE}\n\t:header: \"${2:#:Header1}\", \"${3:#:Header2}\"${4:#:Headers}\n\t\"${5:#:Column1}\", \"${6:#:Column2}\"${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "directive_csvtable",
      "matches": {
        "csvtable": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "af305bff9f5f15168387a7f471936dd7": {
      "content": "render partial: '${1:item}', status: ${0:500}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rps": true
      },
      "source": "vim-snippets/snippets"
    },
    "af3457f4f813a5f043b135396bbdaa81": {
      "content": "echo CHtml::fileField('${1:name}', '${2:value}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhff": true
      },
      "source": "vim-snippets/snippets"
    },
    "af37abb27813ad1a8d84dfa1283d8bb6": {
      "content": "<tr>\n\t${0}\n</tr>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tr": true
      },
      "source": "vim-snippets/snippets"
    },
    "af3b33489802f1e1139d651955fee1de": {
      "content": "${1:callbacks}.lock()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Clock": true
      },
      "source": "snippets/javascript"
    },
    "af3f94b7be03fd86bf1b8661c66ae6e8": {
      "content": "position: static;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "af46d7898c6be4a05ee82e036c34f749": {
      "content": "describe \"${1:test group subject}\" do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "des": true
      },
      "source": "vim-snippets/snippets"
    },
    "af4f6f2c176758161f1f45b7af6c54ca": {
      "content": "urlizetrunc:$1",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "urlizetrunc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "af57ffd23658d4bf1048ffe905a03cb5": {
      "content": "for ${1:item} <- ${2:items}, do: ${0}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for:": true
      },
      "source": "vim-snippets/snippets"
    },
    "af623520790d04a0a874278ee5b432a4": {
      "content": "<footer class=\"${1}\">\n\t${0}\n</footer>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "footer.": true
      },
      "source": "vim-snippets/snippets"
    },
    "af65deaf71713e8c3cb0296c377b49f2": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style scoped>\n\n</style>",
      "doc": "Base for Vue File with CSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component with Css",
      "matches": {
        "vbase-css": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "af6e6d434cb2dff83d60caae7d0dcb17": {
      "content": "kruskal.test(${1:formula}, ${2:data}, ${3:subset}, ${4:na.action}, ${5:...})",
      "doc": "Kruskal-Wallis Rank Sum test",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "kr",
      "matches": {
        "kruskal": true
      },
      "source": "vscode-R/snippets"
    },
    "af6fe825c0c9b61c17df60074b093429": {
      "content": "Logger.debug(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "debug": true
      },
      "source": "vim-snippets/snippets"
    },
    "af7618b42669744b56b3e0ac0615c98b": {
      "content": "font-smooth: always",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm:aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "af8d25f5f73227979af541583af422b5": {
      "content": "{% debug %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "debug": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "af905911721477676531fd2e8fb3692e": {
      "content": "else if (${1}) ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "af9337810a2413897985370552291e0e": {
      "content": "if (${1:condition}) {\n\t${2:statement}\n}",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "af971b7916632da56e93124b8776e3f0": {
      "content": "read.table('${1:filename}'${2:, header = ${3:TRUE},  sep = '${4:\t}',  stringsAsFactors = ${5:FALSE}})",
      "doc": "Read From File",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "reat",
      "matches": {
        "read": true
      },
      "source": "vscode-R/snippets"
    },
    "afa766373a59e2f8a2c1d8b3c9eee5e4": {
      "content": "($2 *)malloc(${1:N_MEMBERS} * sizeof(${2:TYPE}));\n${0}\nfree(${3:MEM});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "malloc(size)",
      "matches": {
        "malloc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "afaa6d80d2130c33067221153302f6be": {
      "content": "${1:#:set the_file to }choose file with prompt \"${2:#:Pick a file:}\"\n${3:#:default location path to home folder}\n${4:#:with invisibles}\n${5:#:with multiple selections allowed}\n${6:#:with showing package contents}",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "choose",
      "matches": {
        "choose_Files": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "afae0755b4ed5bbcb8ad665e919ba92f": {
      "content": "while (${1:true})\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "while loop",
      "matches": {
        "while": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "afb406ad525cc85c2f743edc15c79662": {
      "content": "Switch (${1:condition})\nCase ${2:case1}:\n\t${3:; Case 1 code}\nCase Else:\n\t${0:; Else code}\nEndSwitch",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "afb7f3b5756609c23ce35910851451b0": {
      "content": "set ytics ${1:#:start}, ${2:#:incr}, ${3:#:end}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set ytics start, incr, end",
      "matches": {
        "ytics": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "afbfe5d49de4b9c3ffe6a98d4c8e239d": {
      "content": "import \"${1:import file}\"",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "im": true
      },
      "source": "vim-snippets/snippets"
    },
    "afc7bd3ad612e57f4b8a3456b3b8074c": {
      "content": "const ${1:name} = ${2:value};",
      "doc": "const assignment",
      "filetype": "base",
      "grammar": "lsp",
      "label": "const-assignment",
      "matches": {
        "base const": true
      },
      "source": "javascript/base"
    },
    "afcb44b77497b5ca1c6a4d09641f8d55": {
      "content": "page-break-inside ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbi": true
      },
      "source": "vim-snippets/snippets"
    },
    "afd15865edc13c7cb2b1aebd38521ffd": {
      "content": "logical :: ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bool": true
      },
      "source": "vim-snippets/snippets"
    },
    "afd2685fadab03c9b8e0a8984db949f8": {
      "content": "overflow-x hidden",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "afd36907a816c4ffc58bc24d798061d7": {
      "content": "public bool ${1} { get; internal set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb+&": true
      },
      "source": "vim-snippets/snippets"
    },
    "afd9c40b5a533769ed37b116026c17de": {
      "content": "display -moz-inline-stack",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:mis": true
      },
      "source": "vim-snippets/snippets"
    },
    "afe25a679fc26290a3d200437fd9898f": {
      "content": "(if ${1:test-expr}\n\t${2:then-expr}\n\t${0:else-expr})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "afe952a56d407f8262b7b8d4b420ba59": {
      "content": "length(${1:x})",
      "doc": "Length",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "len",
      "matches": {
        "length": true
      },
      "source": "vscode-R/snippets"
    },
    "afecae4b4645d41360f3883039dc3c14": {
      "content": "${1:obj}.slideUp '${2:slow/400/fast}', ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "supc": true
      },
      "source": "snippets/coffee"
    },
    "affa74712ba5a8a0bfd5eb7f8734e2db": {
      "content": "for ${1:name} from ${2:start} til ${3:finish}\n\t${4}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forrex": true
      },
      "source": "vim-snippets/snippets"
    },
    "affc2cd9b623d242e9d6f793a1e37b3d": {
      "content": "_.xor(${arrays})",
      "doc": "_.xor([2, 1], [2, 3]);\n// => [1, 3]\n\nCreates an array of unique values that is the\n[symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\nof the given arrays. The order of result values is determined by the order\nthey occur in the arrays.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-xor",
      "matches": {
        "lodash xor": true
      },
      "source": "javascript/lodash"
    },
    "b001799f11cc9b6ccfa8f3993216d087": {
      "content": "try {\n\t${0}\n} finally {\n\t\n}",
      "doc": "try/finally",
      "filetype": "base",
      "grammar": "lsp",
      "label": "try-finally",
      "matches": {
        "base try finally": true
      },
      "source": "javascript/base"
    },
    "b001d3f6d5ff44844683ae944ef8989f": {
      "content": "import { Directive } from '@angular/core';\n\n@Directive({ selector: '[${1:selector-name}]' })\nexport class ${2:Name}Directive {\n\tconstructor() { }\n}",
      "doc": "Angular directive",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-directive",
      "matches": {
        "a-directive": true,
        "angular directive": true
      },
      "source": "javascript/angular"
    },
    "b0059c16cd5500664d3770eafc1cf1cf": {
      "content": "<${1:component} :${1:propName}=\"${0}\"></${1:component}>",
      "doc": "component element with props",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Component with Props Binding",
      "matches": {
        "vel-props": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "b0093ba68cf2899127e3a451ee635876": {
      "content": "<xsl:param name=\"${1:name}\">${2}\n</xsl:param>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "param": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0093faf5f13fcb90559dda688850a08": {
      "content": "margin ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m": true
      },
      "source": "vim-snippets/snippets"
    },
    "b00a7c145422ed4d431d9c547b6e8364": {
      "content": "norm(${1:value}, ${2:low}, ${0:high});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "norm": true
      },
      "source": "vim-snippets/snippets"
    },
    "b00caca974e679b6e5c77a8060d17298": {
      "content": "require 'pry'; binding.pry",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pry": true
      },
      "source": "vim-snippets/snippets"
    },
    "b00e118bb48363c4f41b4195df3a4293": {
      "content": "grid-template-areas: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gta": true
      },
      "source": "vim-snippets/snippets"
    },
    "b010baadcf4e4c3384294361f10380c5": {
      "content": "align-items: baseline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "b01143fddeda37edd72fd5daace4a9b6": {
      "content": "import { Link } from \"gatsby\"",
      "doc": "",
      "filetype": "gatsby",
      "grammar": "lsp",
      "label": "gatsby-link-import",
      "matches": {
        "gatsby link import": true
      },
      "source": "javascript/gatsby"
    },
    "b0134d42ce065fcef118c3ea258ccbc9": {
      "content": "background-size: cover",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz:cv": true
      },
      "source": "vim-snippets/snippets"
    },
    "b01787d83f0fa6b90858975992266d9d": {
      "content": "main(_) -> ${0}.",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b01ac6615126f8cd933cd4c74bfa0f08": {
      "content": "import Vue from 'vue';\nimport ${1:HelloWorld} from './components/${1:HelloWorld}';\n\ndescribe('${1:HelloWorld}.vue', () => {\n\tit('${2:should render correct contents}', () => {\n\t\tconst Constructor = Vue.extend(${1:HelloWorld});\n\t\tconst vm = new Constructor().$mount();\n\t\texpect(vm.$el.querySelector('.hello h1').textContent)\n\t\t\t.to.equal(${3:'Welcome to Your Vue.js App'});\n\t});\n});",
      "doc": "unit test component",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Unit Test",
      "matches": {
        "vtest": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "b02edda329d177355ad9bac84cbf0e74": {
      "content": "${1:obj}.blur (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blur": true
      },
      "source": "snippets/coffee"
    },
    "b0391e300b84c37b4e820da1460bee9e": {
      "content": "<ol>${1:TARGET}</ol>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ol": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b03a9ac310117f7777555b25077845fd": {
      "content": "<%text>\n\t${1:}\n</%text>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "text",
      "matches": {
        "text": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b04248cacd78fbb2d5affe918bd0097e": {
      "content": "{let $${1:identifier}: ${2:expression} /}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "let command",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b04928331694b3c5e178f63daba18725": {
      "content": "dynamic_cast<${1}>(${2})${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "dynamic_cast<>()",
      "matches": {
        "dynamic_cast": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b04a0b59334c12a29d4cccf0c499cf04": {
      "content": "public class ${1:Hello} {\n    public static void Main(string[] args) {\n        System.Console.WriteLine(\"Hello, world!\");\n    }\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "helloworld": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b05019f78dd77a2be560d152bec69d60": {
      "content": "@tag :pending",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tp": true
      },
      "source": "vim-snippets/snippets"
    },
    "b053756df1f3b77fec9ba6b879401cf8": {
      "content": "vertical-align baseline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:bl": true
      },
      "source": "vim-snippets/snippets"
    },
    "b05b75e25f8cc3be11521f65ade231f6": {
      "content": "strftime('${1:%Y-%m-%d %H:%M:%S %z}')${0}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "strf": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0638c073728cab7d3c14744595d612b": {
      "content": "Object.assign(${1:dest}, ${2:source})",
      "doc": "Object.assign",
      "filetype": "base",
      "grammar": "lsp",
      "label": "object-assign",
      "matches": {
        "base object assign": true
      },
      "source": "javascript/base"
    },
    "b0658046c5ab30d9a58edf45b3e5f303": {
      "content": "background-origin ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0798ebdf64d2f661ffb677fd6dcba31": {
      "content": "fallthrough",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fallthrough",
      "matches": {
        "ft": true
      },
      "source": "vim-snippets/snippets"
    },
    "b079c77858c1c4ad4331636f07ff057e": {
      "content": "border-break: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbk": true
      },
      "source": "vim-snippets/snippets"
    },
    "b08449a4da18d7f4bcadc769fe616b7e": {
      "content": "${1:obj}.hide '${2:slow/400/fast}', ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hidec": true
      },
      "source": "snippets/coffee"
    },
    "b08ab204ecb7601c9a4f22a4bad6294a": {
      "content": "<slot ${1:prop}={${2:value}}>${3:<!-- optional fallback -->}</slot>",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-slot-prop",
      "matches": {
        "svelte slot prop": true,
        "svsp": true
      },
      "source": "javascript/svelte"
    },
    "b09127425d50570faa8cf41ae36c592f": {
      "content": "expression()",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "b092949fd3fb9efdb49cf98de7e83875": {
      "content": "Params:  ${1:param} = ${2:param description}\n///\t\t\t$3",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "Params (Par)",
      "matches": {
        "Par": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b0a51072be90f13fcae25eeb51f184c2": {
      "content": "console.table(${1:object});",
      "doc": "Displays tabular data as a table.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleTable",
      "matches": {
        "clt": true
      },
      "source": "vscode-javascript/snippets"
    },
    "b0a5929a36f672a6fe0f7a2479e0fe27": {
      "content": "@system",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "system": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0a6f0aae0c91dd7210e7557ead7e876": {
      "content": "v-if=\"${1:condition}\"",
      "doc": "Expects: any",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-if",
      "matches": {
        "vif": true,
        "vue v-if": true
      },
      "source": "javascript/vue"
    },
    "b0a95422f9e7bff8e535561af87e02fb": {
      "content": "<seealso cref=\"${1:#:member}\"/>}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<seealso cref=\"\"/>",
      "matches": {
        "seealso": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b0ad8e2f43d22c283ccbaa0b5e1440e4": {
      "content": "<dialog>\n\t${0}\n</dialog>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dialog": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0b297a84b6ddf02907fb7a3a6f17df2": {
      "content": "${1:name} ${2:in} ${3:type} ${0: := null}",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0b47ecb1073798223fcd74435ca03f6": {
      "content": "<meta name=\"keywords\" content=\"${1}\">${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "keywords": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b0bdcf8779b00fec5c6e3482ced554f9": {
      "content": "$this->load->view(\"${1:view_name}\", $${2:data});${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_load-view": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0cc4cfc15d24170954d046e13b56dd0": {
      "content": "createWriter(${0:filename});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "createWriter": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0d24cb165d54f2a8d7ecdfaf830eed5": {
      "content": "ElseIf ${1:condition} Then\n\t${0:; True code}",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0d3c5ce60c91426afb0e7c475d5349b": {
      "content": "loop\n\t${0}\nend loop;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "loop",
      "matches": {
        "lo": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0d7e02e39faa87fcad56ed9ddf198fc": {
      "content": "+ (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument}\n{\n${0}\n\treturn nil;\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "ClassMethod",
      "matches": {
        "cm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b0dab5b7bc1f1c36b366ff56f43d652c": {
      "content": "import Route from '@ember/routing/route';\n\nexport default Route.extend({\n\t${0://Properties here...}\n});",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "import Route from '@ember/routing/route';",
      "matches": {
        "eroute": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b0deaa1910d0072edde8dbfdd13ba1c3": {
      "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})\n{\n\t${9}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defun3": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0ee85d60f6f0cd37808c3a876e21666": {
      "content": "justify-content: start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "b0f765d143c21a69fd7058b08662d3ca": {
      "content": "border-style none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1090847210c30e5199c32f766737bff": {
      "content": "${1:obj}.each(function (index) {\n\t${0:this.innerHTML = this + \" is the element, \" + index + \" is the position\";}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each": true
      },
      "source": "snippets/javascript"
    },
    "b10c7635bb1343c0ee619d7c5fa7112d": {
      "content": "${1:name}: ${2:Type},",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Struct field definition",
      "matches": {
        "fd": true
      },
      "source": "vim-snippets/snippets"
    },
    "b11967c3ca7bc2296ac27dd8528c12cc": {
      "content": "[^${1:id}]: ${2:note}",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[^:": true
      },
      "source": "vim-snippets/snippets"
    },
    "b11cb7cba042d258c180283a2cd9b877": {
      "content": "${1:obj}.on '${2:events}', '${3:selector expression}', (${4:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "on": true
      },
      "source": "snippets/coffee"
    },
    "b121baae742c44ab40d3fbd81ef1ee3c": {
      "content": "wont_be_instance_of ${0:Class}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wbio": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1376af23a223174c59b12e408db3f51": {
      "content": "white-space: pre;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:p": true
      },
      "source": "vim-snippets/snippets"
    },
    "b13e0be55fb0ecc9444ec62d04dc51da": {
      "content": "(* ${0} *)",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comment": true
      },
      "source": "vim-snippets/snippets"
    },
    "b146a4caf13de854c986f5230b65bf9c": {
      "content": "require \"${1}\"",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "require",
      "matches": {
        "req": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1571abb06bbca65c59ae5bf09e6d6cd": {
      "content": "$this->${1:method}()->shouldNotHaveCount(${2:7});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotHaveCount(7)",
      "matches": {
        "sncount": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b15dffc262e6d7e6c2e9bc2935f3d973": {
      "content": "@interface ${1:NSObject} (${2:MyCategory})\n@end\n@implementation $1 ($2)\n${0}\n@end",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cat": true
      },
      "source": "vim-snippets/snippets"
    },
    "b16739e80dfeee1b6d768acdfc29d656": {
      "content": "display table-column",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbcl": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1686a7a5ba409cb1c11a3219328b5fd": {
      "content": "<header>\n\t${0}\n</header>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "header": true
      },
      "source": "vim-snippets/snippets"
    },
    "b16b4139f42812365d0c804c6e67d87b": {
      "content": "array_walk($${1:foo}, function(&$${2:v}, $${3:k}) {\n\t$$2 = ${0};\n});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aw": true
      },
      "source": "vim-snippets/snippets"
    },
    "b17644b2b13fda46d53155d8f68a51d8": {
      "content": "import { Routes } from '@angular/router';\n\nexport const routes: Routes = [${0}]",
      "doc": "Route definitions",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "route-definitions",
      "matches": {
        "a-routes": true,
        "angular route definitions": true
      },
      "source": "javascript/angular"
    },
    "b17a2a35131028edba6a6f8d15e51b30": {
      "content": "form_close();${1}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_close": true
      },
      "source": "vim-snippets/snippets"
    },
    "b17bace556c95a2b19939a76b213cc9c": {
      "content": "actions: {\n\t${1:updateValue}({commit}, ${2:payload}) {\n\t\tcommit('${1:updateValue}', ${2:payload});\n\t}\n}",
      "doc": "vuex action",
      "filetype": "vue-script-vuex",
      "grammar": "lsp",
      "label": "Vuex Action",
      "matches": {
        "vaction": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "b1849d69f35404c41a865bb55d623c0b": {
      "content": "reinterpret_cast<${1:unsigned}>(${2:expr})${3}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rca": true
      },
      "source": "vim-snippets/snippets"
    },
    "b18bb60b97e1b5b1144a21a1435081f0": {
      "content": "each_pair do |${1:name}, ${2:val}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eapd": true
      },
      "source": "vim-snippets/snippets"
    },
    "b19225fb00aebed0362a9ab9ad489661": {
      "content": "integer, dimension(${1}), intent(in)  :: ${2}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "integer dimension intent(in)",
      "matches": {
        "indi": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b1a48ca0a151d2baf02c738d03839dff": {
      "content": "if (${1}) {\n\t${2}\n} {\n\t${0}\n}",
      "doc": "",
      "filetype": "supercollider",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1a6df4ecb1150fad4253e21c2ddc495": {
      "content": "overflow-y: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1b0157f131377fdec928e8eabfcd6b4": {
      "content": "text-height: font-size;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1bdfbb04c397ad9119f9fd81bac6695": {
      "content": "cursor: text;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1d3424776621182fdd473093f5fbbd6": {
      "content": "\\begin{theindex}\n\t${1:TARGET}\n\\end{theindex}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{theindex} \\theindex": true,
        "theindex": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b1d452d019b3431818cc0e1bcbab015b": {
      "content": "cursor crosshair",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1d45926ff8c74438139c59181673ddc": {
      "content": "{-# OPTIONS_HADDOCK ${0:hide} #-}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "haddock": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1d661426286924321fa1a79fbc5ceca": {
      "content": "place-content: space-around;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:sa": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1ddb2d2d2a329e43831011a0fbac577": {
      "content": "const_cast<${1}>(${2})${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "const_cast<>()",
      "matches": {
        "const_cast": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b1de30b3c617f185ca51305de79e7d22": {
      "content": "${1:callbacks}.locked()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Clocked": true
      },
      "source": "snippets/javascript"
    },
    "b1e6968433d70cf1ff99089140c22b80": {
      "content": "import React from 'react'\nimport { connect } from 'react-redux'\n\nexport const ${1:${TM_FILENAME_BASE}} = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
      "doc": "Creates a React functional component with connected redux and ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactFunctionalCompomentRedux",
      "matches": {
        "rfcredux": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "b1f42026a092fac47747579defe58355": {
      "content": "border-top-style: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdts": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1fa0834441dd3211f37f53cd644a6e7": {
      "content": "var $1 = new sap.m.Label({\n\t\t\tdesign : $2,\n\t\t\ttext : $3,\n\t\t\tvisible : $4,\n\t\t\ttextAlign : $5,\n\t\t\ttextDirection : $6,\n\t\t\twidth : $7,\n\t\t\trequired : $7\n\t\t});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapmlabel": true
      },
      "source": "vim-snippets/snippets"
    },
    "b1fa4f03236c8dbec1088c2519c7df7c": {
      "content": "_.shuffle(${collection})",
      "doc": "_.shuffle([1, 2, 3, 4]);\n// => [4, 1, 3, 2]\n\nCreates an array of shuffled values, using a version of the\n[Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-shuffle",
      "matches": {
        "lodash shuffle": true
      },
      "source": "javascript/lodash"
    },
    "b2024a9c88c95897bdb93df15dfa1539": {
      "content": ":source-highlighter: rouge$0",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "source-highlighter: rouge",
      "matches": {
        "highlight-rouge": true,
        "hirouge": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b2096c5de85500efef1975af6eee40bc": {
      "content": "box-shadow: ${1:0} ${2:0} ${3:0} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh+": true
      },
      "source": "vim-snippets/snippets"
    },
    "b20b82230d1872b67d38248967b3609f": {
      "content": "background-repeat repeat-x",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:x": true
      },
      "source": "vim-snippets/snippets"
    },
    "b211a88ab2382a0bbad0e14c5bc1c028": {
      "content": "v-bind$1=\"${2}\"",
      "doc": "Expects: any (with argument) | Object (without argument)",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-bind",
      "matches": {
        "vbind": true,
        "vue v-bind": true
      },
      "source": "javascript/vue"
    },
    "b224d5eb0b73a7d4d5444de3ec7052f0": {
      "content": "tpl",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "Tuple",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "b226c1210b8bfc7c4d727c5948e2bcb3": {
      "content": "_.camelCase(${string})",
      "doc": "_.camelCase('Foo Bar');\n// => 'fooBar'\n\n_.camelCase('--foo-bar--');\n// => 'fooBar'\n\n_.camelCase('__FOO_BAR__');\n// => 'fooBar'\n\nConverts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-camelcase",
      "matches": {
        "lodash camelcase": true
      },
      "source": "javascript/lodash"
    },
    "b227d03cfaa6c0dfa65ddd9a583a8841": {
      "content": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "viewport": true
      },
      "source": "vim-snippets/snippets"
    },
    "b22d0f3884035cd0590cd930b26fdade": {
      "content": "scope :${1:name}, lambda do |${2:value}|\n\twhere('${3:field = ?}', ${0:value})\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sl": true
      },
      "source": "vim-snippets/snippets"
    },
    "b231dbf6e801ec9641ed8ca98b47d177": {
      "content": "color: ${1:red};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "color:  color-name (color)",
      "matches": {
        "color": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b23d04cfbf1f99eabeb047340cf2d884": {
      "content": "around_save :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mars": true
      },
      "source": "vim-snippets/snippets"
    },
    "b2466c7d40e920b0c6025303d23efc6d": {
      "content": "\\SI{${1:${VISUAL}}}{${2}}",
      "doc": "",
      "filetype": "texmath",
      "grammar": "snu",
      "label": "SI-Unit",
      "matches": {
        "SI": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b247c80c5d76a29d0484e06d9cea871b": {
      "content": "/// ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/snippets"
    },
    "b24c102397fe00917b47eb57f92ad6bc": {
      "content": "appear-active-class=\"$1\"$0",
      "doc": "appear-active-class=''. Expects: string.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-appear-active-class",
      "matches": {
        "appearactiveclass": true,
        "vue appear-active-class": true
      },
      "source": "javascript/vue"
    },
    "b24db2688c438e5b25c115d68256f55c": {
      "content": "${1:obj}.mouseleave(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mleave": true
      },
      "source": "snippets/javascript"
    },
    "b253b0e43e27c94392c4609c9e2cae79": {
      "content": "\\${${1:name}}=    Catenate    SEPARATOR=${2:---}    ${3:Hello}    ${4:world}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Catenate",
      "matches": {
        "cat": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b25416889073168c8ca87983929f2fc2": {
      "content": "\\dv[${1:${VISUAL}}]{${2}}{${3}}",
      "doc": "",
      "filetype": "texmath",
      "grammar": "snu",
      "label": "Derivative",
      "matches": {
        "dv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b25aebbf84ea3738395e4f64516ee39e": {
      "content": "<td id=\"${1}\">${0}</td>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td#": true
      },
      "source": "vim-snippets/snippets"
    },
    "b26680e0c48e4f9e8e2abed2e4631031": {
      "content": "loadMovie(${1:url}, ${2:target}, ${3:method});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lm": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b26cec8a2a61526c37f7fad4871de252": {
      "content": "{% import '${1:#:module}' as ${2:#:namespace} %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% import '...' as ... %}",
      "matches": {
        "import": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b26f6ac60bbf8d9b03d7ca8b9c823967": {
      "content": "copy(${1:srcImg}${2:, }${3:x}, ${4:y}, ${5:width}, ${6:height}, ${7:dx}, ${8:dy}, ${9:dwidth}, ${0:dheight});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "copy": true
      },
      "source": "vim-snippets/snippets"
    },
    "b275049503d6e30b03d552055c55ffb8": {
      "content": "constructor() {\n\tsuper();\n\t${1:state}\n}",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ctor": true
      },
      "source": "snippets/javascript"
    },
    "b276dae6a18bab7b026079302ee9af03": {
      "content": "console.dir(${1:object});",
      "doc": "Prints a JavaScript representation of the specified object",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consoledir",
      "matches": {
        "base console dir": true
      },
      "source": "javascript/base"
    },
    "b2785f67e99b12d56535e773a895d2c6": {
      "content": "enforce(${1:/*condition*/},\n\tnew $2Exception(${3:/*args*/}));",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "enforce (enf)",
      "matches": {
        "enf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b278e292577b2f6d77eb1a50690cd2f9": {
      "content": "describe \"${1}\" $ do\n\t$0",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "desc": true
      },
      "source": "vim-snippets/snippets"
    },
    "b27da4ebd048ad98667b2e3ef1eae4c3": {
      "content": "white-space-collapse: keep-all",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:k": true
      },
      "source": "vim-snippets/snippets"
    },
    "b2804b9debc5cec1d3d419c7ee3c3d48": {
      "content": "${1:type}, parameter :: $2 = ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "const": true
      },
      "source": "vim-snippets/snippets"
    },
    "b28725d84a9adce0f7bbaec7ff06b098": {
      "content": "import logging\nLOGGER = logging.getLogger(${0:__name__})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "glog": true
      },
      "source": "vim-snippets/snippets"
    },
    "b28a8459d3c14a992d6b6dde88379d13": {
      "content": "PropTypes.node.isRequired,",
      "doc": "Anything that can be rendered: numbers, strings, elements or an array required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeNodeRequired",
      "matches": {
        "ptndr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "b28ba54da303897066a5fe183782aa38": {
      "content": "vital#${1:#:plugin_name}#new()",
      "doc": "",
      "filetype": "vital",
      "grammar": "snu",
      "label": "vital#...#new()",
      "matches": {
        "vital_new_without_let": true
      },
      "source": "neosnippets/vim"
    },
    "b28d3161c781f78e3a5ce329ed138b1b": {
      "content": "border-top-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdti": true
      },
      "source": "vim-snippets/snippets"
    },
    "b28ff44c366fd0364279c461a5e1fce7": {
      "content": "assert_redirected_to ${2:${12:model}_path(${13:@}${14:$12})}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "assert_redirected_to (path)",
      "matches": {
        "artp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b2975cc8899b3f0b1ae7a2d4c44db27b": {
      "content": "background: #${1:fff} url('${2}') ${3:0} ${4:0} ${0:no-repeat}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg+": true
      },
      "source": "vim-snippets/snippets"
    },
    "b29a2c0fc857af1c42c666a7761db04a": {
      "content": "try:\n\t${1:${VISUAL}}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "Try/Except/Else",
      "matches": {
        "trye": true
      },
      "source": "vim-snippets/snippets"
    },
    "b29d519b7d3c8852ab6ee957b5bd7f7b": {
      "content": "border-fit: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf": true
      },
      "source": "vim-snippets/snippets"
    },
    "b2a4881d729857b61bb80037e9b30684": {
      "content": "{% autoescape ${1:off} %}\n\t$2\n{% endautoescape %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "autoescape": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b2a7013b11e8555161dc70d8a15b480f": {
      "content": ":first-child",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":fc": true
      },
      "source": "vim-snippets/snippets"
    },
    "b2aaaa3243efa4f45bc6a5650751efa7": {
      "content": "if (${1}) ${2}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "if",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b2bb65a5636786cba931e2c28e1ff79c": {
      "content": "@click=\"${1}\"",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vcl": true
      },
      "source": "vim-snippets/snippets"
    },
    "b2ca7352243aa09524ab8e301a8d9b4c": {
      "content": "${1:obj}.triggerHandler('${2:event name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trigh": true
      },
      "source": "snippets/javascript"
    },
    "b2cbc9d372098db7ef4838e42f37ca42": {
      "content": "margin: ${1:0};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "margin",
      "matches": {
        "m": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b2d11f3e73e24b816580b6b903cb4e36": {
      "content": "padding-top: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pt": true
      },
      "source": "vim-snippets/snippets"
    },
    "b2d4bc3b620b7050bf56afc0a1f6bd87": {
      "content": "raise (${1:Not_found})",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "raise",
      "matches": {
        "rs": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b2d8f9c03795ef4da4caaa05752c683e": {
      "content": "<map name=\"${1}\">\n\t<area shape=\"${2}\" coords=\"${3}\" href=\"${4}\" alt=\"${5}\" />${6}\n</map>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map+": true
      },
      "source": "vim-snippets/snippets"
    },
    "b2e314293b1ea499d2c598f008adb74d": {
      "content": "it { should ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "is": true
      },
      "source": "vim-snippets/snippets"
    },
    "b2f33c42c5d0a71a06831d5185aba9f0": {
      "content": "<%= link_to ${1:model}.${2:name}, ${3:$1}_path(${0:$1}) %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lim": true
      },
      "source": "vim-snippets/snippets"
    },
    "b2ffacafa71b87643a554463e20b99be": {
      "content": "import React from 'react'\n",
      "doc": "import React",
      "filetype": "react",
      "grammar": "lsp",
      "label": "import-react",
      "matches": {
        "imr": true,
        "react import": true
      },
      "source": "javascript/react"
    },
    "b3040173e76c2041c99cde0a6ce6032a": {
      "content": "[formGroupName]=\"${1:name}\"",
      "doc": "Angular formGroupName",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngFormGroupName",
      "matches": {
        "a-formGroupName": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "b304aa86f271b54b4c2777f482d72ca6": {
      "content": "place-content start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3079cf2b529c450d1cdd2d10a37821b": {
      "content": "{% set ${1} = ${2} %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig set",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/snippets"
    },
    "b31419cc0896373d64b3c7672dbf10e1": {
      "content": "<abbr title=\"${1}\">${0}</abbr>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "abbr": true
      },
      "source": "vim-snippets/snippets"
    },
    "b317f3e87fa9fa74922c4983ff336dc5": {
      "content": "text-shadow: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tsh": true
      },
      "source": "vim-snippets/snippets"
    },
    "b31afabb09b29039861a9ca46faf92a1": {
      "content": "fun ${1:function_name}($2)\n\t${3:\" code}\nendf",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "function",
      "matches": {
        "f": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b31c15840e12d5ee72ed555e618a4937": {
      "content": "{\n\tpath: '${1:path}', \n\tcomponent: ${2:Component},\n\tchildren: [\n\t\t{ path: '${3:childpath}', component: ${4:ChildComponent} }\n\t]\n},$0",
      "doc": "Angular route path with children",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Route Path with Children",
      "matches": {
        "a-route-path-with-children": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "b32c981ae6915dc714c4341051ec70a3": {
      "content": "#include <${1:iostream}>${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#inc, #include": true,
        "inc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b32dcf1d6eb220dd863a610511661130": {
      "content": "assert_response :${1:success}, @response.body",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asre": true
      },
      "source": "vim-snippets/snippets"
    },
    "b337203e6200f01e4bb9ef04f1fb0549": {
      "content": "{-# LANGUAGE ${0:OverloadedStrings} #-}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lang": true
      },
      "source": "vim-snippets/snippets"
    },
    "b338f94a69d580035ea360fbf29ee896": {
      "content": "while (${1:#:condition})${0:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "while () begin ... end",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b33eaf84d294c54d84a9665c599465aa": {
      "content": "#![feature(phase)]\n#[phase(plugin, link)] extern crate log;",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "extern crate log",
      "matches": {
        "ecl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b342fb87d5ecde560ee59dc46e772798": {
      "content": "public static ${1}(${2}): ${3:any} {\n\t${0}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts public static method",
      "matches": {
        "tpsmet": true
      },
      "source": "vim-snippets/snippets"
    },
    "b345c9c7c41720dcc3c222d3a0922fb0": {
      "content": "default:\n    ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "de": true,
        "default": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b347f430495319ad2957ba1efc05f0b6": {
      "content": "use DDP;\np ${1:variable}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ddp": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3561c9cd1e35caa35a60894b3638762": {
      "content": "_.set(${object}, ${path}, ${value})",
      "doc": "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.set(object, 'a[0].b.c', 4);\nconsole.log(object.a[0].b.c);\n// => 4\n\n_.set(object, ['x', '0', 'y', 'z'], 5);\nconsole.log(object.x[0].y.z);\n// => 5\n\nSets the value at `path` of `object`. If a portion of `path` doesn't exist,\nit's created. Arrays are created for missing index properties while objects\nare created for all other missing properties. Use `_.setWith` to customize\n`path` creation.\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-set",
      "matches": {
        "lodash set": true
      },
      "source": "javascript/lodash"
    },
    "b358a07611ca4f5dbd869d4f81d6a9a8": {
      "content": "font-family: ${0:Helvetica,Arial},sans-serif;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:ss": true
      },
      "source": "vim-snippets/snippets"
    },
    "b35a4872ba227256d4a12582cadb5efe": {
      "content": "scope(success) ${1}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scs": true
      },
      "source": "vim-snippets/snippets"
    },
    "b35d5758f01f93fe67f01fe8fcdcd63f": {
      "content": "{% endset %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endset",
      "matches": {
        "endset": true
      },
      "source": "vim-snippets/snippets"
    },
    "b362cff5ce2210df7f3cf92f4f8ca03f": {
      "content": "{% comment %}\n\t${0}\n{% endcomment %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comment": true
      },
      "source": "vim-snippets/snippets"
    },
    "b365c9bf3a026a7893f4e5560099702a": {
      "content": "box-sizing: content-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxz:cb": true
      },
      "source": "vim-snippets/snippets"
    },
    "b36ca1217fa38069334862c424d2ab8a": {
      "content": "display grid",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:g": true
      },
      "source": "vim-snippets/snippets"
    },
    "b37586685d011b21f02f96190f05ffaa": {
      "content": "@if ($1)\n\t${2:${VISUAL}}\n@endif",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@if directive",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b3813269926ae910f18e8eb0948c7905": {
      "content": "place-content ${1} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc+": true
      },
      "source": "vim-snippets/snippets"
    },
    "b38808ed663deadc21055c58b77f98cd": {
      "content": "$this->${1:method}()->shouldNotReturn(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotReturn('value')",
      "matches": {
        "snreturn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b38b847a5c77ccbc39415c86c9bcb4b3": {
      "content": "each_byte { |${1:byte}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eab": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3900e680dbb647f68cd74b6014fc2c7": {
      "content": "max-width: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maw:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "b39493096b0c4778fe1ffba6f53a0a8b": {
      "content": "repeat with ${1} in ${2}\n\t${0:TARGET}\nend repeat",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "rep",
      "matches": {
        "repwi": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b3a1bf81575baf2e94533239f1051e84": {
      "content": "const {${2:propertyName}} = ${1:objectToDestruct}",
      "doc": "Creates and assigns a local variable using object destructing",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "destructingObject",
      "matches": {
        "dob": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "b3a5e06a41330ac10f91372e7f8ccd65": {
      "content": "\\\\longrightarrow {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "longrightarrow",
      "matches": {
        "lra": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3a8e04b0c3e625a205c1c812945b277": {
      "content": "proc ${1:#:name}(${2}) =\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "proc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b3ac79607d01768bd5609103cdb1930b": {
      "content": "(map ${1:func} ${0:coll})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3ae25ad5cdb5ff7c9e33ec63f638f13": {
      "content": "foreach(${1:elem}; ${2:range}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3ae26f08cd67fea3d7a999e717f5911": {
      "content": "PropTypes.exact({\n\t$0\n}),",
      "doc": "An object with warnings on extra properties",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeExact",
      "matches": {
        "ptex": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "b3b6fa0c1ef836081c7b5e50c0bd832c": {
      "content": "select case (${1})\n${2}\nend select",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "select case",
      "matches": {
        "se": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b3bbe241429818bf10eee3ab87ea73ba": {
      "content": "@leave=\"$1\"$0",
      "doc": "@leave=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-leave",
      "matches": {
        "leaveevent": true,
        "vue leave": true
      },
      "source": "javascript/vue"
    },
    "b3bfdeee7d995ed78f69286230f30a98": {
      "content": "const ${1:function_name} = async (${2}) => {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ca=>": true
      },
      "source": "snippets/javascript"
    },
    "b3bfe790889f54f3977782d2d3eca0f3": {
      "content": "@techreport{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    institution = {${4}},\n    year = {${5}},\n    memo = {type, number, address, month, note},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@techreport": true,
        "techreport": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b3cb72796e4448817c92eddca22b6f19": {
      "content": "vertex(${1:x}, ${2:y}${3:, }${4:u}${5:, }${0:v});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vertex": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3cd6be513f5d1a1b300f8a8c69668e7": {
      "content": "int main(int argc, char *argv[])\n{\n\t${0}\n\treturn 0;\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3d6153625c6c17212177da9e826530c": {
      "content": "background-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgi": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3d67946a6795b6db03beb02cfcf64eb": {
      "content": "console.count(${1:label});",
      "doc": "Writes the the number of times that count() has been invoked at the same line and with the same label",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleCount",
      "matches": {
        "cco": true
      },
      "source": "vscode-javascript/snippets"
    },
    "b3dfbf1700a634ca97090d172aa241ba": {
      "content": "font-variant: normal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fv:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3f176bd2712f21a3d340aa82a194ceb": {
      "content": "\\\\begin{center}\n\t${0:${VISUAL}}\n\\\\end{center}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "center environment",
      "matches": {
        "center": true
      },
      "source": "vim-snippets/snippets"
    },
    "b3fefdcd60b9738285d106384156c36e": {
      "content": "_.setWith(${object}, ${path}, ${value}, ${customizer})",
      "doc": "var object = {};\n\n_.setWith(object, '[0][1]', 'a', Object);\n// => { '0': { '1': 'a' } }\n\nThis method is like `_.set` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-setwith",
      "matches": {
        "lodash setwith": true
      },
      "source": "javascript/lodash"
    },
    "b40076eb9365db81fd690e18b809cc72": {
      "content": "module ${1} = {\n\t${0}\n};",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mod": true
      },
      "source": "vim-snippets/snippets"
    },
    "b403d806e63c2759031096cf1bcb0409": {
      "content": "import { Injectable } from '@angular/core';\nimport {\n  EntityCollectionServiceBase,\n  EntityCollectionServiceElementsFactory\n} from '@ngrx/data';\nimport { ${1:Model} } from '${2:../core}';\n\n@Injectable({ providedIn: ${3:'root'} })\nexport class ${1:Model}Service extends EntityCollectionServiceBase<${1:Model}> {\n  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {\n    super('${1:Model}', serviceElementsFactory);\n  }\n}",
      "doc": "NgRx Data Entity Collection Data Service",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrx-data-entity-collection-data-service",
      "matches": {
        "a-ngrx-data-entity-collection-data-service": true,
        "angular ng rx data entity collection service": true
      },
      "source": "javascript/angular"
    },
    "b404aac54ed069d0417a5b5ea2f696fb": {
      "content": "\\begin{center}\n\t${1:TARGET}\n\\end{center}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{center} \\center": true,
        "center": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b40a429cd1c68e5f633355b4a826469f": {
      "content": "font-size-adjust none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fza:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "b40ca56d467abb639576d56d51c117c4": {
      "content": "[self lockFocus];\n${0}\n[self unlockFocus];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "focus": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b411c85640bee77391fa2cf37c17a610": {
      "content": "if err != nil {\n\tlog.${1:Fatal}(err)\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Basic error handling",
      "matches": {
        "err": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b41243269f010d34742040395c070a04": {
      "content": "PropTypes.string.isRequired,",
      "doc": "String prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeStringRequired",
      "matches": {
        "ptsr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "b413fec980c47e9b48193d51d34fc1c2": {
      "content": "overflow-y: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "b41665fa139509d91c8dfb6d36e23825": {
      "content": "_.tap(${value}, ${interceptor})",
      "doc": "_([1, 2, 3])\n .tap(function(array) {\n   // Mutate input array.\n   array.pop();\n })\n .reverse()\n .value();\n// => [2, 1]\n\nThis method invokes `interceptor` and returns `value`. The interceptor\nis invoked with one argument; (value). The purpose of this method is to\n\"tap into\" a method chain sequence in order to modify intermediate results.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-tap",
      "matches": {
        "lodash tap": true
      },
      "source": "javascript/lodash"
    },
    "b41787e69aafee77fe7a58366152d20f": {
      "content": "-> (${1:#:args}) { ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lambda": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b41d54b0157a7c280f6c519c666a9a3d": {
      "content": "main : Program Never ${2:Model} ${3:Msg}\nmain =\n\t${4:Html.}beginnerProgram\n\t\t{ init: ${6:init}\n\t\t, update: ${7:update}\n\t\t, subscriptions: ${8:subscriptions}\n\t\t${9:, view: ${10:view\\}}\n\t\t}\n${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "main : Program",
      "matches": {
        "basicProgram": true,
        "progb mainb": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b41df0e8b912aad56c081021efff4595": {
      "content": "/**\n * ${1}\n *\n * @author ${2}\n * @version ${3}\n * @copyright ${4}\n * @package ${5:default}\n **/\n/**\n * Define DocBlock\n **/",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b426d5dd115a9a4c847559b80d506988": {
      "content": "d3.nest()\n  .key(${1})\n  .entries(${2})",
      "doc": "",
      "filetype": "javascript-d3",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nest": true
      },
      "source": "vim-snippets/snippets"
    },
    "b4271df6404787dd1707e0b137c79b5f": {
      "content": "{% block ${1} %}\n\t${0}\n{% endblock %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "block": true
      },
      "source": "vim-snippets/snippets"
    },
    "b4313972a3eb19987a2911e52cdf2159": {
      "content": "procedure ${1};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "procedure declaration",
      "matches": {
        "procedure_declare": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b43dbb086fa31c3d9a59fb3991b2a300": {
      "content": "border-style: dotted",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "b4415f2f3eb76be6fad96d2b52094805": {
      "content": "it { should have_and_belong_to_many :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ishbtm": true
      },
      "source": "vim-snippets/snippets"
    },
    "b448212b2c54ca8e69fee1b9b87a4b57": {
      "content": "for ${1}{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for loop",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "b45413d8297fcfc6ae393ea25ff25404": {
      "content": "grid-column-start: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gcs": true
      },
      "source": "vim-snippets/snippets"
    },
    "b454fabb837fcdd462f4c1cf71928188": {
      "content": "justify-content: flex-end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "b45ad286dd4f0eefbe91d010fa2fec02": {
      "content": "max-width: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maw:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "b45d398b62488d50c91bdf754070783a": {
      "content": "catch ($1) {\n\t$2\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "ch",
      "matches": {
        "catch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b46bf3743b160f524466ac93c59e4064": {
      "content": "class ${1:#:NAME} extends ${2:#:SuperClass} {\n  constructor(${3:#:ARGS}) {\n    ${0:TARGET}\n  }\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "class extends {...}",
      "matches": {
        "class-extends": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b47d57d1a4d5391a913dbb9fcd5316c9": {
      "content": "match ${1:(* e1 *)} with\n| ${2:p} -> ${3:e2}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "match",
      "matches": {
        "match": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b4894211aed5c3313035c4e87c978fbd": {
      "content": "<svelte:head>\n\t${1:<!-- head content -->}\n</svelte:head>",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-head",
      "matches": {
        "svelte head": true,
        "svh": true
      },
      "source": "javascript/svelte"
    },
    "b48d3f965c86ee11ca46747583ecf90b": {
      "content": "outer(${1:X}, ${2:Y}, ${3:FUN = ${4:\"*\"}}, ${5:...})",
      "doc": "Outer",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "out",
      "matches": {
        "outer": true
      },
      "source": "vscode-R/snippets"
    },
    "b4920413629d5cbbdd7ac93bc1814dc0": {
      "content": "this->assertArrayNotHasKey(${1:$key}, ${2:$array});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertArrayNotHasKey($key, $array)",
      "matches": {
        "asnhk": true
      },
      "source": "vim-snippets/snippets"
    },
    "b49456b953987052fdc570e8f70a0033": {
      "content": "(defun $1 ($2)\n\t$0)",
      "doc": "",
      "filetype": "lfe",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "b4a99ab9be2c9d29d3a9a03be1c67a5d": {
      "content": "System.out.println(Arrays.toString(${0}));",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "printlna": true
      },
      "source": "vim-snippets/snippets"
    },
    "b4bdfb6093f9a3ea84b1542655dec66b": {
      "content": "afterAll(function() {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "after all (js)",
      "matches": {
        "afta": true
      },
      "source": "vim-snippets/snippets"
    },
    "b4c1ce55262789a2766437613b1cdbbe": {
      "content": "\\${2:TARGET}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${2:TARGET}",
      "matches": {
        "2T": true,
        "2t": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b4c214b005ae19ac41f99fc12df233d6": {
      "content": "${1:actionName}() {\n\tthis.\\$store.dispatch('${1:actionName}', ${2:payload});\n}",
      "doc": "dispatch to vuex store in methods for action",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Dispatch Vuex Store in Methods",
      "matches": {
        "vdispatch": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "b4c3ed2f4d1741f790a255ae08456bdf": {
      "content": "trait ${1} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trait": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b4d3419555b76da7017125329e93ce79": {
      "content": "border-style hidden",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "b4d46f709286183b8aa131e25fa4257c": {
      "content": "File.foreach(${1:'path/to/file'}) { |${2:line}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "File.foreach() { |line| .. }",
      "matches": {
        "file": true
      },
      "source": "vim-snippets/snippets"
    },
    "b4db62f4a9ad5319a2a38ce9c51488bf": {
      "content": "command! ${1:#:command_name} call ${2:#:func_name}",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "command call function",
      "matches": {
        "command": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b4e5b674c1778a50b4f30cb49accd6a3": {
      "content": "echo CHtml::linkTag('${1:relation}', '${2:type}', '${3:href}', '${4:media}',array('${5:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhlinkt": true
      },
      "source": "vim-snippets/snippets"
    },
    "b4e88d531a0779c78ff387b7ef535c60": {
      "content": "<?php else: ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b4fa9145d1578609acc2b5df08a11876": {
      "content": "width: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "b4fd983c2c04f7d148a56676fbc2b877": {
      "content": "overflow hidden",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "b506f7289d236117b6453f5b11e476f7": {
      "content": "_.cond(${pairs})",
      "doc": "var func = _.cond([\n  [_.matches({ 'a': 1 }),           _.constant('matches A')],\n  [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n  [_.stubTrue,                      _.constant('no match')]\n]);\n\nfunc({ 'a': 1, 'b': 2 });\n// => 'matches A'\n\nfunc({ 'a': 0, 'b': 1 });\n// => 'matches B'\n\nfunc({ 'a': '1', 'b': '2' });\n// => 'no match'\n\nCreates a function that iterates over `pairs` and invokes the corresponding\nfunction of the first predicate to return truthy. The predicate-function\npairs are invoked with the `this` binding and arguments of the created\nfunction.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-cond",
      "matches": {
        "lodash cond": true
      },
      "source": "javascript/lodash"
    },
    "b514e53363039d2945dd6eb2eb166216": {
      "content": "// spush and pop the current matrix stack\ngl.glPushMatrix();\n${0}\ngl.glPopMatrix();",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl push matrix",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5191e65d00b1e23cbb50523fa0730b6": {
      "content": "static $${1} = null;\nif (is_null($$1)){\n\t$$1 = ${2};\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "static_var": true
      },
      "source": "vim-snippets/snippets"
    },
    "b51b02d1e7865f33482ff178be79a0ab": {
      "content": "each { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ea": true
      },
      "source": "vim-snippets/snippets"
    },
    "b51e43098c1fd40779ce48ce2c11476d": {
      "content": "redirect_to(${2:${10:parent}_${11:child}_path(${12:@}${13:$10})})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to (nested path plural)",
      "matches": {
        "renpp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b5257052aa0f30e762b0ca273d992d8f": {
      "content": "const component = new ${1:App}({\n\ttarget: ${2|target,document.body|},\n\tprops: ${3:props},\n\tanchor: ${4:anchor},\n\thydrate: ${5|false,true|},\n\tintro: ${5|false,true|}\n})",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-create-component",
      "matches": {
        "svcreate-component": true,
        "svelte create component": true
      },
      "source": "javascript/svelte"
    },
    "b52cc56c7946fcb0cd198a6bb3cccb05": {
      "content": "apiVersion: v1\nkind: Service\nmetadata:\n{{- if .Values.$1.service.annotations }}\n  annotations:\n{{ toYaml .Values.$1.service.annotations | indent 4 }}\n{{- end }}\n  labels:\n{{- if .Values.$1.service.labels }}\n{{ toYaml .Values.$1.service.labels | indent 4 }}\n{{- end }}\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n  name: {{ template \"$2.$1.fullname\" . }}\nspec:\n  clusterIP: \"{{ .Values.$1.service.clusterIP }}\"\n{{- if .Values.$1.service.externalIPs }}\n  externalIPs:\n{{ toYaml .Values.$1.service.externalIPs | indent 4 }}\n{{- end }}\n{{- if .Values.$1.service.loadBalancerIP }}\n  loadBalancerIP: \"{{ .Values.$1.service.loadBalancerIP }}\"\n{{- end }}\n{{- if .Values.$1.service.loadBalancerSourceRanges }}\n  loadBalancerSourceRanges:\n{{ toYaml .Values.$1.service.loadBalancerSourceRanges | indent 4 }}\n{{- end }}\n  healthCheckNodePort: {{ .Values.$1.service.healthCheckNodePort }}\n  ports:\n\t- name: http\n\t  port: 80\n\t  protocol: TCP\n\t  targetPort: {{ .Values.$1.service.targetPorts.http }}\n\t  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.http))) }}\n\t  nodePort: {{ .Values.$1.service.nodePorts.http }}\n\t  {{- end }}\n\t- name: https\n\t  port: 443\n\t  protocol: TCP\n\t  targetPort: {{ .Values.$1.service.targetPorts.https }}\n\t  {{- if (and (eq .Values.$1.service.type \"NodePort\") (not (empty .Values.$1.service.nodePorts.https))) }}\n\t  nodePort: {{ .Values.$1.service.nodePorts.https }}\n\t  {{- end }}\n  {{- range $key, $value := .Values.tcp }}\n\t- name: \"{{ $key }}-tcp\"\n\t  port: {{ $key }}\n\t  protocol: TCP\n\t  targetPort: \"{{ $key }}-tcp\"\n  {{- end }}\n  {{- range $key, $value := .Values.udp }}\n\t- name: \"{{ $key }}-udp\"\n\t  port: {{ $key }}\n\t  protocol: UDP\n\t  targetPort: \"{{ $key }}-udp\"\n  {{- end }}\n  selector:\n\tapp: {{ template \"${2:chartName}.name\" . }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\trelease: {{ .Release.Name }}\n  type: \"{{ .Values.${1:value_key}.service.type }}\"",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "service_sample_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "b531374a019470e2cc5aba0db417604a": {
      "content": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:-- body}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fori": true
      },
      "source": "vim-snippets/snippets"
    },
    "b53c1a41dcd61253685fa4e700de930f": {
      "content": "{% import \"${1:template}\" %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "import",
      "matches": {
        "import": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b53c2ecf54145499413413bafa11aed7": {
      "content": "const ${1:queryName} = `query ${1:queryName} {\n  ${2:query}\n}\n`;",
      "doc": "",
      "filetype": "graphql-request",
      "grammar": "lsp",
      "label": "graphql-request-query",
      "matches": {
        "graphql-request query": true
      },
      "source": "javascript/graphql-request"
    },
    "b5416779dccfcb552fd1d5abbee47b3d": {
      "content": "let pos_save = getpos('.')\ntry\n  ${0}\nfinally\n  call setpos('.', pos_save)\nendtry",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "use pos save",
      "matches": {
        "save_pos": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b5480b66b9ddc6e06d317701cede8210": {
      "content": "Ada.Text_IO.Get(${1});${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "Ada.Text_IO.Get",
      "matches": {
        "get": true
      },
      "source": "vim-snippets/snippets"
    },
    "b55fcc608260da9e56ed2038f03a07d7": {
      "content": "(try\n\t${1}\n\t(catch ${2:Exception} e ${3:nil}))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "(try ... (catch ...",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b5613b21920e8505627f09bf00bd83b6": {
      "content": "<c:redirect url=\"${0}\" />",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "credirect": true
      },
      "source": "vim-snippets/snippets"
    },
    "b562dfd8d32738d4468683ae6a020fa0": {
      "content": "border-corner-image continue",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdci:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "b565522946f17851db363ce633b1cb28": {
      "content": "caption-side ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cps": true
      },
      "source": "vim-snippets/snippets"
    },
    "b56d6f8b75496243068cfa122ab4b350": {
      "content": "${1:expression} unless ${2:condition};\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "Conditional one-line (unless)",
      "matches": {
        "xunless": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b56e663cf20f2a09e92e742fb5aad383": {
      "content": "\\\\begin{${1:p/b/v/V/B/small}matrix}\n\t${0:${VISUAL}}\n\\\\end{$1matrix}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "smart matrix environment",
      "matches": {
        "mat": true
      },
      "source": "vim-snippets/snippets"
    },
    "b56f45718d46c3ded494e25a8bd4c623": {
      "content": "\\\\section*{${1:section name}}%\n\\\\label{sec:${2:$1}}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\section*",
      "matches": {
        "sec*": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5725b8864e1acdb18e314b89d03b8b9": {
      "content": "$routeProvider.when '${1:url}',\n\ttemplateUrl: '${2:templateUrl}'\n\tcontroller: '${3:controller}'\n\tresolve:\n\t\t${4}\n${5}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngrwr": true
      },
      "source": "snippets/coffee"
    },
    "b5795954e5050ba70f2fab88b973eafb": {
      "content": "${1:FIELDNAME} = models.PositiveIntegerField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "PositiveIntegerField",
      "matches": {
        "mposint": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b588fd0e994c262f54155a1ef596998f": {
      "content": "${2:$1} = require '${1}'${3}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req": true
      },
      "source": "vim-snippets/snippets"
    },
    "b58cce3d121a5071a5f00d36829be1ab": {
      "content": "interface{}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "interface",
      "matches": {
        "in": true
      },
      "source": "vim-snippets/snippets"
    },
    "b58ee34bae9247085b1e68135162d09c": {
      "content": "border-style: double",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:db": true
      },
      "source": "vim-snippets/snippets"
    },
    "b594eba45c8c0533edc60d5915066134": {
      "content": "module type ${1} = sig\n\t${0}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "modty": true
      },
      "source": "vim-snippets/snippets"
    },
    "b596f8da0184426cacda486930b99f7b": {
      "content": "<h6 id=\"${1}\">${0}</h6>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h6#": true
      },
      "source": "vim-snippets/snippets"
    },
    "b598b9912697e59e2c13751aea80c999": {
      "content": "#${1}: ${0:any}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts create private field using #",
      "matches": {
        "#+": true
      },
      "source": "vim-snippets/snippets"
    },
    "b59c273dc8037ba543d4b5d9c86f45fe": {
      "content": "initial begin\n\t${0}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ini": true
      },
      "source": "vim-snippets/snippets"
    },
    "b59d796624acc35a67abebddd47f9fd3": {
      "content": "type ${1:parentType}Alias $1\nfunc (p *$1) MarshalJSON() ([]byte, error) {\n\treturn json.Marshal(&struct{ *$1Alias }{(*$1Alias)(p)})\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Marshalable json alias",
      "matches": {
        "ja": true
      },
      "source": "vim-snippets/snippets"
    },
    "b59d85b5b81b19b786f6be193de1ab37": {
      "content": "font-family: ${0:Capitals,Impact},fantasy;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "b59e3c2ab4ec7ac3c8d7313c4afcd736": {
      "content": "word-spacing: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wos": true
      },
      "source": "vim-snippets/snippets"
    },
    "b59e7d5dd6244994bea5a7d7fbf1ffe4": {
      "content": "function get ${1:name} {\n\treturn ${2}\n}\nfunction set $1 (newValue) {\n\t${0}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "get_set": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5a7a19641c9c111c95758cb999e03d5": {
      "content": ".. |${1:alias}| image:: ${0:img}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img:": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5ae2cf2bc3e416cd06591b7e4af042e": {
      "content": "border-right-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdri:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5b4d4b4bef511e2086d8e6f84cc48fb": {
      "content": "NSDictionary ${0}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nsd": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5ba36c87669d2e8f7d766f9a001807a": {
      "content": "${fn:join(${1:collection}, ${0:delims})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "join": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5cd22c893226bec0a22e3d0c052fb3b": {
      "content": "from IPython import embed; embed()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "import ipython..",
      "matches": {
        "ipy": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b5cd760bb607593c8af2dddde66b27ac": {
      "content": "<#include \"${0:file.ftl${VISUAL}}\" />",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "\"<#include \\\"file.ftl\\\" />\"",
      "matches": {
        "inc": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5d5fbe50ee2ccd925ce800d9deaa9d3": {
      "content": "border-bottom-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5d6da18e6b2efd33cb8f8445dc6666e": {
      "content": "word-break: break-strict",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:bs": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5d950244dfa337ce9c8de1c28c8ebfb": {
      "content": "\\\\int_{{$1}}^{{$2}} {$3} \\\\: d{$4} {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "integral",
      "matches": {
        "int": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5de3a1f6dfe0a530de0095531b08641": {
      "content": "| ${1} => ${0}",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "|": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5e96dfa99431599541044a460dd52df": {
      "content": "import Html exposing (Html)\ntype alias Model =\n\t{}\ntype Msg\n\t= Noop\nmain : Program Never Model Msg\nmain =\n\tHtml.program\n\t\t{ init = init\n\t\t, view = view\n\t\t, update = update\n\t\t, subscriptions = subscriptions\n\t\t}\ninit : ( Model, Cmd Msg )\ninit =\n\t{} ! []\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n\tcase msg of\n\t\tNoop ->\n\t\t\tmodel ! []\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n\tSub.none\nview : Model -> Html Msg\nview model =\n\tHtml.text \"Hello, sailor!\"",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "Elm 0.18 program",
      "matches": {
        "program": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5eb083d97e3e99c0267f761ecb3a78b": {
      "content": "public ${1:int} ${2} { get; protected set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p+|": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5fb4d24e452dfbb218d795a0dbb53ab": {
      "content": "text-wrap unrestricted",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5fbc942c71da76aa425f08531555159": {
      "content": "while ${1} {\n\t${2}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "b5fce49c41283c21f2c224a8be3c846b": {
      "content": "ALTER TABLE ${1:table}\nMODIFY ${2:column} ${3:new_column_desc};",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "ALTER TABLE ... MODIFY ...",
      "matches": {
        "ALTER_TABLE": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b602c51578c7f8836c06157cf6beb518": {
      "content": "${1:obj}.before('${2:Some text <b>and bold!</b>}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "before": true
      },
      "source": "snippets/coffee"
    },
    "b60417333013f7e9c39acb6904988afb": {
      "content": "renderBinary(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "renb": true
      },
      "source": "vim-snippets/snippets"
    },
    "b6051c84addbf4c23c707ede6f113ea3": {
      "content": "foreach ($${1:#:variable} as $${2:#:x}) {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "foreach": true,
        "foreach-list": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b606eca86b2f8494ef75cdc9c0046aa8": {
      "content": "${1:obj}.unload (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unload": true
      },
      "source": "snippets/coffee"
    },
    "b6070c2b299f34847251b6db20b58950": {
      "content": "justify-items: ${1:stretch};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji": true
      },
      "source": "vim-snippets/snippets"
    },
    "b60956704b6244467f4295d7ed38a1f4": {
      "content": "class ${1:MODEL_NAME}ListView(ListView):\n\tmodel = $1\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Generic List View",
      "matches": {
        "listview": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b61ba6d5ce0fd9096ce1571d11b41708": {
      "content": "<script>\n\t${1:// your script goes here}\n</script>\n\n<style>\n\t${2:/* your styles go here */}\n</style>\n\n${3:<!-- markup (zero or more items) goes here -->}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-component-format",
      "matches": {
        "svcomponent": true,
        "svelte component template": true
      },
      "source": "javascript/svelte"
    },
    "b62267c10fde639d43fc1e6004171611": {
      "content": "module ${1:Mod} = ${2:Functor}(${3:Arg})",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "module instantiantion with functor",
      "matches": {
        "ml": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b624f3a1d9205cc666a055ef893ab1dd": {
      "content": "selector:\n  app: {{ template \"${2:chartName}.name\" . }}\n  component: \"{{ .Values.${1:value_key}.name }}\"\n  release: {{ .Release.Name }}\n  ${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "selector_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "b625d7d15993e18e0e07057839c0f7eb": {
      "content": "${1:obj}.fadeTo('${2:slow/400/fast}', ${3:0.5})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadeto": true
      },
      "source": "snippets/coffee"
    },
    "b6292b47c370cb5d01f94949c6d05782": {
      "content": "<%= render template: \"${1:file}\"${0} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rt": true
      },
      "source": "vim-snippets/snippets"
    },
    "b63122e006e66b046449f479e22c204b": {
      "content": "if [[ ${1:condition} ]]; then\n\t${0:${VISUAL}}\nfi",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "b63574c7d6b547039462c398ff41384a": {
      "content": "Examples:\n/// --------------------\n/// ${1:example code}\n/// --------------------",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "Examples (Example)",
      "matches": {
        "Example": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b63a57c3d66db0d149e5b6a9d6698f8f": {
      "content": "number = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "number": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b644b70ffd0460ab5db2b55739d00f1e": {
      "content": "for (final ${2:item} in ${1:itemList}) {\n  ${0}\n}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "b645d0bce93c27e4891f3a6e1c718f73": {
      "content": "<xsl:value-of select=\"${1:*}\" />",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "value-of": true
      },
      "source": "vim-snippets/snippets"
    },
    "b65719517890f2c9633582e8876e18d8": {
      "content": "if (${1}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "kotlin",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "b65cf159ab9f0d1faf321cf66c4150c9": {
      "content": "$.Deferred()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "D": true
      },
      "source": "snippets/javascript"
    },
    "b674597ae929a6cc27663fde521731d1": {
      "content": "foreach ($${1:variable} as $${2:key} => $${3:value}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "foreach ($var as $key => $value) { .. }",
      "matches": {
        "foreachk": true
      },
      "source": "vim-snippets/snippets"
    },
    "b676b4f46d35f3a42568432ba126749f": {
      "content": "${1:obj}.parents('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parents": true
      },
      "source": "snippets/coffee"
    },
    "b67bf5a9ba5276ba31f97f952ef19342": {
      "content": "process.nextTick(() => {\n\t${0}\n});",
      "doc": "process nextTick",
      "filetype": "base",
      "grammar": "lsp",
      "label": "process-nexttick",
      "matches": {
        "base process next tick": true
      },
      "source": "javascript/base"
    },
    "b67f0dae76ee6b99b89ee7a2d99919d8": {
      "content": "background-color: #${1:DDD};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background-color:  color-hex (background)",
      "matches": {
        "background": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b6812eba9c417aa48662b3c09b8082e2": {
      "content": "@section('${1:section name}')\n    ${2}\n@endsection",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@section ... @endsection",
      "matches": {
        "section": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b68267ea04a863409fc09613bd8fc07a": {
      "content": "for (${1:identifier} in ${2:collection}) {\n   ${3:selected}\n}",
      "doc": "Code snippet for 'for' loop",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "for",
      "matches": {
        "for": true
      },
      "source": "vscode-R/snippets"
    },
    "b6840af4ba217f64b0e29c214f8c33d7": {
      "content": "console.count(${1:label})",
      "doc": "Writes the the number of times that count() has been invoked at the same line and with the same label",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleCount",
      "matches": {
        "cco": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "b6865b74a2d0717c3e00d1070ff037db": {
      "content": "std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "msp": true
      },
      "source": "vim-snippets/snippets"
    },
    "b68a23b89027bb8e2188890f9dbd1c02": {
      "content": "&nbsp;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nbs": true
      },
      "source": "vim-snippets/snippets"
    },
    "b692e1553c292e6f7276847477f54dff": {
      "content": "${1}.find(${2:item} => {\n\t${0}\n});",
      "doc": "find",
      "filetype": "base",
      "grammar": "lsp",
      "label": "find",
      "matches": {
        "base find": true
      },
      "source": "javascript/base"
    },
    "b69d96fbee53f0ac927dbe83e95f21dc": {
      "content": "alias ${1:/*orig*/} ${2:/*alias*/};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "alias (al)",
      "matches": {
        "al": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b6a449c3075f7f7d0ee636a09addc5bf": {
      "content": "border-length ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlt": true
      },
      "source": "vim-snippets/snippets"
    },
    "b6a7dfe8b11f63e5abc4524c46c23a3c": {
      "content": "place-self: ${1:stretch} ${0:stretch}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps+": true
      },
      "source": "vim-snippets/snippets"
    },
    "b6b2e439823eeb65400ff93358cbafb8": {
      "content": "fmt.Errorf(\"${1}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Errorf(...)",
      "matches": {
        "fe": true
      },
      "source": "gosnippets/snippets"
    },
    "b6b4d075122e25be6aeb825690d7e281": {
      "content": "# Client App\nFROM johnpapa/angular-cli as client-app\nLABEL authors=\"${1:John Papa}\"\nWORKDIR /usr/src/app\nCOPY [\"package.json\", \"npm-shrinkwrap.json*\", \"./\"]\nRUN npm install --silent\nCOPY . .\nRUN ng build --prod\n\n# Node server\nFROM ${2:node:12-alpine} as node-server\nWORKDIR /usr/src/app\nCOPY [\"package.json\", \"npm-shrinkwrap.json*\", \"./\"]\nRUN npm install --production --silent && mv node_modules ../\nCOPY ${3:server.js} .\nCOPY ${4:/server} /usr/src/app/server\n\n# Final image\nFROM ${2:node:12-alpine}\nWORKDIR /usr/src/app\nCOPY --from=node-server /usr/src /usr/src\nCOPY --from=client-app /usr/src/app/dist ./\nEXPOSE ${5:3000}\n# CMD [\"node\", \"server.js\"]\nCMD [\"npm\", \"start\"]\n$0",
      "doc": "Multi-stage Node and Angular Dockerfile",
      "filetype": "dockerfile",
      "grammar": "lsp",
      "label": "Multi-stage Node and Angular Dockerfile",
      "matches": {
        "docker-angular-node-multi-stage": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "b6c6b78983b00bc18d04c8b2fa728e64": {
      "content": "(function(${1}) {\n\t${0:${VISUAL}}\n}(${2}));",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "(f": true
      },
      "source": "snippets/javascript"
    },
    "b6d5cd87fee4f2275efe6a2a33f3c473": {
      "content": "def_delegator :${1:@del_obj}, :${2:del_meth}, :${0:new_name}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defd": true
      },
      "source": "vim-snippets/snippets"
    },
    "b6fd4424c8df6763d514271375cb363c": {
      "content": "it('should $1', async () => {\n\t$0\n})\n",
      "doc": "Testing asynchronous `it` block",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "itAsyncBlock",
      "matches": {
        "tita": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "b6fdd45fa1f2983c1e6b981d20889ba8": {
      "content": "expect($1).toHaveBeenCalledTimes($0);",
      "doc": "returns true if the spy has been called given times",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tohavebeencalledtimes",
      "matches": {
        "jest expect tohavebeencalledtimes": true,
        "thbct": true
      },
      "source": "javascript/jest"
    },
    "b701f80788798755d929bcd44aec79ba": {
      "content": "text-shadow: ${1:${2:color} ${3:offset-x} ${4:offset-y} ${5:blur}};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "text-shadow: color-hex x y blur (text)",
      "matches": {
        "tsh": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b713bdd904d8928ee7a6a725378628b3": {
      "content": "else\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "else",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "b718c04b279531b7616497af7e630e40": {
      "content": "-webkit-border-image url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:w+": true
      },
      "source": "vim-snippets/snippets"
    },
    "b72694322983a0c92025243a898c9e75": {
      "content": "# ${1:text}",
      "doc": "Insert heading",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert heading",
      "matches": {
        "heading": true
      },
      "source": "vscode-R/snippets"
    },
    "b727a6c00d6ae9463d8dad6f99769f4e": {
      "content": "sub prep${1:number}_${2:test_case} :Test(startup) {\n\tmy $self = shift;\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tprep": true
      },
      "source": "vim-snippets/snippets"
    },
    "b732affdb5dda96abb47f228eb6ee78c": {
      "content": "shouldComponentUpdate: (nextProps, nextState) ->\n\t$1",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define shouldComponentUpdate",
      "matches": {
        "shouldComponentUpdate": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b73549b95d4adb8f1106a4ba58871140": {
      "content": "font-stretch expanded",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "b735d104cd25254c6ed7249941937051": {
      "content": "${1:obj}.unwrap()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unwrap": true
      },
      "source": "snippets/javascript"
    },
    "b7371f2dbd52def47ef5329138717e59": {
      "content": "vertical-align: super;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:sup": true
      },
      "source": "vim-snippets/snippets"
    },
    "b739eb11f3703ba91f692542051272e9": {
      "content": "{% spaceless %}$1{% endspaceless %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "spaceless": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b750ba4110f565c19239b79906a9ecf8": {
      "content": "import React, { memo } from 'react'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React, { memo }",
      "matches": {
        "imrm": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "b753d19336ea67d3f4ba0740f88ba750": {
      "content": "NSMutableArray *${1:array} = [NSMutableArray array];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "NSArray (array)",
      "matches": {
        "array": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b75709c65eb006f49074a7f037ca2bc2": {
      "content": "${1:value_key}:\nrbac:\n  create: true\nserviceAccount:\n  create: true\n  name:\nimagePullSecrets: []\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rbac_values": true
      },
      "source": "vim-snippets/snippets"
    },
    "b758ab234406338530d848b6e9998889": {
      "content": "_.drop(${array}, ${n})",
      "doc": "_.drop([1, 2, 3]);\n// => [2, 3]\n\n_.drop([1, 2, 3], 2);\n// => [3]\n\n_.drop([1, 2, 3], 5);\n// => []\n\n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]\n\nCreates a slice of `array` with `n` elements dropped from the beginning.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-drop",
      "matches": {
        "lodash drop": true
      },
      "source": "javascript/lodash"
    },
    "b75bfb84f5adc321b8ab2050386bcb07": {
      "content": "justify-content: left;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "b75d66ab0db8326682a87d46259c8ab8": {
      "content": "border-top-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdti:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "b75ee4eb1406df9c1a19a9de62570edd": {
      "content": "return ${1};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b75ff0fa8337d545c1ff47ee0ab05d64": {
      "content": "describe('${1:description}', () => {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine-arrow",
      "grammar": "snu",
      "label": "Describe (js)",
      "matches": {
        "des": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b762b5bd19d71eb90d0b5a7867da4583": {
      "content": "sizeof(${0:TARGET})",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "size": true,
        "sizeof": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b76a7ac376badebbc66454ecfb95e8e8": {
      "content": "test \"${1:test name}\" do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "b76bb9d7a7ecfca3d2e11eb59aeffca7": {
      "content": "<typeparamref name=\"${1:#:name}\"/>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<typeparamref name=\"\"/>",
      "matches": {
        "typeparamref": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b76db7921e0cee73cd02b7c77d92aa3e": {
      "content": "justify-content: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "b7713a5789450b38a2235060a3012d4b": {
      "content": "<#assign ${1:variable_name} = ${0:value${VISUAL}} />",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#assign variable_name = value />",
      "matches": {
        "ass": true
      },
      "source": "vim-snippets/snippets"
    },
    "b774321d6a11193e5ef19eb1ab7fd367": {
      "content": "validates_inclusion_of",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_inclusion_of",
      "matches": {
        "vi": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b7765cc613f2cf046e3946c885fb81ff": {
      "content": "\\\\begin{equation*}\n\\\\begin{tikzcd}\n\t${1}\n\\\\end{tikzcd}\n\\\\end{equation*}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "tikzcd environment in equation*",
      "matches": {
        "tikzcd*": true
      },
      "source": "vim-snippets/snippets"
    },
    "b77b971113fe4c41d341c6487a1b0460": {
      "content": "border-bottom ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdb": true
      },
      "source": "vim-snippets/snippets"
    },
    "b77de977567ffec3a328255801ddce02": {
      "content": "${1:public} static ${2:void} ${3:MyMethod}(${4})\n{\n\t$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "Static method",
      "matches": {
        "mths": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b7815841f9009f4149d16cbd2212e09d": {
      "content": "${1:obj}.ajaxComplete (${1:e}, xhr, settings) ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxcomplete": true
      },
      "source": "snippets/coffee"
    },
    "b781fb3fe1835031c6aeb37258d88cde": {
      "content": "table(${1:...})",
      "doc": "Table",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "tab",
      "matches": {
        "table": true
      },
      "source": "vscode-R/snippets"
    },
    "b78265d8e8e931316b38b19bd30a572a": {
      "content": "import styled from 'styled-components/native';\n\nexport const ${1:Container} = styled.${2:View}`\n  ${3}\n`;\n",
      "doc": "Create React Native Styled Components file",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "styles",
      "matches": {
        "styled-react-native": true
      },
      "source": "rocketseat-vscode-react-native-snippets/snippets"
    },
    "b786a610c2bd70e0c710460002b234e7": {
      "content": "\\subparagraph{${1}}\n${0:TARGET}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\subparagraph": true,
        "subparagraph \\subparagraph{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b78c7e35da02bc5c78ab1572a8c2e203": {
      "content": "background-size: contain;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz:ct": true
      },
      "source": "vim-snippets/snippets"
    },
    "b7974d3a120a6c72a1adcb3a4aea0850": {
      "content": "${1:var} = lambda ${2:vars} : ${0:action}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ld": true
      },
      "source": "vim-snippets/snippets"
    },
    "b798cf00c5eab156584ae22393bf7f60": {
      "content": "background-clip ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp": true
      },
      "source": "vim-snippets/snippets"
    },
    "b7a0a922e1dd234b045c2f7399ece4f8": {
      "content": "<button type=\"submit\" [disabled]=\"!${1:form}.form.valid\">\n\tSave\n</button>",
      "doc": "Angular form submit",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngFormSubmit",
      "matches": {
        "a-form-submit": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "b7a899325729f30d7cde597d74e9b59b": {
      "content": "fgets(${0:ROW}, ${1:LENGTH}, ${2:stdin});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "fgets(row, length, file);",
      "matches": {
        "fgets": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b7a909b31b337fc118fdd0526d273879": {
      "content": "<xsl:if test=\"${1:test}\">${2}\n</xsl:if>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "b7a9f1fbe12596deaddede6f9622fc1e": {
      "content": "{% empty %}\n\t$1",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "empty": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b7ad7763d5c47afbc9b0473b3a61db90": {
      "content": "${1:callbacks}.fired()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cfired": true
      },
      "source": "snippets/javascript"
    },
    "b7b29fa82a4792d61b91cebd03a573a0": {
      "content": "Session::pull(${1:key});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_session_pull": true
      },
      "source": "vim-snippets/snippets"
    },
    "b7bb6d0deefc3fe3733e45d1e338d8d0": {
      "content": "import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nexport class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}})\n",
      "doc": "Creates a React component class with connected redux and ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-class-component-redux",
      "matches": {
        "rcredux": true,
        "react component class redux": true
      },
      "source": "javascript/react"
    },
    "b7be6ead5e06f0102306fc823c5416fa": {
      "content": "msgid \"${1}\"\nmsgstr \"${2}\"\n${0}",
      "doc": "",
      "filetype": "po",
      "grammar": "snu",
      "label": "",
      "matches": {
        "msg": true
      },
      "source": "vim-snippets/snippets"
    },
    "b7c33eb8cb98d8e4de0206695c565a23": {
      "content": "${1:obj}.width(${2:integer})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "width": true
      },
      "source": "snippets/coffee"
    },
    "b7dd0b55ad43559e55b1a95239bd0502": {
      "content": "mutable.Map[${1:T},${2:T}]${0:(keyval)}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mmap": true
      },
      "source": "vim-snippets/snippets"
    },
    "b7ddf210066ec3120e98dcad73a7a4ee": {
      "content": "${1:obj}.fadeIn('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadein": true
      },
      "source": "snippets/javascript"
    },
    "b7eb8c150bdb8a679cae2f0324b926db": {
      "content": "-webkit-border-image: url('${1}') ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:w+": true
      },
      "source": "vim-snippets/snippets"
    },
    "b7f692052fddd6ddf9cee26869416c82": {
      "content": "text-justify: kashida",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:k": true
      },
      "source": "vim-snippets/snippets"
    },
    "b7f9c710f4f3d13e4631280f44e9a3b1": {
      "content": "it '${1:description}', ->\n\t$0",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "it (coffee)",
      "matches": {
        "it": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b7fc00f91070e25097551f464268e49f": {
      "content": "/// ${3:/*documentation*/}\nclass $1Exception : $2Exception\n{\n\tpublic this(string msg, string file = __FILE__, int line = __LINE__)\n\t{\n\t\tsuper(msg, file, line);\n\t}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "exception declaration (exc)",
      "matches": {
        "exc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b80329ec00dabb7b125d56d37f21445d": {
      "content": "_.keysIn(${object})",
      "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keysIn(new Foo);\n// => ['a', 'b', 'c'] (iteration order is not guaranteed)\n\nCreates an array of the own and inherited enumerable property names of `object`.\n\n**Note:** Non-object values are coerced to objects.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-keysin",
      "matches": {
        "lodash keysin": true
      },
      "source": "javascript/lodash"
    },
    "b80a460d5d3d75a3c73aa870f281d168": {
      "content": "${1:obj}.fadeIn('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadein": true
      },
      "source": "snippets/coffee"
    },
    "b80a701028bb629308960d0b5ff172f7": {
      "content": "clear ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl": true
      },
      "source": "vim-snippets/snippets"
    },
    "b80cdbf969a2ed745e472f6b067814fc": {
      "content": "enum ${1:#:name} {\n    ${2:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "enum {}",
      "matches": {
        "enum": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b80ec3f5f6b0e490bdce98eda1cb5310": {
      "content": "validates_associated :${1:attribute}${2:, on: :${3:create}}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_associated (va)",
      "matches": {
        "va": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b82775e7dc94d457a65e9a1194809639": {
      "content": "echo CHtml::css('${1:test}','${0:media}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhcss": true
      },
      "source": "vim-snippets/snippets"
    },
    "b82b5adfd6ba09b028cc653f4f39cd05": {
      "content": "import Controller from '@ember/controller';\n\nexport default Controller.extend({\n\t${0://Properties here...}\n});",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "import Controller from '@ember/controller';",
      "matches": {
        "econtroller": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b83881e31fd2e0c64fae367e844b67b2": {
      "content": "library IEEE;\nuse IEEE.std_logic_1164.ALL;\nuse IEEE.numeric_std.ALL;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "libs": true
      },
      "source": "vim-snippets/snippets"
    },
    "b839c857c1cac913684724f251c5ae0f": {
      "content": "filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=${0:100})",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "op:ie": true
      },
      "source": "vim-snippets/snippets"
    },
    "b842270cfa4388f19eddc0c8b5924f81": {
      "content": "background-clip no-clip",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:nc": true
      },
      "source": "vim-snippets/snippets"
    },
    "b84979d41ed1f207f2757dc12358fe35": {
      "content": "\\chapter{${1}}\n${0:TARGET}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\chapter": true,
        "chapter \\chapter{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b849bd71de0c15437463019b06c84b96": {
      "content": "cy.visit('${1:url}');",
      "doc": "Visit a remote URL",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-visit",
      "matches": {
        "cypress visit": true
      },
      "source": "javascript/cypress"
    },
    "b84a3e020f77549599a15b9a88d9baa0": {
      "content": "${1:callbacks}.has(${2:callback})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Chas": true
      },
      "source": "snippets/javascript"
    },
    "b84fdef94eb31853d4f935f4419eea54": {
      "content": "PropTypes.arrayOf($0),",
      "doc": "An array of a certain type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeArrayOf",
      "matches": {
        "ptao": true
      },
      "source": "vscode-react/snippets"
    },
    "b850036d00272a9b66f6ac85e9a8654c": {
      "content": "{% with %}\n\t${0}\n{% endwith %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig with",
      "matches": {
        "with": true
      },
      "source": "vim-snippets/snippets"
    },
    "b853bec6685b0303f5be3565c5f550fa": {
      "content": "word-wrap normal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "b85954cc0b3d629dedfb7e5b17776b93": {
      "content": "@unless\n\t${1:${VISUAL}}\n@endunless",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@unless directive",
      "matches": {
        "unless": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b878c9a57796d424793505a0420a4e68": {
      "content": "lock (${1:#:resource}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "lock () {}",
      "matches": {
        "lock": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b886b5c8dc947b5f5f7ab1868c12da68": {
      "content": "it { should have_many :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ishm": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8887ec4d13c9580e58caf28de0486ea": {
      "content": "${1:obj}.parent('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parent": true
      },
      "source": "snippets/javascript"
    },
    "b88ac24e20360892965ad6b5d4519289": {
      "content": "@font-face ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@f": true
      },
      "source": "vim-snippets/snippets"
    },
    "b894e9c57dbdb35ba01cc1d4a22a72d1": {
      "content": "class ${1:#:name} {\n    ${2}\npublic:\n    $1(${3});\n};\n$1::$1($3) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "class {}",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b897f856fec2396f507e5c793fa72ac1": {
      "content": "font-family: ${0:'Monotype Corsiva','Comic Sans MS'},cursive",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "b89cb38223b8702e8c2fe5aa88772df9": {
      "content": "add_test(${1:ATestName} ${0:testCommand --options})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8a6bef54cc8b0a092dfdcc6472846be": {
      "content": "text-wrap: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8a9016b6871a0661a6e044c1c0fffcc": {
      "content": "defp ${1:name} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defp": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8b064da6251fea267f3123820516f95": {
      "content": "export const state = () => ({\n\tvalue: 'myvalue'\n})\n\nexport const getters = {\n\tgetterValue: state => {\n\t\treturn state.value\n\t}\n}\n\nexport const mutations = {\n\tupdateValue: (state, payload) => {\n\t\tstate.value = payload\n\t}\n}\n\nexport const actions = {\n\tupdateActionValue({ commit }) {\n\t\tcommit('updateValue', payload)\n\t}\n}",
      "doc": "vuex store 2",
      "filetype": "vue-script-vuex",
      "grammar": "lsp",
      "label": "Vuex Store 2",
      "matches": {
        "vstore2": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "b8b199257b963b5987f7f7538d1b469c": {
      "content": "export async function getStaticPaths() {\n  return {\n    paths: [\n      { params: { ... } } \n    ],\n    fallback: ${1|true,false|}\n  };\n}",
      "doc": "If a page has dynamic routes (documentation) and uses getStaticProps it needs to define a list of paths that have to be rendered to HTML at build time. If you export an async function called getStaticPaths from a page that uses dynamic routes, Next.js will statically pre-render all the paths specified by getStaticPaths.",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-get-static-paths",
      "matches": {
        "next getstaticpaths": true
      },
      "source": "javascript/next"
    },
    "b8c0361990fecfb0ce1bf4f259af17a5": {
      "content": "where\n\t${0}",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8c06e2044dbc0176258a5669a2a3392": {
      "content": "Yii::app()->clientScript->registerCss('${1:id}', '${0}');",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yregc": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8c49dc88c0d19d74226c1da978045db": {
      "content": "quotes '\\201C' '\\201D' '\\2018' '\\2019'",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q:en": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8c7e601069dded3e5851645b6c7aae3": {
      "content": "@return ${0:param}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@re": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8cf72e5dcdc84a622f5123bcc17f517": {
      "content": "must_be_kind_of ${0:Class}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbko": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8cf7b2bacb5596913159cf9f3ce56be": {
      "content": "if ${1:condition} then ${2:value} else ${3:other}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Ternary if",
      "matches": {
        "ifte": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b8d26bdf52a6f613fcc3961ceed9346b": {
      "content": "${1}_test() ->\n\t${0}",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8ddc61ba91904ba408c2d98cc4291ab": {
      "content": "render partial: '${1:item}', locals: { ${2:$1}: ${0:@$1} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rpl": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8e0d7b79e34e2f8b30bc0e218fe0fc2": {
      "content": "record\n\t${0}\nend record;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "record",
      "matches": {
        "rec": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8e20b6c716d5c5911e9f8b3a360829e": {
      "content": "import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport ${1:rootReducer} from '${1:./reducers/index}';\n\nconst store = createStore(\n  ${1:rootReducer},\n  applyMiddleware(thunk)\n);",
      "doc": "Create store with thunk template",
      "filetype": "redux-thunk",
      "grammar": "lsp",
      "label": "redux-thunk-store",
      "matches": {
        "redux-thunk createstore": true
      },
      "source": "javascript/redux-thunk"
    },
    "b8f0c6e7b773a736a517dc3b75ef0436": {
      "content": "outline-width: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ow": true
      },
      "source": "vim-snippets/snippets"
    },
    "b8fada84db488eba9058f11df35fa9b7": {
      "content": "string.lowercase()",
      "doc": "string.lowercase(message?: string | function): Schema\n\nTransforms the string value to lowercase. If strict() is set it\nwill only validate that the value is lowercase.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-lowercase",
      "matches": {
        "yup string lowercase": true
      },
      "source": "javascript/yup"
    },
    "b906f52992af75a7ec121a6451ad7e20": {
      "content": "\\$_ENV['${1:#:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "env": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b90d6909a1844d1f8fc6d715901f8697": {
      "content": "until ${1:condition}; do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "until": true
      },
      "source": "vim-snippets/snippets"
    },
    "b90e94e2feff1cad32867c0d3b788d4d": {
      "content": "assert_select '${1:path}'${2:, ${3:text}: ${4:'${5:inner_html}'}}${6: do\n\t$0\nend}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "assert_select",
      "matches": {
        "ass": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b9102d8b5d0da86619a148b3a454e140": {
      "content": "final ${0}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fi": true
      },
      "source": "vim-snippets/snippets"
    },
    "b91baac7f4971a87fc6f002bb4f832d8": {
      "content": "public ${1:int} ${2} { get; internal set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p+&": true
      },
      "source": "vim-snippets/snippets"
    },
    "b925f567b04d575aa82f7b2ba215e28a": {
      "content": "{# $1 #}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "comment",
      "matches": {
        "{#": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b926ff90759bf476fb6a5bfcb9d9be1e": {
      "content": "overflow-y: visible",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "b92b355b00daf7a38089273fc96e28b1": {
      "content": "\\begin{bmatrix}\n\t${1:TARGET}\n\\end{bmatrix}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{bmatrix} \\bmatrix": true,
        "bmatrix": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b93b1e425f2ef411b03257555af09ffc": {
      "content": "while ${1:false} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b93c4a84b477f05e0c319df2afd6850a": {
      "content": "watch: {\n\t${1:data}: {\n\t\timmediate: ${2:true},\n\t\tdeep: ${3:true},\n\t\thandler(${4:newValue}, ${5:oldValue}) {\n\t\t\t${0}\n\t\t}\n\t}\n},",
      "doc": "vue watcher with options",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Watchers with Options",
      "matches": {
        "vwatcher-options": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "b93cf454ff15486f88f2f1a09ec3e5cd": {
      "content": "{% extends \"${0:base.html}\" %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "extends": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9430a486d56d9865b16b2dc71b085d5": {
      "content": "margin-right: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "margin-right": true,
        "mr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b94654b6522dcc6df063161a75795e75": {
      "content": "_.padStart(${string}, ${length}, ${chars})",
      "doc": "_.padStart('abc', 6);\n// => '   abc'\n\n_.padStart('abc', 6, '_-');\n// => '_-_abc'\n\n_.padStart('abc', 3);\n// => 'abc'\n\nPads `string` on the left side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-padstart",
      "matches": {
        "lodash padstart": true
      },
      "source": "javascript/lodash"
    },
    "b94720b15263c4d3619f4ee75ab424bb": {
      "content": "describe.only('${1:Name of the group}', () => {\n\t$0\n});",
      "doc": "creates a describe block that runs only",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-describe-only",
      "matches": {
        "desco": true,
        "jest describe only": true
      },
      "source": "javascript/jest"
    },
    "b94a82581aced3cebf98a2befe4b0ef0": {
      "content": "for ${1:i} in ${2:l_var}.first .. $2.last loop\n\t${0: -- dbms_output.put_line($2($1)); }\nend loop;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forc": true
      },
      "source": "vim-snippets/snippets"
    },
    "b94c182297c86d79a68603f0af24c6ba": {
      "content": "case ${1} is\n\t${2}\nend case;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ca": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9540532b22081cfe9a39f302b7f037b": {
      "content": "border-corner-image: continue;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdci:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "b959483ae825c30abd845bed9b059f18": {
      "content": "@override",
      "doc": "",
      "filetype": "javascript-jsdoc",
      "grammar": "snu",
      "label": "@override",
      "matches": {
        "@over": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b95a2f67fd3891067e02b52abc2c127b": {
      "content": "${1:FIELDNAME} = forms.TimeField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "TimeField",
      "matches": {
        "ftime": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b96333251ed28c2bdc86f6271a2b325f": {
      "content": "std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mup": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9633a248c41c3fc7293f0bb095ecb3f": {
      "content": "Ada.Text_IO.New_Line(${1:1});${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "Ada.Text_IO.New_Line",
      "matches": {
        "newline": true
      },
      "source": "vim-snippets/snippets"
    },
    "b963d6551e014a52102f817fa758acd9": {
      "content": "BEGIN TRANSACTION;\n${0:TARGET}\nCOMMIT;",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "BEGIN TRANSACTION": true,
        "TRANSACTION": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b965f22524b375ef6f789dc28285be9d": {
      "content": "expect(${1:target}).not.toThrowError(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to throw error (js)",
      "matches": {
        "notthe": true
      },
      "source": "vim-snippets/snippets"
    },
    "b970f13236ea0a37fdcaf026031844b0": {
      "content": "Page Should Contain Checkbox    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Contain Checkbox",
      "matches": {
        "pscc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b97567c0922f6e5cea377ecbbc2ea318": {
      "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})\n{\n\t${7}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun2": true
      },
      "source": "vim-snippets/snippets"
    },
    "b975699d54bf5856b77a6de1c5b81ddc": {
      "content": "\\${3:${0:default}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${3:default}",
      "matches": {
        "3:": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b975e9f7c6d7ca7c5ab0778031704959": {
      "content": "require 'debugger'; debugger",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "debug19": true
      },
      "source": "vim-snippets/snippets"
    },
    "b97774cc9d50a77d16986ad7768fbc8e": {
      "content": "public ${1:String} get${2:Name}() {\nreturn $2;\n}${0:TARGET}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "get": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b977d4fc82be3fe861559246d6013307": {
      "content": "@keyframes ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "keyf": true
      },
      "source": "vim-snippets/snippets"
    },
    "b97a0341eaa4f7ba7a3c07bce082b3c7": {
      "content": "<#attempt>\n\t${0:${VISUAL}}\n<#recover>\n</#attempt>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#attempt>...<#recover></#attempt>",
      "matches": {
        "att": true
      },
      "source": "vim-snippets/snippets"
    },
    "b97e5d5605256df2593bbbbfbea7b400": {
      "content": "class ${1:ModelClassName}Sweeper < ActionController::Caching::Sweeper\n\tobserve $1\n\tdef after_save(${0:model_class_name})\n\t\texpire_cache($2)\n\tend\n\tdef after_destroy($2)\n\t\texpire_cache($2)\n\tend\n\tdef expire_cache($2)\n\t\texpire_page\n\tend\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sweeper": true
      },
      "source": "vim-snippets/snippets"
    },
    "b98f32098dd0f8c96284b4dce7cb8674": {
      "content": "% if ${1:condition}:\n\t${2:}\n% else:\n\t${0:}\n% endif",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "if/else",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9916c31ba39143e9ac6f1557bf051b8": {
      "content": "const [${2:propertyName}] = ${1:arrayToDestruct};",
      "doc": "Array destructing",
      "filetype": "base",
      "grammar": "lsp",
      "label": "destructingarray",
      "matches": {
        "base const destruct array": true
      },
      "source": "javascript/base"
    },
    "b99258bfb2e4cbb66a457635a978656d": {
      "content": "grid ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "g": true
      },
      "source": "vim-snippets/snippets"
    },
    "b994e7e73972750b03f5f1d977966ccc": {
      "content": "<template>\n\t<${1:div}$2>\n\t\t$0\n\t</${1:div}>\n</template>",
      "doc": "template element",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-template",
      "matches": {
        "template": true,
        "vue template": true
      },
      "source": "javascript/vue"
    },
    "b99a0292d98d28fb5677e8f582d20f47": {
      "content": "{\n\t\"type\": \"checkbox\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": ${3:true},\n\t\"info\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_checkbox": true
      },
      "source": "vim-snippets/snippets"
    },
    "b99b95cbb02fdfbdba4f7687f1e6e70b": {
      "content": "must_be_same_as ${0:other}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbsa": true
      },
      "source": "vim-snippets/snippets"
    },
    "b99e30054437bf3c5785ed78e827d960": {
      "content": "private bool ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb-": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9ad40a3cda8f50a3357f5d8b11b8c5c": {
      "content": "border-bottom-left-image continue",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbli:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9af85fc13527f702aec1030e3be6fa0": {
      "content": "it { should render_with_layout ${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isrwl": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9b177850fb8f26a9eeda51d5f25589b": {
      "content": "defer func() {\n\t${0:${VISUAL}}\n}()",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "defer func() { ... }",
      "matches": {
        "def": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "b9b32b433c17787c384b76eb9acca3b9": {
      "content": "@typep ${1:type_name} :: ${2:type}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "typ": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9c3b60ad22f53bdd90beda846316285": {
      "content": "mounted () {\n\t${0};\n},",
      "doc": "mounted lifecycle method",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle mounted",
      "matches": {
        "vmounted": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "b9d052c8c10011958de3ac21b7d13c9f": {
      "content": "while(${1}) {\n\t${2}\n}",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9d4784f2db77a6b5f3bc81b327a4857": {
      "content": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
      "doc": "Executes the given function at specified intervals in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "setInterval",
      "matches": {
        "sti": true
      },
      "source": "vscode-javascript/snippets"
    },
    "b9d594c4a238684281ee445ce32a70cc": {
      "content": "$this->shouldNotBeAnInstanceOf($1);",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldNotBeAnInstanceOf('Type')",
      "matches": {
        "snbinstance": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "b9d5cfb38abeb247659d1c9ac1cc6ad4": {
      "content": "<a href=\"${1:#}\">${0:$1}</a>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "a": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9dac672c8c37519e46346ef7d91ee84": {
      "content": "- (${1:unsigned int})${2:thing};\n- (void)set${2}:($1)new${2};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Interface:AccessorsForPrimitiveType",
      "matches": {
        "iacc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b9dda92afc7aa423e54645d5af2efd96": {
      "content": "align-content: end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9e4306d036b08298e648a917b837c6b": {
      "content": "text-replace none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tr:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "b9fd000ff55a7319bcdb45f3ded1cd0c": {
      "content": "stop();",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "st": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "b9fdfcc8ba817692cbede62ab0647a0f": {
      "content": "always @(${1:/* sensitive list */}) begin\n\t${0}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "al": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba1011fc820a06f7163a839ec357eea3": {
      "content": "__import__('nose').tools.set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nosetrace": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba13da817738bf66893ff81492252d65": {
      "content": "class ${1:Class} ${2:a} where\n  ${3:function} :: ${4:Type}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ba2180fcaa032ef5e0fbbded6c5ae95b": {
      "content": "use Symfony\\Component\\HttpFoundation\\Response;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Symfony\\..\\Response",
      "matches": {
        "useresponse": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ba23641eb32d04cd9d7fb8da76213c6f": {
      "content": "@property ${1:/*type*/} ${2:/*member_name*/}() const pure nothrow {return ${3:$2_};}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "getter property (get)",
      "matches": {
        "get": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ba287b490aa0924074a3fc477c177960": {
      "content": "zoom 1",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "zoo": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba34f32d1bcea88213ab57fbdf3577c2": {
      "content": "it { should have_many(:${1}).through :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ishmt": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba35f1c3c0fdba07ad975f64893232e0": {
      "content": "console.groupEnd();",
      "doc": "Closes out the corresponding console.group().",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consolegroupend",
      "matches": {
        "base console group end": true
      },
      "source": "javascript/base"
    },
    "ba39a88f1c2916ed71316ad00450665e": {
      "content": "visibility: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba447f0b9e7a9eb0e979999a7b7b2d9f": {
      "content": "else if (${1:true}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba48cd9e4d305a8c40dd1fbe65cd1197": {
      "content": "object:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "object:",
      "matches": {
        "object": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ba4b6c76a17836817175fa69f0681189": {
      "content": "${1:New} = () => import('@/components/${1:New}.vue')",
      "doc": "Import component that should be lazy loaded",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Import Component Dynamically",
      "matches": {
        "vimport-dynamic": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "ba5261ba79be2fb70cdb83942d5e30df": {
      "content": "require(${0:package})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba59168e1176f31848a1a909bc38aa58": {
      "content": "static propTypes = {\n$0\n}\n",
      "doc": "",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-static",
      "matches": {
        "prop-types static": true,
        "ptypes": true
      },
      "source": "javascript/prop-types"
    },
    "ba64c6b227b4bb00a8930d4023e07cd2": {
      "content": "<?php\nclass ${1:ModelName} extends ${2:CActiveRecord}\n{\n\t/**\n\t * Returns the static model of the specified AR class.\n\t * @return CActiveRecord the static model class\n\t */\n\tpublic static function model($className=__CLASS__)\n\t{\n\t\treturn parent::model($className);\n\t}\n\t/**\n\t * @return string the associated database table name\n\t */\n\tpublic function tableName()\n\t{\n\t\treturn '${0:table_name}';\n\t}\n\t/**\n\t * @return array validation rules for model attributes.\n\t */\n\tpublic function rules()\n\t{\n\t\treturn array(\n\t\t);\n\t}\n\t/**\n\t * @return array relational rules.\n\t */\n\tpublic function relations()\n\t{\n\t\treturn array(\n\t\t);\n\t}\n\t/**\n\t * @return array customized attribute labels (name=&gt;label)\n\t */\n\tpublic function attributeLabels()\n\t{\n\t\treturn array(\n\t\t);\n\t}\n}",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ymodel": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba675f62e6bb18fa89e616e13439b5db": {
      "content": "str(\"${0:str}\");",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "str": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba71bb03d6649b0895d959d8be37474f": {
      "content": "data ${1:Type} =\n\t${0:$1}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "da": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba71da7499317daed01795d977899109": {
      "content": "font-emphasize-position: after;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "femp:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba7586e2f7c5736dd253acfa71e5c302": {
      "content": "${1:Record} { ${2:recFieldA} = ${3:undefined}\n\t\t\t, ${4:recFieldB} = ${0:undefined}\n\t\t\t}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rec": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba779b8e457be15800dae887de8ffa74": {
      "content": "always @(posedge clk${1})${2:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "always @(posedge clk)",
      "matches": {
        "alclk": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ba7870d8cdb8ac7d6f6ef5ce24c57170": {
      "content": "\\begin{slide}\n\t${1:TARGET}\n\\end{slide}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{slide} \\slide": true,
        "slide": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ba816ee4bac8abb2c7753fc1e7d8789c": {
      "content": "watchQuery (newQuery, oldQuery) {\n\t${1:data}\n},",
      "doc": "Use the watchQuery key to set up a watcher for query strings.",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-watch-query",
      "matches": {
        "nuxt watchquery": true
      },
      "source": "javascript/nuxt"
    },
    "ba84bf77b183d61d12c01d8b1cffd3ee": {
      "content": "Session::set(${1:key});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_session_destroy": true
      },
      "source": "vim-snippets/snippets"
    },
    "ba8dbaeff4ad2cd7ca32688b453255bc": {
      "content": "<${1:div} :class=\"[${2:classNameA}, {${3:classNameB} : ${4:condition}}]\"></${1:div}>",
      "doc": "vue multiple conditional class bindings",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Multiple Conditional Class Bindings",
      "matches": {
        "vclass-obj-mult": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "ba98938a9b3abbe00766dd09d095978e": {
      "content": "date:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "date": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ba992547229ecd2bc8440e63e4235dc6": {
      "content": "text-decoration: line-through;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "baac69c7ff9eb014be171deaff033be7": {
      "content": "Yii::app()->request->isAjaxRequest",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yisajax": true
      },
      "source": "vim-snippets/snippets"
    },
    "bab18a546509e0e8687038c95b917ddd": {
      "content": "__${1}__${2}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "__strong__",
      "matches": {
        "strong2": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bab3a5efdedf78d01c2a34de2b8b4b9e": {
      "content": "while ${1:#:condition} ; do\n\t${0:TARGET}\ndone",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true,
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bab4d1b5f5c42ab2129ae3913bcad541": {
      "content": "/**\n * ${0:TARGET}\n */",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comment": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bac12c51d164b754d815b2a50bfdc916": {
      "content": "wont_be_kind_of ${0:Class}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wbko": true
      },
      "source": "vim-snippets/snippets"
    },
    "bac7ae70839618b575eee829910f8a06": {
      "content": "if (${1:#:condition}) {\n\t${2:TARGET}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bad4386386994f3f54ecc81e578579e9": {
      "content": "/**\n *\t${1:@private}$0\n */\n${0}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "docc": true
      },
      "source": "vim-snippets/snippets"
    },
    "badb35bdd604e2bf75086f3be9010c54": {
      "content": "def ${1:name}, do: ${2}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "df": true
      },
      "source": "vim-snippets/snippets"
    },
    "bade917f06e60e98dad63dddebed156f": {
      "content": "<option value=\"${1}\">${0:$1}</option>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "opt": true
      },
      "source": "vim-snippets/snippets"
    },
    "baec98bbc4869d5454fb427995a0734b": {
      "content": "font-emphasize-position: after",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "femp:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "baf6e4c829f23520ec66b3d7bef39f00": {
      "content": "Mouse Up    ${1:${locator}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Mouse Up",
      "matches": {
        "mu": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bafd896a9544d1e66ab2364b234f025a": {
      "content": "PropTypes.array,",
      "doc": "Array prop type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-array",
      "matches": {
        "prop-types array": true,
        "pta": true
      },
      "source": "javascript/prop-types"
    },
    "bb03f7529c2f83612156de638bbf1da9": {
      "content": "<source src=\"${1}\" type=\"${2}\" media=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "source": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb0faad33bf87dc48d80eaf77e15135a": {
      "content": "for ${1:e} in ${2:c}\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb15ecee0539dba1cab673b218021bf8": {
      "content": "<nav class=\"${1}\">\n\t${0}\n</nav>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nav.": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb165e23696b7395178b960e069baf37": {
      "content": "directionalLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${0:nz});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "diretionalLight": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb1923c4cb65e160232113694e6fecf1": {
      "content": "render text: \"${1:text to render...}\", layout: \"${2:layoutname}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (text,layout) (rtl)",
      "matches": {
        "rtl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bb209ed1654fab00592ece117be7d91d": {
      "content": "term:: ${1:definintion}",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": "definition",
      "matches": {
        "definintion": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bb22b0b0b7a2b2f66d58c7a00e96990c": {
      "content": "var ${1:function_name} = function(${2}) {\n\t${0:${VISUAL}}\n};",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vaf": true
      },
      "source": "snippets/javascript"
    },
    "bb263156e86cf79610563070f0568c9c": {
      "content": "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) begin\n\t${4}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb2d13ca30c69c4fc2380b0bc9d87007": {
      "content": "{@debug ${1:var1}${2:,var2}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-expression-debug",
      "matches": {
        "svelte expression debug": true,
        "svexpdebug": true
      },
      "source": "javascript/svelte"
    },
    "bb32b8ae9ed4cb903f0b06571cc14333": {
      "content": "[bibliography]\n== References\n- [[${1:id}]] ${2:Entry}\n${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "bibliography",
      "matches": {
        "bib": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bb34e20fad7b151f370e8d1551ef5fca": {
      "content": "if [ \\$(id -u) -ne 0 ]; then exec sudo \\$0; fi",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "root": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb38073103d68a661ea956c5ab3e4ad1": {
      "content": "text-outline ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "to": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb3dc6d51f36d44fb01035784006fbc1": {
      "content": "grid-auto-columns ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb4550014e741a7ab4c4888c11c39c67": {
      "content": "m_ply(${1:matrix}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m_": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb46521d8611ceceb693ff35f21891e7": {
      "content": "saveBytes(${1:filename}, ${0:bytes});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "saveBytes": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb4fe89e1a0a00158077cac7a2b340a2": {
      "content": "text-align: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb553e3c1452cb5b21bac5c1a9b260d6": {
      "content": "try:\n\t${1:pass}\nfinally:\n\t${2:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "try: ... finally: ...",
      "matches": {
        "tryfinally": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bb595fd3839840b40b9353828cb9e835": {
      "content": "${1:obj}.click(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "click": true
      },
      "source": "snippets/javascript"
    },
    "bb650639de69a9cdcb71e25e82b892c1": {
      "content": "| money",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "money": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb671680d3b2894017dbf311b0ab173c": {
      "content": "{ rel: 'stylesheet', href: '${1:https://fonts.googleapis.com/css?family=Montserrat:600|Rufina:700}' }",
      "doc": "link to include fonts in a nuxt project, in nuxt-config",
      "filetype": "nuxt-config",
      "grammar": "lsp",
      "label": "Nuxt Font",
      "matches": {
        "nfont": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "bb6b8fedab8089eae65dde45f6893f2b": {
      "content": "text-align-last right",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb70cb297d4fc73370d5b5cb18ee8ebf": {
      "content": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
      "doc": "An object that could be one of many types required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeOneOfTypeRequired",
      "matches": {
        "ptetr": true
      },
      "source": "vscode-react/snippets"
    },
    "bb78e69aa50508050f6330cfad357d64": {
      "content": "arc(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:start}, ${0:stop});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "arc": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb905f91a7a3adbd3ffef1ec525ff467": {
      "content": "${1:myVar}: React.PropTypes.${2:type}${3:.isRequired}\n$4",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React propType (key/value)",
      "matches": {
        "propType": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bb944d3adef0000b5753628c22927eb9": {
      "content": "setup(function()\n  ${0:TARGET}\nend)",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "setup(func)",
      "matches": {
        "setup": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bb959d81a584ff3a78a73710b6ab1f65": {
      "content": "hmap",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "HashMap",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb988542cfefa183dac67da373c29107": {
      "content": "-moz-box-shadow: ${1:0} ${2:0} ${3:0} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:m+": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb9cc53f7ca0cc4583348706006f34a9": {
      "content": "(define (${1})\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defun": true
      },
      "source": "vim-snippets/snippets"
    },
    "bb9dd6b10e06bd85ac6fb90cb27f56a9": {
      "content": "if (${1:#:condition}) {\n\t${2:TARGET}\n} else {\n\t${3:#:else...}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bba236559e69fc75622599037a9b8e4d": {
      "content": "data-${1}=\"${2:$1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "data": true
      },
      "source": "vim-snippets/snippets"
    },
    "bbab76932b476cbe71d368b249e71c62": {
      "content": "Main.@infiltrate",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "Infiltrator breakpoint",
      "matches": {
        "inf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bbab8facaf8489ec7da7adbbd44f65d9": {
      "content": "${1:FIELDNAME} = models.PositiveSmallIntegerField(${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "possmallint": true
      },
      "source": "vim-snippets/snippets"
    },
    "bbac69a23398e04dc80fca8cf728c510": {
      "content": "<%= text_input ${1:f}, :${2:field} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "text_input",
      "matches": {
        "ti": true
      },
      "source": "vim-snippets/snippets"
    },
    "bbb44305a4e5a0635cb07bb387d3bef6": {
      "content": "${1:methodName}(${2:params}) {\n\t${0}\n}",
      "doc": "Creates a method inside a class in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "method",
      "matches": {
        "met": true
      },
      "source": "vscode-javascript/snippets"
    },
    "bbc273629ffd9d008263d00609296016": {
      "content": "display: table-caption",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbcp": true
      },
      "source": "vim-snippets/snippets"
    },
    "bbc34cba7c924e839bab7c5551201d41": {
      "content": ".. warning::\n\t${0:attention!}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "war:": true
      },
      "source": "vim-snippets/snippets"
    },
    "bbc7172567644fa88cd5b8d1157c0ca8": {
      "content": "include(ExternalProject)\nExternalProject_Add(${1:googletest}\n  GIT_REPOSITORY    ${2:https://github.com/google/googletest.git}\n  GIT_TAG           ${3:master}\n  SOURCE_DIR        \"${4:${CMAKE_BINARY_DIR}/googletest-src}\"\n  BINARY_DIR        \"${0:${CMAKE_BINARY_DIR}/googletest-build}\"\n  CONFIGURE_COMMAND \"\"\n  BUILD_COMMAND     \"\"\n  INSTALL_COMMAND   \"\"\n  TEST_COMMAND      \"\"\n)",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Ext_git": true
      },
      "source": "vim-snippets/snippets"
    },
    "bbe84e2e5aaef59e92f182345530fb37": {
      "content": ".PHONY: clean, mrproper\nCC = gcc\nCFLAGS = -g -Wall\nall: $1\n%.o: %.c\n\t$(CC) $(CFLAGS) -c -o $@ $<\n${1:out}: $1.o\n\t$(CC) $(CFLAGS) -o $@ $+\nclean:\n\trm -f *.o core.*\nmrproper: clean\n\trm -f $1",
      "doc": "",
      "filetype": "make",
      "grammar": "snu",
      "label": "",
      "matches": {
        "base": true
      },
      "source": "vim-snippets/snippets"
    },
    "bbe937b260d80208c7ecb0494949d0da": {
      "content": "gem '${1:name}'${2:${3:, \"${4:1.0}\"}${5:${6:, require: ${7:\"${8:$1}\"}}${9:, group: :${10:test}}}}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "gem",
      "matches": {
        "gem": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bbf5c59e85e067206a122eb4b2849586": {
      "content": "padding-bottom: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "bbf82a465a1c6c7cb04caa0b7c38388e": {
      "content": "partial:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "partial:",
      "matches": {
        "partial": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bbfa572289148da4ab2fa567e818f1f0": {
      "content": "printf(\"${1:%s}\\n\", ${2})${0}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "printf",
      "matches": {
        "printf": true
      },
      "source": "vim-snippets/snippets"
    },
    "bbfb3481e68febdd1339847500deb88c": {
      "content": "assert_redirected_to ${10:${2:model}s_path}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "assert_redirected_to (path plural)",
      "matches": {
        "artpp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bbfc35af4ae8197fa982a214fd21c17b": {
      "content": "border-right: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdr:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc0916e2cef467728e47989c068712bf": {
      "content": "*${1}*${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "*bold*",
      "matches": {
        "bold": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bc1fcec623ef55b56b50b1e417746117": {
      "content": "text-justify distribute",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc20cb7671de8974481fcd85552be106": {
      "content": "import React, { Component } from 'react';\n\nclass ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a React component class with ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassComponent",
      "matches": {
        "rcc": true
      },
      "source": "vscode-react/snippets"
    },
    "bc229b369553f3d44749bf07b28c3f76": {
      "content": "case class ${1:name}${2:(arg)}${3: extends }${4: with} ${0:}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "casecl": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc2514012c71c8d5011dba3a060fd68f": {
      "content": "var tests = []struct {\n\tname string\n\texpected string\n\tgiven string\n}{\n\t{\"${1}\", \"${2}\", \"${3}\",},\n}\nfor _, tt := range tests {\n\ttt := tt\n\tt.Run(tt.name, func(t *testing.T){\n\t\tactual := ${0:${VISUAL}}(tt.given)\n\t\tif actual != tt.expected {\n\t\t\t\tt.Errorf(\"$0(%s): expected %s, actual %s\", tt.given, tt.expected, actual)\n\t\t}\n\n\t})\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "bc325bf1e2df0b8b6343f7e483303977": {
      "content": "content ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc34d4e51837aa17d1be346efb50addf": {
      "content": "border-collapse: collapse;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdcl:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc3ccd0016686c43a7c40ab0ec1d21a4": {
      "content": "${1:moduleName} = angular.module('$1', [${2:moduleDeps}], (${3:configDeps}) ->\n\t${4}\n)",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngmc": true
      },
      "source": "snippets/coffee"
    },
    "bc3d6c30c3861f424a1557c314f403ea": {
      "content": "each_pair {|${1:#:key}, ${2:value}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each_pair": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bc483a96fd19810d27ab350a95fe0aba": {
      "content": "after_validation $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "after_validation",
      "matches": {
        "aftv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bc569120a1d6a69467cc5e292b7565c0": {
      "content": "<transition\n  @before-enter=\"beforeEnter\"\n  @enter=\"enter\"\n  @after-enter=\"afterEnter\"\n  @enter-cancelled=\"enterCancelled\"\n  @before-Leave=\"beforeLeave\"\n  @leave=\"leave\"\n  @after-leave=\"afterLeave\"\n  @leave-cancelled=\"leaveCancelled\"\n  :css=\"false\">\n </transition>",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vanim:js:el": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc5a10e565e52d1f026285efd86784f3": {
      "content": "_.lowerFirst(${string})",
      "doc": "_.lowerFirst('Fred');\n// => 'fred'\n\n_.lowerFirst('FRED');\n// => 'fRED'\n\nConverts the first character of `string` to lower case.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-lowerfirst",
      "matches": {
        "lodash lowerfirst": true
      },
      "source": "javascript/lodash"
    },
    "bc5aa6e945f21aee01cb132d4695114e": {
      "content": "pub fn main() {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Main function",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc611daf98b385788dadc95a58510f98": {
      "content": "font-smooth auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc6123bf87cbae047f1788ea1c5706d0": {
      "content": "method ${1:!}${2:method_name}(${3:$attr}) {\n\t${4}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pmth": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc6941857d43db4378ec6de104515f17": {
      "content": "&#x2303;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ctrl": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc7083923a61bc2f37e67108871f2839": {
      "content": "foreach ${1:x} {${2:#list}} {\n\t${0}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc70a9012f803ca2c7ae0c64f8bcc902": {
      "content": "mixed.concat()",
      "doc": "mixed.concat(schema: Schema)\n\nCreates a new instance of the schema by combining two schemas. Only schemas of the same type can be concatenated.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-concat",
      "matches": {
        "yup mixed concat": true
      },
      "source": "javascript/yup"
    },
    "bc7f4e41bc306b36042a2e7382263715": {
      "content": "self.${1:var_name} = kwargs.get('$1', ${2:None})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "kwg": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc884bbc2f419691e2adff6936cdc444": {
      "content": "border-right: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdr:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc956ea6d9dc7ed2edb92b743aa7052d": {
      "content": "IO.puts \"${0}\"",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "IO.puts",
      "matches": {
        "put": true
      },
      "source": "vim-snippets/snippets"
    },
    "bc9c3fe3448af399e74cea805d23ea95": {
      "content": "package {\n\timport flash.display.*;\n\timport flash.Events.*;\n\tpublic class Main extends Sprite {\n\t\tpublic function Main (\t) {\n\t\t\ttrace(\"start\");\n\t\t\tstage.scaleMode = StageScaleMode.NO_SCALE;\n\t\t\tstage.addEventListener(Event.RESIZE, resizeListener);\n\t\t}\n\t\tprivate function resizeListener (e:Event):void {\n\t\t\ttrace(\"The application window changed size!\");\n\t\t\ttrace(\"New width:  \" + stage.stageWidth);\n\t\t\ttrace(\"New height: \" + stage.stageHeight);\n\t\t}\n\t}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "bca3bb92a4f97ec7ea0f7e380a2b9fea": {
      "content": "${1:command} | Where-Object -FilterScript { $PSItem.${2:property} -${3:operator} '${4:expression}' } | Sort-Object -Property ${5:sortproperty}",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filtersort": true
      },
      "source": "vim-snippets/snippets"
    },
    "bcab0991c20ed078838dc48e1480229e": {
      "content": "_.invert(${object})",
      "doc": "var object = { 'a': 1, 'b': 2, 'c': 1 };\n\n_.invert(object);\n// => { '1': 'c', '2': 'b' }\n\nCreates an object composed of the inverted keys and values of `object`.\nIf `object` contains duplicate values, subsequent values overwrite\nproperty assignments of previous values.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-invert",
      "matches": {
        "lodash invert": true
      },
      "source": "javascript/lodash"
    },
    "bcac9a213cee1554b036cc3023324842": {
      "content": "enter-active-class=\"$1\"$0",
      "doc": "enter-active-class=''. Expects: string.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-enter-active-class",
      "matches": {
        "enteractiveclass": true,
        "vue enter-active-class": true
      },
      "source": "javascript/vue"
    },
    "bcae3d1501f6e00f7f01d6f39b7075c7": {
      "content": "$.makeArray(${0:obj});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "makearray": true
      },
      "source": "snippets/javascript"
    },
    "bcb00a47c269bc100c000420af9c07ff": {
      "content": "-webkit-box-shadow ${1:0} ${2:0} ${3:0} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:w+": true
      },
      "source": "vim-snippets/snippets"
    },
    "bcb11ecf48e77bd2dc5bcdcf640e8e3a": {
      "content": "@license ${1:MIT}$0",
      "doc": "",
      "filetype": "javascript-jsdoc",
      "grammar": "snu",
      "label": "@license Description",
      "matches": {
        "@li": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bcb44a53bef2259ffd260d110d8c8c01": {
      "content": "${1:obj}.html('${2:Some text <b>and bold!</b>}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "html": true
      },
      "source": "snippets/javascript"
    },
    "bcc2cd843ed6f13c49d488a4c9a7d68c": {
      "content": "-ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=${0:100})';",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "op:ms": true
      },
      "source": "vim-snippets/snippets"
    },
    "bcd190ca575127b89f3e9512e0b0023c": {
      "content": "for ${1:item} <- ${2:items}, into: ${3} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fori": true
      },
      "source": "vim-snippets/snippets"
    },
    "bcd28f2c8769f2b49c00758e39fa4d9a": {
      "content": "font-family ${0:'Monotype Corsiva','Comic Sans MS'},cursive",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "bce11ab8c494b51057939c60fefacdeb": {
      "content": "border-left-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-left-style: style (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bce1ce10d73aaaa1581139fc0b616c3e": {
      "content": "buf",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "Buffer",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "bce5de598b852c4a847e5d8d79b5488b": {
      "content": "background-origin border-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "bcea23ba013ebc87fc9f9f94945a4c9e": {
      "content": "for (my $${1:#:var} = 0; $$1 < ${2:#:expression}; $$1++) {\n\t${3:TARGET}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bced5146b2582b9119b5bdc48a705bc2": {
      "content": "${1:obj}.remove()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rem": true
      },
      "source": "snippets/coffee"
    },
    "bcedfb4bda226f9477e9d193e7a8f8b7": {
      "content": "t.rename(:${1:old_column_name}, :${2:new_column_name})\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Table column(s) rename",
      "matches": {
        "tre": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bcef69794ade3b28c7b563874dde595b": {
      "content": "....\n${0}\n....",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "literal block ... text ...",
      "matches": {
        "block-literal": true,
        "literalblock": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bcf60708c898f71f9a0a593547a4221d": {
      "content": "width: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "bcfc4174d5af7ddf048029f6cba28cfb": {
      "content": "switch (${1:expr}) {\n\tcase ${2:value}:\n\t\treturn $0;\n\tdefault:\n\t\treturn;\n}",
      "doc": "switch case",
      "filetype": "base",
      "grammar": "lsp",
      "label": "switch-case",
      "matches": {
        "base switch case": true
      },
      "source": "javascript/base"
    },
    "bd0127bc30329c417a4b99b04e20362f": {
      "content": "<br>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "br": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bd0e26912460392293712f77718bd5d7": {
      "content": "$this->shouldThrow(${1:'\\Exception'})->during${2:Method}(${3:'$arg'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldThrow('\\Exception')->duringXYZ($arg)",
      "matches": {
        "sthrowm": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bd11180f9d5ed1fc342cbd400cef2508": {
      "content": "before_destroy $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "before_destroy",
      "matches": {
        "befd": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bd12e475f9c37e854082143573aa0dbc": {
      "content": "font-family ${0:Helvetica,Arial},sans-serif",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:ss": true
      },
      "source": "vim-snippets/snippets"
    },
    "bd20b9838b397b4b87f088239e31aac0": {
      "content": "case ${1}:\n\t${0}\nbreak;",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "bd3bb3074c557e712dee3a929545aa49": {
      "content": "get_digit:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "getdigit": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bd3e2630eb8edd5ab58e9050860d52df": {
      "content": "object ${1:name}${2:(arg)}${3: extends }${4: with} ${0:}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "object": true
      },
      "source": "vim-snippets/snippets"
    },
    "bd470c1aa8ed6154a87277f1d5c5f487": {
      "content": "page-break-before: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "bd4a9ae765c88fca6e1d28ee7bfd9638": {
      "content": "try {\n\t${1:${VISUAL}}\n} catch (error:ErrorType) {\n\t${2}\n} finally {\n\t${0}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "bd51d735353305c78d1c744fa50f5128": {
      "content": "<kbd>${0}</kbd>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "kbd": true
      },
      "source": "vim-snippets/snippets"
    },
    "bd5b960176e5ded8e9984a5c31204aa4": {
      "content": "wordwrap(width=${1:79}, break_long_words=${2:True})",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "wordwrap",
      "matches": {
        "wordwrap": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bd5da6434acb28fc9725ef99aa52ed2a": {
      "content": "watch: {\n\t${1:data}: {\n\t\timmediate: ${2:true},\n\t\tdeep: ${3:true},\n\t\thandler(${4:newValue}, ${5:oldValue}) {\n\t\t\t${0}\n\t\t}\n\t}\n},",
      "doc": "vue watcher with options",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-watchers-with-options",
      "matches": {
        "vue watchers with options": true,
        "vwatcher-options": true
      },
      "source": "javascript/vue"
    },
    "bd6855d143ee36285ac8468a39fa60ad": {
      "content": "id=\"$1\" name=\"${2:$1}\"",
      "doc": "",
      "filetype": "html_minimal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "idn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bd721c4bc9e4987146c726e4b86ae2f9": {
      "content": "unless ${1} {\n\t${2}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unless": true
      },
      "source": "vim-snippets/snippets"
    },
    "bd75332ab7213a7220781081230e4f79": {
      "content": "} else if (${1:#:condition}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elseif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bd75a6375258528dac31a7a3f297b8a2": {
      "content": "<script src=\"${1}\"${2: defer}></script>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "js",
      "matches": {
        "scriptsrc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bd7cc3d1f52403758860586e9d9fb320": {
      "content": "_.matches(${source})",
      "doc": "var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n\n_.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n// => [{ 'a': 4, 'b': 5, 'c': 6 }]\n\nCreates a function that performs a partial deep comparison between a given\nobject and `source`, returning `true` if the given object has equivalent\nproperty values, else `false`.\n\n**Note:** The created function is equivalent to `_.isMatch` with `source`\npartially applied.\n\nPartial comparisons will match empty array and empty object `source`\nvalues against any array or object value, respectively. See `_.isEqual`\nfor a list of supported value comparisons.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-matches",
      "matches": {
        "lodash matches": true
      },
      "source": "javascript/lodash"
    },
    "bd83e8e8aa070a235d27f62d9a149e98": {
      "content": "try:\n  ${1:pass}\nfinally:\n  ${2:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "try: ... finally: ...",
      "matches": {
        "tryfinally": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bd846c6c1fe41adad1901aa7659c63c4": {
      "content": "Element Should Be Visible    ${${1:locator}}    ${2:${optional message}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Element Should Be Visible",
      "matches": {
        "esbv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bd86fccd53e0ec08489e703ec5289b7c": {
      "content": "__import__('pdb').set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pdb": true
      },
      "source": "vim-snippets/snippets"
    },
    "bd8c1f97a2a560d3792a2d7b25358aaf": {
      "content": "create unique index ${1:name} on ${2:table}(${0:column});",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "uind": true
      },
      "source": "vim-snippets/snippets"
    },
    "bd93e9e85553be0b1e9c85e8c3d68598": {
      "content": "{% elseif ${1} %}\n\t${0:TARGET}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% elseif ... %} ...",
      "matches": {
        "elif": true,
        "elseif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bd9416265b14c00eb5b36bd0a932ddcc": {
      "content": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
      "doc": "DEPRECATED!!!. Invoked immediately before rendering when new props or state are being received.",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-componentwillupdate",
      "matches": {
        "cwup": true,
        "react componentwillupdate": true
      },
      "source": "javascript/react"
    },
    "bd9a9041acc46f39e2c38bb0dac2e484": {
      "content": "hue(${0:color});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hue": true
      },
      "source": "vim-snippets/snippets"
    },
    "bd9d62ac49a2c574b1c31ae53aee4a19": {
      "content": "<%= fields_for :${1:model}, @$1 do |${2:f}| %>\n\t${0}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fields": true
      },
      "source": "vim-snippets/snippets"
    },
    "bda1b7db8b312ba05ebc0947b4fadbc0": {
      "content": "import { motion, AnimatePresence } from \"framer-motion\"",
      "doc": "",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-animate-presence-import",
      "matches": {
        "animate-presence": true,
        "framer-motion import animate-presence": true
      },
      "source": "javascript/framer-motion"
    },
    "bdaf4812fa1b55561e25ebe308a8b2ae": {
      "content": "echo CHtml::passwordField('${1:name}', '${2:value}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhpf": true
      },
      "source": "vim-snippets/snippets"
    },
    "bdb47d2386a9eae315f3cd334c76fccc": {
      "content": "else if ($1)\n{\n\t$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "else if",
      "matches": {
        "elseif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bdc01dd16c0c9f70fb8ba426a4d3d217": {
      "content": "text-emphasis: disc",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:ds": true
      },
      "source": "vim-snippets/snippets"
    },
    "bdc2a07c0ea3b039ada3b90b0c907122": {
      "content": "border-bottom-style: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "bdc47f98fe2417b7223edbee04cb5b25": {
      "content": "array.required()",
      "doc": "array.required(message?: string | function): Schema\n\nThe same as the mixed() schema required, except that empty arrays are also considered 'missing' values.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "array-required",
      "matches": {
        "yup array required": true
      },
      "source": "javascript/yup"
    },
    "bdc5a3fafa4d0ba8e50410f765f0e09f": {
      "content": "justify-content center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "bdc724ef13e1962a29f9df3d6ec79b84": {
      "content": "<legend>${0}</legend>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "legend": true
      },
      "source": "vim-snippets/snippets"
    },
    "bdc8f083df686b208e0b26a95d05865b": {
      "content": "expect(${1:target}).not.toBeTruthy()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect not to be truthy (coffee)",
      "matches": {
        "nott": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bdca1fd033d031942ec1f05562bbe59d": {
      "content": "text-shadow: ${1:0} ${2:0} ${3:0} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tsh+": true
      },
      "source": "vim-snippets/snippets"
    },
    "bdce09be3fe1f21a3a2378eb0bad7ae0": {
      "content": "collection do\n\t${1:get :${2:action}}\n\t${3:put :${4:action}}\n\t${5:post :${6:action}}\n\t${7:delete :${8:action}}\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "collection routes",
      "matches": {
        "col": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bdd1f27928f351cc4c741b8a2432fbb5": {
      "content": "_.filter(${collection}, ${predicate})",
      "doc": "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n_.filter(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `_.matches` iteratee shorthand.\n_.filter(users, { 'age': 36, 'active': true });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, ['active', false]);\n// => objects for ['fred']\n\n// The `_.property` iteratee shorthand.\n_.filter(users, 'active');\n// => objects for ['barney']\n\nIterates over elements of `collection`, returning an array of all elements\n`predicate` returns truthy for. The predicate is invoked with three\narguments: (value, index|key, collection).\n\n**Note:** Unlike `_.remove`, this method returns a new array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-filter",
      "matches": {
        "lodash filter": true
      },
      "source": "javascript/lodash"
    },
    "bdd5e7218b057232b59f627b7ceb28ff": {
      "content": "reversible do |dir|\n\tdir.up do\n\t\t${0}\n\tend\n\tdir.down do\n\tend\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "reversible do |dir| ... dir.up .. dir.down .. end",
      "matches": {
        "mrev": true
      },
      "source": "vim-snippets/snippets"
    },
    "bddebe743f7727ae330a57f91123beeb": {
      "content": "else if (${1:#:condition})${0:TARGET}",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "else if ()",
      "matches": {
        "elseif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bde6ff46b904e5f9e1c652ac08fbdedc": {
      "content": "use:action={${1:parameters}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-use-parameters",
      "matches": {
        "svelte use parameters": true,
        "svupar": true
      },
      "source": "javascript/svelte"
    },
    "bde7f8ae41e8a2c0d5e7f6b91b6ea866": {
      "content": "gl.glGenLists(${0:1})",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl gen lists",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "bded48b0ca38cf58be084cf07295d1bd": {
      "content": "printAsBitmapNum(${1:#:level}, ${2:#:type});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bdf0ace18c915b46217938f44363888d": {
      "content": "void mouseReleased(){\n\t${0}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mouseReleased": true
      },
      "source": "vim-snippets/snippets"
    },
    "bdf3fe5b613b7def93164999105218ef": {
      "content": "@mastersthesis{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    school = {${4}},\n    year = {${5}},\n    memo = {address, month, note},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@mastersthesis": true,
        "mastersthesis": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "be08b20feee02fa640b72c3ce9ac3527": {
      "content": "const (\n\t${1:NAME} ${2:Type} = ${3:value}\n\t${0}\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "const ( ... )",
      "matches": {
        "cons": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "be162d44538c7972f3f915429e4d750b": {
      "content": "casez (${1:/* variable */})\n\t${2:/* value */}: begin\n\t\t${3}\n\tend\n\tdefault: begin\n\t\t${4}\n\tend\nendcase",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "casez": true
      },
      "source": "vim-snippets/snippets"
    },
    "be17dbaa82bd5109c3d5ab0ff1036907": {
      "content": "validates_numericality_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:is not a number}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_numericality_of",
      "matches": {
        "vn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "be1dd2cf739f0f1049c4597d49398747": {
      "content": "| replace: '${1:target}', '${2:replace}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "replace": true
      },
      "source": "vim-snippets/snippets"
    },
    "be25ae4eabcef2c45338b44115ae0b53": {
      "content": "align-items: flex-start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "be2e88630439ca4ef705797e3d91acd3": {
      "content": "${1:slice} = append($1, ${0:value})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "a = append(a, value)",
      "matches": {
        "ap=": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "be32844e2feec23a2685d1ca0ff7a9c2": {
      "content": "for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {\n\t${5}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forr": true
      },
      "source": "vim-snippets/snippets"
    },
    "be39c3d416522947fe2e844f8428a7f5": {
      "content": "def __enter__(self):\n\t${1:pass}\ndef __exit__(self, exc_type, exc_value, traceback):\n\t${2:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "context manager methods",
      "matches": {
        "context": true
      },
      "source": "vim-snippets/snippets"
    },
    "be445f756d01fb36abca71f321b57d49": {
      "content": "join:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "join": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "be4655ba35a606a86c837ba5440f57c5": {
      "content": "_.lte(${value}, ${other})",
      "doc": "_.lte(1, 3);\n// => true\n\n_.lte(3, 3);\n// => true\n\n_.lte(3, 1);\n// => false\n\nChecks if `value` is less than or equal to `other`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-lte",
      "matches": {
        "lodash lte": true
      },
      "source": "javascript/lodash"
    },
    "be4796dd462bc0a2c8222e3de4fcda3a": {
      "content": "display: flex",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "be498964d9194c600362044cae7cc0ea": {
      "content": "package ${1} is\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "package",
      "matches": {
        "pac": true
      },
      "source": "vim-snippets/snippets"
    },
    "be513f52b56cd6f8799f34c30c185f9a": {
      "content": "t.string :${1:title}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.string (tcs)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "be5a2cdcff663b0e5937c9fe1a876765": {
      "content": "<%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@page": true
      },
      "source": "vim-snippets/snippets"
    },
    "be5e162d6c3a92a20d856a66b06f254e": {
      "content": "(${1:args}) =>\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bfun": true
      },
      "source": "snippets/coffee"
    },
    "be6d4298b2edde72d9e9c870d1ec141a": {
      "content": "width: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w": true
      },
      "source": "vim-snippets/snippets"
    },
    "be76d72fca7a3b2f1b3704c402063b13": {
      "content": "@enter=\"$1\"$0",
      "doc": "@enter=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-enter",
      "matches": {
        "enterevent": true,
        "vue enter": true
      },
      "source": "javascript/vue"
    },
    "be77320e0523e48c1b0bbf3079413396": {
      "content": "after :${1:each} do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aft": true
      },
      "source": "vim-snippets/snippets"
    },
    "be7c53b899ddb073ad3649f4f5ba315f": {
      "content": "import React, { useEffect } from 'react'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React, {useEffect}",
      "matches": {
        "imre": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "be7d57712e76931291fa4ef08914c32c": {
      "content": "text-emphasis: disc;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:ds": true
      },
      "source": "vim-snippets/snippets"
    },
    "be7ef640ff4a1c7e43983378b5b4dbb5": {
      "content": "$ENV{TEST_METHOD} = '${0:regex}';",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tmeths": true
      },
      "source": "vim-snippets/snippets"
    },
    "be8c2523b8a48d0e5cf3586326b16f50": {
      "content": "== ${1} ==\n${2}",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "==": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "beb48f934c3e5cc33e4060fac9cf5d03": {
      "content": "_.defaults(${object}, ${sources})",
      "doc": "_.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n\nAssigns own and inherited enumerable string keyed properties of source\nobjects to the destination object for all destination properties that\nresolve to `undefined`. Source objects are applied from left to right.\nOnce a property is set, additional values of the same property are ignored.\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-defaults",
      "matches": {
        "lodash defaults": true
      },
      "source": "javascript/lodash"
    },
    "beb519afc40dae230922acbd02dce4ad": {
      "content": "{% for ${1} in ${2} %}\n\t${0}\n{% endfor %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "bebe06263d8aff1c339d48a423a26523": {
      "content": "{% comment %}${1:#:comment}{% endcomment %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comment": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bec1e4cd919e96620d1a884cb7525905": {
      "content": "{:then ${1:value}}\n\t${2: <!-- content when promise was fulfilled -->}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-then-block",
      "matches": {
        "svelte then": true,
        "svthen": true
      },
      "source": "javascript/svelte"
    },
    "bec89077625aea5a767a91ac5a5336bc": {
      "content": "${1:obj}.keypress(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "kpress": true
      },
      "source": "snippets/javascript"
    },
    "bee46f6615b113982ea08fe71f4649fb": {
      "content": "(for/list ([${1}])\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "for/list",
      "matches": {
        "forl": true
      },
      "source": "vim-snippets/snippets"
    },
    "beea666c9e3c7e474d318b4afcfcf94d": {
      "content": "module type ${1} = {\n\t${0}\n};",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "modty": true
      },
      "source": "vim-snippets/snippets"
    },
    "bef3a0d581852194b4d00c338219dee2": {
      "content": "border-style: inset",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf022219927f7142a44ae6c3dcae05b2": {
      "content": ":last-child",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":lc": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf026207d852d7ce661116e0e327c7a4": {
      "content": "<%= render \"${1:index}.html\", ${2:var: @var} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "render": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf0267d6f12c60736ca91e090c82cdb1": {
      "content": "visibility: visible;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf062139077245e735e0144b98719d06": {
      "content": "IO.inspect(${1})",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "IO.inspect()",
      "matches": {
        "p": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bf06b3551fcc59232b4960077e04f262": {
      "content": "border: ${1:1px} ${2:solid} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bd+": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf0881c5ccf1d61313450b9fdac482df": {
      "content": "integer, intent(in)  ::",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "integer intent(in)",
      "matches": {
        "ini": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bf0ab573df9272a84abe8fff84b9924c": {
      "content": ".. error:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "error",
      "matches": {
        "error": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bf19f243d36fb629bd04c1476370e584": {
      "content": "Run Keyword    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword",
      "matches": {
        "rk": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bf2373aeeb845dc62bbe49c4c2260339": {
      "content": "\\begin{itemize}\n\t\\item ${1:TARGET}\n\\end{itemize}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{itemize} \\itemize": true,
        "itemize": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bf237c499a17792ef6bc666d35115a76": {
      "content": "overflow: visible",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf24e39907464292cb5c1a472f924bb6": {
      "content": "string toString() @safe const pure nothrow\n{\n\t$1\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "toString (toString)",
      "matches": {
        "toString": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bf33a0f1c562f45c761adce61c8b6585": {
      "content": "#endinitclip",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ec": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bf35c54df56a406700dd96679f9a0ebd": {
      "content": "this.state.$0",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentState",
      "matches": {
        "state": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "bf37e9d43f06d44f088554e42692eabe": {
      "content": "overflow-y hidden",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf3fc44f666758b0a407f5ae79b36001": {
      "content": "display: table-row-group;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbrg": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf43756186e95a50e861c9c4df4d8285": {
      "content": "slot-scope=\"$1\"$0",
      "doc": "Used to denote an element or component as a scoped slot. The attribute’s value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for scope in 2.5.0+.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-slotscope",
      "matches": {
        "slotscope": true,
        "vue slotscope": true
      },
      "source": "javascript/vue"
    },
    "bf4410de4bf9ff1d669f7e694874dab8": {
      "content": "\\\\begin{figure}\n\\\\begin{center}\n\t\\\\includegraphics[scale=${1}]{Figures/${2}}\n\\\\end{center}\n\\\\caption{${3}}\n\\\\label{fig:${4}}\n\\\\end{figure}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "figure environment (includegraphics)",
      "matches": {
        "fig": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf48c34346030aaff9d9dc3c6a9ee1a7": {
      "content": "for ${1:#:key}, ${2:#:value} of ${3:#:object}\n  ${0:TARGET}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "foro": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bf48caf16b6244808efafbc7dc94ffdf": {
      "content": "$${1:arrayName} = ['${2}' => ${3}];",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$... = ['' => ]",
      "matches": {
        "array": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf4c4a411f53f571a6c6207f43f4aeeb": {
      "content": "else {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "else",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf646d42c1575f9ad97f8c37af8e0df7": {
      "content": "$this->${1:method}()->shouldNotMatch(${2:'/wizard/i'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotMatch('/wizard/i')",
      "matches": {
        "snmatch": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "bf6902cefd1db19edcfd724c6ea41fae": {
      "content": "$this->redirect(array('${1:controller}/${0:action}'));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yre": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf742d6b61431c327982e04662963f7f": {
      "content": "<xsl:otherwise>${0}\n</xsl:otherwise>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "otherwise": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf7ae1e24f6afa2beeb7a8f2eb458b86": {
      "content": "if (${1:#:condition}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "if () {}",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bf85e9f7a431bc9ec873d90ef95b19e3": {
      "content": "this.route.paramMap\n\t.pipe(switchMap(params => params.get('id')), tap(id => (this.id = +id)))\n\t.subscribe(id => {$1});\n$0",
      "doc": "Angular - subscribe to routing parameters",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "routing-params-subscribe",
      "matches": {
        "a-route-params-subscribe": true,
        "angular routing params subscribe": true
      },
      "source": "javascript/angular"
    },
    "bf89f3a11b2bab5fc54ed2bd6ffc9457": {
      "content": "append(${1:slice}, ${0:value})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "append(slice, value)",
      "matches": {
        "ap": true
      },
      "source": "gosnippets/snippets"
    },
    "bf8fa0e54ba0c62ebce180cdb1ddf070": {
      "content": "vertical-align bottom",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf92b43d2b5e146acd88f95cecc4ccde": {
      "content": "background: #${1:fff} url(${2}) ${3:0} ${4:0} ${5:no-repeat};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg+": true
      },
      "source": "vim-snippets/snippets"
    },
    "bf95e24e6fd45282b226d94adf4e5082": {
      "content": "compile = (tElement, tAttrs, transclude) ->\n\t(scope, element, attrs) ->\n\t\t${1}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngdcf": true
      },
      "source": "snippets/coffee"
    },
    "bf98941fd83fb911f4749b0ab00ef781": {
      "content": "${1:obj}.serializeArray()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "serializea": true
      },
      "source": "snippets/coffee"
    },
    "bfabdb994ed21e0423cf4bbbef959442": {
      "content": "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useReducer",
      "matches": {
        "useReducer": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "bfb29b8e7351b6159941cb85b295aa45": {
      "content": "export ${0}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "bfc0730a122cccb61ede2a05f5e514b9": {
      "content": "console.log(JSON.stringify(${1:TARGET}, null, 2));",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jsc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bfc2a9c81a8ce6a14d708582a0834df4": {
      "content": "${1:name}\tdate\t${3:default sysdate}\t${0:not null}",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dcol": true
      },
      "source": "vim-snippets/snippets"
    },
    "bfc3d7b3e39b19d197da92839a41979d": {
      "content": "export default (${1:params}) => {\n\t$0\n}\n",
      "doc": "Export default function in ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportDefaultFunction",
      "matches": {
        "edf": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "bfc5b44fbbcea724b6e5233c8bb537d1": {
      "content": "if (${1})\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "bfc7fb784160144f4e4446dcd8f8c83f": {
      "content": "background-attachment: fixed;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bga:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "bfcd2b85939ee2382824f461ac412a79": {
      "content": "@empty(${1})\n    ${2}\n@endempty",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@empty ... @endempty",
      "matches": {
        "empty": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "bfe0bcd55ecb434fcd45d64416e43221": {
      "content": "if ${1} {\n\t${2}\n}\nelse {\n\t${3}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "bfeadf9b81dfe2624c4c4de1d1d8ad85": {
      "content": "$.hasData('${0:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hasd": true
      },
      "source": "snippets/coffee"
    },
    "c000685e55c320d78b861c86fcc32d7f": {
      "content": "console.log ${1}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "log": true
      },
      "source": "vim-snippets/snippets"
    },
    "c002ccab50d181c4c4bf33af26bbad31": {
      "content": "list-style-type: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0037907becdfae10c03aa5c9edf559f": {
      "content": "<b>${1:TARGET}</b>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c0110a0a2d041247d9554772517abaf6": {
      "content": "border-top-left-radius: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtlrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0292a80cd707fd8029c3927d18c73bb": {
      "content": "int opCmp($1 rhs) @safe const pure nothrow\n{\n\t$2\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "opCmp (opCmp)",
      "matches": {
        "opCmp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c02f64cd747eb152b4c093c77d974f7c": {
      "content": "grid-template-rows: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gtr": true
      },
      "source": "vim-snippets/snippets"
    },
    "c03076c949947a4daba8da5cd6b00ec7": {
      "content": "foreach(${1:item} ${2:items})\n\t${3}\nendforeach($1)",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "foreach() endforeach()",
      "matches": {
        "foreach": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c032e543bd638f7d6e43c3d0179f5e65": {
      "content": "console.error(${1:object})",
      "doc": "Displays a message in the console and also includes a stack trace from where the method was called",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleError",
      "matches": {
        "cer": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c03877403eb7c339770f04e125ae9af7": {
      "content": "@leave-cancelled=\"$1\"$0",
      "doc": "@leave-cancelled='' (v-show only)",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-leave-cancelled",
      "matches": {
        "leavecancelledevent": true,
        "vue leave-cancelled": true
      },
      "source": "javascript/vue"
    },
    "c0490ff5c04f297255a1b09908b3823f": {
      "content": "border-left-color: #${1:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlc": true
      },
      "source": "vim-snippets/snippets"
    },
    "c04b748780e486641d77b4df90376dba": {
      "content": "${1:move }|$2| {\n\t$3\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Closure, anonymous function (block)",
      "matches": {
        "|}": true
      },
      "source": "vim-snippets/snippets"
    },
    "c050654d21519a68e7d48a62dc2f1d4e": {
      "content": "${1:#:class_name}.prototype.${2:#:method_name} = function(${3:#:first_argument}) {\n  ${0:TARGET}\n};",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "proto": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c051c38c5f2d736913cba8f8fa777d84": {
      "content": "$this->assertContains(${1:$needle}, ${2:$haystack});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertContains($needle, $haystack)",
      "matches": {
        "ascon": true
      },
      "source": "vim-snippets/snippets"
    },
    "c052c1ca2e44eed74f358d97855a76b6": {
      "content": "{% raw ${0:expression} %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "raw": true
      },
      "source": "vim-snippets/snippets"
    },
    "c05306927030a9e0acdaa157f8995403": {
      "content": "protected string ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps|": true
      },
      "source": "vim-snippets/snippets"
    },
    "c05a51b581f2a5c68d67f37c28ed09ee": {
      "content": "dynamic_cast<${1:unsigned}>(${2:expr})${3}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dca": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0610d5f38b775f27937cf3b8d706e0d": {
      "content": "attach(${1:frame})",
      "doc": "Attach",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "att",
      "matches": {
        "attach": true
      },
      "source": "vscode-R/snippets"
    },
    "c06222448fae59d7ee36ea4fd4e30160": {
      "content": "DELETE FROM ${1:table}\nWHERE ${2:condition};",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "DELETE FROM ... WHERE ...",
      "matches": {
        "DELETE_DATA": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c06a697c1e2e71590dd7d20ae4c59185": {
      "content": "JSON.parse(${0:jstr});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jsonp": true
      },
      "source": "snippets/javascript"
    },
    "c06d9c56f535cccd97d3dd17e175e052": {
      "content": "elements.each('${1://Xpath}') do |${2:node}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xpa": true
      },
      "source": "vim-snippets/snippets"
    },
    "c072ca5036e7c23ceb178c06781931e3": {
      "content": "__import__('ipdb').set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ipdb": true
      },
      "source": "vim-snippets/snippets"
    },
    "c073db7f4ef333e1d65d96fd63a6f45a": {
      "content": "${1:obj}.prop('${2:property name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prop": true
      },
      "source": "snippets/coffee"
    },
    "c0873c9404d7ce40852920e616042ea9": {
      "content": "try {\n}catch(${1}) {\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "c08e58b1d6c11187d41322772cfc3b90": {
      "content": "background-position: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "backposition": true,
        "bp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c094d4eafb87f455a746a9b7ab358db1": {
      "content": "fmt.Printf(\"$1 = %+v\\n\", ${1:${VISUAL}})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Printf(...)",
      "matches": {
        "ff": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "c0983f2b7f3379734d9bb21ef44bb25c": {
      "content": "onClipEvent (${1}) {\n\t${0:TARGET}\n};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c0a70355e61f5b07f22736cb2ec49033": {
      "content": "use Data::Dump qw(dump);\nwarn dump ${1:variable}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dump": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0aa5b05c17375719723809ef64c63ce": {
      "content": "// @flow \nimport * as React from 'react';\ntype Props = {\n\t$0\n};\nexport const ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n};",
      "doc": "Creates a stateless React component with FlowTypes and ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "flowStatelessComponent",
      "matches": {
        "fsc": true
      },
      "source": "vscode-react/snippets"
    },
    "c0acf148190a4ff6efe72e4d3c05ee59": {
      "content": "useEffect(() => {\n\t${1}\n});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "useEffect",
      "matches": {
        "usee": true
      },
      "source": "snippets/javascript"
    },
    "c0b033ed8653100e02fd4441362a7863": {
      "content": "{% use \"${1}\" %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig use",
      "matches": {
        "use": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0b5339a4ea22af62ea1ff2a4306cc2c": {
      "content": "&#x21E5;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tab": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0b708697761459ea561b187bb60954f": {
      "content": "border-bottom: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdb:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0c313ba3d9f1a069829a6db45db505a": {
      "content": "beforeAll(() => {\n\t$0\n});",
      "doc": "beforeAll function is called once before all specs",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-beforeall",
      "matches": {
        "ba": true,
        "jest beforeall": true
      },
      "source": "javascript/jest"
    },
    "c0c9d02d952bef5faa02af466246a83a": {
      "content": "int choice = NSRunAlertPanel(@\"${1:Something important!}\", @\"${2:Something important just happend, and now I need to ask you, do you want to continue?}\", @\"${3:Continue}\", @\"${4:Cancel}\", nil);\nif(choice == NSAlertDefaultReturn) // \"${3:Continue}\"\n{\n\t${0};\n}\nelse if(choice == NSAlertAlternateReturn) // \"${4:Cancel}\"\n{\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alert": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c0c9ea659e21f0eae1c59ce503bd4423": {
      "content": "gl.glClearColor(${1:red}, ${2:green}, ${3:blue}, ${0:alpha});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl clear color",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0cb63e65293a63189e1cfbdc304868b": {
      "content": "$.isXMLDoc(${1:node})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isxml": true
      },
      "source": "snippets/coffee"
    },
    "c0cbdab4b1bc10a7e82dec253cb10381": {
      "content": "- binding.pry",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pry": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0d4f8e2550c91836822ab493886849c": {
      "content": "<dd class=\"${1}\">${0}</dd>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dd.": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0d62a00a85ed703dd809be2afd3bfa8": {
      "content": "|> IO.inspect",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "pipe to inspect",
      "matches": {
        ">i": true
      },
      "source": "vim-snippets/snippets"
    },
    "c0e55ba5e532b38400903eb9524b61c0": {
      "content": "do {\n    ${0:TARGET:code}\n} while (${1:#:condition});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true,
        "do_while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c0ecd62c548aa876809d9d50b54c4eac": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\nimport { ${0|ref,reactive,computed,readonly,watchEffect,watch|} } from '${1|vue,@vue/composition-api|}'\nexport default {\n\tsetup () {\n\t\t${2}\n\n\t\treturn {}\n\t}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>",
      "doc": "Base for Vue File Composition API with SCSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-single-file-component-v3",
      "matches": {
        "vue v3 base": true
      },
      "source": "javascript/vue"
    },
    "c101750b9cd43af928b65bdbab7b100e": {
      "content": "load(${1:file}, ${2:envir = ${3:parent.frame()}}, ${4:verbose = ${5:FALSE}})",
      "doc": "Load RData",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "loa",
      "matches": {
        "load": true
      },
      "source": "vscode-R/snippets"
    },
    "c105c5d2f0539c2c68ce5561c64d7959": {
      "content": "always_ff @(posedge ${1:clk}) begin ${2:: statement_label}\n\t${0}\nend $2",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alff": true
      },
      "source": "vim-snippets/snippets"
    },
    "c1074784380f374117ab63bc6034490a": {
      "content": "outline: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ol": true,
        "outline": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c10e577f9215dcbfb01b46a66b8e3c5a": {
      "content": "Double",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dbl": true
      },
      "source": "vim-snippets/snippets"
    },
    "c10f1cf2b21bd0f46f9f17174cd62ea4": {
      "content": "project(${1:project_name})\nset(${2:PROJECT}_VERSION_MAJOR 0)\nset($2_VERSION_MINOR 0)\nset($2_VERSION_TEENY 1)\nset(PACKAGE_VERSION \"${$2_VERSION_MAJOR}.${$2_VERSION_MINOR}.${$2_VERSION_TEENY}\")\ncmake_minimum_required(VERSION ${3:2.8})\n${0}",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "new_project": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c118929f59a12960901217b855d730e4": {
      "content": "overflow-style: scrollbar;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "c137ae2254777f7b4d7e38053910fcd8": {
      "content": "${1} := ${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "v := value",
      "matches": {
        ":": true
      },
      "source": "gosnippets/snippets"
    },
    "c13b1b2ce1cbe9da5fe56402a3c25d29": {
      "content": "@import '${0:TARGET}';",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "@import '...';",
      "matches": {
        "import": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c14a0b18e8d6133d91f744d03a6fc57a": {
      "content": "render layout: '${0:layoutname}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rl": true
      },
      "source": "vim-snippets/snippets"
    },
    "c14a72d877619a002f50242116178c7a": {
      "content": "begin\n    ${1:TARGET}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "begin ... end",
      "matches": {
        "be": true,
        "beginend": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c14f644faad58a77b5e5d0d579f44e05": {
      "content": "(${1:#:args}) =>\n  ${0:TARGET}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bfun": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c1590c13fa131fe3f82f95d1162434f7": {
      "content": "${1:public} int ${2} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi": true
      },
      "source": "vim-snippets/snippets"
    },
    "c165d1be86cc0b2266ca883fb4e28840": {
      "content": "export interface ${1:${TM_FILENAME_BASE}} {$0}",
      "doc": "",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "Export interface",
      "matches": {
        "expint": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c16c0279eeb42f811b48ad2d79c531c1": {
      "content": "PropTypes.oneOfType([\n\t$0\n]),",
      "doc": "An object that could be one of many types",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeOneOfType",
      "matches": {
        "ptet": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c16ebceb6575290f616a4437d32de3e3": {
      "content": "text-wrap: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw": true
      },
      "source": "vim-snippets/snippets"
    },
    "c16fc71d7420213e067e0cc03a39e41f": {
      "content": "_.matchesProperty(${path}, ${srcValue})",
      "doc": "var objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n\n_.find(objects, _.matchesProperty('a', 4));\n// => { 'a': 4, 'b': 5, 'c': 6 }\n\nCreates a function that performs a partial deep comparison between the\nvalue at `path` of a given object to `srcValue`, returning `true` if the\nobject value is equivalent, else `false`.\n\n**Note:** Partial comparisons will match empty array and empty object\n`srcValue` values against any array or object value, respectively. See\n`_.isEqual` for a list of supported value comparisons.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-matchesproperty",
      "matches": {
        "lodash matchesproperty": true
      },
      "source": "javascript/lodash"
    },
    "c1825c55ea0c7254f0d77b10384b299e": {
      "content": "internal int ${1} { get; protected set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi&|": true
      },
      "source": "vim-snippets/snippets"
    },
    "c18d480bc7ec28d42045082e8dbb299b": {
      "content": "// rotate, x-axis, y-axis, z-axiz\ngl.glRotatef(${1:angle}, ${2:x}, ${3:y}, ${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl rotate f",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "c192d137918593c4f6e8c87e73b1e3dd": {
      "content": "validates_format_of :${1:attribute}, with: /${2:^[${3:\\w\\d}]+\\$}/${4:, on: :${5:create}, message: \"${6:is invalid}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_format_of",
      "matches": {
        "vf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c1936049b4a4f5dd2faa8de85acde193": {
      "content": "<%= link_to '${1:link text...}', action: '${0:index}' %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lia": true
      },
      "source": "vim-snippets/snippets"
    },
    "c194bfa1b4d6e69cbe36b90e4790d8aa": {
      "content": "ci(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "ci conventional commit",
      "matches": {
        "ci": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c198dfe3baabebf30b8ba5a37cae3e62": {
      "content": "float32",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "float32",
      "matches": {
        "f3": true
      },
      "source": "vim-snippets/snippets"
    },
    "c199586cf997f6573d5c67cd311ad7f2": {
      "content": "try {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try_n": true,
        "try_without_catch_nor_finally": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c19dc3b4c2bf0672a742039d8ecf6cb0": {
      "content": "grid-row: ${1} / ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gr": true
      },
      "source": "vim-snippets/snippets"
    },
    "c1a115b7abf2c9aabb9869f1370e3ec9": {
      "content": "it.skip('${1:should }', () => {\n\t$0\n});",
      "doc": "creates an it block that will be skipped",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-it-skip",
      "matches": {
        "its": true,
        "jest it skip": true
      },
      "source": "javascript/jest"
    },
    "c1a333b05c4dc405d84caef3d472c543": {
      "content": "case ${1:#:expression} of\n\t${2:#:value} ->\n\t\t${3:TARGET}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "case ... of",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c1a897e69608a81567fd65c89db2bb80": {
      "content": "message(FATAL_ERROR \"${1}\")",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "message(FATAL_ERROR \"...\")",
      "matches": {
        "fatal_error_message": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c1b9bc124b856051fc4c8cae48a453d6": {
      "content": "[<${0:TARGET}>]",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "attribute [<..>]",
      "matches": {
        "att": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c1c0bff76fd3ce5aae007b2da5a21567": {
      "content": "list-style-type upper-roman",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:ur": true
      },
      "source": "vim-snippets/snippets"
    },
    "c1d0f598e58e3b3ad664d828392e74e2": {
      "content": "import React from 'react'\n\nfunction ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}\n",
      "doc": "Creates a React Functional Component with ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-functional-export-component",
      "matches": {
        "react component functional export": true,
        "rfce": true
      },
      "source": "javascript/react"
    },
    "c1d27edfb9280c923b68c3221e1238b0": {
      "content": "text-height ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th": true
      },
      "source": "vim-snippets/snippets"
    },
    "c1d633735fc95f3e63838973d1bcb9c3": {
      "content": "${1:#:action} unless ${2:#:condition}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c1da15f628c6f121a2a4380aacccb2b1": {
      "content": "font-emphasize-position: before",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "femp:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "c1da8ea21b9204e5da946eaf5e8e3656": {
      "content": "right: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r": true
      },
      "source": "vim-snippets/snippets"
    },
    "c1de695a73009886beaba81a00556022": {
      "content": "else\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "make",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "c1e16f31ad4ae0c745a55d49db8716eb": {
      "content": "<dt>${1}</dt>\n<dd>${2}</dd>\ndt+${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dt+": true
      },
      "source": "vim-snippets/snippets"
    },
    "c1f1713713b0d0ed61d825beb4dc3e1d": {
      "content": "import { store } from './store/index';",
      "doc": "import vuex store into main.js",
      "filetype": "vuex",
      "grammar": "lsp",
      "label": "vuex-import-store",
      "matches": {
        "vstore-import": true,
        "vuex import store": true
      },
      "source": "javascript/vuex"
    },
    "c1fd12b4bc99780b288f8a6c82516acc": {
      "content": "<th id=\"${1}\">${0}</th>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th#": true
      },
      "source": "vim-snippets/snippets"
    },
    "c1fdf7dfed95bd397c89466e19fb5e07": {
      "content": "public function test${1}()\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "public function testXYZ() { ... }",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "c1fec0cd2cfc1a1806225161e3304174": {
      "content": "${1:expression} unless ${2:condition};",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xunless": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2014e0990fa791fd55733ce4037a282": {
      "content": "class ${1:#:NAME} {\n  constructor(${2:#:Args}) {\n    ${3:#:TARGET}\n  }\n  ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "class NAME {...}",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c21254842e9982fe3e51bb3a1b3d821c": {
      "content": "| ${1} -> ${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "|": true
      },
      "source": "vim-snippets/snippets"
    },
    "c21279ae164f64239bcdc7017514e8db": {
      "content": "ReactDOM.createPortal(${1:child}, ${2:container});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "ReactDOM.createPortal",
      "matches": {
        "rdcp": true
      },
      "source": "snippets/javascript"
    },
    "c218cf10957c48eb9a2f61502958981c": {
      "content": "actions: {\n\t${1:updateValue}({commit}, ${2:payload}) {\n\t\tcommit($1, $2);\n\t}\n}",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vactions": true
      },
      "source": "vim-snippets/snippets"
    },
    "c21ec1439560a80ffd99d71551388c83": {
      "content": "flex: ${1:0} ${2:1} ${0:auto};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fx": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2227c7e2b12e4cd650825a10fda8abe": {
      "content": "File.open('${1:path/to/file.dump}', 'rb') { |${2:file}| Marshal.load($2) }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Ml": true
      },
      "source": "vim-snippets/snippets"
    },
    "c232aac5c9d1b0826a424bbd326ab7b0": {
      "content": "string.email()",
      "doc": "string.email(message?: string | function): Schema\n\nValidates the value as an email address via a regex.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-email",
      "matches": {
        "yup string email": true
      },
      "source": "javascript/yup"
    },
    "c2366652e24958cd83a3eb793c8a594d": {
      "content": "for (let ${1:prop} in ${2:object}) {\n\t${0:$2[$1]}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fori": true
      },
      "source": "snippets/javascript"
    },
    "c237ebec3b14a5cb185a949a937e2a2a": {
      "content": "redirect_to action:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to :action",
      "matches": {
        "rea": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c23afd0acaedad867ae1a7ad9b06dff0": {
      "content": "caption-side: top",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cps:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "c23bd1dca3bb658e181d8f37b83fb062": {
      "content": "-ifdef(TEST).\n${1}_test() ->\n\t${0}\n-endif.",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "itest": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2499f1858ea636714d1c24200cb7fa7": {
      "content": "for ${1:lowerbound} to ${2:upperbound}\n\t${0}\nend",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forto": true
      },
      "source": "vim-snippets/snippets"
    },
    "c24ad6f8f04ca462bfc46333955ac0d8": {
      "content": "_.unionWith(${arrays}, ${comparator})",
      "doc": "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.unionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n\nThis method is like `_.union` except that it accepts `comparator` which\nis invoked to compare elements of `arrays`. Result values are chosen from\nthe first array in which the value occurs. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-unionwith",
      "matches": {
        "lodash unionwith": true
      },
      "source": "javascript/lodash"
    },
    "c25b61dce9e80e365e36d3d113924def": {
      "content": "real, intent(out) ::",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "real intent(out)",
      "matches": {
        "reo": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c25c01cf7c375e5e405cfe57373226a1": {
      "content": "@unittest.skip(${1:skip_reason})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "skip unittests",
      "matches": {
        "sk": true
      },
      "source": "vim-snippets/snippets"
    },
    "c260f05a21b8e86b10ec9b5130339ee8": {
      "content": "_.isNil(${value})",
      "doc": "_.isNil(null);\n// => true\n\n_.isNil(void 0);\n// => true\n\n_.isNil(NaN);\n// => false\n\nChecks if `value` is `null` or `undefined`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isnil",
      "matches": {
        "lodash isnil": true
      },
      "source": "javascript/lodash"
    },
    "c26288bc42d5d7fdde18aaea9c89346a": {
      "content": "synchronized ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sy": true
      },
      "source": "vim-snippets/snippets"
    },
    "c268e62688571621797c077189f0b7c2": {
      "content": "after_validation :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mav": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2743ff1e94664f8a017da2daf4cd7ef": {
      "content": "process.stdout",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "stdout",
      "matches": {
        "stdout": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c27c1b42a435a43e4ca1ec7bb9884ca0": {
      "content": "${1:deferred}.then(${2:doneFilter}, ${3:failFilter}, ${4:progressFilter})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dpipe": true
      },
      "source": "snippets/javascript"
    },
    "c27f9ab1db849cb512527764aac01123": {
      "content": "{for $${1:var} in range(${2:rangeexpr})}\n\t$0\n{/for}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "for command",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c285a4b033c9ac90fcfe17ee07fc410d": {
      "content": "${1:FIELDNAME} = models.TextField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "TextField",
      "matches": {
        "mtext": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c2895345cd218448c5ee5aeae36a1e91": {
      "content": "{% tablerow ${1:item} in ${2:collection} cols: ${3:2} %}\n\t${0}\n{% endtablerow %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tablerow": true
      },
      "source": "vim-snippets/snippets"
    },
    "c292430cae89cc9b9caead7678622f6c": {
      "content": "grid-template-columns: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gtc": true
      },
      "source": "vim-snippets/snippets"
    },
    "c297a92346e0f08b3c20eb49e77c6a2b": {
      "content": "it { should set_the_flash('${0}') }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "issf": true
      },
      "source": "vim-snippets/snippets"
    },
    "c29893c439f7f6951545327282be0b17": {
      "content": "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\n\t${4}\n}",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2a5f058b6baf03b79f06b86f9cc0bc9": {
      "content": "${1:FIELDNAME} = models.SlugField(max_length=${2:50}${0:, blank=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slug": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2a7875c9e19a5c1eb13f1fe7a7dc73d": {
      "content": "_.isMatchWith(${object}, ${source}, ${customizer})",
      "doc": "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, srcValue) {\n  if (isGreeting(objValue) && isGreeting(srcValue)) {\n    return true;\n  }\n}\n\nvar object = { 'greeting': 'hello' };\nvar source = { 'greeting': 'hi' };\n\n_.isMatchWith(object, source, customizer);\n// => true\n\nThis method is like `_.isMatch` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with five\narguments: (objValue, srcValue, index|key, object, source).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-ismatchwith",
      "matches": {
        "lodash ismatchwith": true
      },
      "source": "javascript/lodash"
    },
    "c2ac7ec7e13a9acd8ea562ba6e6cb2d2": {
      "content": "Mouse Down On Image    ${1:${locator}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Mouse Down On Image",
      "matches": {
        "mdoi": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c2b0a4a5378732162a44cd213be89e63": {
      "content": "<main role=\"main\">\n\t${0}\n</main>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2b11df93a05b40fff7fb2839347347e": {
      "content": "for (int ${1:i} = 0; $1 < ${2}; $1++) {\n    ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "for (int x;...; x++) {}",
      "matches": {
        "fori": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c2b920ef87f8bba29f18e1310da2ef5a": {
      "content": "END {\n\t${0}\n}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "END { ... }",
      "matches": {
        "end": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2bfc33d77593002496eb5d7ffd9cb92": {
      "content": "Marshal.load(Marshal.dump(${1:obj_to_copy}))",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deec": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2d0d76d3b704679a01c0fb7a33e2895": {
      "content": "distance_of_time_in_words",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "distance_of_time_in_words",
      "matches": {
        "dotiw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c2dde113874e04c78677907b7468a6a7": {
      "content": "#lang racket",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#r": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2e19781f4614d154b76f1345516828a": {
      "content": "${1:FIELDNAME} = models.TimeField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "TimeField",
      "matches": {
        "mtime": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c2e3881aacc336cb45ab7e98e63fef6b": {
      "content": "mix : [ { ${1:block} : '${2:block}' } ],",
      "doc": "",
      "filetype": "javascript-bemjson",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mi": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2e4334170000a914b4e049dd0459b26": {
      "content": "| ceil",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ceil": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2ec0c9b88279f7ca4c676ba207fbbe7": {
      "content": "(* ${1}\n\t${0})",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "",
      "matches": {
        "*": true
      },
      "source": "vim-snippets/snippets"
    },
    "c2f55e56e1d7b99b6b241a0da21ffafe": {
      "content": ".. list-table:: ${1:Title}\n\t:header-rows: 1\n\t:stub-columns: 0\n\t* - ${0:R1C1}\n\t  - R1C2\n\t* - R2C1\n\t  - R2C2",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lis:": true
      },
      "source": "vim-snippets/snippets"
    },
    "c30168f715f6c05f0fe5a045217f5657": {
      "content": "class ${1:FORMNAME}(forms.Form):\n\n\t${2:# TODO: Define form fields here}",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Form",
      "matches": {
        "form": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c3063399e3f235a9b4b7e84ebef0725f": {
      "content": "import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport const mapStateToProps = state => ({\n\n})\n\nexport const mapDispatchToProps = {\n \n}\n\nexport const ${1:hocComponentName} = (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n\nexport default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "hocComponentWithRedux",
      "matches": {
        "hocredux": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c30fa0e302b4f505ad8b011fe8178c9d": {
      "content": "if err != nil {\n\treturn err\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error return",
      "matches": {
        "errn": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "c310e2b60a673cb874458ca5432e1643": {
      "content": "echo CHtml::encode(${0:text});",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhec": true
      },
      "source": "vim-snippets/snippets"
    },
    "c316465b3358fb52b655f83e9b56722b": {
      "content": "@#'",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "private": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c3225d936967e06876d2328c37d62dc6": {
      "content": "word-wrap: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow": true
      },
      "source": "vim-snippets/snippets"
    },
    "c323e5dde2a45f0de8b916961fb3fe5c": {
      "content": "@before-leave=\"$1\"$0",
      "doc": "@before-leave=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-before-leave",
      "matches": {
        "beforeleaveevent": true,
        "vue before-leave": true
      },
      "source": "javascript/vue"
    },
    "c3269333539bf582d7b7a13a08c046b5": {
      "content": "overflow auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "c330ea97a36529d8763a5b34d89c3127": {
      "content": "useEffect(() => {\n$0\n})",
      "doc": "Adds use effect",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useEffect",
      "matches": {
        "usf": true
      },
      "source": "vscode-react/snippets"
    },
    "c3318c8320247f309cc5088fbd7124ac": {
      "content": "import React from 'react';\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a stateless React component as a named function without PropTypes",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactStatelessFunction",
      "matches": {
        "rsf": true
      },
      "source": "vscode-react/snippets"
    },
    "c33256a9abb9da4ffeff931238a52ee1": {
      "content": "use feature 'switch';",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "c33813894ea5b9069b768c4c388bea0d": {
      "content": "(defmethod ${1:multifn} \"${2:doc-string}\" ${3:dispatch-val} [${4:args}]\n\t${0:code})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defm": true
      },
      "source": "vim-snippets/snippets"
    },
    "c338fcfdc112e39ef4779f0ec6fb6748": {
      "content": "border-fit: stretch;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "c33e9fff0985d62b7685f98d727d1dc3": {
      "content": "require(${1:}, quietly = TRUE)",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "req": true
      },
      "source": "vim-snippets/snippets"
    },
    "c3414b7daeeda102b5a0969695ccea9e": {
      "content": "catch (${1:Exception} ${2:e}) {\n    ${0:e.printStackTrace();}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "catch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c3422a8835bb6fbc8cdad3efb29ed6f1": {
      "content": "_.takeRight(${array}, ${n})",
      "doc": "_.takeRight([1, 2, 3]);\n// => [3]\n\n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n\n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.takeRight([1, 2, 3], 0);\n// => []\n\nCreates a slice of `array` with `n` elements taken from the end.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-takeright",
      "matches": {
        "lodash takeright": true
      },
      "source": "javascript/lodash"
    },
    "c345d147be649dc6753d35bf80a6a53f": {
      "content": "after_find :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maf": true
      },
      "source": "vim-snippets/snippets"
    },
    "c346cd0b8a778f850c89c38f7ee673bb": {
      "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ${1:${TM_FILENAME_BASE}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React Arrow Function Component with ES7 module system with PropTypes",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactArrowFunctionComponentWithPropTypes",
      "matches": {
        "rafcp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c350d8746021a97e4f458f31a9ee6721": {
      "content": "${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {\n  return ${2:name}${5:.id};$0\n}",
      "doc": "TrackBy Function",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "trackby-function",
      "matches": {
        "a-trackby": true,
        "angular track by function": true
      },
      "source": "javascript/angular"
    },
    "c35eb54c08ac507a9ea812f8e2fc616c": {
      "content": "<input type=\"email\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:email": true
      },
      "source": "vim-snippets/snippets"
    },
    "c360f26b6c5df842f5ef216b6e3948f8": {
      "content": "${1:obj}.fadeOut('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadeout": true
      },
      "source": "snippets/javascript"
    },
    "c36aa3dc2e05011d250102bec8c51a8e": {
      "content": "grid-auto-flow ${1:row} ${0:dense}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf+": true
      },
      "source": "vim-snippets/snippets"
    },
    "c36edcd0752059530ff2a3dca5fb9c81": {
      "content": "else if (${1:#:condition}) {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "else () {}",
      "matches": {
        "elseif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c3719628035d01b3b71fd4a47fb79b3a": {
      "content": "import std.stdio, std.string, std.array;\nimport std.traits, std.conv, std.algorithm;\nimport std.math, std.regex;",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "theusual": true
      },
      "source": "vim-snippets/snippets"
    },
    "c37a855742d758ee9c57e32481bde215": {
      "content": "display: ${1:none};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "display",
      "matches": {
        "d": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c38293a7af4218f4bc0adb7383b378c5": {
      "content": "t.string :${1:title}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create string column",
      "matches": {
        "tcs": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c388fbcb2538d40b0dfe0d076cbb9ead": {
      "content": "place-self ${1:stretch} ${0:stretch}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps+": true
      },
      "source": "vim-snippets/snippets"
    },
    "c38a647d69d289b52f21fc11e33a006a": {
      "content": "fmt.Println(\"${1:s}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Println()",
      "matches": {
        "pl": true
      },
      "source": "vim-snippets/snippets"
    },
    "c390ca5df664d95f05b0a2b5da7d7f7c": {
      "content": "#lang typed/racket",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#tr": true
      },
      "source": "vim-snippets/snippets"
    },
    "c394943c412d92b828af70317812a985": {
      "content": "@selector(${1:#:method}:)",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sel": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c39cc4d0e0a3e46c5cca69a5796bcfca": {
      "content": "console.info(${1:object});",
      "doc": "Displays a message in the console but also displays a blue information icon along with the logged message",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleInfo",
      "matches": {
        "cin": true
      },
      "source": "vscode-javascript/snippets"
    },
    "c39e08b5acf08302a9c0f64f8bc356da": {
      "content": "Wait Until Element Is Visible    ${1:${locator}}    ${2:${timeout=None}}    ${3:${error=None}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Wait Until Element Is Visible",
      "matches": {
        "wueiv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c39f80dbe991896ae483400fe0279476": {
      "content": "padding-left: ${1:20px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "padding-left: length (margin)",
      "matches": {
        "padding": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c3a35f2d4b35a5feccfcbfb38665ee06": {
      "content": "${1:moon} = require '$1'",
      "doc": "",
      "filetype": "moon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "require": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c3be41e024ce40351d13bb374ab0ca64": {
      "content": "beforeEach(() => {\n\t${0:${VISUAL}}\n});",
      "doc": "",
      "filetype": "javascript-mocha",
      "grammar": "snu",
      "label": "beforeEach(() => { ... })",
      "matches": {
        "befe": true
      },
      "source": "vim-snippets/snippets"
    },
    "c3c167d5c2d6ea21fe08bd3427a56e19": {
      "content": "<dd id=\"${1}\">${0}</dd>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dd#": true
      },
      "source": "vim-snippets/snippets"
    },
    "c3c429ba46094f1e7eb198c3cf26cff4": {
      "content": "font-family: ${0:Helvetica,Arial},sans-serif",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:ss": true
      },
      "source": "vim-snippets/snippets"
    },
    "c3c6926173fe744a315091c24521eeee": {
      "content": "$1::-moz-selection,\n$1::selection {\n\tcolor: ${2:inherit};\n\tbackground: ${3:inherit};\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "selection",
      "matches": {
        "selection": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c3cb78992a495c681831cf7a08a845e4": {
      "content": "page-break-inside: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbi": true
      },
      "source": "vim-snippets/snippets"
    },
    "c3cdd50c7307062a3b8e19a668559449": {
      "content": "unless (${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unless": true
      },
      "source": "vim-snippets/snippets"
    },
    "c3de9f56aa87c8d4fc96f5b2aed4c467": {
      "content": "box-shadow: ${1:${2:offset-x} ${3:offset-y} ${4:blur} ${5:spread} ${6:color}};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "box-shadow: color-hex x y blur (text)",
      "matches": {
        "bxsh": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c3defc27e7a93d4be1490ff396fa4be3": {
      "content": "call(${1:#:frame});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ca": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c3e59246c81df86eb5a790a8dde6b564": {
      "content": "import React, { FC } from \"react\"\n\ninterface ${1:function_name}Props {${4:props_types}}\n\nexport const ${1:function_name}: FC<${1:function_name}Props> = (${2:props}) => ${3:function_body}",
      "doc": "",
      "filetype": "typescript",
      "grammar": "snu",
      "label": "react functional component",
      "matches": {
        "rfc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c3e782e40a439e057805f2b1003e27ed": {
      "content": "dbg!(${0:${VISUAL}})",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "dbg! debugging macro",
      "matches": {
        "d": true
      },
      "source": "vim-snippets/snippets"
    },
    "c3ec7b6dfcb8a93444a44ce8f99c416a": {
      "content": "assert(${1:false}, \"${2:TODO}\");\n",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "assert (ass)",
      "matches": {
        "ass": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c3eda088f6cf88cf3770b612e389beb0": {
      "content": "Yii::app()->session['${0}'];",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yse": true
      },
      "source": "vim-snippets/snippets"
    },
    "c3f83992d83c48c5936cebefa7272a5e": {
      "content": "font-stretch: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst": true
      },
      "source": "vim-snippets/snippets"
    },
    "c3f9d4b25928b90573a02b672e7547b4": {
      "content": "border-left-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdli:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "c3fd498ba17f2c69479df6f8a1ed6ac9": {
      "content": "<?php\n${1:TARGET}\n/* End of file ${2:filename}.php */",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "php": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c408e782b38b15adf541a0d5795ca934": {
      "content": "outline-style ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "os": true
      },
      "source": "vim-snippets/snippets"
    },
    "c4183570370f999aa1f417db2330e54a": {
      "content": "use Test::More;\nuse Test::Deep; # (); # uncomment to stop prototype errors\nuse Test::Exception;",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tuse": true
      },
      "source": "vim-snippets/snippets"
    },
    "c41afe7cc28313be55cf9789ef9acdc7": {
      "content": "border ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bd": true
      },
      "source": "vim-snippets/snippets"
    },
    "c41ef98dbe223084518b08b186b72625": {
      "content": "{% requirePermission \"${1}\" %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig requirepermission",
      "matches": {
        "requirepermission": true
      },
      "source": "vim-snippets/snippets"
    },
    "c421e5f3a43dce3a56cc5a30d2bfa874": {
      "content": "{% assign ${1:variable} = ${0:value} %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "assign": true
      },
      "source": "vim-snippets/snippets"
    },
    "c422d6161dfe30066d1c94cd8e0707d0": {
      "content": "place-items ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi": true
      },
      "source": "vim-snippets/snippets"
    },
    "c424268f1849c5085aa20475caaec7f3": {
      "content": "log.Printf(\"${1:${VISUAL}} = %+v\\n\", $1)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "log.Printf(...)",
      "matches": {
        "lf": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "c427499e5653e8b5407cb324684d1f30": {
      "content": "include '${1:#:file}';${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c437604125839f72932cdda714e44bb1": {
      "content": "# Deploy resource\ndeploy ${1:\"/deploy/dir/\"} do # Path to deploy to\n\t${2:#}deploy_to ${3} # The \"meta root\" for your application.\n\t${4:#}repository ${5} # URI of the repository\n\t${6:#}repo ${7} # alias for repository\n\t${8:#}revision ${9:\"HEAD\"} # revision to checkout. can be symbolic, like \"HEAD\" or an SCM specific revision id\n\t${10:#}branch ${11} # alias for revision\n\t${12:#}user ${13:nil} # System user to run the deploy as\n\t${14:#}group ${15:nil} # System group to run the deploy as\n\t${16:#}svn_username ${17} # (Subversion only) Username for Subversion operations}\n\t${18:#}svn_password ${19} # (Subversion only) Password for Subversion operations}\n\t${20:#}svn_arguments ${21} # (Subversion only) Extra arguments passed to the subversion command}\n\t${22:#}shallow_clone ${23:nil} # (Git only) boolean, true sets clone depth to 5\n\t${24:#}enable_submodules ${25:false} # (Git only) performs a submodule init and submodule update\n\t${26:#}remote ${27:\"origin\"} # (Git only) remote repository to use for syncing an existing clone\n\t${28:#}ssh_wrapper ${29} # (Git only) path to a wrapper script for running SSH with git. GIT_SSH environment variable is set to this.\n\t${30:#}git_ssh_wrapper ${31} # alias for ssh_wrapper\n\t${32:#}scm_provider ${33:Chef::Provider::Git} # SCM Provider to use.\n\t${34:#}repository_cache ${35: \"cached-copy\"} # Name of the subdirectory where the pristine copy of your app's source is kept\n\t${36:#}environment ${37} # A hash of the form {\"ENV_VARIABLE\"=>\"VALUE\"}}\n\t${38:#}purge_before_symlink ${39:%w(log tmp/pids public/system)} # An array of paths, relative to app root, to be removed from a checkout before symlinking\n\t${40:#}create_dirs_before_symlink ${41:%w(tmp public config)} # Directories to create before symlinking. Runs after purge_before_symlink\n\t${42:#}symlinks ${43:\"system\" => \"public/system\", \"pids\" => \"tmp/pids\", \"log\" => \"log\"} # A hash that maps files in the shared directory to their paths in the current release\n\t${44:#}symlink_before_migrate ${45:\"config/database.yml\" => \"config/database.yml\"} # A hash that maps files in the shared directory into the current release. Runs before migration\n\t${46:#}migrate ${47:false} # Should the migration command be executed? (true or false)\n\t${48:#}migration_command ${49} # A string containing a shell command to execute to run the migration\n\t${50:#}restart_command ${51:nil} # A code block to evaluate or a string containing a shell command\n\t${52:#}before_migrate ${53:\"deploy/before_migrate.rb\"} # A block or path to a file containing chef code to run before migrating\n\t${54:#}before_symlink ${55:\"deploy/before_symlink.rb\"} # A block or path to a file containing chef code to run before symlinking\n\t${56:#}before_restart ${57:\"deploy/before_restart.rb\"} # A block or path to a file containing chef code to run before restarting\n\t${58:#}after_restart ${59:\"deploy/after_restart.rb\"} # A block or path to a file containing chef code to run after restarting\n\t${60:#}${61::deploy} # Deploy the application (Default)\n\t${62:#}${63::force_deploy} # For the revision deploy strategy, this removes any existing release of the same code version and re-deploys in its place\n\t${64:#}${0::rollback} # Rollback the application to the previous release\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deploy": true
      },
      "source": "vim-snippets/snippets"
    },
    "c43858d3aaef8aff30e41d5c4ff16d9a": {
      "content": "${1:deferred}.resolveWith(${2:this}, ${3:args})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dresw": true
      },
      "source": "snippets/coffee"
    },
    "c4504ea69ad0d8f192c68bbadfa1e3b2": {
      "content": "{ path: '**', component: ${1:PathNotFoundComponent} }$0",
      "doc": "Angular 404 route path",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-404-route-path",
      "matches": {
        "a-route-path-404": true,
        "angular 404 route path": true
      },
      "source": "javascript/angular"
    },
    "c4507641729c092eefe440c3a1fdabfe": {
      "content": "${1:obj}.appendTo('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "appendTo": true
      },
      "source": "snippets/javascript"
    },
    "c456494cefeef8a0e655409797d004a2": {
      "content": "mixed.typeError()",
      "doc": "mixed.typeError(message: string): Schema\n\nDefine an error message for failed type checks. The ${value} and ${type} interpolation can\nbe used in the message argument.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-type-error",
      "matches": {
        "yup mixed typeerror": true
      },
      "source": "javascript/yup"
    },
    "c45c96c662e9d34efdcb4e1907cee220": {
      "content": "${1:obj}.scroll (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "scroll": true
      },
      "source": "snippets/coffee"
    },
    "c46402445cb534e9ffbdf9c5c97ce6e8": {
      "content": "jasmine.any($1)",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "any (js)",
      "matches": {
        "any": true
      },
      "source": "vim-snippets/snippets"
    },
    "c467a11fc714e301d11c6660f8545386": {
      "content": "receive\n${1:\t${2:pattern}${3: when ${4:guard}} ->\n\t\t${5:body}}\n${6:after\n\t${7:expression} ->\n\t\t${8:body}}\nend",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "Receive Expression",
      "matches": {
        "rcv": true
      },
      "source": "vim-snippets/snippets"
    },
    "c46b0590fb44cd01ef05eb071b00c7ce": {
      "content": "_.eq(${value}, ${other})",
      "doc": "var object = { 'a': 1 };\nvar other = { 'a': 1 };\n\n_.eq(object, object);\n// => true\n\n_.eq(object, other);\n// => false\n\n_.eq('a', 'a');\n// => true\n\n_.eq('a', Object('a'));\n// => false\n\n_.eq(NaN, NaN);\n// => true\n\nPerforms a\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\ncomparison between two values to determine if they are equivalent.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-eq",
      "matches": {
        "lodash eq": true
      },
      "source": "javascript/lodash"
    },
    "c46b4bac4752950086670f49a128fc82": {
      "content": "&#x2303;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ctrl": true
      },
      "source": "vim-snippets/snippets"
    },
    "c46c2730a1663c60c6a8bec84d0f224f": {
      "content": "${1:obj}.get(${2:element index})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "get": true
      },
      "source": "snippets/javascript"
    },
    "c47efee8b5dc69beac66e36e7e807b1b": {
      "content": "${1:$TM_FILENAME_BASE}.defaultProps = {\n\t$2\n};",
      "doc": "Creates empty defaultProps declaration",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "defaultProps",
      "matches": {
        "rdp": true
      },
      "source": "vscode-react/snippets"
    },
    "c48000ce796b90e22326d8d6c34e9bab": {
      "content": "(cond\n  ((${1}) ${2})\n  (${0:else}))",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cond": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c48348d08f787a365e50d62b6fd0406d": {
      "content": "cond do\n\t${1} ->\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cond": true
      },
      "source": "vim-snippets/snippets"
    },
    "c48fcb125dfff03dd29b6d3928f436ca": {
      "content": "|> (fn x -> require IEx; IEx.pry; x end).()${0}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ppry": true
      },
      "source": "vim-snippets/snippets"
    },
    "c492ed7c98f5f876eef23b7194304e50": {
      "content": "{#await ${1:promise}}\n\t${2: <!-- content when promise is pending -->}\n{:then ${3:value}}\n\t${4: <!-- content when promise was fulfilled -->}\n{/await}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-await-then-block",
      "matches": {
        "svawait": true,
        "svelte await then": true
      },
      "source": "javascript/svelte"
    },
    "c496c01ebb8dfbad1c0ec535f46d9aa8": {
      "content": "echo CHtml::listData(array(${1}),'${2:valueField}', '${3:textField}','${0:groupField}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhld": true
      },
      "source": "vim-snippets/snippets"
    },
    "c497551b2ca7f1cce66a1dbae865da28": {
      "content": "margin: 0",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "c49baf4a8c1d842ba96ff6054d12b6d6": {
      "content": "must_be_nil",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbn": true
      },
      "source": "vim-snippets/snippets"
    },
    "c4a14af4094e50186df754bf51dac5ec": {
      "content": "border-left-color ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlc": true
      },
      "source": "vim-snippets/snippets"
    },
    "c4a868316f165e6ba19435b5c0329325": {
      "content": "${fn:endsWith(${1:string}, ${0:suffix})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "endswith": true
      },
      "source": "vim-snippets/snippets"
    },
    "c4aab7c4cc94139839a114e1275f5c9c": {
      "content": "write(*,*) ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "c4affec66cb1b4d4e5f812161db5e063": {
      "content": "import React, { useState } from 'react'\n",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "import-react-usestate",
      "matches": {
        "imrs": true,
        "react import usestate": true
      },
      "source": "javascript/react"
    },
    "c4c41b7e02cdeab7c6d24ca41e7c9739": {
      "content": "_.minBy(${array}, ${iteratee})",
      "doc": "var objects = [{ 'n': 1 }, { 'n': 2 }];\n\n_.minBy(objects, function(o) { return o.n; });\n// => { 'n': 1 }\n\n// The `_.property` iteratee shorthand.\n_.minBy(objects, 'n');\n// => { 'n': 1 }\n\nThis method is like `_.min` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-minby",
      "matches": {
        "lodash minby": true
      },
      "source": "javascript/lodash"
    },
    "c4c68e2eea974111decf24bb2ac167f8": {
      "content": "#if ${1}\n  ${2:TARGET}\n#endif",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "#if .. #endif",
      "matches": {
        "#if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c4c76b1abba7a9875a52353bbbde0ded": {
      "content": "int ${1:f}${2: = }${0:0};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "int": true
      },
      "source": "vim-snippets/snippets"
    },
    "c4cb54923383bf13daac01f647287514": {
      "content": "cursor: move",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "c4d42b441fc61f5847f48802c4cc3b40": {
      "content": "def ${1:#:method_name}\n  ${2:TARGET}\nrescue ${3:#:StandardError} => ${4:error}\n  ${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "def ... rescue ... end",
      "matches": {
        "defr": true,
        "defrescue": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c4dcea5c61e6d66c72cd8be6911203b7": {
      "content": "[${1:#:id}]: mailto:${2:#:url} \"${3:#:title}\"",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "[id]: email \"title\"",
      "matches": {
        "idemail": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c4eb7fdaf0ed18ad0a0ccc6f9362414e": {
      "content": "border-left-style ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdls": true
      },
      "source": "vim-snippets/snippets"
    },
    "c4ecd4e79a6c96c28b606962fcee6994": {
      "content": "${1:div}(v-for=\"${2:item} in ${2:item}s\" :key=\"${2:item}.id\")\n\t| {{ ${2:item} }}",
      "doc": "vfor statement",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue v-for",
      "matches": {
        "vfor": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "c4fe08194085c9aef502ed16ee46f1e4": {
      "content": "${1:obj}.outerWidth()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "outerw": true
      },
      "source": "snippets/coffee"
    },
    "c50092c6f5b8771598baab4467797732": {
      "content": "${1:obj}.live('${2:events}', function (${3:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "live": true
      },
      "source": "snippets/javascript"
    },
    "c5085ae59fd2785492d839e9ea3919ca": {
      "content": "after_update $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "after_update",
      "matches": {
        "aftu": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c50ab82146139dab0676f9eb830e37b0": {
      "content": "elif ${1:condition}; then\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "c51b1298a65584c0b4a93071136edef4": {
      "content": "-moz-box-shadow: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "c51d1c8eeb27d2fa62a5accccb3fc421": {
      "content": "- (id)init\n{\n\tif (self = [super init]) {\n\t\t${0}\n\t}\n\treturn self;\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "init": true
      },
      "source": "vim-snippets/snippets"
    },
    "c51d6dd8500e0b620c6ee74b7a61e7d0": {
      "content": "switch (${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sw": true
      },
      "source": "vim-snippets/snippets"
    },
    "c520e93a0fcde5b328aaffab41a1949f": {
      "content": "net.createServer(function(${1:socket}){\n\t${1}.on('data', function('data'){\n\t  ${2}\n\t]});\n\t${1}.on('end', function(){\n\t  ${3}\n\t});\n}).listen(${4:8124});",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "net": true
      },
      "source": "snippets/javascript"
    },
    "c521a86e07905136e40bc93ce4d17374": {
      "content": "border-top-right-image: continue",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtri:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5274f2b22ecc254780856c767980122": {
      "content": "border-style outset",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "c528238b1a32df012bcc85cb15d8796d": {
      "content": "NSMutableArray *${1:array} = [NSMutable array];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "array": true
      },
      "source": "vim-snippets/snippets"
    },
    "c52968b3b1ffb433d9fb2e9602f3a5da": {
      "content": "function ${1}(${3})\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "f": true
      },
      "source": "vim-snippets/snippets"
    },
    "c52d5b148f82aba767ec700992ebdeb3": {
      "content": "[style.${1:property}]=\"${2:expression}\"",
      "doc": "Angular [style] binding",
      "filetype": "html",
      "grammar": "lsp",
      "label": "style",
      "matches": {
        "a-style": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "c52de7db11580e77e574659df0feb2a7": {
      "content": "for ${2:k}, ${3:v} := range ${1} {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for k, v := range items { ... }",
      "matches": {
        "forr": true
      },
      "source": "gosnippets/snippets"
    },
    "c53182bb22044b1cd9511a87a7beee3f": {
      "content": "const ${1:store} = readable(${2:initialValue}, () => {\n\t${3:console.log('got a subscriber');}\n\treturn () => ${4:console.log('no more subscribers');}\n});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-readable",
      "matches": {
        "svelte readable": true,
        "svr": true
      },
      "source": "javascript/svelte"
    },
    "c536220022801390d16a3e03867eb993": {
      "content": "<iframe id=\"${1}\" src=\"${2}\" frameborder=\"0\"></iframe>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iframe#": true
      },
      "source": "vim-snippets/snippets"
    },
    "c53b2a10a9e386325b81cfafb053bc61": {
      "content": "font-stretch: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst": true
      },
      "source": "vim-snippets/snippets"
    },
    "c54b9225db92b58a5c97c96af589f3a6": {
      "content": "expect(${1:target}).not.toHaveBeenCalled();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to have been called (js)",
      "matches": {
        "nthbc": true
      },
      "source": "vim-snippets/snippets"
    },
    "c54cef0f5eb273002d269c737a862da7": {
      "content": "v-text=\"${1:msg}\"",
      "doc": "Expects: string. Updates the element’s textContent.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-text",
      "matches": {
        "vtext": true,
        "vue v-text": true
      },
      "source": "javascript/vue"
    },
    "c54d7eb819231bf5a461dd5029909628": {
      "content": "static ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "st": true
      },
      "source": "vim-snippets/snippets"
    },
    "c54ecb6af2a4a69540aa28ac1c8037d0": {
      "content": "border-fit overwrite",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:ow": true
      },
      "source": "vim-snippets/snippets"
    },
    "c54f182c8419c901637ba9823c856aae": {
      "content": "for ${1:name} in [${2:start}...${3:finish}] by ${4:step}\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forrexb": true
      },
      "source": "snippets/coffee"
    },
    "c556c1af13062b09cb0857476e2cb3f1": {
      "content": "t.integer :${1:title}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create integer column",
      "matches": {
        "tci": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c558d99e75a1c491f259ca149d5b0f85": {
      "content": "import { mapMutations } from 'vuex';\n\nexport default {\n\tmethods: {\n\t\t...mapMutations([\n\t\t\t${1:'nameOfMutation'}, //also supports payload `this.nameOfMutation(amount)` \n\t\t])\n\t},\n};",
      "doc": "mapmutations inside a vue component",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue MapMutations",
      "matches": {
        "vmapmutations": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "c55c5cfddc47353bd94ce410a86fb92a": {
      "content": "div(ng-hide='${1}')",
      "doc": "",
      "filetype": "jade",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hide": true
      },
      "source": "vim-snippets/snippets"
    },
    "c56d8980266651b4645197b0c3076ec0": {
      "content": "${1:obj}.appendTo('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "appendTo": true
      },
      "source": "snippets/coffee"
    },
    "c57029f89456f52e323d367ef77ca0a9": {
      "content": "let ${1} = ${0};",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "c58225e5950f9a871cf1fba609b70bef": {
      "content": "_.isEqual(${value}, ${other})",
      "doc": "var object = { 'a': 1 };\nvar other = { 'a': 1 };\n\n_.isEqual(object, other);\n// => true\n\nobject === other;\n// => false\n\nPerforms a deep comparison between two values to determine if they are\nequivalent.\n\n**Note:** This method supports comparing arrays, array buffers, booleans,\ndate objects, error objects, maps, numbers, `Object` objects, regexes,\nsets, strings, symbols, and typed arrays. `Object` objects are compared\nby their own, not inherited, enumerable properties. Functions and DOM\nnodes are compared by strict equality, i.e. `===`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isequal",
      "matches": {
        "lodash isequal": true
      },
      "source": "javascript/lodash"
    },
    "c591a28f9e8e04cd6cbb189412264f42": {
      "content": "afterUpdate(() => {\n\t${1:// content here}\n});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-after-update",
      "matches": {
        "svelte lifecycle-after-update": true,
        "svlfap": true
      },
      "source": "javascript/svelte"
    },
    "c59c3997f5a87adb8826214739874175": {
      "content": "let ${1} = (${2}) => {\n\t${0}\n};",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5a23a499ede99b998b5271320e76557": {
      "content": "import { Route } from 'react-router-dom'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React Browser Router - Route",
      "matches": {
        "imbrr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c5a8b4d44a406c45920fed33575eeff1": {
      "content": "${1:type}, intent(inout) :: ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "intent": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5af9226722f7aa0853ea8ccfb4fc9d4": {
      "content": "if {${1}} {\n\t${2}\n} else {\n\t${0:# else...}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5b5936dde22aded574413227af63a40": {
      "content": "cursor: crosshair",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5b936cc03f163c8d9f636207894259c": {
      "content": "def ${1:method_name}\n\t${0}\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5c23cd68b7f29aa208a4e48cd337e86": {
      "content": "validates_length_of",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_length_of",
      "matches": {
        "vl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c5c3fb5a97b58af00be0aa551b493b89": {
      "content": "${1:obj}.eq(${2:element index})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eq": true
      },
      "source": "snippets/javascript"
    },
    "c5c539169699a09409bf3dbacc6e32d3": {
      "content": "begin\n\tfail 'A test exception.'\nrescue StandardError => e\n\tputs e.message\n\tputs e.backtrace.inspect\nelse\n\t# other exception\nensure\n\t# always executed\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "begin": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5cf7ffdc2e0f6cd88de4a344a40d66b": {
      "content": "using ${1:Name} = ${2:Type};${0}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "typedef": true,
        "using_typedef": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c5da77ec91ccddf85cfdbb8055aa614c": {
      "content": "_.xorBy(${arrays}, ${iteratee})",
      "doc": "_.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2, 3.4]\n\n// The `_.property` iteratee shorthand.\n_.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n\nThis method is like `_.xor` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich by which they're compared. The order of result values is determined\nby the order they occur in the arrays. The iteratee is invoked with one\nargument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-xorby",
      "matches": {
        "lodash xorby": true
      },
      "source": "javascript/lodash"
    },
    "c5dd1d3e44b890062fc9a390a27ddc29": {
      "content": "{% include \"${0:filename}\" %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5e3b3387673a09e49dd094dcbc0edd1": {
      "content": "render text: \"${1:text to render...}\", status: ${2:401}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (text,status) (rts)",
      "matches": {
        "rts": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c5e5c60779febd165831f75351128e43": {
      "content": "<li>${1}</li>\nli+",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "li+": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5e8fe4d4679d18fb992671783f506e4": {
      "content": "for (let ${1:i} = ${2:iterable}.length - 1; ${1:i} >= 0; ${1:i}--) {\n\t${0}\n}",
      "doc": "reverse for loop",
      "filetype": "base",
      "grammar": "lsp",
      "label": "reverse-for-loop",
      "matches": {
        "base for reverse": true
      },
      "source": "javascript/base"
    },
    "c5ea4f689ad8399f77db7ad6ee38653f": {
      "content": "text-indent: ${1:10}px;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "text-indent: length (text)",
      "matches": {
        "text": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c5eb6cf2782d72c9472678a99c6c3c99": {
      "content": "import { Link } from 'react-router-dom'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React Browser Router - Link",
      "matches": {
        "imbrl": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c5ed4e44c911cb4d43c22b2fa3df2864": {
      "content": "triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${0:y3});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "triangle": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5f513858fe2d527982f8dc091deb918": {
      "content": "${1:FIELDNAME} = forms.CharField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "CharField",
      "matches": {
        "fchar": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c5f8a58bd722862837839efb3c690269": {
      "content": "constructor(props, context) {\n\tsuper(props, context);\n\t$0\n}\n",
      "doc": "Adds a default constructor for the class that contains props and context as arguments",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "classConstructorContext",
      "matches": {
        "conc": true
      },
      "source": "vscode-react/snippets"
    },
    "c5f9de66d3caaf39d6a0ba5fc8d04878": {
      "content": "align-content space-between",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "c5fae1cf6e97dfcd4efbc5ebb2273185": {
      "content": "case ${1:${2:var} := }<-${3:channel}:\n  ${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "select case",
      "matches": {
        "selc": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "c60c6590efaf47d8c26a7cce0aeea0b8": {
      "content": "echo CHtml::openTag('${1:tag}', array('${2:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhot": true
      },
      "source": "vim-snippets/snippets"
    },
    "c60e248f0c3e2f490faa87d8afd35719": {
      "content": "console.time(${1:object});",
      "doc": "Sets starting point for execution time measurement",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consoletime",
      "matches": {
        "base console time": true
      },
      "source": "javascript/base"
    },
    "c613b90b2b2fc88cac260221c6c46904": {
      "content": "$.hasData('${0:selector expression}');",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hasd": true
      },
      "source": "snippets/javascript"
    },
    "c615c4e50b576733e93cf9f69d013e04": {
      "content": "{% with ${1} as ${2} %}\n\t${0}\n{% endwith %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "with": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6174e580f3ad1bb6f1bf78eebc6c697": {
      "content": "@after-enter=\"$1\"$0",
      "doc": "@after-enter=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-after-enter",
      "matches": {
        "afterenterevent": true,
        "vue after-enter": true
      },
      "source": "javascript/vue"
    },
    "c624d6469648c0c803200a6b5c949c4c": {
      "content": "display: inline-table;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:itb": true
      },
      "source": "vim-snippets/snippets"
    },
    "c62b59f5320daee0dd296332bd8cf38d": {
      "content": "<!--\nvim: filetype=mediawiki\n-->",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ft": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c62d423cf95719656104e6e857065011": {
      "content": "gl.glColor3f(${1:red}, ${2:green}, ${0:blue});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl color 3f",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "c63040569bcc73835dde2f2232c351f6": {
      "content": "font-family: ${0:Monaco,'Courier New'},monospace",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6304fd16b221008691ae7f0775388d9": {
      "content": "margin-right auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mr:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "c633596d6541f759eb6f79594e035ed3": {
      "content": "\\${0}${0}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${0}",
      "matches": {
        "0": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c6346e3fb7ceaac23b77ff3a05a464ac": {
      "content": "assert_raises ${1:StandardError} do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asrd": true
      },
      "source": "vim-snippets/snippets"
    },
    "c638cc384a6be686dd32ecb2440bd7d5": {
      "content": "func (${1:receiver} ${2:type}) ${3:funcName}(${4}) ${5:error} {\n\t${6}\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "method",
      "matches": {
        "fum": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6411bffa3a4a7755f658277f43e9b07": {
      "content": "${1:obj}.dequeue(${2:'queue name'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deq": true
      },
      "source": "snippets/javascript"
    },
    "c648bcccd22f4b18bc6eb243b85a5b9b": {
      "content": "\\${1:${0:default}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${1:default}",
      "matches": {
        "1:": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c654453627f1b16da792190b849a1adf": {
      "content": "_.deburr(${string})",
      "doc": "_.deburr('déjà vu');\n// => 'deja vu'\n\nDeburrs `string` by converting\n[Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\nand [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\nletters to basic Latin letters and removing\n[combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-deburr",
      "matches": {
        "lodash deburr": true
      },
      "source": "javascript/lodash"
    },
    "c656b7e946c1bfc75170a5aacc71b927": {
      "content": "auto ${1:f} = File(${2:\"useful_info.xml\"}, ${3:\"rw\"});\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "file": true
      },
      "source": "vim-snippets/snippets"
    },
    "c658faa6322730f25ef021c9665d9d0b": {
      "content": "extends ${0}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ext": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6595f3ef77a835763c2767fbd8dd5ea": {
      "content": "before_filter :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bf": true
      },
      "source": "vim-snippets/snippets"
    },
    "c65f7f70d054c65218034ce3307a67b0": {
      "content": "form_checkbox(\"${1:name}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_checkbox": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6691851f8fb953940572e3eac20fb7e": {
      "content": "for {\n\t${1}\n} yield ${2}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c66c1294d576ab3f8ab8ffa01044ec87": {
      "content": "$.inArray(${1:value}, ${0:array});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inarr": true
      },
      "source": "snippets/javascript"
    },
    "c6738d9fd03bbd5d8003a82029af2731": {
      "content": "${1:obj}.animate({${2:param1: value1, param2: value2}}, ${3:speed})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "animate": true
      },
      "source": "snippets/javascript"
    },
    "c67f1f9142c1067c7ba0c6a403048f25": {
      "content": "beforeEnter(el) {\n\tconsole.log('beforeEnter');\n},\nenter(el, done) {\n\tconsole.log('enter');\n\tdone();\n},\nbeforeLeave(el) {\n\tconsole.log('beforeLeave');\n},\nleave(el, done) {\n\tconsole.log('leave');\n\tdone();\n},",
      "doc": "transition component js hooks",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Transition Methods with JavaScript Hooks",
      "matches": {
        "vanimhook-js": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "c67f50d759d162e128c7f4ca256d3445": {
      "content": "after_validation_on_create $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "after_validation_on_create",
      "matches": {
        "aftvoc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c68bd96bd90f8fa7bdc9c77f06903756": {
      "content": "while {${1:condition}} {\n\t$2\n}\n",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "while... (while)",
      "matches": {
        "while": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c6911bb85aea17facf6440fa426891c7": {
      "content": "do |${1:#:var}|\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "do |var| ... end",
      "matches": {
        "dovar": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c693aeae25bb0ef5aaf3d78151592a6a": {
      "content": "align-self flex-end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "c69a95ef9b908af4b066ded4aa758ae0": {
      "content": "NO-ERROR",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ne": true
      },
      "source": "vim-snippets/snippets"
    },
    "c69b6ff9948029670e464c92a8c13513": {
      "content": "if err := ${1:condition}; err != nil {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "If with inline error",
      "matches": {
        "ife": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "c69ee91381c69544bd6d681ee8219601": {
      "content": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n})\n",
      "doc": "Creates a forEach statement in ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "forEach",
      "matches": {
        "fre": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c6a2551b15b07a4b50353bbce68f77a4": {
      "content": "?assertEqual(${1}, ${0})",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aseq": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6a8be078196b9303d6ee7ab21fde46f": {
      "content": "padding: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6ae194e4a2c20bf8a7655ce4f9a56ea": {
      "content": "list-style-type: decimal-leading-zero;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:dclz": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6b10bfdd085e5a3b8e978f0a46c687f": {
      "content": "Plug '${1}', { 'branch': '${0}' }",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "vim-plug Plugin definition with { 'branch': '' }",
      "matches": {
        "plugbr": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6b52f440580e58c74bdb710c32f16ba": {
      "content": "<link rel=\"alternate\" href=\"${1:rss.xml}\" title=\"RSS\" type=\"application/atom+xml\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "link:rss": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6c3becd9bfd896cf5976c348ee71f72": {
      "content": "<tr>\n\t<td>${1}</td>\n\ttd+${0}\n</tr>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tr+": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6cc541e188907daaacffb67f7de29e2": {
      "content": "|> Array.map (fun x -> printfn \"%A\" x; x) // tap",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "atap": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6cf8038f2a94f8db94eb9a511868a0a": {
      "content": "const [ref, inView, entry] = useInView(options)",
      "doc": "The new React Hooks make it easier than ever to monitor the inView state of your components. Call the useInView hook with the (optional) options you need. It will return an array containing a ref, the inView status and the current IntersectionObserverEntry. Assign the ref to the DOM element you want to monitor, and the hook will report the status. \n\nOptions\nroot(type: Element, default: window, required: false)\nThe Element that is used as the viewport for checking visibility of the target. Defaults to the browser viewport (window) if not specified or if null.\n\nrootMargin(type: String, default: '0px', required: false)\nMargin around the root. Can have values similar to the CSS margin property.\n\nthreshold(type: Number, default: 0, required: false)\nNumber between 0 and 1 indicating the percentage that should be visible before triggering. Can also be an array of numbers, to create multiple trigger points.\n\ntriggerOnce(type: Boolean, default: false, required: false)\nOnly trigger this method once",
      "filetype": "react-intersection-observer",
      "grammar": "lsp",
      "label": "react-intersection-observer-use-in-view",
      "matches": {
        "react-intersection-observer useinview": true,
        "rio useinview": true
      },
      "source": "javascript/react-intersection-observer"
    },
    "c6d33c96cc754c4de3dc183a30e8b681": {
      "content": "on:${1|introstart,introend,outrostart,outroend|}=\"{() => status = '${1|introstart,introend,outrostart,outroend|}'}\"",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-transition-events",
      "matches": {
        "svelte transition events": true,
        "svte": true
      },
      "source": "javascript/svelte"
    },
    "c6e4ecdae08fe0e470eada92aabd670f": {
      "content": "${1:FIELDNAME} = forms.TypedMultipleChoiceField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "TypedMultipleChoiceField",
      "matches": {
        "ftmuchoice": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c6f75a9ad8a0a05aaabae59eb4df2619": {
      "content": "foreach (${1}) begin\n\t${0}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forea": true
      },
      "source": "vim-snippets/snippets"
    },
    "c6fb537ddb4535f52e01fcfab02a1047": {
      "content": "text-justify tibetan",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "c70116d6fdc06a9dc5a29665780afd57": {
      "content": "${1:deferred}.resolve(${2:args})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dres": true
      },
      "source": "snippets/coffee"
    },
    "c703140a8de6a0235dfab7535c619244": {
      "content": "public void test${1:Name}() throws Exception {\n\t${0}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7032e146f57ca7c022708ec6aeb42af": {
      "content": "${1:callbacks}.disable()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cdis": true
      },
      "source": "snippets/javascript"
    },
    "c70cd35ebe602d81df7664a74c92b0b0": {
      "content": "<%= ${1:TARGET} %>${2}",
      "doc": "",
      "filetype": "eruby",
      "grammar": "snu",
      "label": "<%= %>",
      "matches": {
        "ruby_print": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c70f6bc14159a60136693cc44971d68f": {
      "content": "margin ${1:0} ${2:0} ${3:0} ${0:0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:4": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7248fa5d1d9c5f2f4daf905e967fb1c": {
      "content": "curve(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${0:y4});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "curve": true
      },
      "source": "vim-snippets/snippets"
    },
    "c72944c6f0954f5bdf98326c773e48f2": {
      "content": "{% stylesheet %}\n\t${0}\n{% endstylesheet %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stylesheet": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7320ca899bb48128a2577e11d2081ea": {
      "content": "+${1}+${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "+verbatim+",
      "matches": {
        "verb": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c737888f87fd51367ff94fc47279bdf6": {
      "content": "public ${1:int} ${2} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p+-": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7400984aadbb6e286fca73f28d28abf": {
      "content": "margin ${1:0} ${2:0} ${0:0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:3": true
      },
      "source": "vim-snippets/snippets"
    },
    "c74a618fe04b5ab9cc8f78c8f1d423b0": {
      "content": "left auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "l:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "c74c312ece3b0e7a6a70d119755c5556": {
      "content": "assert_includes ${1:collection}, ${2:object}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asi": true
      },
      "source": "vim-snippets/snippets"
    },
    "c751b6fd9f22d54cddc6dd1488fe4b74": {
      "content": "display: table-column",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbcl": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7588165560c3833e2657f28da693730": {
      "content": "scoped_by_${1:attribute}(${2:id})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "scoped_by",
      "matches": {
        "sb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c760be86f6e3ba8a461860409336331a": {
      "content": "${1:obj}.select (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "select": true
      },
      "source": "snippets/coffee"
    },
    "c76b8688b214bba4d6c877477b7738a0": {
      "content": "${1:obj}.show('${2:slow/400/fast}', function () {\n\t${0:// callback}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "showc": true
      },
      "source": "snippets/javascript"
    },
    "c77084b995f12d0ec9e3f2c9d07d000e": {
      "content": "append(${1:array}, ${0:element});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "append": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7719372cbaed4ecd003444f8c0c8896": {
      "content": "do {\n\t${0:${VISUAL}}\n} while (${1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "do { ... } while (condition)",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "c77521296856e2d57422615e8a7832bb": {
      "content": "text-transform: ${1:capitalize/uppercase/lowercase};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "text-transform: capitalize:upper:lower (text)",
      "matches": {
        "text": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c77d54434a762f396dc0c6ce58920112": {
      "content": "try\n  ${1:TARGET}\ncatch /${2:#:pattern}/\n  ${3}\nendtry",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "try endtry",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c77f80d7182669e06809b05cfe30b69b": {
      "content": "=>",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        ".": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7832fd2905b76f68c0dfff41396940a": {
      "content": "font-effect: outline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "c78934c412926c5b37dfe8af25724e5d": {
      "content": "v-pre",
      "doc": "Does not expect expression",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-pre",
      "matches": {
        "vpre": true,
        "vue v-pre": true
      },
      "source": "javascript/vue"
    },
    "c78b855cd1eecd19937d4c0491808a73": {
      "content": "align-content: space-around;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:sa": true
      },
      "source": "vim-snippets/snippets"
    },
    "c78c578788ed0b21e982b7a164b0b4fa": {
      "content": "Map<${1:Object}, ${2:Object}> ${3:map} = new HashMap<$1, $2>();${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d.hm": true
      },
      "source": "vim-snippets/snippets"
    },
    "c78f63241613de764e2adc2d728e0c1d": {
      "content": "border-bottom-color ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbc": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7953eddb0522eb9737b961b11faca64": {
      "content": "echo CHtml::linkButton('${1:lable}',array('${2:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhlinkb": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7975c4aed76fe6285f437b6451f1496": {
      "content": "${1:obj}.css('${2:attribute}', '${3:value}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "css": true
      },
      "source": "snippets/coffee"
    },
    "c79938d478db7c9ca17a2f7bdb25f937": {
      "content": "${1:obj}.height(${2:integer})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "height": true
      },
      "source": "snippets/coffee"
    },
    "c79f450ab56323d9f2f7763bf02f8c61": {
      "content": "// @flow\nimport * as React from 'react';\ntype Props = {\n  $0\n};\nexport function ${1:${TM_FILENAME_BASE}}(props: Props) {\n  return (\n    <div>\n      \n    </div>\n  );\n};",
      "doc": "Creates a stateless React component as a named function with FlowTypes",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "flowStatelessFunction",
      "matches": {
        "fsf": true
      },
      "source": "vscode-react/snippets"
    },
    "c7a24d0b877132ff661ad1eb7b59f72c": {
      "content": "<legend>${1:TARGET}</legend>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "legend": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c7a9100c3e1ffd50c8665e7541c2b981": {
      "content": "institution = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "institution": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c7b7adb8fc2241df8f58d49a1aab1f0b": {
      "content": "font-stretch: extra-expanded",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:ee": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7c4c7d7f94c0c970b397119d2a7c019": {
      "content": "$.parseXML(${1:data})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parsexml": true
      },
      "source": "snippets/coffee"
    },
    "c7c9c79489c719288c532cea3f4aea75": {
      "content": "printf(\"${1}\\n\"${2});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "printf(\"...\\n\", ...);",
      "matches": {
        "printf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c7cdaa2c7f79d7b9dfd101f8ad4bf1bb": {
      "content": "border-right-style ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrs": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7d21597ba5e6a8ee1fbfb07ec262d55": {
      "content": "{{#if ${1:value}}}\n${0:${VISUAL}}\n{{/if}}",
      "doc": "",
      "filetype": "handlebars",
      "grammar": "snu",
      "label": "# {{#if value}} ... {{/if}}",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7d941d549ea4e20f2a0f1e82a4d2651": {
      "content": "place-content: flex-end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7da392e9da3bb8563dacc554af41a47": {
      "content": "should \"${1}\" in {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "should-scalatest": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c7db1f8dfb5129e45b129cb823d9b7a5": {
      "content": "mixed.notRequired()",
      "doc": "mixed.notRequired(): Schema\n\nMark the schema as not required. Passing undefined as value will not fail validation.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-not-required",
      "matches": {
        "yup mixed notrequired": true
      },
      "source": "javascript/yup"
    },
    "c7de782b1c067feec95724dee62039f4": {
      "content": "border-left: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdl:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7e3d3dfc124296f5615922fb97cfe3b": {
      "content": "expect($1).toStrictEqual($0);",
      "doc": "expects the first argument to be strictly equal with the second one",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tostrictequal",
      "matches": {
        "jest expect tostrictequal": true,
        "tse": true
      },
      "source": "javascript/jest"
    },
    "c7ed58edea2acd3c7501f306afea91c2": {
      "content": "${1:#:name} = (${2:#:args}) ->\n  ${0:TARGET}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c7f18bb4c86c69d209813726c3f60503": {
      "content": "console.error(${0});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.error",
      "matches": {
        "ce": true
      },
      "source": "snippets/javascript"
    },
    "c7f1d20eed936cf2f3d43f03ab2c9357": {
      "content": "${1:div}(:style=\"[${2:styleObjectA}, ${3:styleObjectB]}\")",
      "doc": "vue inline style binding, objects",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Style Binding Object",
      "matches": {
        "vstyle-obj": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "c7f31a95bd0efb3ed9b23a4db2bd8a83": {
      "content": "onMounted(() => {${1}})",
      "doc": "Vue Mounted Lifecycle hook",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle Hooks - onMounted",
      "matches": {
        "v3onmounted": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "c7f6bec8add9df6ba029416ab53e2b21": {
      "content": "table-layout: fixed",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbl:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "c7f720a4a48d94ef8d34e68c838e04e3": {
      "content": "\\pdv[${1:${VISUAL}}]{${2}}{${3}}",
      "doc": "",
      "filetype": "texmath",
      "grammar": "snu",
      "label": "Partial Derivative",
      "matches": {
        "pdv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c7fb02b9660396d7f6a7e9c06cb4de15": {
      "content": "-ifdef(${1:TEST}).\n${0}\n-endif.",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifd": true
      },
      "source": "vim-snippets/snippets"
    },
    "c802be85de70906a3607699f8b327537": {
      "content": "@click=\"${1:handler}(${2:arg}, $event)\"",
      "doc": "v-on click handler with arguments",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue v-on Shortcut Directive",
      "matches": {
        "von": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "c809151153867a81ee8e343f8d90f47f": {
      "content": "color ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "c": true
      },
      "source": "vim-snippets/snippets"
    },
    "c80a8ae03aebce9ed026039034a08602": {
      "content": "$.extend(${1:true, }${2:target}, ${3:obj})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "extend": true
      },
      "source": "snippets/javascript"
    },
    "c80eae6012786483e8ae7a464cc8c8ed": {
      "content": "*ngFor=\"let ${1:item} of ${2:list}\"${0}",
      "doc": "Angular *ngFor",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngfor",
      "matches": {
        "a-ngfor": true,
        "angular ng for": true
      },
      "source": "javascript/angular"
    },
    "c8109b0a3218a2756267dec082e56220": {
      "content": "// Package $1 provides ...\npackage ${1:main}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Package declaration",
      "matches": {
        "/^package/": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c810e7a119c3ad8f9209f327214a5249": {
      "content": "format.${1:js|xml|html} { ${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "format": true
      },
      "source": "vim-snippets/snippets"
    },
    "c81287edff20a0df062b351233a3aba4": {
      "content": "console.group(\"${1:label}\")",
      "doc": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleGroup",
      "matches": {
        "cgr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c815db871787e5f3b61d4fdef2a8b056": {
      "content": "_.zip(${arrays})",
      "doc": "_.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n\nCreates an array of grouped elements, the first of which contains the\nfirst elements of the given arrays, the second of which contains the\nsecond elements of the given arrays, and so on.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-zip",
      "matches": {
        "lodash zip": true
      },
      "source": "javascript/lodash"
    },
    "c817bae2fa5e4cf269154d3d051ff222": {
      "content": "<returns>${0:#:description}</returns>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<returns></returns>",
      "matches": {
        "returns": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c8195b5fff2a38b59e3257025aa74c42": {
      "content": "border-top: ${1:1px} ${2:solid} #${3:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdt+": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8230c9518134de39f102c18f0bb7c93": {
      "content": "<summary>${0:#:description}</summary>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<summary></summary>",
      "matches": {
        "summary": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c827fd8d012a2f3e41f1ca4e54eaf894": {
      "content": "{% ifnotequal ${1} ${2} %}\n\t${0}\n{% endifnotequal %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifnotequal": true
      },
      "source": "vim-snippets/snippets"
    },
    "c82b50ee5f72404532930cf941f7842b": {
      "content": "this.state = {\n\t$1\n};",
      "doc": "Creates empty state object. To be used in a constructor.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "emptyState",
      "matches": {
        "est": true
      },
      "source": "vscode-react/snippets"
    },
    "c8305187098a4c6b006e33bbb8442b3b": {
      "content": "${1:void} ${2:function_name}(${3})\n{\n\t${4}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fnc": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8351b1ca6396acd8e6db89ee0d1b2d3": {
      "content": "_.nth(${array}, ${n})",
      "doc": "var array = ['a', 'b', 'c', 'd'];\n\n_.nth(array, 1);\n// => 'b'\n\n_.nth(array, -2);\n// => 'c';\n\nGets the element at index `n` of `array`. If `n` is negative, the nth\nelement from the end is returned.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-nth",
      "matches": {
        "lodash nth": true
      },
      "source": "javascript/lodash"
    },
    "c847265b1e0d9fefa43809831ece61e3": {
      "content": "flex-wrap: nowrap;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxw:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8489d18245d3a03332c14f0085281a7": {
      "content": "if (${1:condition}) {\n\t${0}\n}",
      "doc": "if statement",
      "filetype": "base",
      "grammar": "lsp",
      "label": "if-statement",
      "matches": {
        "base if": true
      },
      "source": "javascript/base"
    },
    "c855f52cec934d7f57f17cff65d955ca": {
      "content": "$this->db->update(${1:table}, ${2:data}, ${3:where});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_db_update": true
      },
      "source": "vim-snippets/snippets"
    },
    "c862398cffbc11e1b354ac13bbd5a4ae": {
      "content": "<del>${0}</del>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "del": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8623cd8942cfd0b1fdc88d4bbc97f7f": {
      "content": "align-self: start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "c869dc0052976a29c6542f3ea1b084c4": {
      "content": "word-break ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob": true
      },
      "source": "vim-snippets/snippets"
    },
    "c87b1bd139d35700ce45a2de0d8b46fa": {
      "content": "<%= image_tag \"${1}\"${0} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "it": true
      },
      "source": "vim-snippets/snippets"
    },
    "c87cb2bc31196ac53aa574267d8fabbc": {
      "content": "| size",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "size": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8983cf7ec5593856e2faa1e91410dc5": {
      "content": "which(${1:x}, ${2:arr.ind = ${3:FALSE}}, ${4:useNames = ${5:TRUE}})",
      "doc": "Which",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "whi",
      "matches": {
        "which": true
      },
      "source": "vscode-R/snippets"
    },
    "c8991b6c06e23d7f74a0592637dfc1af": {
      "content": "crit(\"${1:message}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "crit": true
      },
      "source": "vim-snippets/snippets"
    },
    "c89d0da35ce08cdfb903c3cccdc837f4": {
      "content": "align-content stretch",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8a2e796a32e0de10b8e41e4dc75821b": {
      "content": "after_touch :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mat": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8aba00f8c63462936be4610c8a89d29": {
      "content": "text-transform: uppercase",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8b4915cf03f9f2237deae4ba302d546": {
      "content": "white-space-collapse loose",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8ca3f93293cdeb3922edfddd12b1ce0": {
      "content": "${1:obj}.attr({'${2:attr1}': '${3:value1}', '${4:attr2}': '${5:value2}'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "attrm": true
      },
      "source": "snippets/javascript"
    },
    "c8d0cc7f0bd21b3a386559fe98780202": {
      "content": "grid-auto-flow column",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8d7dbc9c7041abb130b1d2a9db160df": {
      "content": "let {${1:name}} = ${2:value};",
      "doc": "Object destructing",
      "filetype": "base",
      "grammar": "lsp",
      "label": "destructuring-let-assignment",
      "matches": {
        "base let destruct object": true
      },
      "source": "javascript/base"
    },
    "c8d7ecc5631e3a7c4229679597eea213": {
      "content": "delete ${1};",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "de": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c8d925d2695c03fbe4f396b20e612744": {
      "content": "const ${1:mixinName} = {\n\tmounted() {\n\t\tconsole.log('hello from mixin!')\n\t},\n}",
      "doc": "vue mixin",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-mixin",
      "matches": {
        "vmixin": true,
        "vue mixin": true
      },
      "source": "javascript/vue"
    },
    "c8dc4f308784a74b2db4201650f0639f": {
      "content": "@return {${1:type}} ${0:description}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@ret": true
      },
      "source": "snippets/javascript"
    },
    "c8dc7f04893ec6101f58e18391413b8b": {
      "content": "if ${1:#:condition} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "if {}",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c8e485a77f5a3e6a8c95c08a89156a1a": {
      "content": "parser.add_argument(\"${0:short_arg}\", \"${1:long_arg}\", default=${2:None}, help=\"${3:Help text}\")",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "addarg": true
      },
      "source": "vim-snippets/snippets"
    },
    "c8e70d31acfab3d50ef8a97f2b3de98d": {
      "content": "${1:methodName} = (${2:params}) => {\n\t${0}\n}\n",
      "doc": "Creates a method inside a class in ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "method",
      "matches": {
        "met": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c8ea592228da0682dbe528c28530289b": {
      "content": "{{ $1 }}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "{{ }} statement.",
      "matches": {
        "{": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c8fa7a68cca68bdc01c58c2b3ffd7099": {
      "content": "year = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "year": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c90294311aaa699c57200836b691aa8e": {
      "content": "System.err.println(${0});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "serr": true
      },
      "source": "vim-snippets/snippets"
    },
    "c909ce2386219c835ac53a3612297b59": {
      "content": "scope :${1:name}, { ${2:where(${3::${4:field}: ${5:'${6:value}'}})} } do\n\tdef ${7:method_name}\n\t\t$0\n\tend\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "scope with extension",
      "matches": {
        "scopee": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c90b2eca24dd6e7954844f9fbb23cdeb": {
      "content": "[${0:foo} release];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rel": true
      },
      "source": "vim-snippets/snippets"
    },
    "c9141d4870c15e330ac0d141da5da37e": {
      "content": "public ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pu": true
      },
      "source": "vim-snippets/snippets"
    },
    "c914900a10b571dba3d49dec4e1c4c1e": {
      "content": "text-emphasis accent",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:ac": true
      },
      "source": "vim-snippets/snippets"
    },
    "c9170824a8cf1dbe82f931d01f5b9a58": {
      "content": "font-smooth: never;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "c929f5cfbcc483138052f92dc1151855": {
      "content": "newtype ${1:Type} = ${2:$1} ${0:Int}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "newtype": true
      },
      "source": "vim-snippets/snippets"
    },
    "c92f49118b9ce52313f3c0b32c8904e8": {
      "content": "_.isArray(${value})",
      "doc": "_.isArray([1, 2, 3]);\n// => true\n\n_.isArray(document.body.children);\n// => false\n\n_.isArray('abc');\n// => false\n\n_.isArray(_.noop);\n// => false\n\nChecks if `value` is classified as an `Array` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isarray",
      "matches": {
        "lodash isarray": true
      },
      "source": "javascript/lodash"
    },
    "c9331c8eeccf508ef28355f61eece9d9": {
      "content": "redir => ${1:#:var}\n\t${2::TARGET}\nredir END",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "redir => var",
      "matches": {
        "redir": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c93363491c7778e39507e6a1a3969e29": {
      "content": "private:\n\t${1:/*members*/}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "private (priv)",
      "matches": {
        "priv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c9385fada050dc4157bb7f15ecaf3972": {
      "content": "\\\\item ${1:${VISUAL}}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\item",
      "matches": {
        "it": true
      },
      "source": "vim-snippets/snippets"
    },
    "c938b7aaa71b44ed82afd61ae16fa1d4": {
      "content": "has_one :${0:object}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ho": true
      },
      "source": "vim-snippets/snippets"
    },
    "c93f745274111e4c3f2fa44e87c076aa": {
      "content": "padding: ${1:20px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "padding:   all (padding)",
      "matches": {
        "padding": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c94494a437f9edff764176736f3bf4e5": {
      "content": "return ${1:this.num} -= ${2:1}",
      "doc": "decrement",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-decrementer",
      "matches": {
        "vdec": true,
        "vue decrementer": true
      },
      "source": "javascript/vue"
    },
    "c94a184f4a9bec412c4cc5213e2c6f42": {
      "content": "lang=\"${1:en}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lang": true
      },
      "source": "vim-snippets/snippets"
    },
    "c95ac190da81c4896cc7198c5feb9a90": {
      "content": "font-family: ${0:Monaco,'Courier New'},monospace;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "c9654c071e56c373145288cbc5d84e9f": {
      "content": "try {\n\t${0:${VISUAL}}\n} catch (${1:e}) {\n\t${2:/* handle error */}\n} finally {\n\t${3:/* be executed regardless of the try / catch result*/}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "try { ... } catch(e) { ... } finally { ... }",
      "matches": {
        "tryf": true
      },
      "source": "snippets/javascript"
    },
    "c973c3e8ca5a929fd5316ccabdea6ba9": {
      "content": "<slot$1>$2</slot>$0",
      "doc": "<slot></slot>. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-slote",
      "matches": {
        "slote": true,
        "vue slote": true
      },
      "source": "javascript/vue"
    },
    "c97504a8bee227503197fa0ecd57624e": {
      "content": "_.dropRight(${array}, ${n})",
      "doc": "_.dropRight([1, 2, 3]);\n// => [1, 2]\n\n_.dropRight([1, 2, 3], 2);\n// => [1]\n\n_.dropRight([1, 2, 3], 5);\n// => []\n\n_.dropRight([1, 2, 3], 0);\n// => [1, 2, 3]\n\nCreates a slice of `array` with `n` elements dropped from the end.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-dropright",
      "matches": {
        "lodash dropright": true
      },
      "source": "javascript/lodash"
    },
    "c991daeaa3a48b1e336963a67f1a1015": {
      "content": "Mouse Over    ${1:${locator}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Mouse Over",
      "matches": {
        "mover": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c9950a89e21096365530169e88aecaff": {
      "content": "@extend ${0};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ext": true
      },
      "source": "vim-snippets/snippets"
    },
    "c995e32902cc88751ad0e3ed622f59f2": {
      "content": "expect(${1:target}).toBeVisible()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect to be visible (coffee)",
      "matches": {
        "ev": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "c9986a4c265a0c65046df5bcb0a5df23": {
      "content": "text-decoration: line-through",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "c998d3579397c07600bf3bcff9e28df0": {
      "content": "_.reduce(${collection}, ${iteratee}, ${accumulator})",
      "doc": "_.reduce([1, 2], function(sum, n) {\n  return sum + n;\n}, 0);\n// => 3\n\n_.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n  return result;\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n\nReduces `collection` to a value which is the accumulated result of running\neach element in `collection` thru `iteratee`, where each successive\ninvocation is supplied the return value of the previous. If `accumulator`\nis not given, the first element of `collection` is used as the initial\nvalue. The iteratee is invoked with four arguments:\n(accumulator, value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like\n`_.reduce`, `_.reduceRight`, and `_.transform`.\n\nThe guarded methods are:\n`assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\nand `sortBy`",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-reduce",
      "matches": {
        "lodash reduce": true
      },
      "source": "javascript/lodash"
    },
    "c9a554b6af0aadb432f4a5892273b9d0": {
      "content": "display: table-row",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbr": true
      },
      "source": "vim-snippets/snippets"
    },
    "c9b459be753acea4b1ce6693dfc42a1a": {
      "content": "ldply(${1:list}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ld": true
      },
      "source": "vim-snippets/snippets"
    },
    "c9b6701fdcdeb4928bc1b66d05b6a1f9": {
      "content": "expect(${1:object}).to ${0}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "c9b8539bba5afe9dc5ba3a89fd9f9e18": {
      "content": "_.lt(${value}, ${other})",
      "doc": "_.lt(1, 3);\n// => true\n\n_.lt(3, 3);\n// => false\n\n_.lt(3, 1);\n// => false\n\nChecks if `value` is less than `other`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-lt",
      "matches": {
        "lodash lt": true
      },
      "source": "javascript/lodash"
    },
    "c9c2fd8c4a2cc2d7c409af785a6d041b": {
      "content": "export const ${1:action} = createAction('[${2:Source}] ${3:Event}', props<{${4:key}: ${5:type}}>());",
      "doc": "Creates an NgRx Action with Props",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrx-create-action-w-props",
      "matches": {
        "a-ngrx-create-action-props": true,
        "angular ng rx create action props": true
      },
      "source": "javascript/angular"
    },
    "c9c30f13ed3edec0af6f7dd03aea63b3": {
      "content": "import React, { PureComponent } from 'react'\nimport { Text, View } from 'react-native'\n\nexport class ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativePureComponentExport",
      "matches": {
        "rnpce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "c9cc6dc300fd80ce70c323a4e4b77ad7": {
      "content": "${1:obj}.html('${2:Some text <b>and bold!</b>}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "html": true
      },
      "source": "snippets/coffee"
    },
    "c9cc72595547af7425d80b8e27001441": {
      "content": "<nav>\n    ${1}\n</nav>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nav": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c9cdce87d77c8bcc929085b2c58cec44": {
      "content": "border-top-style: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdts:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "c9d864a18d7440b9ee3bcd05c84687ad": {
      "content": "${1:/* condition */} ? ${2:a} : ${3:b}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "c9db8d1a854b68924c4fe615b5abea6b": {
      "content": "echo \"${0:TARGET}\" 1>&2",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "warn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c9df11db6b4fab2f807f8f470974e32b": {
      "content": "address = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "address": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c9e25055ce31d3d0279d66f753345608": {
      "content": "${1:name}[${2:rows}, ${0:cols}]",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "df": true
      },
      "source": "vim-snippets/snippets"
    },
    "c9ea9ff600854f458f97772a9f6c91e3": {
      "content": "-moz-border-image ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "c9efdfa66328a315733c79da149cc30d": {
      "content": "${1:obj}.prepend('${2:Some text <b>and bold!</b>}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prepend": true
      },
      "source": "snippets/coffee"
    },
    "c9f0e616684100b6002c49a4e5d4667c": {
      "content": "@phdthesis{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    school = {${4}},\n    year = {${5}},\n    memo = {address, month, note},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@phdthesis": true,
        "phdthesis": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "c9f87fa8a588e9c4a6f65f1bbc64a589": {
      "content": "dictsort:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dictsort": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca01c797343b0a87f29e218d4ae43423": {
      "content": "import ${0:Http}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca1445ae14cb47563118d8db704d0b89": {
      "content": "render json: '${0:text to render}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rjson": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca146ad9287c941938bf72384022533e": {
      "content": "for (let ${1:i} in ${2:#:Things}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forin": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ca1b934ec0e2b731f959b2b929bb466f": {
      "content": "border-length: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdlt": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca2262d8ba75b152ba5e904028a45573": {
      "content": "public class ${1} extends ${2:TestCase} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tc": true,
        "testclass": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ca3c3b3f1863b78533012fa25e3e0046": {
      "content": "!important",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "!": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca41837ae0409d0d7af447c68b53c51d": {
      "content": "outline-offset ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oo": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca44b4fb8d47282b42425ddce9192cde": {
      "content": "<example>${0:#:description}</example>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<example></example>",
      "matches": {
        "example": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ca45494ccfe9f9a3a41a1ba5999084e3": {
      "content": "$this->fail(${1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->fail()",
      "matches": {
        "fail": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca4da6c836c99ab692a756f7777cd064": {
      "content": "import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends PureComponent {\n\tstatic propTypes = {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
      "doc": "Creates a React component class with ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-class-pure-component-proptypes",
      "matches": {
        "react component class pure with proptypes": true,
        "rpcp": true
      },
      "source": "javascript/react"
    },
    "ca51606d64ebf27d9000fe91d8c9db52": {
      "content": "font-emphasize-position ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "femp": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca543cac8f44cc9b9958b5b59bdf482c": {
      "content": "overflow-x: scroll;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca547d08722f63f657883f827b7ae624": {
      "content": "${1:action} unless ${2:condition}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unl": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca548c3006d6c9dceb39f970fbe3dce7": {
      "content": "default:\n\t${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "default: ...",
      "matches": {
        "default": true
      },
      "source": "gosnippets/snippets"
    },
    "ca5b3459663aec92644115c9d4c884f7": {
      "content": "${1:FIELDNAME} = models.BinaryField(${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "binary": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca606d804c83790294ad9703aafbdf8f": {
      "content": "if ${1:/* condition */} {\n\t${2:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if condition",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca6326e3f5159d2469cd27e67d3bd8b2": {
      "content": "${1}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial});",
      "doc": "reduce",
      "filetype": "base",
      "grammar": "lsp",
      "label": "reduce",
      "matches": {
        "base reduce": true
      },
      "source": "javascript/base"
    },
    "ca69149f561f666b3bd90d0451b94dbc": {
      "content": "${1:obj}.ajaxComplete(function (${1:e}, xhr, settings) {\n\t${0:// callback}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxcomplete": true
      },
      "source": "snippets/javascript"
    },
    "ca71d51c2e14de4f121b716f80547484": {
      "content": "void mouseDragged(){\n\t${0}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mouseDragged": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca72a5169f4c52dce419b9e183c996af": {
      "content": "static void Main(string[] args)\n{\n\t$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "static void main",
      "matches": {
        "svm": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ca772fed7ba67cc42e4e4a0c1f3649f4": {
      "content": "border-left: ${1:1}px ${2:solid} #${3:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-left: size style color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ca7a79fa215e9ac8c0fe4c952acdd0e0": {
      "content": "pinMode(${1}, INPUT);",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pinin": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca7d726fac409c746f5d1533bd68c934": {
      "content": "{% else %}\n\t${0:TARGET}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% else %} ...",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ca804915f55545ff622d330fdc146b6f": {
      "content": "Export-CSV -NoTypeInformation -Path ${1:path}",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "epcsv": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca8a524fd7dcf1fe8bcba2af4b62a011": {
      "content": "${1:obj}.insertAfter('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "insa": true
      },
      "source": "snippets/javascript"
    },
    "ca92e990de39cfe3d69c396f824eb06a": {
      "content": "intercept[${1:IllegalArgumentException}] {\n\t${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "intercept": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca9383e48ad923e7953b68c5c2785669": {
      "content": "character(${1}) :: ${2}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "character",
      "matches": {
        "ch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ca98f18efdd6db8c5c076200c7347c9f": {
      "content": "<a href=\"http://${1:example.com}\">${0:$1}</a>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "a:ext": true
      },
      "source": "vim-snippets/snippets"
    },
    "ca9c3b540fef02c49cb5e1e9520c198f": {
      "content": "_.isInteger(${value})",
      "doc": "_.isInteger(3);\n// => true\n\n_.isInteger(Number.MIN_VALUE);\n// => false\n\n_.isInteger(Infinity);\n// => false\n\n_.isInteger('3');\n// => false\n\nChecks if `value` is an integer.\n\n**Note:** This method is based on\n[`Number.isInteger`](https://mdn.io/Number/isInteger).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isinteger",
      "matches": {
        "lodash isinteger": true
      },
      "source": "javascript/lodash"
    },
    "caa52c342d087abf922b4baaf6c8107b": {
      "content": "for (${1:int} ${2:i} = ${3:0}; $2 < ${4}; $2++) {\n    ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "for () {}",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cab206997b6718fcc57c9b1115367161": {
      "content": "# =>",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#": true
      },
      "source": "vim-snippets/snippets"
    },
    "cab38a78b84a8d5df655972e750ff33c": {
      "content": "<td>${0}</td>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td": true
      },
      "source": "vim-snippets/snippets"
    },
    "cab6d677346eb40ba17357e469ca5333": {
      "content": "<tbody>\n\t${0}\n</tbody>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbody": true
      },
      "source": "vim-snippets/snippets"
    },
    "cab82cacb3adfe74833ba9e6b35efa07": {
      "content": "![${1:alt}](${2:url} \"${3:title}\")${4}",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "![": true
      },
      "source": "vim-snippets/snippets"
    },
    "cac6d10fda2482ad212d9ec98bac4b99": {
      "content": "require(\"optparse\", quietly = TRUE)\noption_list <-\n    list(make_option(c(\"-n\", \"--add_numbers\"), action=\"store_true\", default=FALSE,\n                     help=\"Print line number at the beginning of each line [default]\")\n         )\nparser <- OptionParser(usage = \"%prog [options] file\", option_list=option_list)\narguments <- parse_args(parser, positional_arguments = TRUE)\nopt <- arguments$options\nif(length(arguments$args) != 1) {\n    cat(\"Incorrect number of required positional arguments\\n\\n\")\n    print_help(parser)\n    stop()\n} else {\n    file <- arguments$args\n}\nif( file.access(file) == -1) {\n    stop(sprintf(\"Specified file ( %s ) does not exist\", file))\n} else {\n    file_text <- readLines(file)\n}",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "optparse": true
      },
      "source": "vim-snippets/snippets"
    },
    "caca89b159e6b04b2fa1cbb7d821017f": {
      "content": "<!% ${1:} %>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "<!%",
      "matches": {
        "<!%": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cacef370a8dfdafd9d17f34804696462": {
      "content": "for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {\n\t${6}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iter": true
      },
      "source": "vim-snippets/snippets"
    },
    "cad46a9ef645eb6dfa470e5087abc6cf": {
      "content": "<figure>${0}</figure>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "figure": true
      },
      "source": "vim-snippets/snippets"
    },
    "cada6ea609cc80fb8102bce288ae02df": {
      "content": "for ${1}\n    ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "for ... end",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cae34377593eedb8cbd896771118abde": {
      "content": "bind:${1:property}={${2:variable}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-bind-property",
      "matches": {
        "svbind-property": true,
        "svelte bind property": true
      },
      "source": "javascript/svelte"
    },
    "caf7907a9dd0d2f0e68bc4188b48035e": {
      "content": "extlookup(\"${1:variable}\", \"${2:default}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "Extlookup with defaults",
      "matches": {
        "extlookup": true
      },
      "source": "vim-snippets/snippets"
    },
    "cafad46bc3c76e3dc2f32dfb190a2e4f": {
      "content": "expect(${1:target}).toThrowError(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to throw error (js)",
      "matches": {
        "ethe": true
      },
      "source": "vim-snippets/snippets"
    },
    "cafefc633bc93bc57f5c11e4724480a5": {
      "content": "<pre>{{${1:model} | json}}</pre>$0",
      "doc": "Angular pre debug | json",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "pre-w-json",
      "matches": {
        "a-prej": true,
        "angular pre json": true
      },
      "source": "javascript/angular"
    },
    "cb0086e5088c7e1297e85d2d4da0e75b": {
      "content": "&#x2190;",
      "doc": "",
      "filetype": "slim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "left": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb0112a141fb7be8d2ef63f1d2d74f1c": {
      "content": "class Class\n\tdef descendants\n\t\tObjectSpace.each_object(::Class).select { |klass| klass < self }\n\tend\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "descendants": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb058b67559b37e210c50c7b069e6589": {
      "content": "$(this)",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "this": true
      },
      "source": "snippets/javascript"
    },
    "cb0b8bd241b0d3d1e8b843bfe4c2fe08": {
      "content": "grid-row-end ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gre": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb0bf3382bcdf5d2b7f9c0a899fcfa45": {
      "content": "impl AsMut<${1:Ref}> for ${2:Type} {\n\tfn as_mut(&mut self) -> &mut ${3:$1} {\n\t\t&mut self.${0:field}\n\t}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "AsMut trait implementation",
      "matches": {
        "asmut": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb1e46eb1c568faef481b5e21738473b": {
      "content": "if (${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "supercollider",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb1f65f42f824e0f3b570f60980c16ad": {
      "content": "margin-top: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mt:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb305686b7c349496b3ba9b1804117fa": {
      "content": "<% for (let ${1:i = 0}; ${2:i<arr.length}; ${3:i++}) { %>\n\t${0:body}\n<% } %>",
      "doc": "",
      "filetype": "ejs",
      "grammar": "snu",
      "label": "ejs for loop",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cb308a8b4def1a2e86652c67fb7252e1": {
      "content": "const ${1:name} = reactive({\n\t${2:count}: ${3:0}\n})",
      "doc": "Vue Composition api - reactive",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Composition API - Reactive",
      "matches": {
        "v3reactive": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "cb3180bebd52ef973de5a19b436e6722": {
      "content": "let\n\t${1} =\n\t\t${2}\nin\n\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb362a6f9a6fcf3c688c3d86b70e5b03": {
      "content": "@media screen and (min-width: ${0}px)",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@msmw": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb364520a423b2a4b0cec66fefff934b": {
      "content": "on('${1:event_name}', function(${2:stream}) {\n  ${3}\n});",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "on": true
      },
      "source": "snippets/javascript"
    },
    "cb38cf3dcc3a9d66c0eb32f921ad84cd": {
      "content": "render text: '${1:text to render}', status: ${0:401}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rts": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb3e42b124677cae8b95a0c4b4984517": {
      "content": "background-clip: border-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb45d39369481f8db17a02988b1456d0": {
      "content": "it { should belong_to(:${1}).counter_cache ${0:true} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isbtcc": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb4c1c3d5240c4a0fc3c820154c5dc25": {
      "content": "_.sortedLastIndex(${array}, ${value})",
      "doc": "_.sortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4\n\nThis method is like `_.sortedIndex` except that it returns the highest\nindex at which `value` should be inserted into `array` in order to\nmaintain its sort order.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sortedlastindex",
      "matches": {
        "lodash sortedlastindex": true
      },
      "source": "javascript/lodash"
    },
    "cb588e5264d984393511a68729f0b916": {
      "content": "protected\n${0}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prot": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb598549ff37f5d5eaa15e8f29d239b7": {
      "content": "status(${0:text});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "status": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb5b6becfbafc86eb47431283bc80905": {
      "content": "word-wrap: suppress;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb5f3bb65e1c750cf3241f4a77fce278": {
      "content": "strokeWeight(${0:1});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "strokeWeight": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb65518407d91addf1f526e78fade685": {
      "content": "this.setState({$0})",
      "doc": "Performs a shallow merge of nextState into current state",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentSetStateObject",
      "matches": {
        "sst": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "cb6a8f004b4399e48bfdcf08c0139cce": {
      "content": "has_and_belongs_to_many :${1:object}, join_table: '${2:table_name}', foreign_key: '${3}_id'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "habtm": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb7246a7f96a64e983958fe56f01bbcb": {
      "content": "Wait Until Element Is Enabled    ${1:${locator}}    ${2:${timeout=None}}    ${3:${error=None}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Wait Until Element Is Enabled",
      "matches": {
        "wueie": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cb72a912d8e17854f0bd981cb7eb3fae": {
      "content": "(fn [${1:arg-list}] ${0:code})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb75ba65cab918ec206e3ea6a3253fff": {
      "content": "#{$1}$0",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Interpolated Code",
      "matches": {
        "#": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cb7f3a5df6333c725a54a7d315eee2fa": {
      "content": "$t('$1')",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trans": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb886d891cbf334f96e9f6d30bdf9c7b": {
      "content": "{# $1 #}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "comment",
      "matches": {
        "#": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cb986041de3b662cbc300abc319346bc": {
      "content": "${1:public} string ${2}(${3})\n{\n\t${0:return \"\";}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ms": true
      },
      "source": "vim-snippets/snippets"
    },
    "cb9e55f1e0560e13498bac5ec0a6591f": {
      "content": "justify-content: left",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "cbaa571a5f623de3b11b9c3a101d4962": {
      "content": "do ${1}\nend do",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "do",
      "matches": {
        "do": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cbab9a8f98f2e9e864b472cee45a7ddd": {
      "content": "@unless (${1:condition})\n    ${2}\n@endunless",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@unless ... @endunless",
      "matches": {
        "unless": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cbac526716c0b76a0fb73f77dfaafa0e": {
      "content": "${1:obj}.nextUntil('${2:selector expression}'${3:, 'filter expression'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nextu": true
      },
      "source": "snippets/javascript"
    },
    "cbaea61883d21a118552f50731cf41a0": {
      "content": "text-align-last: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "cbb8ddc375fe4a0e583b23e5ce8fd786": {
      "content": "display: -moz-inline-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:mib": true
      },
      "source": "vim-snippets/snippets"
    },
    "cbbe8335fe16518d2db3a10cc3094599": {
      "content": "boolean ${1:b}${2: = }${0:true};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "boolean": true
      },
      "source": "vim-snippets/snippets"
    },
    "cbcb583d169f5339765f7718af01df14": {
      "content": "this.$route.params.${1:id}",
      "doc": "Nuxt Route Params",
      "filetype": "nuxt-script",
      "grammar": "lsp",
      "label": "Nuxt Route Params",
      "matches": {
        "nparam": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "cbcd47cb7c71c7a9953173a7276cd1ab": {
      "content": "const",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "con": true
      },
      "source": "vim-snippets/snippets"
    },
    "cbd54aa0866ed25d8450cb55e9b5242c": {
      "content": "background-attachment: ${1:scroll/fixed};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background-attachment: scroll:fixed (background)",
      "matches": {
        "background": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cbd6827632ddd9cb54ea5c1d25b73485": {
      "content": "border-right-width: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrw": true
      },
      "source": "vim-snippets/snippets"
    },
    "cbdc0b8d85858e5b0a2fd435b99691bc": {
      "content": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { ${2:ComponentName}Component } from './${3:filename}.component';\n\n// Consider using this interface for all CanDeactivate guards,\n// and have your components implement this interface, too.\n//\n//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n//\n// export interface CanComponentDeactivate {\n// canDeactivate: () => any;\n// }\n\n@Injectable({providedIn: ${4:'root'}})\nexport class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {\n\tcanDeactivate(\n\t\tcomponent: ${2:ComponentName}Component,\n\t\tcurrentRoute: ActivatedRouteSnapshot, \n\t\tcurrentState: RouterStateSnapshot\n\t): Observable<boolean>|Promise<boolean>|boolean {\n\t\treturn false;$0\n\t}\n}",
      "doc": "Angular CanDeactivate guard",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular CanDeactivate Guard",
      "matches": {
        "a-guard-can-deactivate": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "cbec2e6e61e472a9499db3c8385beabb": {
      "content": "background-clip: padding-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "cbece9c6c2e86507672f27037bb5218b": {
      "content": "import React from 'react'\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React Arrow Function Component with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactArrowFunctionExportComponent",
      "matches": {
        "rafce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "cbf3b21cfe597ed8962ede7e56215628": {
      "content": "${1:obj}.clearQueue(${2:'queue name'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clearq": true
      },
      "source": "snippets/javascript"
    },
    "cbfc1374a01d1b653cbca52c9c8100e6": {
      "content": "if ${1:TARGET} then ${2} else ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "if..then..else - oneline",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cc0078b98566e23986da702dca2921ff": {
      "content": "import { ${1:libName} } from '${1:libName}';",
      "doc": "import a library",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Import Library",
      "matches": {
        "vimport-lib": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "cc048b801500ff19e1abe8fd3629f6e9": {
      "content": "updated () {\n\t${0};\n},",
      "doc": "updated lifecycle method",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-lifecycle-updated",
      "matches": {
        "vue lifecycle updated": true,
        "vupdated": true
      },
      "source": "javascript/vue"
    },
    "cc05e9fa124144413ae164f1d45726b7": {
      "content": "batch(linecount=$1, fill_with=${2:None})",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "batch items",
      "matches": {
        "batch": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cc09218501bdf10afff90f09f91ba23a": {
      "content": ".. attention::\n\t${0:hey!}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "att:": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc0946df84f6c39df358d5deb2027bf9": {
      "content": "$.Deferred()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "D": true
      },
      "source": "snippets/coffee"
    },
    "cc09c31398fc147a94fe0c78025dc3a6": {
      "content": "{\n\t${VISUAL}$0\n},",
      "doc": "",
      "filetype": "json",
      "grammar": "snu",
      "label": "Object",
      "matches": {
        "o": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cc0c27dfaf2f16762a8c744cd3184039": {
      "content": "import { NavLink } from 'react-router-dom'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React Browser Router - NavLink",
      "matches": {
        "imbrnl": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "cc1733f51aa863c210a88df93817784d": {
      "content": "render text:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render :text",
      "matches": {
        "rt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cc1ddba58e2b216a26c518164561bf2e": {
      "content": "v-for=\"${1:item} in ${2:items}\"",
      "doc": "Expects: Array | Object | number | string",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-for-without-key",
      "matches": {
        "vforwithoutkey": true,
        "vue v-for-without-key": true
      },
      "source": "javascript/vue"
    },
    "cc21d573d527d3f46312919ee12df1fc": {
      "content": "mutations: {\n\t${1:updateValue}(state, ${3:payload}) => {\n\t\tstate.${2:value} = $3;\n\t}\n}",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vmutations": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc2bb6a8c193a8abf85701defe89d28c": {
      "content": "(${1:a}: ${2:T}) => $1 ${0}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fcf": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc2fba344dae2de50b60aeb6068a2110": {
      "content": "margin: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc32957a2b873080ca578e1f4f455e3d": {
      "content": "font-emphasize: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fem": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc3a94d544aa3b8a0f2a7d81ba2c0a41": {
      "content": "[Teardown]    Run Keyword If Test Failed    Run Keywords\n...    Import library    Dialogs    AND\n...    Pause execution",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Teardown Pause - pause test execution only on failure",
      "matches": {
        "tpause": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cc3b1695dcfed076ebd884edbee6d976": {
      "content": "class ${1:name}${2:(arg)}${3: extends }${4: with} {\n\t${5:override def toString = \"$1\"}\n\t${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc3b962e1d5c1b8b22e0ff6e8781645d": {
      "content": "class $1 extends StatefulWidget {\n\t@override\n\t_$1State createState() => _$1State();\n}\nclass _$1State extends State<$1>\n\t\twith SingleTickerProviderStateMixin {\n\tAnimationController _controller;\n\t@override\n\tvoid initState() {\n\t\tsuper.initState();\n\t\t_controller = AnimationController(vsync: this);\n\t}\n\t@override\n\tvoid dispose() {\n\t\tsuper.dispose();\n\t\t_controller.dispose();\n\t}\n\t@override\n\tWidget build(BuildContext context) {\n\t\treturn Container(\n\t\t\t$2\n\t\t);\n\t}\n}",
      "doc": "",
      "filetype": "dart-flutter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stanim": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc443eae1e9c3d1f51483ca4cf95be29": {
      "content": "format.${1:html|xml|json|js|any} { $0 }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "format (respond_with)",
      "matches": {
        "format": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cc4778b6be4de72d29d5c78374587ad5": {
      "content": "list-style-position inside",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisp:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc480e91b0914a55e72ddc4a070300ab": {
      "content": "set logscale ${1:#:axis}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set logscale <axis>",
      "matches": {
        "logscale": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cc4a4d82de135fc2ef44edee1533662f": {
      "content": "import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\tstatic propTypes = {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
      "doc": "Creates a React component class with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassPureComponentWithPropTypes",
      "matches": {
        "rpcp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "cc4b168a9fd624b388fcc5d7fa348709": {
      "content": "align-items flex-end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc505006d167030a6edd88ea91652676": {
      "content": "<%= number_to_currency(${1}) %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ntc": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc5587ddcc7937823ed234d9a049fb20": {
      "content": "echo CHtml::link('${1:text}',array(${2}),array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhlink": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc59fd0b1b99ad306a640d7c1d8a99c5": {
      "content": "{\n\t\"type\": \"blog\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_blog": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc65fc1b2f85389489c4dfc7c23b367f": {
      "content": "${1:obj}.reset (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reset": true
      },
      "source": "snippets/coffee"
    },
    "cc6b5479268873339e6bdc772304b307": {
      "content": "_.omit(${object}, ${paths})",
      "doc": "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.omit(object, ['a', 'c']);\n// => { 'b': '2' }\n\nThe opposite of `_.pick`; this method creates an object composed of the\nown and inherited enumerable property paths of `object` that are not omitted.\n\n**Note:** This method is considerably slower than `_.pick`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-omit",
      "matches": {
        "lodash omit": true
      },
      "source": "javascript/lodash"
    },
    "cc713ec18f242a0171bb984561474b81": {
      "content": "visibility hidden",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc73dac4f5370c3ab0b0d8464ecb3f96": {
      "content": "${1:#:value_name}: ${0:#:value},",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": ":,",
      "matches": {
        "key-value": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cc82191c5ac44caf6fb625a6f82f1cd4": {
      "content": "align-self last baseline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:lb": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc82904394f34805701ca2895e9a008f": {
      "content": "border-bottom-style: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bbs": true,
        "border-bottom-style": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cc8482122107e46af86dffb30f2fc450": {
      "content": "loadVariables(${1:url}, ${2:level}, ${3:method});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cc8694571dc803c3ab7d7328dec15cd0": {
      "content": "font-stretch normal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc91639580c22a290ad0ea615b706d8a": {
      "content": "{\n\t\"type\": \"url\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"info\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_url": true
      },
      "source": "vim-snippets/snippets"
    },
    "cc91d9b6813d0b0a6645275c644739fa": {
      "content": "var ${1:function_name} = function $1(${2}) {\n\t${0:${VISUAL}}\n};",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vf": true
      },
      "source": "snippets/javascript"
    },
    "cca2b400728872e67d7f33afba8a9bae": {
      "content": "if ${1:#:condition} {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cca7f9f84cb951a0cb8e3dcf046759e2": {
      "content": "${1:FIELDNAME} = models.OneToOneField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "OneToOneField",
      "matches": {
        "o2o": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ccae54cc1df4e1c2c5456ec6ca700650": {
      "content": "if ${1:condition} do\n\t${2:${VISUAL}}\nelse\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "if .. do .. else .. end",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "ccb02d62f218fa1940ccb759a8738cbb": {
      "content": "${1:FIELDNAME} = models.NullBooleanField(${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nullbool": true
      },
      "source": "vim-snippets/snippets"
    },
    "ccbb7b11061769fa380008ce8557f8a9": {
      "content": "print-%: ; @echo $*=$($*)",
      "doc": "",
      "filetype": "make",
      "grammar": "snu",
      "label": "",
      "matches": {
        "print": true
      },
      "source": "vim-snippets/snippets"
    },
    "ccc2afd14409149d719e23bf665aa2d5": {
      "content": "${1:#:set the_color to }choose color default color ${2:{65536, 65536, 65536\\}}",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "choose",
      "matches": {
        "choose_Color": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ccd77b03cac1eb83e786311fdaf5cdfe": {
      "content": "__PRETTY_FUNCTION__",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "PF": true
      },
      "source": "vim-snippets/snippets"
    },
    "ccdd4e23254b4c2ee4b225acf9c3bd6c": {
      "content": "{# ${1:comment} #}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cce7ebc33346bbc80026f5aabd693132": {
      "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "hocComponent",
      "matches": {
        "hoc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "cce9ec3fe29b6f11ba4a1e39111422e0": {
      "content": "border-bottom-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-bottom-style: size style color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ccf020daff392c9b7345f5e13a900107": {
      "content": "fmt.Sprintf(\"%${1:s}\", ${2:var})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Sprintf(...)",
      "matches": {
        "sp": true
      },
      "source": "gosnippets/snippets"
    },
    "ccf1972339394801120cb021b3fd9d5d": {
      "content": "augroup ${1:AU_NAME}\n\tautocmd!\n\tautocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} ${0}\naugroup END",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "augroup ... autocmd block",
      "matches": {
        "au": true
      },
      "source": "vim-snippets/snippets"
    },
    "ccf25a0399538f8127cfff631a18d661": {
      "content": "font-stretch: expanded",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "ccf7e2c3d780abe6b6d7e9a4ca6f1b01": {
      "content": "@change=\"$emit('change', $event.target.value)\"",
      "doc": "Vue Emit from Child Component",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Emit from Child",
      "matches": {
        "vemit-child": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "ccfaebf165fa22d114f570728aa23836": {
      "content": "log.Println(\"${1:${VISUAL}}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "log.Println(...)",
      "matches": {
        "ln": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "ccfc7fa2659910113a0a24884c85529e": {
      "content": "set ${1:#:axis}tics ${2:#:start}, ${3:#:incr}, ${4:#:end}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set x/y tics start, incr, end",
      "matches": {
        "tics": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cd02d3a9ca771e33e57d41460500c14a": {
      "content": "| prepend: '${1:string}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prepend": true
      },
      "source": "vim-snippets/snippets"
    },
    "cd03c0ca4a4498702358b176691a9dc1": {
      "content": "$_FILES['${1:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "F": true
      },
      "source": "vim-snippets/snippets"
    },
    "cd054de68ebf6e66b069944625ac1bce": {
      "content": "module ${1} = struct\n  ${2:TARGET}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "module struct",
      "matches": {
        "mod": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cd079f015e6fbc5089af0f5803dc9297": {
      "content": "import React, { PureComponent } from 'react'\n\nexport class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:$TM_FILENAME_BASE}\n",
      "doc": "Creates a React pure component class with ES7 module system export",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-class-export-pure-component",
      "matches": {
        "react component class export pure": true,
        "rpce": true
      },
      "source": "javascript/react"
    },
    "cd09df26c36e2ece946a7336ced83d51": {
      "content": "{ ${1:try} } always { ${0:always} }",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "always": true
      },
      "source": "vim-snippets/snippets"
    },
    "cd1064484f7be031407a78ff70aae6ce": {
      "content": "import { ${1:Observable} } from 'rxjs';\n$0",
      "doc": "RxJs import",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "RxJs Import",
      "matches": {
        "a-rxjs-import": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "cd1712f36a07ac593df64eb7872b484d": {
      "content": "for (int ${1:i} = ${2}; $1 >= 0; $1--) {\n    ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "for (int x; ...; x--) {}",
      "matches": {
        "forri": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cd2449cbde52b40d11cc7c5208463367": {
      "content": "[formGroup]=\"${1:form}\"",
      "doc": "Angular formGroup",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngformgroup",
      "matches": {
        "a-formgroup": true,
        "angular ng form group": true
      },
      "source": "javascript/angular"
    },
    "cd2c4cf588a4314ed991b7bd5db2814d": {
      "content": "padding-top ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pt": true
      },
      "source": "vim-snippets/snippets"
    },
    "cd2c6987f53e0d71ba4e0d1af37f5d85": {
      "content": "justify-items: stretch;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "cd3f34a4aa9ed6841f2cbaedfc235049": {
      "content": "{% autoescape %}\n\t${0}\n{% endautoescape %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig autoescape",
      "matches": {
        "autoescape": true
      },
      "source": "vim-snippets/snippets"
    },
    "cd47ddeaeaeb2f9be37f49c42bf73c9a": {
      "content": "useImperativeHandle(\n\t${1:ref},\n\t() => {\n\t\t${2:handler}\n\t},\n\t[${3:input}],\n)",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useImperativeHandle",
      "matches": {
        "useImperativeHandle": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "cd4fb90a415e2efc4ff308439d19e446": {
      "content": "${1:Title}\n-----${2:-}\n${0}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "-": true
      },
      "source": "vim-snippets/snippets"
    },
    "cd55f09c9df1d33dca6def456944d052": {
      "content": ".. hint:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "hint",
      "matches": {
        "hint": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cd62a53bc49a89ff272bf0f24eb35353": {
      "content": "@load \"${1}\"${0}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "@load",
      "matches": {
        "loa": true
      },
      "source": "vim-snippets/snippets"
    },
    "cd64bd2ff7eb81a9dd3ba15e0261f842": {
      "content": "NSAutoreleasePool *pool = [NSAutoreleasePool new];\n$0\n[pool drain];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "NSAutoreleasePool (pool)",
      "matches": {
        "pool": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cd6a961665de31e144e423b4485a2e97": {
      "content": "<IfModule ${1:module_name}>\n        ${2}\n</IfModule>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifmodule": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cd6ed20954af3f8b06305a82f15ceb0b": {
      "content": "bind:${1|clientWidth,clientHeight,offsetWidth,offsetHeight|}={${2:variable}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-bind-block-level",
      "matches": {
        "svbind-level": true,
        "svelte bind level": true
      },
      "source": "javascript/svelte"
    },
    "cd78d4260a6eda1afffb4c24ab44a232": {
      "content": "::before",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "::b": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cd7fe05cdc3397aba6cfcdb8469b04fb": {
      "content": "for ${1:i} := 0; $1 < ${2:N}; $1++ {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for 0..N-1 { ... }",
      "matches": {
        "fori": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "cd889812caeb551657f2da4bcda06224": {
      "content": "static getDerivedStateFromProps(props, state) {\n\t${1}\n}",
      "doc": "Invoked right before calling the render method, both on the initial mount and on subsequent updates.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "getDerivedStateFromProps",
      "matches": {
        "gdsfp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "cd94226c90325c643087917a4300a6e9": {
      "content": "if (${1}) {\n\t${0:${VISUAL}}\n} else {\n\t${2}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "if (cond) { ... } else { ... }",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "cd948b2d7de1dce7ae20dcf671d01c22": {
      "content": "try {\n\t${1:TARGET}\n} catch (${2:#:Exception} $e) {\n\t${3:#:code}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cda82323b10ff3776002448ff062cab6": {
      "content": "${1:obj}.insertAfter('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "insa": true
      },
      "source": "snippets/coffee"
    },
    "cdaeb1f38d40c27dda77a04670e1eed0": {
      "content": "border-fit scale",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "cdb290cedd9a13893d7aeb6ba91434da": {
      "content": "render() {\n\treturn (\n\t\t<>\n\t\t\t${2}\n\t\t</>\n\t);\n}",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ren": true
      },
      "source": "snippets/javascript"
    },
    "cdbcf675bc9f167bbf25f8482f8896b2": {
      "content": "<%= link_to \"${1:Link text...}\", ${2:parent}_${3:child}_path(${4:@$2}, ${0:@$3}) %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "linp": true
      },
      "source": "vim-snippets/snippets"
    },
    "cdc640cee13f1e18f59f198250504823": {
      "content": "<ng-template [ngTemplateOutlet]=\"${1:outlet}\" [ngOutletContext]=\"${2:context}\"></ng-template>",
      "doc": "Angular ng-template",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ng-template",
      "matches": {
        "a-ng-template": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "cdc882d960aa2ea885a780ec63efa0ee": {
      "content": "do\n\t$0\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "do block",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cdcc5e1e0c8878d0fd5bb4323a9c8045": {
      "content": "receive do\n${1} -> ${2}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "receive .. do .. end",
      "matches": {
        "rec": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cdcd921803830b124862d8b1fbfe15db": {
      "content": "if err != nil {\n  t.Errorf(\"${1}\")\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err != nil { t.Errorf(...) }",
      "matches": {
        "ter": true
      },
      "source": "gosnippets/snippets"
    },
    "cdd2865b0365e7a25c28192d0ac0bffc": {
      "content": "<input type=\"password\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:password": true
      },
      "source": "vim-snippets/snippets"
    },
    "cdd5829ac4c73deb6de834232420582a": {
      "content": "throw(${1})\n${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "throw",
      "matches": {
        "thr": true
      },
      "source": "vim-snippets/snippets"
    },
    "cde4c37e5e6a8d888771e7ff6b9ff540": {
      "content": "@testset \"${1}\" begin\n\t${2}\n\t@test ${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "@testset with @test",
      "matches": {
        "@t": true
      },
      "source": "vim-snippets/snippets"
    },
    "cded7ee5794827d024714b62ae79cbe5": {
      "content": "[ngStyle]=\"{${1:style}: ${2:expression}}\"",
      "doc": "Angular ngStyle",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngstyle",
      "matches": {
        "a-ngstyle": true,
        "angular ng style": true
      },
      "source": "javascript/angular"
    },
    "cdf60ca761fe377bf21f282aaa7b1ee0": {
      "content": "UPDATE ${1:table}\nSET ${2:column} = ${3:value}\nWHERE ${4:condition};",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "UPDATE ... SET ... WHERE ...",
      "matches": {
        "UPDATE_DATA": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cdfba068f5dd412dfbd838774e0e3794": {
      "content": "declare\n\t${1}\nbegin\n\t${0}\nend;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "declare block",
      "matches": {
        "dec": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce031fa89d68c943d7df5c4ca491d10b": {
      "content": "if $1 then\n\t$0\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "if statement",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ce06e55f2d1a60e9a443259fbebbe425": {
      "content": "<figcaption>${0}</figcaption>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "figcaption": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce0a984208d1ba4bd4c03d908b3b1559": {
      "content": "fn(${1:args}) -> ${2:TARGET} end",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "fn(..) -> .. end",
      "matches": {
        "fn": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ce107a6c95126f4fdcc6749bc5d570f6": {
      "content": "$this->shouldNotHaveType($1);",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldNotHaveType('Type')",
      "matches": {
        "sntype": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ce183d0bc8acb5d80ebf5c9f47931b1d": {
      "content": "list-style-type decimal-leading-zero",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:dclz": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce23c972b32d6e36c2ba2729dd05132b": {
      "content": "arrayCopy(${1:src}, ${2:dest}, ${3:, }${0:length});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "arrayCopy": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce27e8280cf5fe0bad2fe0b52c85d6a3": {
      "content": "class ${1:name} = object\n\t${2:methods}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "class",
      "matches": {
        "class": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ce2ceca91fdcd532db02ddbcaccb58ea": {
      "content": "internal bool ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb&": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce30901d20c4f846b894a92d59253d87": {
      "content": "import '${1:module}';$0",
      "doc": "Imports entire module in ES6 syntax without module name",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "importNoModuleName",
      "matches": {
        "imn": true
      },
      "source": "vscode-javascript/snippets"
    },
    "ce336a27ab0ed2a3133650959fb5208e": {
      "content": "border-top-left-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtli": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce3a3364ab2fcdcfcc08c0b6d6285b67": {
      "content": "text-transform: capitalize;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce3a66c1babb856bd68ca2741c6557f4": {
      "content": "#region ${1:#:name}\n    ${0:TARGET}\n#endregion",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reg": true,
        "region": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ce3dbc69a3768f1c214215e9ffb8f9b1": {
      "content": "{% continue %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "continue": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce44893a3d2fd89a0e9234ee7dff1b40": {
      "content": "${1:obj}.hide('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hide": true
      },
      "source": "snippets/coffee"
    },
    "ce45cf6a46e3b40294444207fc31da93": {
      "content": "$this->shouldImplement($1);",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldImplement('Type')",
      "matches": {
        "simplement": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ce69bf82917c4d3721b4497c4c0e4f9a": {
      "content": "PropTypes.bool.isRequired,",
      "doc": "Bool prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeBoolRequired",
      "matches": {
        "ptbr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "ce6fa9edab98196d22653ff036a23f0d": {
      "content": "justify-content space-between",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce74bbc6e400442d5412f6d5a36ff1ec": {
      "content": "list-style-type: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce7bdcf8740546b9d557f5ce990ad5a9": {
      "content": "grid-auto-flow: column dense",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:cd": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce7e3fb7a1a24b19adee0d3474680794": {
      "content": "/**\n * ${0}\n */",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "/**": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce872cd8e9c1c507a8d7123b3b763bee": {
      "content": "outline-color: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oc": true,
        "outline-color": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ce8b84fae2f90690359ea7c30c0588b9": {
      "content": "(when ${1}\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce8ca3a79e820c63b59d170116a95df9": {
      "content": "try\n\t${1}\ncatch ${2:err}\n\t${0}\nend",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "try ... catch",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "ce8f975102716c9d4679366b241ce94b": {
      "content": "justify-content: right",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "cea255e8a698039bc0287a23da9211e1": {
      "content": "with open(${1:#:file}, '${2:r}') as ${3:f}:\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fileidiom": true,
        "with_open": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cea34f978619274bd0a310277803a401": {
      "content": "match ${1:object}\n| ${2:value} => ${3}\n| otherwise => void",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mat": true
      },
      "source": "vim-snippets/snippets"
    },
    "cea486c73cc9ceb90ae9b3ca7cc0bcde": {
      "content": "post {\n\tfixed {\n\t\t${1}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pf": true
      },
      "source": "vim-snippets/snippets"
    },
    "ceb11d0a83f37b84672f5c6a9fd0e3b1": {
      "content": "$this->assertCount(${1:$expectedCount}, ${2:$haystack});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertCount($count, $haystack)",
      "matches": {
        "asco": true
      },
      "source": "vim-snippets/snippets"
    },
    "ceb3c5143798fe6d3882dfb6960e4316": {
      "content": "align-content end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "ced0a31fcb23e50a15621d5fe287fca0": {
      "content": "it.todo('${1:should }');",
      "doc": "creates a test placeholder",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-it-todo",
      "matches": {
        "itt": true,
        "jest it todo": true
      },
      "source": "javascript/jest"
    },
    "ced239f56883d12fad11b62fd05ebb18": {
      "content": "\\texttt{${1:TARGET}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\texttt": true,
        "texttt \\texttt{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ced4ba0a80a6be25fee9c364447d90e3": {
      "content": "for {\n\tselect {\n\t\tcase ${2:${1:result} := }<- ${3:channel}:\n\t\t\t${0}\n\t}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for select",
      "matches": {
        "forsel": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "ced9427bcaaf1a3d7ea01377dbb64a41": {
      "content": "private def ${1:method_name}${2:(${3:*args})}\n\t$0\nend",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "private def <name>...",
      "matches": {
        "\"\\b(pde)?f\"": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cefacc8bd2bf8ae484488de43a3fda3e": {
      "content": "class ${1:ModelName}Admin(admin.ModelAdmin):\n\t${0}\nadmin.site.register($1, $1Admin)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "modeladmin": true
      },
      "source": "vim-snippets/snippets"
    },
    "cefc639ad6197160c6963f984b66e3fb": {
      "content": "|> Array.map (fun ${1} -> ${0})",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "amap": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf011da4c3004de61f1b8f323e6df92f": {
      "content": "(define ${1} ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf018b18be7c136b719ca10685250d0b": {
      "content": "if ($1)\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "if statement",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cf06d1542b78d9f232e572138f3cb38f": {
      "content": "<area shape=\"default\" coords=\"${1}\" href=\"${2}\" alt=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "area:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf0cbc65accda0bdef300fbf5ace1185": {
      "content": "notify { \"${1:message}\": }",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "notify": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf0d7622c99827737722a812f54da74e": {
      "content": "def __get__(self, instance, owner):\n\t${1:pass}\ndef __set__(self, instance, value):\n\t${2:pass}\ndef __delete__(self, instance):\n\t${3:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "methods implementing descriptors",
      "matches": {
        "desc": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf0f9e8075cd48fd61502363fa5a23dd": {
      "content": "import ${1:Name} from '@/components/${1:Name}.vue';\n\nexport default {\n\tcomponents: {\n\t\t${1:Name}\n\t},\n};",
      "doc": "import a component and include it in export default",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Import Export",
      "matches": {
        "vimport-export": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "cf1896443191c2ebbab2ac285c478099": {
      "content": "class $1Inline(admin.StackedInline):\n\t'''\n\tStacked Inline View for $1\n\t'''\n\tmodel = ${2:$1}\n\tmin_num = ${3:3}\n\tmax_num = ${4:20}\n\textra = ${5:1}\n\traw_id_fields = ($6,)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Stacked Inline",
      "matches": {
        "stackedinline": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cf1f3d28f8b2d47553ce6a28db486aee": {
      "content": "curveTightness(${0:squishy});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "curveTightness": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf233215f35b1d4b133d7d81cad45559": {
      "content": "unless ${1:condition} do\n\t${2:${VISUAL}}\nelse\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "unless .. do .. else .. end",
      "matches": {
        "unlesse": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf23740eb5cf62b6f441632124cd8534": {
      "content": "if ${1:condition}, do: ${2}, else: ${0}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "if .. do: .. else:",
      "matches": {
        "ife:": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf2771613bbd39cd232ab95fa9301032": {
      "content": "{% raw %}${0}{% endraw %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "raw": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf288f1c49ac4c9b1c62515fccb0755c": {
      "content": "align-self end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf28dd0a5bb04203ecf9781975f7b095": {
      "content": "${1:classname}Class = React.createClass\n\tdisplayName: \"$1\"\n\trender: ->\n\t\t$2\n$1 = React.createFactory($1)",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define Class",
      "matches": {
        "createClass": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cf2b76629c33d9791d8c4ab9fe2b01fd": {
      "content": "typedef struct ${1:#:name} {\n    ${0:TARGET:data}\n};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "struct_typedef": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cf30c2056610951bc6c68e65030062e1": {
      "content": "grid-auto-flow: row;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf4099c608751913b3fffcf30d1c65c1": {
      "content": "<meta http-equiv=\"${1}\" content=\"${2}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "meta": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf480f1797090a2958cab8dc398a0866": {
      "content": "{% switch ${1} %}\n\t{% case \"${2}\" %}\n\t\t${0}\n\t{% default %}\n{% endswitch %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig switch",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf5e80c29b9a93ae4faa3820318a32bb": {
      "content": "must_send [ ${1:what}, :${2:method}, ${3:args} ]",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "msend": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf66543cf995f18c6fd9269ed8d99eff": {
      "content": "place-content: start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf7d2795c5ab6e908ad0823a88c8cfcc": {
      "content": "If ${1:condition 1} Then\n\t${2:; True code}\nElseIf ${3:condition 2} Then\n\t${4:; True code}\nElse\n\t${0:; Else code}\nEndIf",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifelif": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf833f5d148c89cf2e74db5abab62066": {
      "content": "catch (${1:Exception} ${2:e}) {\n    ${0:Console.WriteLine(e.Message);}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "catch () {}",
      "matches": {
        "catch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cf9050d4d92516308f08911f248ebb42": {
      "content": "page-break-after: right;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf95d2c40ee90d0781b6d9ec836b2351": {
      "content": "echo CHtml::activeId(${1:model}, '${0:attribute}');",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhai": true
      },
      "source": "vim-snippets/snippets"
    },
    "cf974e06753b5583b72fc31b4e9008ce": {
      "content": "$(() ->\n\t${0}\n)",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ready": true
      },
      "source": "snippets/coffee"
    },
    "cf9e1b33e57111d37c257bb1dcd7cf16": {
      "content": "(${1:Expand acronym})",
      "doc": "",
      "filetype": "textile",
      "grammar": "snu",
      "label": "",
      "matches": {
        "(": true
      },
      "source": "vim-snippets/snippets"
    },
    "cfa1f47f42a475c4dfb2baeec70d6608": {
      "content": "console.count(${1:label});",
      "doc": "Writes the the number of times that count() has been invoked at the same line and with the same label",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consolecount",
      "matches": {
        "base console count": true
      },
      "source": "javascript/base"
    },
    "cfa6e3a91b8563940a0372443fb798b1": {
      "content": "=== ${1} ===\n${2}",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "===": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cfa7dcbd234f0cc9a4545a37a71450f7": {
      "content": "local $@;\neval {\n\t${1:# do something risky...}\n};\nif (my $${2:exception} = $@) {\n\t${3:# handle failure...}\n}\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "eval",
      "matches": {
        "eval": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "cfb2eaae01cf59d98cc966af9fba124a": {
      "content": "do for ${1:#:iter} {\n    ${2:#:commands}\n}",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "do for <iter> {...}",
      "matches": {
        "do": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cfb458cb109f5f944a341a14d02bca50": {
      "content": "<transition$1>\n$2\n</transition>$0",
      "doc": "transition element",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-transition",
      "matches": {
        "transition": true,
        "vue transition": true
      },
      "source": "javascript/vue"
    },
    "cfba30ee1803e260c52457538ad16aec": {
      "content": "text-wrap suppress",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "cfbce6d482c5a35cfb2deac8434134da": {
      "content": "${1:FIELDNAME} = models.CommaSeparatedIntegerField(max_length=${2}${0:, blank=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comma": true
      },
      "source": "vim-snippets/snippets"
    },
    "cfcdfa035ae48e2d4c3f0e2f1b568ea8": {
      "content": "useEffect(() => {\n$0\n},[])",
      "doc": "Adds use effect",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useEffectDidMount",
      "matches": {
        "usfd": true
      },
      "source": "vscode-react/snippets"
    },
    "cfcf4e4489ba5bdf0fb21449588ea99d": {
      "content": "record\n\t${0}\nend record;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "record": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "cfd628e05f456a666febbd39241f688c": {
      "content": "bezier(${1:x1}, ${2:y1}, ${3:z1}, ${4:cx1}, ${5:cy1}, ${6:cz1}, ${7:cx2}, ${8:cy2}, ${9:cz2}, ${10:x2}, ${11:y2}, ${0:z2});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "3D",
      "matches": {
        "bezier": true
      },
      "source": "vim-snippets/snippets"
    },
    "cfd6dc1ceaeb3dce9e92f50566f2b37d": {
      "content": "{-# INLINE ${0:name} #-}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inline": true
      },
      "source": "vim-snippets/snippets"
    },
    "cfd705290a2beda674cc5b6d2b21b62d": {
      "content": "z-index: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "z:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "cfea34654c9631640b9ca325af0970e5": {
      "content": "(for/foldr\n\t([${1}])\n\t([${2}])\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "for/foldr",
      "matches": {
        "forfr": true
      },
      "source": "vim-snippets/snippets"
    },
    "cfeb94c708aa4b8e05c3826693568792": {
      "content": "console.log(`${1:object}`, JSON.stringify(${1:object}, null, 2))",
      "doc": "Logs stringified JSON property with name.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleLogJson",
      "matches": {
        "clj": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "cfee962f6f0f067b13cc9505a8228536": {
      "content": "{%- render '${0:snippet}' -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "render-": true
      },
      "source": "vim-snippets/snippets"
    },
    "cfef65bd8b63e40dbedc315308e8684c": {
      "content": "import React, { PureComponent } from 'react'\n",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "import-react-purecomponent",
      "matches": {
        "imrpc": true,
        "react import purecomponent": true
      },
      "source": "javascript/react"
    },
    "cff1e7de056e375bfadfe56d332be506": {
      "content": "_.sortedIndexBy(${array}, ${value}, ${iteratee})",
      "doc": "var objects = [{ 'x': 4 }, { 'x': 5 }];\n\n_.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 0\n\n// The `_.property` iteratee shorthand.\n_.sortedIndexBy(objects, { 'x': 4 }, 'x');\n// => 0\n\nThis method is like `_.sortedIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sortedindexby",
      "matches": {
        "lodash sortedindexby": true
      },
      "source": "javascript/lodash"
    },
    "cff6ec06f75aa4c3be1bdfaa175c538f": {
      "content": "console.group('${1:label}');",
      "doc": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consolegroup",
      "matches": {
        "base console group": true
      },
      "source": "javascript/base"
    },
    "d005873fdcb6c2fd6ff3eb76251d791a": {
      "content": "elseif ${1}\n\t${0}",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "elsif",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "d0143ebd86586d00011f309d6bdafde7": {
      "content": "<c:otherwise>\n\t${0}\n</c:otherwise>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cother": true
      },
      "source": "vim-snippets/snippets"
    },
    "d017dcd95c9435e47b3af4b130c9a988": {
      "content": "<meta name=\"generator\" content=\"${1}\">${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "metagenerator": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d01c273c2fe49f5f2117b891f761a89f": {
      "content": "\\shade[${1}] ${2};${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\shade": true,
        "shade": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d02055132f648a2405f9aa9aff865ba9": {
      "content": "overflow: visible;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "d022bc8659970f522194b78cdc366072": {
      "content": "page-break-after ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba": true
      },
      "source": "vim-snippets/snippets"
    },
    "d02d6e45203952fbbf657de3a5d02565": {
      "content": "setTimeout(function () {${0}}${2}, ${1:10});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "timeout": true
      },
      "source": "snippets/javascript"
    },
    "d02e800b64653f93c61180e612eb5e75": {
      "content": "::before",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "::b": true
      },
      "source": "vim-snippets/snippets"
    },
    "d036054349d9fa77d98d4cf3dbd80ac3": {
      "content": "&#x2190;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "left": true
      },
      "source": "vim-snippets/snippets"
    },
    "d03a1cd9adb9e29029696393d22e3b1e": {
      "content": "protected function tearDown()\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "protected function tearDown() { ... }",
      "matches": {
        "teardown": true
      },
      "source": "vim-snippets/snippets"
    },
    "d03dd10dfb2d4fa4b90967f95015f8c9": {
      "content": "@incollection{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    booktitle = {${4}},\n    year = {${5}},\n    memo = {editor, pages, organization, publisher, address, month, note},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@incollection": true,
        "incollection": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d03df93b70d53fc86d0b5d327711a89b": {
      "content": " labels:\n{{- if .Values.$1.service.labels }}\n{{ toYaml .Values.$1.service.labels | indent 4 }}\n{{- end }}\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\tcomponent: \"{{ .Values.$1.name }}\"\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n  name: {{ template \"${2:chartName}.${1:value_key}.fullname\" . }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "labels_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "d04924b118337e8f407cad08a2d4f65a": {
      "content": "func Benchmark${1:Method}(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\t${0}\n\t}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "benchmark": true
      },
      "source": "gosnippets/snippets"
    },
    "d059f83738cdfa925d71afa4f1fd75fe": {
      "content": "assert_not_nil ${1:instance}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asnn": true
      },
      "source": "vim-snippets/snippets"
    },
    "d066eefca03880dd8733a83cd2cef304": {
      "content": "<%= form_for @${1:model} do |f| %>\n\t${0}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff": true
      },
      "source": "vim-snippets/snippets"
    },
    "d06e13eef3157ad89e3b4305a9758346": {
      "content": "<%inherit file=\"${1:filename}\" />",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "inherit",
      "matches": {
        "inherit": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d073ac686803448a5f89a242a9baec42": {
      "content": "render :update do |${2:page}|\n\t$2.$0\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (update)",
      "matches": {
        "ru": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d0803b42cfb93518229afdd36727a402": {
      "content": "<%= form_tag(${1:\"/users\"}, method: ${2::post}) %>\n\t${0}\n</form>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "form_tag",
      "matches": {
        "ft": true
      },
      "source": "vim-snippets/snippets"
    },
    "d083ecf4de1847f25b82dbecf35e7f72": {
      "content": "validates_inclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not included in the list}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_inclusion_of",
      "matches": {
        "vi": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d090476cc19e823b766bf5c6e547714e": {
      "content": "match ${1:(* e1 *)} with\n| ${2:p} -> ${3:e2}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "match",
      "matches": {
        "Match": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d0948e4fda87d432fd4873d00bd68e3c": {
      "content": "get ${1:propertyName}() {\n\treturn this.${0}\n}\n",
      "doc": "Creates a getter property inside a class in ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propertyGet",
      "matches": {
        "pge": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "d097f90bc968dda3fc8659a7c7e20160": {
      "content": "justify-content space-evenly",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "d09b3d34f5cd5512fb3c69c63fac54a5": {
      "content": "IBOutlet ${1:NSSomeClass} *${2:$1};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ibo": true
      },
      "source": "vim-snippets/snippets"
    },
    "d09e4b49c5b74791a36a7abe7cf12999": {
      "content": "JSON.stringify ${0:object}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jsons": true
      },
      "source": "snippets/coffee"
    },
    "d0b0a81a9ead87719aa79d3a589162a4": {
      "content": "margin-top: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mt": true
      },
      "source": "vim-snippets/snippets"
    },
    "d0b54628510822eed8f442bd7ab6c68f": {
      "content": "@media ${1:all} and (min-width: ${2:SIZE}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "@media all and (min-width) {...}",
      "matches": {
        "media-min-width": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d0bf86dfb35152865c35703fd4909b65": {
      "content": "const mapStateToProps = (state) => {\n\treturn {\n\t\t${1:propName}: state.$1,\n\t};\n};",
      "doc": "",
      "filetype": "javascript-redux",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mstp": true
      },
      "source": "snippets/javascript"
    },
    "d0c52b5c9e1f18feb68d58b5fe6b4deb": {
      "content": "export async function getServerSideProps(${1:context}) {\n  return {\n    props: {}, \n  }\n}",
      "doc": "If you export an async function called getServerSideProps from a page, Next.js will pre-render this page on each request using the data returned by getServerSideProps. The context parameter is an object containing the following keys: params, req, res, query, preview, previewData.",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-get-server-side-props",
      "matches": {
        "next getserversideprops": true
      },
      "source": "javascript/next"
    },
    "d0c702505a3eab72f75bc10429eeef51": {
      "content": "var $1 = new sap.m.Button({\n\t\t\ttext : $2,\n\t\t\ttype : $3,\n\t\t\twidth : $4,\n\t\t\tenabled :$5,\n\t\t\tvisible :$6,\n\t\t\ticon : $7,\n\t\t\ticonFirst : $8,\n\t\t\tactiveIcon :$9,\n\t\t\ticonDensityAware : $10,\n\t\t});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapmbutton": true
      },
      "source": "vim-snippets/snippets"
    },
    "d0cdb9171172d5dd90b656849ce1fa34": {
      "content": "PropTypes.object,",
      "doc": "Object prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeObject",
      "matches": {
        "pto": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "d0f46209703c15fc718337293b55bb0c": {
      "content": "if err != nil {\n\tlog.Fatal(err)\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error with log.Fatal(err)",
      "matches": {
        "errl": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "d0f65dda80b2ebbf1eaa872b4a1026e3": {
      "content": "repeat\n\t$1\nuntil $0",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "repeat loop",
      "matches": {
        "repeat": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d0fb1d24bfb8a436a4977f310a481450": {
      "content": "defprotocol ${1:name}, [${0:function}]",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defpr": true
      },
      "source": "vim-snippets/snippets"
    },
    "d0fb31ed39e370f1932f32120f7aa842": {
      "content": "outline: ${1:1px} ${2:solid} #${3:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o+": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1044887ffa59e1f2e8a33e634156f48": {
      "content": "import axios from 'axios';",
      "doc": "import axios",
      "filetype": "axios",
      "grammar": "lsp",
      "label": "axios-import",
      "matches": {
        "axios import": true
      },
      "source": "javascript/axios"
    },
    "d10d8f10b026146967e24d4f4eedba50": {
      "content": "- ${1:first}\n- ${2:second}\n- ${3:third}\n$0",
      "doc": "Insert unordered list",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert unordered list",
      "matches": {
        "unordered list": true
      },
      "source": "vscode-R/snippets"
    },
    "d112f98ecd9690598046e31444bcd8ca": {
      "content": "*ngFor=\"let ${1:item} of ${2:list}; trackBy:${1:item}.id\"${0}",
      "doc": "Angular *ngFor with trackBy",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngfor-with-trackby",
      "matches": {
        "a-ngfor-trackby": true,
        "angular ng for with track by": true
      },
      "source": "javascript/angular"
    },
    "d11608be4d20b34596238c757a46f5d8": {
      "content": "System.out.print(\"${0:Message}\");",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "print": true
      },
      "source": "vim-snippets/snippets"
    },
    "d117f29902e17b2d5f91c9cd37ac5b73": {
      "content": "border-style: wave",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "d11ba51f461a22ea272f712ebd997276": {
      "content": "PropTypes.func,",
      "doc": "Func prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeFunc",
      "matches": {
        "ptf": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "d11d62dae73a587265f0268b30869e16": {
      "content": "FIND FIRST ${1:BufferName}\n${2:WHERE $1.${3}} ${0}",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff": true
      },
      "source": "vim-snippets/snippets"
    },
    "d123e669488a8e3214ed4ba6078d2d7f": {
      "content": "\\part{${1}}\n${0:TARGET}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\part": true,
        "part \\part{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d1254a5b646d6f7ef153f42ffd30d68e": {
      "content": "// TODO: $0",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "TODO comment",
      "matches": {
        "todo": true
      },
      "source": "vim-snippets/snippets"
    },
    "d12d02d1a399f49fdce3265358c77996": {
      "content": "% while ${1:}:\n\t${0:}\n% endwhile",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "d13420582c9cca9c158eb6c0202550ea": {
      "content": "${fn:split(${1:string}, ${0:delims})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "split": true
      },
      "source": "vim-snippets/snippets"
    },
    "d13f044fde0263305fc89bcc146e23bf": {
      "content": "(when ${1:test} ${0:body})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when": true
      },
      "source": "vim-snippets/snippets"
    },
    "d13fcaf8d83570622d8905343ff65466": {
      "content": "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${0}\n}",
      "doc": "for loop",
      "filetype": "base",
      "grammar": "lsp",
      "label": "for-loop",
      "matches": {
        "base for": true
      },
      "source": "javascript/base"
    },
    "d144d1fa8a150771121df4b2318b13f5": {
      "content": "align-items: first baseline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:fb": true
      },
      "source": "vim-snippets/snippets"
    },
    "d148d6edc2e89f282fa53bf859b5ca6f": {
      "content": "aggregate_failures '${1:message}' do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "agg": true
      },
      "source": "vim-snippets/snippets"
    },
    "d15014d5a343b69b4f93e80ab5134b6e": {
      "content": "if ${1:false} {\n    ${0:TARGET}\n}${9}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d1513d9da2120c83cc2c0a7ba1bb14ed": {
      "content": "defer func() {\n\tif err := recover(); err != nil {\n\t\t${0:${VISUAL}}\n\t}\n}()",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defr": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "d1533dd5469ed6d0fae9af90bbcb67d2": {
      "content": "font-stretch: semi-expanded",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "d15a4b828e0e20fb2fc6982f097db6b8": {
      "content": ":nth-last-child($0)",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":nlc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d15f6b94399deddea4be616d5b6ac5d4": {
      "content": "$.post '${1:mydomain.com/url}',\n\t${2:{ param1: value1 },}\n\t(data, textStatus, jqXHR) ->\n\t\t${0:// success callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxpost": true
      },
      "source": "snippets/coffee"
    },
    "d16533f7c966de8533707cd52e9140dc": {
      "content": "scope :${1:name}, { ${2:joins(:${3:table}).}where(${4:'${5:$3.${6:field}} = ?', ${7:'${8:value}'}}) }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "scope",
      "matches": {
        "scope": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d1662b6ef0b8a5f458a0241da1bce1a3": {
      "content": "[${1}]",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        ".": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1664146f4d35cc838d14a7989ae182d": {
      "content": "| ${1} -> ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "|": true
      },
      "source": "vim-snippets/snippets"
    },
    "d16ca0cc532742d0ccf725227454ab75": {
      "content": "catch {\n    ${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "catch {}",
      "matches": {
        "catch_n": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d184ecd440e3014bfcf0384d2ee0dec4": {
      "content": "tint(${1:value1}, ${2:value2}, ${3:value3}${4:, }${0:alpha});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tint": true
      },
      "source": "vim-snippets/snippets"
    },
    "d18c23f836de46da09d2b1c999a73b43": {
      "content": "t.string :${1:title}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcs": true
      },
      "source": "vim-snippets/snippets"
    },
    "d198c4a7be1a71f5e7e8e8705ed5664f": {
      "content": "echo CHtml::activeInputField('${1:type}', ${2:model}, '${3:attribute}',array('${4:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhaif": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1a2872269f7ac1f44db513a09c816e6": {
      "content": "val ${1:name}${2:: T} = ${0:value}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "val": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1a2be17107dc021c594bcb1d33cd009": {
      "content": "${1:classNames}({ '${2:foo-bar}': true });",
      "doc": "",
      "filetype": "classnames",
      "grammar": "lsp",
      "label": "classnames-usage-object",
      "matches": {
        "classnames usage object": true
      },
      "source": "javascript/classnames"
    },
    "d1a4580b38c73e6a2d3607b79a0f0d15": {
      "content": "font-stretch: ultra-expanded",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:ue": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1a8b86d4acf0b42fb1d494531c6d06e": {
      "content": "grid-template-rows: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gtr": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1aa4839ccec95237115fcb6032af01c": {
      "content": "(:import [${1:package}])\n\t& {:keys [${1:keys}] :or {${0:defaults}}}",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1ad977fd643c7f5502090bf59c7b8f4": {
      "content": "page-break-before: right",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1b033a0578145c9386226f3619ae997": {
      "content": "_.invoke(${object}, ${path}, ${args})",
      "doc": "var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n\n_.invoke(object, 'a[0].b.c.slice', 1, 3);\n// => [2, 3]\n\nInvokes the method at `path` of `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-invoke",
      "matches": {
        "lodash invoke": true
      },
      "source": "javascript/lodash"
    },
    "d1b6f044033bd6048aab690100cb2c35": {
      "content": "while ${1} loop\n\t${0}\nend loop;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "w": true,
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d1b87fee7084f896172f0b52cb10645d": {
      "content": "it { should have_db_index :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ishi": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1b8d92ee69beffd790c9e1675f57843": {
      "content": "import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} = memo(function ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n})\n\n${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}\n",
      "doc": "Creates a React Memo Function Component with ES7 module system with PropTypes",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-function-memo-component-proptypes",
      "matches": {
        "react component function memo proptypes": true,
        "rmcp": true
      },
      "source": "javascript/react"
    },
    "d1baa9e271826aaf4abeba97973aad59": {
      "content": ":source-highlighter: pygments$0",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "source-highlighter: pygments",
      "matches": {
        "highlight-pygments": true,
        "hipygments": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d1c7df54e859551cc0f52c50d1b19caf": {
      "content": "align-self: ${1:stretch};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1ca765194b6aa3b1f14fc2aad81d1c9": {
      "content": "declare\n\t${1}\nbegin\n\t${0}\nend;",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dec": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1cd7606e9e0a717901432952b863a4d": {
      "content": "noremap ${1} ${2}",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "no": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1d1484f8848533fc82f70a5c5dda928": {
      "content": "str",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "String",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1d1641a25cf3855c8349f4b1f40cf26": {
      "content": "Stack<${1:Object}> ${2:stack} = new Stack<$1>();${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d.st": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1d671c658d8bfea25f8a856dd8fa2f7": {
      "content": "void keyTyped(){\n\t${0}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "keyTyped": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1d6b5c9a55a19599b7b0d906131ab61": {
      "content": "def ${1:#:method_name}\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "def ... end",
      "matches": {
        "def": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d1da07d4214953fb1e81b590439b4eda": {
      "content": "min(${0:array});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "array",
      "matches": {
        "min": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1de7c6d414cc06ec0ab3e6b080218e2": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"postcss\" scoped>\n\n</style>",
      "doc": "Base for Vue File with PostCSS",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component with postcss",
      "matches": {
        "vbase-pcss": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "d1dee84e6c19a0b884ab5246c82e2390": {
      "content": "font-emphasize-style: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1e125ad2ecdebc97fe789d1e8dd5c3d": {
      "content": "${fn:escapeXml(${0:string})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "escape": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1e5de3c307bc8257d58983278f65ea8": {
      "content": "try\n  ${1:TARGET}\ncatch ${2:#:error}\n  ${3}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d1e9c5d586f68fd6c517821df835da10": {
      "content": "<exception cref=\"${1:System.Exception}\">${2}</exception>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<ex": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1edbea236c43f49ea14b3c4624c3c1c": {
      "content": "box-sizing: content-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxz:cb": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1f14f6240d9bcaee228166faebcfd77": {
      "content": "while (${1:/* condition */}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "d1f5a2efd8c18d57fc5135f7da050e0d": {
      "content": "import (\n\t\"${1:package}\"\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "import ( ... )",
      "matches": {
        "import": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "d200ed783b65b498cd241c51dd9f6b15": {
      "content": ".. danger:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "danger",
      "matches": {
        "danger": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d2079b627c0571c9cf44be424d702a3b": {
      "content": "${1:fn} : ${2:a} -> ${3:a} -> ${4:a}\n$1 ${5} =\n\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn2": true
      },
      "source": "vim-snippets/snippets"
    },
    "d2080231d28ccaec4e2ce6ec551376c0": {
      "content": "import ${1:Img} from \"gatsby-image/withIEPolyfill\"",
      "doc": "",
      "filetype": "gatsby-image",
      "grammar": "lsp",
      "label": "gatsby-image-import-withiepolyfill",
      "matches": {
        "gatsby-image import withiepolyfill": true
      },
      "source": "javascript/gatsby-image"
    },
    "d20b22f34e392005395abf59b9364f1d": {
      "content": "import ReactDOM from 'react-dom'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import ReactDOM",
      "matches": {
        "imrd": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "d20dbdbf4413d32e4df3beb359682461": {
      "content": "namespace ${1} {\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "namespace",
      "matches": {
        "nspc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d2170ed0d47838279d29f2f35dade2e4": {
      "content": "float: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl": true
      },
      "source": "vim-snippets/snippets"
    },
    "d21c93bca644edcf5c93e528f9f61e94": {
      "content": "beforeRouteLeave(to, from, next) {\n\t${1:next();}\n},",
      "doc": "Vue Router component guards beforeRouteLeave",
      "filetype": "vue-script-router",
      "grammar": "lsp",
      "label": "Vue Router beforeRouteLeave",
      "matches": {
        "vbeforerouteleave": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "d22765c64e38ab22e80d6bb3f8df0010": {
      "content": "\\begin{table}[${1}]\n\t\\centering\n\t\\caption{${2}}\n\t\\label{${3}}\n\t\\begin{tabular}{${4}}\n\t\t${5}\n\t\\end{tabular}\n\\end{table}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{table} \\table": true,
        "table": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d22b1b460a65b0044c2207c9dda7e45a": {
      "content": "_.forIn(${object}, ${iteratee})",
      "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forIn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n\nIterates over own and inherited enumerable string keyed properties of an\nobject and invokes `iteratee` for each property. The iteratee is invoked\nwith three arguments: (value, key, object). Iteratee functions may exit\niteration early by explicitly returning `false`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-forin",
      "matches": {
        "lodash forin": true
      },
      "source": "javascript/lodash"
    },
    "d2325616bc47c7bef09005c551865045": {
      "content": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
      "doc": "An object whose keys are known ahead of time required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeObjectOfShapeRequired",
      "matches": {
        "ptoosr": true
      },
      "source": "vscode-react/snippets"
    },
    "d240abd87dc381a1c27c3be2e39d6356": {
      "content": "<%= ${1:f}.label :${2:attribute}, '${0:$2}' %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ffl": true
      },
      "source": "vim-snippets/snippets"
    },
    "d25490dab7b322c9721c568caa605e62": {
      "content": "?assertNotMatch(${1:Pattern}, ${0:Expression})",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asnmat": true
      },
      "source": "vim-snippets/snippets"
    },
    "d256d556b7f712157d03d5130a7d815c": {
      "content": "case ${1}:\n\t${0}\n\tbreak",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "case",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "d25749713c6818e0fd082127d63722a4": {
      "content": "System.out.printf(\"${1:Message}\", ${0:args});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "printf": true
      },
      "source": "vim-snippets/snippets"
    },
    "d25a8d7513d2bd5e8e842a5634c24382": {
      "content": "JSON.parse ${0:jstr}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jsonp": true
      },
      "source": "snippets/coffee"
    },
    "d261b3c7fff36637cef099e5c4863e45": {
      "content": "this.${1:methodName} = this.${1:methodName}.bind(this)$0",
      "doc": "Binds this to a method",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-bind-this",
      "matches": {
        "bnd": true,
        "react bind this": true
      },
      "source": "javascript/react"
    },
    "d263a259a1ab1a86821c688b55f439fb": {
      "content": "Run Keyword If Timeout Occurred    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword If Timeout Occurred",
      "matches": {
        "rkito": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d26427d30680b2e0f7aa6f8642628b1a": {
      "content": "justify-content: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc": true
      },
      "source": "vim-snippets/snippets"
    },
    "d26a2753bd316c3740518f45793a40b4": {
      "content": "it { expect { ${1:object} }.${2} ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iexpb": true
      },
      "source": "vim-snippets/snippets"
    },
    "d26ba3b583dad2d86bea50c8b92b993c": {
      "content": "switch ${1:var} {\ncase ${2:value1}:\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "switch x { ... }",
      "matches": {
        "switch": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "d27607d144ed34a768674a55dfc28a6a": {
      "content": "log(${0:value});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "log": true
      },
      "source": "vim-snippets/snippets"
    },
    "d277863409ade7424f938d6dbcbd8708": {
      "content": "MESSAGE \"${1:MessageContent}\" ${2:Data} VIEW-AS ALERT-BOX.",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alert": true
      },
      "source": "vim-snippets/snippets"
    },
    "d277f11c3bd353d7f552b27dee8ab897": {
      "content": "module ${1} = struct\n\t${0}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mod": true
      },
      "source": "vim-snippets/snippets"
    },
    "d27990e91b53d29fa55da25e3a65a68e": {
      "content": "{% do ${1} %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig do",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "d27e628cf7753c27792fa4ba98922f3d": {
      "content": "foreach(${1:mixed} ${2:ele} in ${3:arr})\n{\n\t${4}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "d2819db20d4e7a5810d4a1fc127def49": {
      "content": "function* ${1:name}(${2:arguments}) {\n\t${0}\n}",
      "doc": "named generator function (ES6)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "named-generator-function-es6-",
      "matches": {
        "base function generator named": true
      },
      "source": "javascript/base"
    },
    "d286e5ce00bebd00a7ac3919d91c5d24": {
      "content": "justify-items ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji": true
      },
      "source": "vim-snippets/snippets"
    },
    "d28e9367ea914181ad286d28b5afbf08": {
      "content": "import React, { PureComponent } from 'react'\n\nexport class ${1:${TM_FILENAME_BASE}} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:$TM_FILENAME_BASE}\n",
      "doc": "Creates a React pure component class with ES7 module system export",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassExportPureComponent",
      "matches": {
        "rpce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "d29f51023f8b57d99025978132168e77": {
      "content": "vertical-align ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va": true
      },
      "source": "vim-snippets/snippets"
    },
    "d2a920073b8f7d4ebaa9e6b33c549d0b": {
      "content": "\\begin{eqnarray*}\n\t${1:${VISUAL}} & ${2:${VISUAL}} & ${0:${VISUAL}}\n\\end{eqnarray*}",
      "doc": "",
      "filetype": "texmath",
      "grammar": "snu",
      "label": "Equation array without a number",
      "matches": {
        "eqann": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d2b3ed4a28b52cc87000451dd9914cdf": {
      "content": "align-content space-evenly",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:se": true
      },
      "source": "vim-snippets/snippets"
    },
    "d2b6b9120e4dc87e62dbf2ad3c15e47d": {
      "content": "\\${5:${0:default}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${5:default}",
      "matches": {
        "5:": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d2b77ff4c4841ababa3beb2c9a95a98f": {
      "content": "import ${1} as ${2}\n${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "import ... as ...",
      "matches": {
        "impa": true,
        "importAs": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d2be79756aea806a210083c4e7012d6c": {
      "content": "real :: ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "real": true
      },
      "source": "vim-snippets/snippets"
    },
    "d2ccd107f0edb5ba112b4b1082d3431b": {
      "content": "for (${1:item} in ${2:list}) {\n\t${3}\n}",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "d2d109a656cc913fdcb7c96ade9c6774": {
      "content": "background-size: contain",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz:ct": true
      },
      "source": "vim-snippets/snippets"
    },
    "d2d4fd37789e2ec5b7ed896c6f91366e": {
      "content": "unless ${1:#:condition}\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "unless ... end",
      "matches": {
        "unless": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d2d93e4bdfeb0a65710a5d542824a598": {
      "content": "use Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;$1",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 use Symfony\\..\\Controller",
      "matches": {
        "usecontroller": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d2e1193555b5af81f7a9d6e5b6f344e3": {
      "content": "// specify the minimum swap interval for buffer swaps.\ngl.setSwapInterval(${0:interval});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl swap interval",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "d2e12976fb3dde4b8290ad8da5fba8eb": {
      "content": "\\begin{description}\n\t\\item[${1}] ${0}\n\\end{description}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{description} \\description desc": true,
        "description": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d2e4fed46a3fbbffda94da582520cc2b": {
      "content": "@${1:variable_name} ||= ${0:cached_value}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ivc": true
      },
      "source": "vim-snippets/snippets"
    },
    "d2ed1e630ea660131bad42cac897d3ab": {
      "content": "spyOn(${1:object}, '${2:method}').and.callFake(${3:function});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "spy on and call fake (js)",
      "matches": {
        "scf": true
      },
      "source": "vim-snippets/snippets"
    },
    "d2fb4ea802bb485ad16d3eb1bfb58ca9": {
      "content": "unhex(${0:c});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unhex": true
      },
      "source": "vim-snippets/snippets"
    },
    "d300a84f5711d7f20fd2e5bb5aeb23fe": {
      "content": "defer func() {\n\tif err := recover(); err != nil {\n\t\t${0}\n\t}\n}()",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defr": true
      },
      "source": "gosnippets/snippets"
    },
    "d30671540a3278242ae2f73a74690b28": {
      "content": "length_is:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lengthis": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d309e7f51aba6ec76c0bb5a70a4ee6df": {
      "content": "{-# OPTIONS_GHC ${0:-fno-warn-unused-imports} #-}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ghc": true
      },
      "source": "vim-snippets/snippets"
    },
    "d312002d3bd1a3b1dc10d7576a684f8b": {
      "content": "[quote, ${1:Name}, ${2:Occasion}}]\n____\n${0}\n____",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "quote block --- text ---",
      "matches": {
        "block-quote": true,
        "quote": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d314aeb1eb1a463a8bad75a9138147ac": {
      "content": "note = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "note": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d3158d25830ad1350eb8e5594d078697": {
      "content": "?assert(${0})",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as": true
      },
      "source": "vim-snippets/snippets"
    },
    "d3175633d1c66382de490690f89866a2": {
      "content": "/*! \\brief ${1:Brief function description here}\n *\n *  ${2:Detailed description of the function}\n *\n * \\param $3 ${4:Parameter description}\n * \\param $5 ${6:Parameter description}\n * \\param $7 ${8:Parameter description}\n * \\return ${9:Return parameter description}\n */\n${10:void} ${11:function_name}(${12:Type} ${3:Parameter}, ${13:Type} ${5:Parameter}, ${14:Type} ${7:Parameter})\n{\n\t${15}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dfun3": true
      },
      "source": "vim-snippets/snippets"
    },
    "d31b1926ec171b920c2de9b3d447af37": {
      "content": "@\"${1}\"",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "s": true
      },
      "source": "vim-snippets/snippets"
    },
    "d31bb1da1212a450212a18aacaedfb34": {
      "content": "*${1}*${2}",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": "*text*",
      "matches": {
        "bold": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d31ced0963f0e5e9aa0dc4bd0f92ff3f": {
      "content": "${0:name}.map (a",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapf": true
      },
      "source": "vim-snippets/snippets"
    },
    "d3238f1c13aee883ffe7071b494c2795": {
      "content": "content: counters(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:cs": true
      },
      "source": "vim-snippets/snippets"
    },
    "d32d39ccdeb7583c7004707b9a4784fa": {
      "content": "text-decoration: underline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "d3304dafd00fede07a37b5cd3c155603": {
      "content": "{% set ${1:name} = ${2:'value'} %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "set",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d337eecc384ac3cdbe837c166d182e37": {
      "content": "${1:obj}.height(${2:integer})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "height": true
      },
      "source": "snippets/javascript"
    },
    "d33bb1ae67f964274821af163955e6be": {
      "content": "each_pair do |${1:key}, ${2:value}|\n  ${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each_pair_do": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d33f1c64c38a65bcdc338e8625c0c095": {
      "content": "{{{\n${0:TARGET}\n}}}",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": "{{{<code>}}}",
      "matches": {
        "code": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d34348d078e632eeba08f25e429a2275": {
      "content": "{%- render '${1:snippet}', ${2:variable}: ${0:value} -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "renderwith-": true
      },
      "source": "vim-snippets/snippets"
    },
    "d34445e76cbd90f6296843f19e9e2aac": {
      "content": "if $1 then\n\t$2\nelseif $3 then\n\t$0\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "if/elseif statement",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d34d43732e89f94b8625b92821d5dc89": {
      "content": "{% if ${1} %}\n\t${0}\n{% endif %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "d34e6577d0e97ed202050e9cdd042a6e": {
      "content": "_.curryRight(${func}, ${arity})",
      "doc": "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curryRight(abc);\n\ncurried(3)(2)(1);\n// => [1, 2, 3]\n\ncurried(2, 3)(1);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(3)(1, _)(2);\n// => [1, 2, 3]\n\nThis method is like `_.curry` except that arguments are applied to `func`\nin the manner of `_.partialRight` instead of `_.partial`.\n\nThe `_.curryRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for provided arguments.\n\n**Note:** This method doesn't set the \"length\" property of curried functions.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-curryright",
      "matches": {
        "lodash curryright": true
      },
      "source": "javascript/lodash"
    },
    "d35199d9260e7c7823a2ff60b0979e95": {
      "content": "caption-side: top;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cps:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "d3626f344dbe87db9ae2ab3d9f4497f8": {
      "content": "if err != nil {\n\treturn err\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err != nil { return err }",
      "matches": {
        "errn": true
      },
      "source": "gosnippets/snippets"
    },
    "d36658c80cd842312e2e140c2e505716": {
      "content": "<a href=\"mailto:${1:joe@example.com}?subject=${2:feedback}\">${0:email me}</a>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "a:mail": true
      },
      "source": "vim-snippets/snippets"
    },
    "d36bbaf3d88e66d3f74d7ab6ed05baf9": {
      "content": "sub ${1:#:function_name} {\n\t${2:TARGET}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sub": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d36ddc4f6e823ec68027b9e39b7250a6": {
      "content": "real, parameter ::",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "real parameter",
      "matches": {
        "rep": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d36ec3405cb16de4bd747a7419ebe484": {
      "content": "import Link from 'next/link'",
      "doc": "",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-import-link",
      "matches": {
        "next import link": true
      },
      "source": "javascript/next"
    },
    "d372005f770a94d5a8576086c5342d21": {
      "content": "visibility ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v": true
      },
      "source": "vim-snippets/snippets"
    },
    "d375534740d88ac4fa8daf17d8479e93": {
      "content": "static final ${1:Object} ${2:VAR_NAM} = ${0};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "const": true
      },
      "source": "vim-snippets/snippets"
    },
    "d375d402c6c3ceb1129e2ee93aac842b": {
      "content": "font-effect: emboss;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:eb": true
      },
      "source": "vim-snippets/snippets"
    },
    "d37c2b2f738a3a2e739721f6a6e0ff18": {
      "content": "\\begin{eqnarray}\n\t${1:TARGET}\n\\end{eqnarray}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{eqnarray} \\eqnarray": true,
        "eqnarray": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d39b156415575a6341d7a8cb70267e17": {
      "content": "for \"${1:filename}\".IO.lines -> $line {\n\t${2}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rfile": true
      },
      "source": "vim-snippets/snippets"
    },
    "d39c5d165423d80f6195cc71429b447b": {
      "content": "alias_method :${1:new_name}, :${0:old_name}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "am": true
      },
      "source": "vim-snippets/snippets"
    },
    "d39e8a45c47739e8621555b40ccf81e5": {
      "content": "_.sample(${collection})",
      "doc": "_.sample([1, 2, 3, 4]);\n// => 2\n\nGets a random element from `collection`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sample",
      "matches": {
        "lodash sample": true
      },
      "source": "javascript/lodash"
    },
    "d3a097eed0e605d81be8dfd2932d3cff": {
      "content": "quotes: '\\201C' '\\201D' '\\2018' '\\2019'",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q:en": true
      },
      "source": "vim-snippets/snippets"
    },
    "d3adfb9a7a7f9e0d73a1363a8c2e8f7d": {
      "content": "text-replace: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tr": true
      },
      "source": "vim-snippets/snippets"
    },
    "d3b550805d2efe700105c1223db1fec6": {
      "content": "_.after(${n}, ${func})",
      "doc": "var saves = ['profile', 'settings'];\n\nvar done = _.after(saves.length, function() {\n  console.log('done saving!');\n});\n\n_.forEach(saves, function(type) {\n  asyncSave({ 'type': type, 'complete': done });\n});\n// => Logs 'done saving!' after the two async saves have completed.\n\nThe opposite of `_.before`; this method creates a function that invokes\n`func` once it's called `n` or more times.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-after",
      "matches": {
        "lodash after": true
      },
      "source": "javascript/lodash"
    },
    "d3b794d14750f81f556cc90b8d0c5866": {
      "content": "Element Should Not Contain    ${${1:locator}}    ${2:${expected}}    ${3:${optional message}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Element Should Not Contain",
      "matches": {
        "esnc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d3b8510d3cca85d53e8e4b15a6279a7b": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\n\nexport default Vue.extend({\n\tsetup () {\n\t\t${0}\n\n\t\treturn {}\n\t}\n})\n</script>\n\n<style scoped>\n\n</style>",
      "doc": "Base for Vue File Composition API - Typescript",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-single-file-component-with-typescript-v3",
      "matches": {
        "vue v3 base ts": true
      },
      "source": "javascript/vue"
    },
    "d3b8805c84c64322060d8459ef957df1": {
      "content": "beforeEnter(to, from, next) {\n\t${1:next();}\n},",
      "doc": "Vue Router per-route guard beforeEnter",
      "filetype": "vue-script-router",
      "grammar": "lsp",
      "label": "Vue Router beforeEnter",
      "matches": {
        "vbeforeenter": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "d3ba1912626bf14f746c27afdc905b63": {
      "content": "{% $1 %}$2",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "%": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d3c545ea99b449a14b06554ec3301ad8": {
      "content": "border-bottom-left-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbli": true
      },
      "source": "vim-snippets/snippets"
    },
    "d3c99d025195a5b9d0a395dd162a0f3f": {
      "content": "_.xorWith(${arrays}, ${comparator})",
      "doc": "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.xorWith(objects, others, _.isEqual);\n// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n\nThis method is like `_.xor` except that it accepts `comparator` which is\ninvoked to compare elements of `arrays`. The order of result values is\ndetermined by the order they occur in the arrays. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-xorwith",
      "matches": {
        "lodash xorwith": true
      },
      "source": "javascript/lodash"
    },
    "d3d098a5b9ef27d342bfaf504bc53876": {
      "content": "console.debug(${1:object});",
      "doc": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleDebug",
      "matches": {
        "cdb": true
      },
      "source": "vscode-javascript/snippets"
    },
    "d3d97edce215dcdaa1f1bd6b05e6f7ad": {
      "content": "if err != nil {\n  t.Fatalf(\"${1}\")\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if err != nil { t.Fatalf(...) }",
      "matches": {
        "terf": true
      },
      "source": "gosnippets/snippets"
    },
    "d3db7d93877dcdb528ce0dedf0c16fe2": {
      "content": "${1:obj}.serializeArray()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "serializea": true
      },
      "source": "snippets/javascript"
    },
    "d3e7ed8034d556184fc22a6bdb536036": {
      "content": "new Promise((resolve, reject) => {\n\t${0}\n})",
      "doc": "Promise (ES6)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "promise-es6-",
      "matches": {
        "base promise": true
      },
      "source": "javascript/base"
    },
    "d3e8b2e90bef5d78c3319612f09fe3fe": {
      "content": "type ${1:Msg}\n\t= ${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ty": true
      },
      "source": "vim-snippets/snippets"
    },
    "d3e8b6ee9bc02d6fb14a2e2d646b0a89": {
      "content": "in {\n\t${1}\n} out {\n\t${2}\n} body {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "contr": true
      },
      "source": "vim-snippets/snippets"
    },
    "d3ea837eaa9cc9d6eb8b38358c7af154": {
      "content": "<${1:div} :style=\"{ fontSize: ${2:data} + 'px' }\"></${1:div}>",
      "doc": "vue inline style binding",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Style Binding",
      "matches": {
        "vstyle": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "d3ecd94cd980735e688963f601abbe0a": {
      "content": "flex-direction: column;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxd:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "d3f3974c6ff1025c23bbbd25c2c0b7e2": {
      "content": "std.algorithm",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "algo": true
      },
      "source": "vim-snippets/snippets"
    },
    "d40f8dde77df2c33425b2fe2f2807ed2": {
      "content": "list-style-type: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list-style-type": true,
        "lst": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d415576c6cdffe82c2dc1f7baaacb9ff": {
      "content": "${1:obj}.offset()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "offset": true
      },
      "source": "snippets/coffee"
    },
    "d4160ea5cb529346375cc445a5b8bcd9": {
      "content": "unloadMovieNum(${1:#:level});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "un": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d419cd72b3a4cbc3bc493257f905d783": {
      "content": "overflow-style: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs": true
      },
      "source": "vim-snippets/snippets"
    },
    "d41f8e2c6093e852655113c08067e536": {
      "content": "${1:obj}.off('${2:events}', '${3:selector expression}'${4:, handler})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "off": true
      },
      "source": "snippets/javascript"
    },
    "d424b3888058e521a4943aad05bb3dd7": {
      "content": "{% ${1:#:tag} %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% ... %}",
      "matches": {
        "%": true,
        "tag": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d42706ddb9d6c22b5198c7af2eb63a86": {
      "content": "I18n.t('${1:type.key}')",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "i18": true
      },
      "source": "vim-snippets/snippets"
    },
    "d42f401bd707ddac720c4dc73ececd9b": {
      "content": "_.every(${collection}, ${predicate})",
      "doc": "_.every([true, 1, null, 'yes'], Boolean);\n// => false\n\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.every(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `_.matchesProperty` iteratee shorthand.\n_.every(users, ['active', false]);\n// => true\n\n// The `_.property` iteratee shorthand.\n_.every(users, 'active');\n// => false\n\nChecks if `predicate` returns truthy for **all** elements of `collection`.\nIteration is stopped once `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index|key, collection).\n\n**Note:** This method returns `true` for\n[empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n[everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\nelements of empty collections.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-every",
      "matches": {
        "lodash every": true
      },
      "source": "javascript/lodash"
    },
    "d4359adb6b1349420af0715fd378d036": {
      "content": "<xsl:import href=\"${1:stylesheet}\" />",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "import": true
      },
      "source": "vim-snippets/snippets"
    },
    "d43fc058e58422adcf235d14936f14dd": {
      "content": "must_respond_to :${0:method}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mrt": true
      },
      "source": "vim-snippets/snippets"
    },
    "d44251aeed95f2775daaa0f4e2cea9d0": {
      "content": "NSAutoreleasePool *${1:pool} = [[NSAutoreleasePool alloc] init];\n${0}\n[$1 drain];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pool": true
      },
      "source": "vim-snippets/snippets"
    },
    "d446a8b13dd54647cb8d250b230ff091": {
      "content": "text-transform capitalize",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "d44b82c33d19c5880c9ac8f11268c195": {
      "content": "text-transform: capitalize",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "d44c10506614fe5832e2ae71cd351c7f": {
      "content": "[NSGraphicsContext saveGraphicsState];\n${0}\n[NSGraphicsContext restoreGraphicsState];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "save": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d45312875fcec467ae28bf3a53f20cf9": {
      "content": "_.toSafeInteger(${value})",
      "doc": "_.toSafeInteger(3.2);\n// => 3\n\n_.toSafeInteger(Number.MIN_VALUE);\n// => 0\n\n_.toSafeInteger(Infinity);\n// => 9007199254740991\n\n_.toSafeInteger('3.2');\n// => 3\n\nConverts `value` to a safe integer. A safe integer can be compared and\nrepresented correctly.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-tosafeinteger",
      "matches": {
        "lodash tosafeinteger": true
      },
      "source": "javascript/lodash"
    },
    "d455ccfc3d862f330de464aa26178e7b": {
      "content": "vertical-align: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va": true
      },
      "source": "vim-snippets/snippets"
    },
    "d456bf5f169f5c81860699cf8a3f7be6": {
      "content": "console.clear();",
      "doc": "Clears the console",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consoleclear",
      "matches": {
        "base console clear": true
      },
      "source": "javascript/base"
    },
    "d456c17113247dcf89a0e7d362a72c97": {
      "content": "display compact",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:cp": true
      },
      "source": "vim-snippets/snippets"
    },
    "d461e8c338b1038ee3e76328b0ec68a6": {
      "content": "mixed.withMutation()",
      "doc": "mixed.withMutation(builder: (current: Schema) => void): void\n\nFirst the legally required Rich Hickey quote:\nIf a tree falls in the woods, does it make a sound?\nIf a pure function mutates some local data in order to produce an immutable return value, is that ok?\nwithMutation allows you to mutate the schema in place, instead of the default behavior which clones before each change.\nGenerally this isn't necessary since the vast majority of schema changes happen during the initial\ndeclaration, and only happen once over the lifetime of the schema, so performance isn't an issue.\nHowever certain mutations do occur at cast/validation time, (such as conditional schema using when()), or\nwhen instantiating a schema object.object()\n  .shape({ key: string() })\n  .withMutation(schema => {\n    return arrayOfObjectTests.forEach(test => {\n      schema.test(test);\n    });\n  });\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-with-mutation",
      "matches": {
        "yup mixed withmutation": true
      },
      "source": "javascript/yup"
    },
    "d46a2bb2e1ca1bd8fa27837453760f4a": {
      "content": "if ${1:#:condition} then ${2:#:value} else ${3:#:other}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifte": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d48a5a70cadb69a5784de957d103b830": {
      "content": "set ${1:propertyName}(${2:value}) {\n\t${0};\n}",
      "doc": "Creates a setter property inside a class in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propertyset",
      "matches": {
        "pse": true
      },
      "source": "vscode-javascript/snippets"
    },
    "d494923b882504787e76fe036ddd542e": {
      "content": "<small>${0}</small>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "small": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4986ee1a0f6305be65db294e3351277": {
      "content": "post {\n\tsuccess {\n\t\t${1}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4a17c37e1c0c2369e354f54188e4f54": {
      "content": "-webkit-box-shadow: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4a9a5857679fdb84b40e06231aec062": {
      "content": "${1:obj}.detach('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "detach": true
      },
      "source": "snippets/coffee"
    },
    "d4ab7c346abd2e5e251b88b4edac659b": {
      "content": "<%= error_tag ${1:f}, :${2:field} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "error_tag",
      "matches": {
        "et": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4ac9d4779383679d12d59ba35f5082d": {
      "content": "function ${1:function_name}(${2}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "function",
      "matches": {
        "fun": true
      },
      "source": "snippets/javascript"
    },
    "d4c1c8112d6ab871c6e0bdfcdb72da20": {
      "content": "<code>${1}</code>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<c": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4c3bb7ead88cc5293b81e023b2eb13e": {
      "content": "class ${1:MODELNAME}Form(forms.ModelForm):\n\n\tclass Meta:\n\t\tmodel = $1",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "ModelForm",
      "matches": {
        "modelform": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d4ccf75efcd26983db393b9068fa9a48": {
      "content": "echo CHtml::encodeArray(array(${0}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yheca": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4d46d106b8fb4bca7c4951349d2c7bb": {
      "content": "{\n\t\"type\": \"video_url\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"accept\": [\"youtube\", \"vimeo\"${0}],\n\t\"default\": \"${3}\",\n\t\"info\": \"${4}\",\n\t\"placeholder\": \"${5}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_video": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4d6a207d5f1395fe5c8db0619a7284e": {
      "content": "content: normal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4daa5e1dc1eed74615be715da140c46": {
      "content": "${1:obj}.load(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "load": true
      },
      "source": "snippets/javascript"
    },
    "d4e24027eb93d2a284b77c33820f5e31": {
      "content": "message(AUTHOR_WARNING \"${1}\")",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "message(AUTHOR_WARNING \"...\")",
      "matches": {
        "author_warning_message": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d4e84c5e1351957f0a3fae71b0da430d": {
      "content": "<datagrid>\n\t${0}\n</datagrid>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "datagrid": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4ec639331b00e62abd9495e87bc366b": {
      "content": "<slot></slot>",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "slot": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4f0dad7dbc86907f0449fb826d682ae": {
      "content": "%% @end",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "%e": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4f4088aa6d0dcbc4609da43a9f9448c": {
      "content": "Serial.write();",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sw": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4f4b0c26e5731a6e4bc2e14369e4dee": {
      "content": "${1:FIELDNAME} = models.PhoneNumberField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "PhoneNumberField",
      "matches": {
        "mphone": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d4f5f9dab8c6dfa4379ff2b0bb1287fd": {
      "content": "right ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4fc390100926211f7dac8d2a2a56c1f": {
      "content": "detect do |${1:e}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "detd": true
      },
      "source": "vim-snippets/snippets"
    },
    "d4ff7ccddb047d06c997dd9b4209cd04": {
      "content": ".. image:: ${1:#:path}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "image": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d50aefb93f3babc899744b63c702a4f4": {
      "content": "assertSame(\"${1:Failure message}\", ${2:expected}, ${3:actual});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ass": true
      },
      "source": "vim-snippets/snippets"
    },
    "d50d912f3a1950b080da56f19cf2de50": {
      "content": "find(:first${1:, conditions: ['${2:${3:field} = ?}', ${5:true}]})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "find(:first)",
      "matches": {
        "finf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d51a93351eb82544d2bc985d88a69f4c": {
      "content": "def ${1:name}(${2:args}) when ${3:guard} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defw": true
      },
      "source": "vim-snippets/snippets"
    },
    "d51c42239aaaa627aba03dd0c9317996": {
      "content": "(*$T ${1:name}\n\t${2:test}\n*)",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "inline qtest",
      "matches": {
        "qt": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d521458a15aaa406631ab129ad15b68d": {
      "content": "${1:https://www.example.org}[${2:Text}]${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "External link",
      "matches": {
        "extlink": true,
        "link": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d521538282845525d78f07b1ecacbfbc": {
      "content": "<p class=\"${1}\">${2:TARGET}</p>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pclass": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d52abf68ea88db64ac3fce6dc3839373": {
      "content": "type ${1} interface {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "interface": true,
        "ti": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d52cc7a85b5ceac990ee5e21f3337033": {
      "content": "threadIdx.${0}",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Thread Index",
      "matches": {
        "tid": true
      },
      "source": "vim-snippets/snippets"
    },
    "d5355afcd122de3d7c4b12d6a6f780d7": {
      "content": "top ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "d536766b99cb4e0d5116fd1fd0d267c3": {
      "content": "clip: rect(${1:0} ${2:0} ${3:0} ${0:0})",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cp:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "d5417f1ff08c271fdef6afa184240177": {
      "content": ":nth-last-child(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":nlc": true
      },
      "source": "vim-snippets/snippets"
    },
    "d546edf50388218ebe36ee8f74a62e7f": {
      "content": "loadVariables(${1:url}, ${2:target}, ${3:method});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lv": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d5519759c11c31e27e22d92933ee8d14": {
      "content": "map[${1:keytype}]${2:valtype}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Map type",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d55e5060879703f5471c6e72321c2e28": {
      "content": "ambientLight(${1:v1}, ${2:v2}, ${3:v3}${7:, ${4:x}, ${5:y}, ${0:z}});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ambientLight": true
      },
      "source": "vim-snippets/snippets"
    },
    "d561a8902b59d90bbff2f3c970c5e26f": {
      "content": "import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class HeaderInterceptor implements HttpInterceptor {\n\tconstructor() {}\n\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\t\tconst headers = req.headers\n\t\t\t.set('Content-Type', 'application/json');\n\t\tconst authReq = req.clone({ headers });\n\t\treturn next.handle(authReq);\n\t}\n}",
      "doc": "Angular HttpInterceptor for headers HttpClient",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-httpinterceptor-for-headers",
      "matches": {
        "a-http-interceptor-headers": true,
        "angular http interceptor headers": true
      },
      "source": "javascript/angular"
    },
    "d5691b7d09af9b31054b19284d679b37": {
      "content": "border-style: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "d56e86cbb327a4db35649105eefc5a0b": {
      "content": "_.toLower(${string})",
      "doc": "_.toLower('--Foo-Bar--');\n// => '--foo-bar--'\n\n_.toLower('fooBar');\n// => 'foobar'\n\n_.toLower('__FOO_BAR__');\n// => '__foo_bar__'\n\nConverts `string`, as a whole, to lower case just like\n[String#toLowerCase](https://mdn.io/toLowerCase).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-tolower",
      "matches": {
        "lodash tolower": true
      },
      "source": "javascript/lodash"
    },
    "d56feded34ad7e0c73140d7de664a27d": {
      "content": "| append: '${1:string}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "append": true
      },
      "source": "vim-snippets/snippets"
    },
    "d57c5715ef74730fe8b78879205bed6e": {
      "content": "t.references :${0:model}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tref": true
      },
      "source": "vim-snippets/snippets"
    },
    "d57f56f4e2ae355f0a84e04d25c01c7e": {
      "content": "#[${1:inline}]",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "#[..]",
      "matches": {
        "attr": true
      },
      "source": "vim-snippets/snippets"
    },
    "d5818733a8549bb9bb069265abc11e64": {
      "content": "Ada.Text_IO.Put(${1});\n${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "Ada.Text_IO.Put",
      "matches": {
        "put": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d5921431bd8383b8d1562137a4b12c6e": {
      "content": "list-style-position: outside",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisp:o": true
      },
      "source": "vim-snippets/snippets"
    },
    "d5925958981edd455f4c71ef8fb5f303": {
      "content": "<h2>${0}</h2>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h2": true
      },
      "source": "vim-snippets/snippets"
    },
    "d59736c08535a4cd28cd812045616991": {
      "content": "module ${1:#:NAME} {\n  ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "module NAME {...}",
      "matches": {
        "module": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d599af54699dce36b5bb5a975276e317": {
      "content": "border-top-left-radius: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtlrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "d599ba9e21b2564976da7b3bee0ac406": {
      "content": "integer :: ${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "int": true
      },
      "source": "vim-snippets/snippets"
    },
    "d5a8a8f8095e6fe27066126a59e7cb37": {
      "content": "-webkit-border-image ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "d5ac439b845e5a02d57147ce2a013441": {
      "content": "{:catch error}\n\t<!-- promise was rejected -->",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-catch-block",
      "matches": {
        "svcatch": true,
        "svelte catch": true
      },
      "source": "javascript/svelte"
    },
    "d5aec63541be30c962bf69e7658bfe30": {
      "content": "import Head from 'next/head'",
      "doc": "",
      "filetype": "next",
      "grammar": "lsp",
      "label": "next-import-head",
      "matches": {
        "next import head": true
      },
      "source": "javascript/next"
    },
    "d5aee7a54133325e44ca5d24a365c381": {
      "content": "/// <reference path=\"${0:#:TARGET}\" />",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "/// <reference path=\"...\" />",
      "matches": {
        "reference": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d5b26d5e4da40ffaf585573e8b8481a5": {
      "content": "<c:set var=\"${1}\">${2:item1,item2,item3}</c:set>\n<c:forTokens var=\"${3}\" items=\"${$1}\" delims=\"${4:,}\">\n\t${0:<c:out value=\"$3\" />}\n</c:forTokens>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cfort": true
      },
      "source": "vim-snippets/snippets"
    },
    "d5b71162b11047473006e02a2c438417": {
      "content": "render file: \"${1:filepath}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (file) (rf)",
      "matches": {
        "rf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d5dbce7d3bb0c91006384825fbbd20ba": {
      "content": "select {\ncase ${1:v1} := <-${2:chan1}\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "select { case a := <-chan: ... }",
      "matches": {
        "select": true
      },
      "source": "gosnippets/snippets"
    },
    "d5dc9404fd4a91d2839bd157a76577ac": {
      "content": "<h5>${0}</h5>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h5": true
      },
      "source": "vim-snippets/snippets"
    },
    "d5f400ab91fc7bde508130e85853a8c4": {
      "content": "validates :${0:attribute}, confirmation: true",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vc": true
      },
      "source": "vim-snippets/snippets"
    },
    "d5f85172188bc35db1d52c57c8002622": {
      "content": "[(ngModel)]=\"${1:binding}\"",
      "doc": "Angular ngModel",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngmodel",
      "matches": {
        "a-ngmodel": true,
        "angular ng model": true
      },
      "source": "javascript/angular"
    },
    "d5fa049479607cf49021c85c231f0568": {
      "content": "for ${1} of ${2} loop\n\t${0}\nend loop;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "for each",
      "matches": {
        "for_each": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d60912308d0d4389d12e2d76ec7bea95": {
      "content": "wont_respond_to :${0:method}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wrt": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6093b00275bda6e0dfe84d21a595d4c": {
      "content": "#ifndef $1\n#define ${1:#:SYMBOL}\n#endif${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "#ifndef ... #define ... #endif",
      "matches": {
        "#ifndef": true,
        "ifndef": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d6163597f93a0ffc97da70dc6f45c190": {
      "content": "<meta name=\"description\" content=\"${0}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "meta:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "d618e572f3efa74f8fbca69f1aec86db": {
      "content": "when {\n\tenvironment '${1:environment}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whenenvironment": true
      },
      "source": "vim-snippets/snippets"
    },
    "d61c8cdc5708015a600b40d04da0196b": {
      "content": "background: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6289d132850492c5aad593728ccd7c3": {
      "content": "${1|onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,,onActivated,onDeactivated,onErrorCaptured,onRenderTracked,onRenderTriggered|}(() => {${2}})",
      "doc": "Lifecycle hooks can be registered with directly imported `onXXX` functions:",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v3lifecyclehook",
      "matches": {
        "vue v3 lifecyclehook": true
      },
      "source": "javascript/vue"
    },
    "d62b7f1b9aef7a8f69ce88278805bb43": {
      "content": "@inproceedings{${1:LABEL},\n    author = {${2}},\n    title = {${3}},\n    booktitle = {${4}},\n    year = {${5}},\n    memo = {editor, volume, number, series, pages, address, month,\n        organization, publisher, note}\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@inproceedings @conference conference": true,
        "inproceedings": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d6302659a16b501ec5dd6622612193b7": {
      "content": "const {${1:site}} = useStaticQuery(\n  graphql`${2:query}`\n);",
      "doc": "",
      "filetype": "gatsby",
      "grammar": "lsp",
      "label": "gatsby-usestatic-query",
      "matches": {
        "gatsby usestaticquery": true
      },
      "source": "javascript/gatsby"
    },
    "d6333d560d3caddc7057b27d4289f20b": {
      "content": "place-self: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "d63682f3513bb5b8fd8ef4ba5c791317": {
      "content": "text-align: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "d63e3823f55388b497f48f93ffd38050": {
      "content": "align-self: center",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "d645b41dce8b0570ded3e72ee0920d4a": {
      "content": "library(${0:package})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lib": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6487e82dbad1e8d27d19fe766189e07": {
      "content": "HashMap[${1:T},${2:T}]${0:(keyval)}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hmap": true
      },
      "source": "vim-snippets/snippets"
    },
    "d650172a1a0c41f4d39d043f81a53141": {
      "content": "<?php\nclass CSVWriter {\n\tpublic function __construct($file_or_handle, $sep = \"\\t\", $quot = '\"'){\n\t\t$args = func_get_args();\n\t\t$mode = isset($opts['mode']) ? $opts['mode'] : 'w';\n\t\t$this->f =\n\t\t\tis_string($file_or_handle)\n\t\t\t? fopen($file_or_handle, $mode)\n\t\t\t: $file_or_handle;\n\t\t$this->fputcsv_args = [$this->f, null, $sep, $quot];\n\t\tif (!$this->f) throw new Exception('bad file descriptor');\n\t}\n\tpublic function write($row){\n\t\t$this->fputcsv_args[1] =& $row;\n\t\tcall_user_func_array('fputcsv', $this->fputcsv_args);\n\t}\n\tpublic function close(){\n\t\tif (!is_null($this->f))\n\t\t\tfclose($this->f);\n\t\t$this->f = null;\n\t}\n\tpublic function __destruct(){\n\t\t$this->close();\n\t}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "CSVWriter": true
      },
      "source": "vim-snippets/snippets"
    },
    "d65074cf5526a9edb3f67a13276762dc": {
      "content": "page-break-after auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6578d5c9a7b1cd8efea588765efe4f0": {
      "content": "function ${1:new_function}(${2:args})\n\t$0\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "New function",
      "matches": {
        "!fun(ction)?!": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d66a0e23c070d0c16b1082e09b0650d6": {
      "content": "<option value=\"${1}\">${2:$1}</option>\nopt+${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "opt+": true
      },
      "source": "vim-snippets/snippets"
    },
    "d66f0678155d7533d2b3501df05cc471": {
      "content": "background-origin: border-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "d66f303f358204044aa8f120fd1379b3": {
      "content": "order(${1:...}, ${2:na.last = ${3:TRUE}}, ${4:decreasing = ${5:FALSE}})",
      "doc": "Order",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "ord",
      "matches": {
        "order": true
      },
      "source": "vscode-R/snippets"
    },
    "d678d2e127502b4a290c54f26b7d1777": {
      "content": "state = {\n\t$1\n}\n",
      "doc": "Creates empty state object. To be used in a constructor.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "emptyState",
      "matches": {
        "est": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "d6818932403bc8572c9a06c6b6b18168": {
      "content": "Dir.glob(${1:'**/*'}) do |fname|\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "glob": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d683b1711bb9c586b90200d3dfa7997d": {
      "content": "display table-row",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbr": true
      },
      "source": "vim-snippets/snippets"
    },
    "d68a8bff6e39ac84ccc6f04b4a50f2fa": {
      "content": "::before",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "::b": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6974ca19d379cf40b38dda5685ce21b": {
      "content": "border-image url(${1}) ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6b35bcc466382eeca08b3590fa76592": {
      "content": "std::cout << ${0:TARGET} << std::endl;",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d6b82a342d3cebe87190ed555eb7dc7e": {
      "content": "${1:var} ${2:item} = $1.findById(${3});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "findbyid": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6c4edc1b2e1a8caebbdcc29a28c8c1b": {
      "content": "{if ${1:expression}}\n\t$0\n{/if}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "if .. (if)",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d6c5a72ebbb29c8a8ce45bb1cabba61a": {
      "content": "protected",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pro": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6c7481e468414ef6e77baee95b7b53b": {
      "content": "class ${0:ModelName}Inline(admin.StackedInline):\n\tmodel = $1",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stackedinline": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6cac3115dc2eea628d84ff0f67d12bd": {
      "content": "${1:FIELDNAME} = models.FloatField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "FloatField",
      "matches": {
        "mfloat": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d6ce0e62c24a5f25c16ade4a4ece71f5": {
      "content": "if (${1:true}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6cef47a5541db95e05dc1cf2e11bb3b": {
      "content": "post {\n\tchanged {\n\t\t${1}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6d474031efedf0ad8e13d19a2ccc6e3": {
      "content": "renderJSON(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "renj": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6da924d65ab125f8de177a984cd2871": {
      "content": "import type ${0:option.option}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "impt": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6e4d577c3aa4fdfaf3f381abe105b2b": {
      "content": "matrix(NA, nrow = ${1:}, ncol = ${2:})",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ma": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6ef060b1a0ed454a51853f17070adfc": {
      "content": "(/ ${1}\n\t${0})",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "",
      "matches": {
        "/": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6f4330bc36617078eb1d97df80d358d": {
      "content": "static_cast<${1:unsigned}>(${2:expr})${3}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sca": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6f4e8f0188dc104640b17acb2b74cfc": {
      "content": "font-stretch: normal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "d6ffbeb66889144a1b1f3f3f3960c762": {
      "content": "let ${1:s:V} = vital#${2:#:plugin_name}#new()",
      "doc": "",
      "filetype": "vital",
      "grammar": "snu",
      "label": "let s:V = vital#...#new()",
      "matches": {
        "vital_new": true
      },
      "source": "neosnippets/vim"
    },
    "d705c761df1dce4871cbd2049281b8be": {
      "content": "justify-content: space-between;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "d707b2e9228d12ae166621aebccbaf63": {
      "content": "belongs_to :${0:association}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bt": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7089d0ee3dc46d3d216afd08bec3a70": {
      "content": "const ${1:contextName} = React.createContext()\n",
      "doc": "Create React context",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-createcontext",
      "matches": {
        "rcontext": true,
        "react createcontext": true
      },
      "source": "javascript/react"
    },
    "d70a7d8b8f1d24085a30f795e11de0c7": {
      "content": "counter-increment ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "coi": true
      },
      "source": "vim-snippets/snippets"
    },
    "d70b7ba9a77e4ea3a33f390296448c2c": {
      "content": "try\n\t${1:${VISUAL}}\ncatch ${2}\n\t${0}\nendtry",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "try ... catch statement",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7326b4d8c82abfb07241d9ae359c529": {
      "content": "<nav id=\"${1}\">\n\t${0}\n</nav>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nav#": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7372ef0d4a70a1dd49c966b656e14e8": {
      "content": "{:else if ${1: otherCondition}}\n\t${2: <!-- else if content here -->}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-else-if-block",
      "matches": {
        "svelse-if": true,
        "svelte else if": true
      },
      "source": "javascript/svelte"
    },
    "d754a7e761008da4f2c89267c097c998": {
      "content": "onUpdated(() => {${1}})",
      "doc": "Vue onUpdated Lifecycle hook",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle Hooks - onUpdated",
      "matches": {
        "v3onupdated": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "d756cde612dab375505220fda57222e1": {
      "content": "each_slice(${1:2}) { |${2:group}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eas-": true
      },
      "source": "vim-snippets/snippets"
    },
    "d75de1bee59b3bfe8a49c96d45bdb0ea": {
      "content": "while ${1:condition} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "while loop",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "d75fb10109c8180b2591a3d7329b11d2": {
      "content": "<video class=\"${1}\" src=\"${2}\" height=\"${3}\" width=\"${4}\" preload=\"${5:none}\" autoplay=\"${6:autoplay}\">${7}</video>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "video.": true
      },
      "source": "vim-snippets/snippets"
    },
    "d766131991283cbd655e0d261beb2430": {
      "content": "color: #${1:DDD};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "color:  color-hex (color)",
      "matches": {
        "color": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d76c4b5742678dd0a86cae71e508e344": {
      "content": "def get_context_data(self, **kwargs):\n\tkwargs['extra_context'] = ${1:'New Value'}\n\treturn super(${2:CLASS_NAME}, self).get_context_data(**kwargs)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "get_context_data view method",
      "matches": {
        "context": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d76df2adeab38777781df8f579bee2a3": {
      "content": "$this->assertFileNotExists(${1:'path/to/file'});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertFileNotExists('path/to/file')",
      "matches": {
        "asfnex": true
      },
      "source": "vim-snippets/snippets"
    },
    "d76f0254294ef63319dc1851b7a286ec": {
      "content": "CREATE TABLE ${1:cities} (\n  ${0:name varchar(80), country_name text}\n);",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "CREATE TABLE { ... }",
      "matches": {
        "CREATE_TABLE": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d773bba19853df407a1633ba2de3d2b9": {
      "content": "| url_escape",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "url_escape": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7770615651994baa6368234aeb37816": {
      "content": "fmt.Printf(\"$1 = %#v\\n\", ${1:${VISUAL}})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Printf(#...) hash",
      "matches": {
        "ffh": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "d778a3c730cf9d81edd67c8bfdd8753a": {
      "content": "var ${1:name}${2:: T} = ${0:value}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "var": true
      },
      "source": "vim-snippets/snippets"
    },
    "d78058875f9d6b8b3be7d8b4200a717c": {
      "content": "must_be_empty",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbe": true
      },
      "source": "vim-snippets/snippets"
    },
    "d780abdbfca848c4d2d34b076c87f4d2": {
      "content": "$this->shouldBeAnInstanceOf($1);",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldBeAnInstanceOf('Type')",
      "matches": {
        "sbinstance": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d790908923ad5a31a350f083433ca60e": {
      "content": "image:${1:example.jpg}[${2:Description}]${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "Inline image:file[desc]",
      "matches": {
        "imageinline": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d79bc29a9704cc0a7f7686c8143220d3": {
      "content": "<ins>${0}</ins>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ins": true
      },
      "source": "vim-snippets/snippets"
    },
    "d79bf6ed6c86c83ba821ff63b93fd5bf": {
      "content": "try {\n  ${0:${VISUAL}}\n} catch (${1:Exception e}) {\n} finally {\n}",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tryf": true
      },
      "source": "vim-snippets/snippets"
    },
    "d79dce37a834323fd37279583108562b": {
      "content": "is_dir(${1:path})$0",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "is_dir",
      "matches": {
        "id": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7a3f1b4042263e702e844a28690583e": {
      "content": ".. error::\n\t${0:Error occur}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "err:": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7a82291f2b74bec695f66c620100446": {
      "content": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "importAs",
      "matches": {
        "ima": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "d7a84859d80c4d748bd47ce8c478a5d3": {
      "content": "IGNORECASE = ${1:1}",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "IGNORECASE",
      "matches": {
        "ign": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7a9784c9107335f41e9bfaf256ec883": {
      "content": ".style(\"${1}\", ${2})",
      "doc": "",
      "filetype": "javascript-d3",
      "grammar": "snu",
      "label": "",
      "matches": {
        ".style": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7abe96c2737f7bae26105ed6863dfc4": {
      "content": "steps {\n\tsh '${1:make check}'\n\tjunit '${2:reports/**/*.xml}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "steps": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7ad79e8435ed00292483c68ee0e386e": {
      "content": "{% endverbatim %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endverbatim",
      "matches": {
        "endverbatim": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7b0bf8683f58ec7a7f125d9866c6f87": {
      "content": "import { mapGetters } from 'vuex'\n\nexport default {\n\tcomputed: {\n\t\t...mapGetters([\n\t\t\t${1:'nameOfGetter'},\n\t\t])\n\t},\n}",
      "doc": "mapgetters inside a vue component",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-mapgetters",
      "matches": {
        "vmapgetters": true,
        "vue mapgetters": true
      },
      "source": "javascript/vue"
    },
    "d7bb3141cea831d2f5a82ed92f58eedd": {
      "content": "<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\nclass ${1:ClassName} extends CI_Controller\n{\n\tfunction __construct()\n\t{\n\t\tparent::__construct();\n\t\t${2:// code...}\n\t}\n\tfunction ${3:index}()\n\t{\n\t\t${4:// code...}\n\t}\n}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_controller": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7beaea97b832c40fd2200b39cfdbe30": {
      "content": "<%= form_for @changeset, ${1:\"${2:/users}\"}, fn f -> %>\n\t\t$0\n\n\t<%= submit \"Submit\" %>\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "form_for",
      "matches": {
        "ff": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d7c47a8d602f9e9cc25fd031fef6ffaa": {
      "content": "${1:obj}.hide('${2:slow/400/fast}', function () {\n\t${0:// callback}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hidec": true
      },
      "source": "snippets/javascript"
    },
    "d7d295faf7f1673b79bc805f012a21f6": {
      "content": "vertical-align top",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7d2deb28c23257d24af48a636ac65de": {
      "content": "word-wrap unrestricted",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7d538e3b21c70ddec786f5f97d4d721": {
      "content": "create or replace package ${1:name}\nas\n\t${0:-- spec}\nend; -- end of package spec $1",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7d649e5f4f3b86f6c56117bb3d30ed8": {
      "content": "real ::",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "real",
      "matches": {
        "re": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d7d8a5107e772f58a9efd1b98dda836a": {
      "content": "<link rel=\"${1:stylesheet}\" href=\"${2}.css\"${3}>${4}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "link stylesheet css",
      "matches": {
        "link": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d7d9dbac3e2e50df5ffd830be0236f4d": {
      "content": "integer ::",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "integer",
      "matches": {
        "in": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d7f00b12600214d948a6e7132e3e0471": {
      "content": "(if (not ${1}) ${2} ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifn": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7f0c116924f9da3547b7f92df21f332": {
      "content": "?then(${1:true}, ${0:false${VISUAL}})",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "?then(true, false)",
      "matches": {
        "?th": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7f3219d9f1dd47bc9af495cd3bd2de2": {
      "content": "comment on table ${1:table} is '${0:comment}';",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tblcom": true
      },
      "source": "vim-snippets/snippets"
    },
    "d7f78f0ebc2936f9dbb32a943b8139e9": {
      "content": "fallthrough",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fallthrough",
      "matches": {
        "ft": true
      },
      "source": "gosnippets/snippets"
    },
    "d7f9bc902099a81b8a0d73b270bd888b": {
      "content": "module.exports = ${1:name};",
      "doc": "module.exports",
      "filetype": "base",
      "grammar": "lsp",
      "label": "module-exports",
      "matches": {
        "base module exports": true
      },
      "source": "javascript/base"
    },
    "d7fdf111689a561563641e31d31c4cc8": {
      "content": "\\\\frac{${1:num}}{${2:denom}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\frac{}{}",
      "matches": {
        "frac": true
      },
      "source": "vim-snippets/snippets"
    },
    "d802dc4b4d6d2a11d7c126d5808b431f": {
      "content": "margin-right: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mr:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "d80c58e9e239c549408ae2caadc900fa": {
      "content": "validates_presence_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:can't be blank}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_presence_of (vp)",
      "matches": {
        "vp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d80e834c7917d84bae3ae55195ed67ad": {
      "content": ".. code-block:: ${1:python}\n\t${1:#:TERGET}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "syntax",
      "matches": {
        "syntax": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d814a27dda55423756b4008225b84863": {
      "content": "if ${1:#:condition}\n  ${0:TARGET}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d81595cb2c323392438affd2a02800a6": {
      "content": "versioncmp(\"${1:version}\", \"${2:version}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "versioncmp": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8166d139b68a82e9b39dbf41168b199": {
      "content": "@change=\"$emit('change', $event.target.value)\"",
      "doc": "Vue Emit from Child Component",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Emit from Child",
      "matches": {
        "vemit-child": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "d81b00ffa9fc7e386d13dc3a2429f820": {
      "content": "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    ${1:TARGET}\n</html>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xhtml": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d81e0fc5c381d9686c663a70259cf1aa": {
      "content": "print(${1:#:target}, ${2:#:type});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d8280462ec803ce9fbec1a56a9d2c71b": {
      "content": "{% include \"$1\" %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d82ef8eff9cb507375bac1a475ebad50": {
      "content": "Yii::app()->cache->flush();",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ycaf": true
      },
      "source": "vim-snippets/snippets"
    },
    "d835ffdfa766139d847687902e1e3452": {
      "content": "Run Keyword And Return    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword And Return",
      "matches": {
        "rkar": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d83848ec88a6c88d1e23c6902168504f": {
      "content": "export default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
      "doc": "Creates a React 17 Functional Component with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_reactFunctionalComponent",
      "matches": {
        "_rfc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "d83b65ce7b196e10871c85afb263403f": {
      "content": "justify-self: center;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "d84479d0469afad7eba837a4045f2665": {
      "content": "if (${1:true}) {\n\t${2:${VISUAL}}\n} else {\n\t${0}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "d84c3cae89ffa7c448306c569291ac5d": {
      "content": "impl$4 ${1:Type/Trait}${2: for ${3:Type}}${4:<${5:T}>} {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Struct/Trait implementation",
      "matches": {
        "impl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d85035bdbb6ed6a00605ea37a75d0ecd": {
      "content": "async def ${1:mname}(self, ${2:arg}):\n\t${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "adefm": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8520f0cca08bba849503c052ebf763b": {
      "content": "\\begin{verse}\n\t${1:TARGET}\n\\end{verse}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{verse} \\verse": true,
        "verse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d8578a40347bec1c1d47b150f1f57409": {
      "content": "List<${1:listName}> ${2:items} = $1.findAll();",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "findall": true
      },
      "source": "vim-snippets/snippets"
    },
    "d86d0872723efa1499e1f66eebbd7a58": {
      "content": "prop parent : app \"${1}\"",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parent": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d875bf782ca78e6a9d135b119f2e2cf7": {
      "content": "expect($1).toBe($0);",
      "doc": "expects the first argument to be equal with the second one",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tobe",
      "matches": {
        "jest expect tobe": true,
        "tb": true
      },
      "source": "javascript/jest"
    },
    "d878ed6f04b128e1bbbb7ac0bf7532c9": {
      "content": "if (!${1})\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifn": true
      },
      "source": "vim-snippets/snippets"
    },
    "d881ca0d9c7afd3d23dfffa96723f230": {
      "content": "\\addbibresource{${1:resource}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\addbibresource": true,
        "addbibresource": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d882d279cc8a69bed71641b42afd6578": {
      "content": "text-transform: uppercase;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "d89217bbbd544ef68c3f167a89dbea24": {
      "content": "type ${1:Type} = ${0:Type}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "type": true
      },
      "source": "vim-snippets/snippets"
    },
    "d89804cc6c7267325c291ecf16b9462d": {
      "content": "t.boolean :${1:title}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.boolean (tcb)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d89ab90d6fedaf1e2b18baca3adc0234": {
      "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:ServiceName}Service {\n\tconstructor(private httpClient: HttpClient) { }\n\t$0\n}",
      "doc": "Angular service with HttpClient",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-httpclient-service",
      "matches": {
        "a-service-httpclient": true,
        "angular http client service": true
      },
      "source": "javascript/angular"
    },
    "d89b9d9f9d5c320d69e91a6a442861bf": {
      "content": "program ${1:main}\n\t${0}\nend program $1",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prog": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8a5665fa26f0c66630f6dede57e0734": {
      "content": "{% try %}\n  ${1:${VISUAL}}\n{% except %}\n  ${2}\n{% finallly %}\n  ${0}\n{% end %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8a8b89ad36b72dee1eb2708ed62dc84": {
      "content": "background-break bounding-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgbk:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8ab3a619383863d411ef494fefc9bc0": {
      "content": "try\n\t$1\ncatch ${2:error}\n\t$3",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Try .. Catch",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d8aea58b9ac3fcf81141604b3d024b0a": {
      "content": "@selector(${1:method}:)",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sel": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8b3d9733604889f256662f77b3f21f0": {
      "content": "<pre>\n${1}\n</pre>",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pre": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d8c3796f1cdb314a14affa7637ec25e9": {
      "content": "get ${1:property}() {\n\t${0}\n}",
      "doc": "getter (ES6 syntax)",
      "filetype": "base",
      "grammar": "lsp",
      "label": "getter-es6-syntax-",
      "matches": {
        "base getter": true
      },
      "source": "javascript/base"
    },
    "d8ca9246cc6611774e6b85a9506fa5d7": {
      "content": "@function ${1:name}(${2:args})\n\t${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8d488575e7a9d5993f683351b99318d": {
      "content": "require 'test_helper'\n\nclass ${1:Model}ControllerTest < ActionController::TestCase\n\ttest$0\nend\n",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create functional test class",
      "matches": {
        "clact": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d8d56fc046e801adb9aed3c197a1fb94": {
      "content": "try\n\t${1:${VISUAL}}\ncatch ${2}\n\t${0}\nend",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "try catch",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8d7dca4937a94b9e11a287ce8e23688": {
      "content": "echo CHtml::checkBoxList('${1:name}', ${2:select}, array(${3}),array('${4:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhcbl": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8d9414b9eae18915e604963cd825a03": {
      "content": "text(${1:stringdata}, ${2:x}, ${3:y}, ${4:width}, ${5:height}${6:, }${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "stringdata",
      "matches": {
        "text": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8dbe81bdc577c43eef3dda26f6b7bc5": {
      "content": "\\\\begin{cases}\n\t${1:equation}, &\\\\text{ if }${2:case}\\\\\n\t${0:${VISUAL}}\n\\\\end{cases}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "cases environment",
      "matches": {
        "cas": true
      },
      "source": "vim-snippets/snippets"
    },
    "d8f8e62aeb7c50cfe7346c7d9825ee92": {
      "content": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
      "doc": "Export default class which extends a base one in ES6 syntax",
      "filetype": "base",
      "grammar": "lsp",
      "label": "exportclassextends",
      "matches": {
        "base export class extends": true
      },
      "source": "javascript/base"
    },
    "d8fb7ddb0a6857c616f63a2c58bd61bc": {
      "content": "\\begin{verbatimtab}[${1:8}]\n\t${2:TARGET}\n\\end{verbatim}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{verbatimtab} \\verbatimtab": true,
        "verbatimtab": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d8fcc1dd9ff4307e900865ddf04c8c7e": {
      "content": "<%def name=\"${1:name}\">\n\t${0:}\n</%def>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "d915c57240b7d1e3b6f8a8fc2e506002": {
      "content": "switch (${1}) {\n| ${2} => ${0}\n}",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sw": true
      },
      "source": "vim-snippets/snippets"
    },
    "d92ebe6a48f296de4496e8a0bf889a47": {
      "content": "cursor move",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9345e96b3361dc85d28d03764a5a2d4": {
      "content": "<template>\n  ${0}\n</template>\n<script>\nexport default {\n}\n</script>\n<style>\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <template> <script> and <style>",
      "matches": {
        "scaffold": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d93cb622d02d1fab414a06dc84193bc7": {
      "content": "$this->shouldNotBe$1();",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldNotBeXYZ()",
      "matches": {
        "snbstate": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d93d4ac3b4f440fc2d84a74347402361": {
      "content": "<${1:div} :style=\"[${2:styleObjectA}, ${3:styleObjectB]}\"></${1:div}>",
      "doc": "vue inline style binding, objects",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Style Binding Object",
      "matches": {
        "vstyle-obj": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "d93f8247e4e39715fec80b219ecca1ba": {
      "content": "add_executable(${1:bin})",
      "doc": "",
      "filetype": "cmake",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bin": true
      },
      "source": "vim-snippets/snippets"
    },
    "d948b59b430250b5d48652938a11bd66": {
      "content": "if err != nil {\n\treturn errors.Wrapf(err, \"${1:message %v}\", ${2:args...})\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error return wrapf",
      "matches": {
        "errnwf": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "d94b9ebc73e4b7bc3dfd23f4124bd312": {
      "content": "border-collapse: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdcl": true
      },
      "source": "vim-snippets/snippets"
    },
    "d94d80c5227797ccbd7b6bd945c53640": {
      "content": "$this->assertContainsOnly(${1:$needle}, ${2:$haystack});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertContainsOnly($needle, $haystack)",
      "matches": {
        "ascono": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9533e938eb97d5dd57d7b6cba276f80": {
      "content": "text-transform: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "d96a1e338418de70701716d7e856e771": {
      "content": "proc ${1:#:name}(${2}):\ndiscard \"\"\"${3:#:function documentation}\"\"\"\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "procd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d978446be8dfcdcc6b4fb1bd290a70f9": {
      "content": "font: ${1:75%} ${2:\"Lucida Grande\", \"Trebuchet MS\", Verdana,} ${3:sans-}serif;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "font: size font (font)",
      "matches": {
        "font": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "d97a200377da313e1b0d208ad117bf5a": {
      "content": "redirect_to controller:",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to :controller",
      "matches": {
        "rec": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d97f8377fb0f66fa81a18b1e547be100": {
      "content": "procedure ${1}(${2}) is\n\t${3}\nbegin\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "procedure": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d986eaa1709ae54ffc63fa8b560106da": {
      "content": "while let ${1:Some($2)} = $3 {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "while let (...)",
      "matches": {
        "whl": true
      },
      "source": "vim-snippets/snippets"
    },
    "d99270fa9e73a9e36880161d899a0c34": {
      "content": "laply(${1:list}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "la": true
      },
      "source": "vim-snippets/snippets"
    },
    "d992802806f050581e2ab7bf16e6a18c": {
      "content": "Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "hash": true
      },
      "source": "vim-snippets/snippets"
    },
    "d994d2a09285774e566c7deb1d7b0fa8": {
      "content": "border-bottom-width: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bbw": true,
        "border-bottom-width": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d99a96c18f2a52c233ea7f481ebe10f2": {
      "content": "const { ${1:scaleX}, ${2:scaleY} } = useInvertedScale()",
      "doc": "useInvertedScale(scale): ScaleMotionValues Returns a MotionValue each for scaleX and scaleY that update with the inverse of their respective parent scales.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-inverted-scale",
      "matches": {
        "framer-motion use-inverted-scale": true,
        "use-inverted-scale": true
      },
      "source": "javascript/framer-motion"
    },
    "d9a13349d9cf2a56a6909b0757dd2cd9": {
      "content": "\\\\begin{equation}\n\t\\\\label{eq:${2}}\n${0:${VISUAL}}\n\\\\end{equation}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "Labeled equation environment",
      "matches": {
        "eql": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9a64d43e07089a76af910c13d9754c1": {
      "content": "${1:obj}.slideUp('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sup": true
      },
      "source": "snippets/coffee"
    },
    "d9ab2445fce9811dbb9211fe803ba1e7": {
      "content": "std::set<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9af9811ef686e8bdd6da89a30c796ff": {
      "content": "{{- if .Values.$1.affinity }}\n  affinity:\n{{ toYaml .Values.${1:value_key}.affinity | indent 8 }}\n{{- end }}\n  terminationGracePeriodSeconds: 60\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "affinity_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9b0578050b41d69f27ab3eed6b65bf3": {
      "content": "${1:obj}.wrap('${2:&lt;div class=\"extra-wrapper\"&gt;&lt;/div&gt;}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wrap": true
      },
      "source": "snippets/javascript"
    },
    "d9b8da5a41b1fbf15f107d69d7c40aff": {
      "content": "text-align: right",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9bc43abcce9e62751a96d3db6fae497": {
      "content": "<% ${0} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<% %>",
      "matches": {
        "%": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9c00d6bf5f9329ba563397b4ad87fb1": {
      "content": "<!DOCTYPE HTML>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doct5": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9c282b8a2ce5fd4a3ffcf41753c71fd": {
      "content": "gl.glVertex3f(${1:0.0f}, ${2:0.0f}, ${0:0.0f});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl vertex 3f",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9d6bbe1304fe8fd9dd0f700daf6c5cc": {
      "content": "var (\n\t${1:x} ${2:Type}${3: = ${0:value}}\n)",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "var ( ... )",
      "matches": {
        "vars": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "d9d6cd2c97902650b3727febdacbafc3": {
      "content": "[(ngModel)]=\"${1:binding}\"",
      "doc": "Angular ngModel",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngModel",
      "matches": {
        "a-ngModel": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "d9e042025b2038b1d67a5b817f945bd8": {
      "content": "generic\n\ttype ${1} is ${2};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "generic type",
      "matches": {
        "generic": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "d9e693c7e3032e14d241f1e9d2e134bf": {
      "content": "= render :partial => \"${1:item}\", :locals => { :${2:$1} => ${0:@$1} }",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rpl": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9e8535f0ff580377df15916671b385e": {
      "content": "this.state.$0",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-component-state",
      "matches": {
        "react component state": true,
        "state": true
      },
      "source": "javascript/react"
    },
    "d9eba1912262b4db903f53c1b9167d53": {
      "content": "ggplot(${1:data}, aes(${0:aesthetics}))",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ggp": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9f02245b36540c73b36b1d8dbcf8d15": {
      "content": "grid-row-start ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grs": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9f3ea5681331e7deddb14bb74bbf7d9": {
      "content": "text-justify: inter-word",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:iw": true
      },
      "source": "vim-snippets/snippets"
    },
    "d9f87289a6c200501d4b5c66b824d1b0": {
      "content": "cummin(${1:x}",
      "doc": "Cummulative min",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "cumi",
      "matches": {
        "cumin": true
      },
      "source": "vscode-R/snippets"
    },
    "da04d9f623c1cb9d37c3b2385ee8f0f7": {
      "content": "print(\"${1:string}\")",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "print": true
      },
      "source": "vim-snippets/snippets"
    },
    "da052517dd64ff2d5835f81d96cf6daf": {
      "content": "''${1}''",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "''": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "da06c0fa00907a66de51861408253bc2": {
      "content": "border-right-color: #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrc": true
      },
      "source": "vim-snippets/snippets"
    },
    "da0ba6ddda3e242f86fe9447ab5414b9": {
      "content": "rotate${1:X}(${0:angle});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rotate": true
      },
      "source": "vim-snippets/snippets"
    },
    "da10a44635b7e405f804c6347ab4ef3b": {
      "content": "match ${1} with\n| ${2} -> ${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "match": true
      },
      "source": "vim-snippets/snippets"
    },
    "da1b56ac6db85ca34f13d21b848cb09a": {
      "content": "package ${1:package_name};\n\t${0}\nendpackage : $1",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pkg": true
      },
      "source": "vim-snippets/snippets"
    },
    "da1ce2c896535dff64cca4fad1e749c1": {
      "content": "border-left-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdli": true
      },
      "source": "vim-snippets/snippets"
    },
    "da21d749d9bbde7a25401a170b086d66": {
      "content": "$dataProvider = new CActiveDataProvider('${1}', array(\n  'criteria' => array(\n\t\t'condition' => '${2}',\n\t\t'order' => '${3}',\n\t\t'with' => array('${4}')\n\t),\n//'pagination' => false,\n\t'pagination' => array(\n\t\t'pageSize'=>${5},\n\t),\n));\n${0}\n// $dataProvider->getData() will return a list of Post objects",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yadp": true
      },
      "source": "vim-snippets/snippets"
    },
    "da231db0d50778fc9580ef35fb818072": {
      "content": "text-justify auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "da24558f9e08031de7c103078aa47e47": {
      "content": "_.first(${array})",
      "doc": "_.head([1, 2, 3]);\n// => 1\n\n_.head([]);\n// => undefined\n\nGets the first element of `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-first",
      "matches": {
        "lodash first": true
      },
      "source": "javascript/lodash"
    },
    "da30e3518bbe2fbfccb9a463ac9ddf7e": {
      "content": "it { should allow_mass_assignment_of :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isama": true
      },
      "source": "vim-snippets/snippets"
    },
    "da3456ff2c64d556c206747712517c22": {
      "content": "background-attachment: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bga": true
      },
      "source": "vim-snippets/snippets"
    },
    "da3571c84ad047b6cabe9fae3f65dad8": {
      "content": "expect(${1:list}).toContainEqual($0);",
      "doc": "expects the list contains the item (equals)",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tocontainequal",
      "matches": {
        "jest expect tocontainequal": true,
        "tce": true
      },
      "source": "javascript/jest"
    },
    "da35d7f57a3b860b8363dc6b1766cf93": {
      "content": "#!/usr/bin/env python3",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!3": true
      },
      "source": "vim-snippets/snippets"
    },
    "da366ddf1ab4a5aef1271fda21a7065c": {
      "content": "_.partialRight(${func}, ${partials})",
      "doc": "function greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar greetFred = _.partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\n// Partially applied with placeholders.\nvar sayHelloTo = _.partialRight(greet, 'hello', _);\nsayHelloTo('fred');\n// => 'hello fred'\n\nThis method is like `_.partial` except that partially applied arguments\nare appended to the arguments it receives.\n\nThe `_.partialRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-partialright",
      "matches": {
        "lodash partialright": true
      },
      "source": "javascript/lodash"
    },
    "da3d849299ff293aac4d0c08912156d0": {
      "content": "paste(${1:...}, ${2:collapse = ${3:NULL}})",
      "doc": "Paste0",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "pas0",
      "matches": {
        "pas0": true
      },
      "source": "vscode-R/snippets"
    },
    "da4220e7d812bdde742d9c67d9c719a2": {
      "content": "user { \"${1:user}\":\n\tensure      => present,\n\tcomment     => \"${2:$1}\",\n\tmanagehome  => true,\n\thome        => \"${0:/home/$1}\",\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "user": true
      },
      "source": "vim-snippets/snippets"
    },
    "da5388f997fddab61d0affd037db183d": {
      "content": "$this->shouldHaveType($1);",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->shouldHaveType('Type')",
      "matches": {
        "stype": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "da539d10753f0486407912968756c878": {
      "content": "overflow-style: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "da54e3c8418824bf8072935cb62d6788": {
      "content": "expect(${1:target}).toEqual(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to equal (js)",
      "matches": {
        "ee": true
      },
      "source": "vim-snippets/snippets"
    },
    "da5504dfaa3882292da72b506f5decda": {
      "content": "#if ${1}\n  ${2}\nelse\n  #{3}\n#endif",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "#if .. else .. #endif",
      "matches": {
        "#ife": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "da5d69972b63e1fce68fa9d4b7a54b31": {
      "content": "${1:obj}.detach('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "detach": true
      },
      "source": "snippets/javascript"
    },
    "da6e0efb3d2d61b0b8bf2299b48595a3": {
      "content": "{\n\t\"name\": \"Launch Angular\",\n\t\"type\": \"${1:chrome}\",\n\t\"request\": \"launch\",\n\t\"preLaunchTask\": \"${2:npm: start}\",\n\t\"url\": \"http://localhost:${3:4200}/\",\n\t\"webRoot\": \"${4:\\${workspaceFolder\\}}\"\n}",
      "doc": "",
      "filetype": "jsonc",
      "grammar": "lsp",
      "label": "Create launch config for Chrome",
      "matches": {
        "a-launch-chrome": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "da7721c07ce4709e42c608f00d655a94": {
      "content": "display inline-table",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:itb": true
      },
      "source": "vim-snippets/snippets"
    },
    "da8bba340d9e5557bb4cc9eda1099c50": {
      "content": "accepts_nested_attributes_for :${1:association_name}${2:${3:, allow_destroy: true}${4:, reject_if: proc \\{ |obj| ${5:obj.blank?} \\}}}\n",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "accepts_nested_attributes_for",
      "matches": {
        "anaf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "da8e80f31a5884c2feafa9e946841705": {
      "content": "PropTypes.oneOf(['$0']).isRequired,",
      "doc": "Prop type limited to specific values by treating it as an enum required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeEnumRequired",
      "matches": {
        "pter": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "da956becf2161fe284b6adc2e07be09b": {
      "content": "${1:newdataframe} <- na.omit(${2:dataframe})",
      "doc": "Remove all rows with missing values from data frame",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "remove missings",
      "matches": {
        "naomit": true
      },
      "source": "vscode-R/snippets"
    },
    "da9875265eebcf48e661e16b13b8b92e": {
      "content": "${1:obj}.live '${2:events}', (${3:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "live": true
      },
      "source": "snippets/coffee"
    },
    "da989f39108e38c6b217ce43ae40838f": {
      "content": "redirect_to controller: \"${1:items}\", action: \"${2:show}\", id: ${0:@item}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to (controller, action, id)",
      "matches": {
        "recai": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "daa0ef29ef9c985a1b9b28b85e15e46e": {
      "content": "match ${1:list} with\n| [] -> ${2:()}\n| x::xs -> ${3:()}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "pattern match on a list",
      "matches": {
        "matchl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "daa402b942d6dea29d313ccf8d83b2eb": {
      "content": "${1:name} :: ${2:a}\n$1 = ${0:undefined}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn0": true
      },
      "source": "vim-snippets/snippets"
    },
    "daa8435e9b9aeeea6b69bb3754a1d244": {
      "content": "fail(\"${1:Failure message}\");",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fa": true
      },
      "source": "vim-snippets/snippets"
    },
    "daaa0b1aba2a8085c4da69cc979bb599": {
      "content": "<?php echo htmlentities(${1}, ENT_QUOTES, 'utf-8') ?>${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "echoh": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "daac95794a54c27d6df96d9bbc08af69": {
      "content": "for (int ${1:i} = ${2:length}; $1 >= 0; $1--)\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forr": true
      },
      "source": "vim-snippets/snippets"
    },
    "daad1b8dfc7d806e312f9d25b756f16f": {
      "content": "<meta name=\"others\" content=\"${1}\">${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "metaothers": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dab48152122588b7a80487eab4415f49": {
      "content": "line-height: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lh": true,
        "line-height": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dac263d6dbfab807db57da1e3152eaee": {
      "content": "file(name: \"${1:FILE}\" , description: \"${2:Choose a file to upload}\")${0}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "paramfile": true
      },
      "source": "vim-snippets/snippets"
    },
    "dac5a35790f6f674a52dc00cd5e128ca": {
      "content": "<label for=\"${1}:id\">${2:TARGET}</label>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "labelfor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dacc22c1075e0d897d152c99cf2547d0": {
      "content": "display run-in",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:ri": true
      },
      "source": "vim-snippets/snippets"
    },
    "dacc68f39456f0866f5a21dcedf5321a": {
      "content": "scale(${0:size});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "size",
      "matches": {
        "scale": true
      },
      "source": "vim-snippets/snippets"
    },
    "dad0bf1bab7f46520be121b1adc4476e": {
      "content": "${1:obj}.outerWidth()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "outerw": true
      },
      "source": "snippets/javascript"
    },
    "dad568042f74344508ca5c94b83c6156": {
      "content": "<img src=\"${1}\" alt=\"${2}\">${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dad82dd8cabfd86c97324ebf758a34c3": {
      "content": "${0:name}.filter (a",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filter": true
      },
      "source": "vim-snippets/snippets"
    },
    "dad830e60a15cdd2efc43910994156f9": {
      "content": "/**\n * ${2:#:undocumented class}\n *\n * @package ${3:default}\n * @author ${4}\n **/\ninterface ${1}\n{\n\t${0:TARGET}\n} // END interface $1",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doci": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dad993a69d386fecfb9cf7eb179cb1eb": {
      "content": "![${1:#:alt}](${2:#:url})${3}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "![alt](url)",
      "matches": {
        "alturl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dada8c6d7a27e85573bf492a7ee925d6": {
      "content": "font-emphasize-style: dot;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "dadb56a88f3e6a31865c2160c75b7059": {
      "content": "unless (${1:condition}) {\n\t${2:TARGET}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "un",
      "matches": {
        "unless": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dadf27252063d0b2d2648bca345b64ae": {
      "content": "this(${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ctor": true
      },
      "source": "vim-snippets/snippets"
    },
    "dadf66e6fc16e44e9b803f3662a500e9": {
      "content": "place-self: end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "dae0a6425e3655cb278185d3b08e391b": {
      "content": "${1:FIELDNAME} = models.BooleanField(${0:default=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bool": true
      },
      "source": "vim-snippets/snippets"
    },
    "daea401926cd393beb17bc2b23d6d07f": {
      "content": "var ${1} = ${2};",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "var": true
      },
      "source": "vim-snippets/snippets"
    },
    "daec5cc98be48f0da9b7ca8cb205e5b5": {
      "content": "it '${1:spec_name}' do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "it": true
      },
      "source": "vim-snippets/snippets"
    },
    "daf706f69883c9dbf4b9e09ae22f10f5": {
      "content": "outline ${1:1px} ${2:solid} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "o+": true
      },
      "source": "vim-snippets/snippets"
    },
    "daf8b65f19ab7b6a56b91ca476742b5a": {
      "content": "text-justify: tibetan;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "daf9624897d747273895388f9491b8d9": {
      "content": "overflow-y: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy": true
      },
      "source": "vim-snippets/snippets"
    },
    "daf9d9b474cf5a6339999824349c9aca": {
      "content": "val ${1:fn} ${2}: fn ${3:'a} -> ${4:'a}\nlet $1 ${5} =\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "db0382e9e5205ba9cca95ab6145c74ff": {
      "content": "border-left-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdli:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "db119333e57716ed7abdbe745aac24c9": {
      "content": "border-left-style none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdls:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "db13643d2bbf43555028ddc4715cb82d": {
      "content": "class ${1:#:name}(${2:object}):\n\tdef __init__(self, ${3}):\n\t\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "class Class(...): ...",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "db16dd10d5d17bfbc3c7361db6ce8126": {
      "content": "<form id=\"${1}\" action=\"${2}\" method=\"${3:post}\">\n\t${0}\n</form>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "form#": true
      },
      "source": "vim-snippets/snippets"
    },
    "db1b5778cdf3ebdaa6d052f1f58d79d1": {
      "content": "\\\\cite[${1}]{${2}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\cite[]{}",
      "matches": {
        "cite": true
      },
      "source": "vim-snippets/snippets"
    },
    "db1eb306980e55e5185d25274656a063": {
      "content": "@isset(${1})\n    ${2}\n@endisset",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@isset ... @endisset",
      "matches": {
        "isset": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "db20835c6f69ec2efe85d7c9b8a8dd77": {
      "content": "widows ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wid": true
      },
      "source": "vim-snippets/snippets"
    },
    "db2305c3cbfb32aea368ede478acc4af": {
      "content": "Capture Page Screenshot    ${1:${optional filename}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Capture Page Screenshot",
      "matches": {
        "cps": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "db24014652dd262a373245545e4f0b6d": {
      "content": "created () {\n\t${0};\n},",
      "doc": "created lifecycle method",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-lifecycle-created",
      "matches": {
        "vcreated": true,
        "vue lifecycle created": true
      },
      "source": "javascript/vue"
    },
    "db2499679f68e9ce0d6f1caa3d0baadb": {
      "content": "export const select${1:Feature}${2:Property} = createSelector(\n\tselect$1,\n\t(state: $1State) => state.${3:property}\n);",
      "doc": "Creates an NgRx Selector",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrx-create-selector",
      "matches": {
        "a-ngrx-create-selector": true,
        "angular ng rx create selector": true
      },
      "source": "javascript/angular"
    },
    "db33a90e5a36dbcda5f9fd2e2eff4cae": {
      "content": "import ${0:Data.Text}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "import": true
      },
      "source": "vim-snippets/snippets"
    },
    "db35754a3373b7798b2508d12e210ce0": {
      "content": "import { ${1:map} } from 'rxjs/operators';\n$0",
      "doc": "RxJs import",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "rxjs-operator-import",
      "matches": {
        "a-rxjs-operator-import": true,
        "angular import rx js operator": true
      },
      "source": "javascript/angular"
    },
    "db37409f666af2abaf9e05cf9978b4f9": {
      "content": "throw new $1Exception(\"$2\");",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "throw (thr)",
      "matches": {
        "thr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "db4657cf5802384fd12b10ccc76e8eb2": {
      "content": "|> ${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "db682c9b09e19e993cc5cde73f2e6c5c": {
      "content": "<li class=\"${1}\">${0}</li>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "li.": true
      },
      "source": "vim-snippets/snippets"
    },
    "db68f6102324b825de20b11e2809f648": {
      "content": "margin-left ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ml": true
      },
      "source": "vim-snippets/snippets"
    },
    "db6ce9338f1616468f79723e48bebccc": {
      "content": "apply(${1:array}, ${2:margin}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "apply": true
      },
      "source": "vim-snippets/snippets"
    },
    "db6f186e23f6138f0b701ded20d81d74": {
      "content": "group { \"${1:group}\":\n\tensure => ${0:present},\n}",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "group": true
      },
      "source": "vim-snippets/snippets"
    },
    "db7c084f05abb4f6c29c884bf7c49bb8": {
      "content": "echo CHtml::hiddenField('${1:name}', '${2:value}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhhf": true
      },
      "source": "vim-snippets/snippets"
    },
    "db7e17520da981d91201645d8c7e9526": {
      "content": "@slot('$1')\n\t${2:${VISUAL}}\n@endslot",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@slot directive",
      "matches": {
        "slot": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "db815ae27cefd96169a139c10db7c23b": {
      "content": "eprint = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eprint": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "db815cf727e462beeb944d514d2a6df4": {
      "content": "grid-auto-flow row",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "db87b6d66ec96abb6cf5161287afece0": {
      "content": "foreach(${1:/*elem*/}; ${2:/*range*/})\n{\n\t${VISUAL}$3\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "foreach (fore)",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "db89163d88bcc316070657e9925033c8": {
      "content": "func Example${1:Method}() {\n\t${0:${VISUAL}}\n\t// Output:\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "func ExampleXYZ() { ... }",
      "matches": {
        "example": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "db8a31ffcac817d01f9355adfca732e3": {
      "content": "{% ifchanged %}${1}{% endifchanged %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifchanged": true
      },
      "source": "vim-snippets/snippets"
    },
    "db8e745bc236cd5d34feeb8c64d1775c": {
      "content": "map[${1:string}]${0:int}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "map",
      "matches": {
        "mp": true
      },
      "source": "vim-snippets/snippets"
    },
    "db8e7916575d188665af45480f123b5c": {
      "content": "sort(${1:dataArray}${2:, }${0:count});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sort": true
      },
      "source": "vim-snippets/snippets"
    },
    "db929c63e034fbb6568b0c9110ee4609": {
      "content": "Element Text Should Be    ${${1:locator}}    ${2:${expected}}    ${3:${optional message}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Element Text Should Be",
      "matches": {
        "etsb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "db940470dd94de746a5a6bba21c17e07": {
      "content": "grid-row-gap 0",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "grg:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "db98dbb7e97e2394a96c89ec52909494": {
      "content": "|> ${0}",
      "doc": "",
      "filetype": "reason",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "db9af2fb3107a94d28bc599766cc2277": {
      "content": "before_validation_on_update",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "before_validation_on_update",
      "matches": {
        "befvou": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "dba962876d1fa1fe2044492ca3a12eda": {
      "content": "=head2 ${1:MethodName}\n${0:Summary....}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "psub": true
      },
      "source": "vim-snippets/snippets"
    },
    "dbad475adec8ac9a21e56d69262b21cf": {
      "content": "text-height: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "dbaf47bf4efbea4f8ae64896be0721ff": {
      "content": "echo CHtml::activeRadioButton(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yharb": true
      },
      "source": "vim-snippets/snippets"
    },
    "dbb6deaf0a5b5094b21f811b772e00a7": {
      "content": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n}\n",
      "doc": "Export named function in ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportNamedFunction",
      "matches": {
        "enf": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "dbbfef71f6c57e9778a44bd794db0fa9": {
      "content": "text-replace: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tr:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "dbc64f387e66d89b4653ce41c7e4a13c": {
      "content": "it { should have_readonly_attribute :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ishro": true
      },
      "source": "vim-snippets/snippets"
    },
    "dbcf90a38674e6d3c7e0f7860378f3d6": {
      "content": "if __name__ == '__main__':\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "if __name__ == '__main__': ...",
      "matches": {
        "ifmain": true,
        "main": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dbd76cf33c1c33598ee2b5ca869f3ea4": {
      "content": "# Execute resource\nexecute ${1:\"command to execute\"} do # The command to execute\n\t${2:#}creates ${3:nil} # A file this command creates - if the file exists, the command will not be run.\n\t${4:#}cwd ${5:nil} # Current working directory to run the command from.\n\t${6:#}environment ${7:nil} # A hash of environment variables to set before running this command.\n\t${8:#}group ${9:nil} # A group name or group ID that we should change to before running this command.\n\t${10:#}path ${11:nil} # An array of paths to use when searching for the command. Nil uses system path.\n\t${12:#}returns ${13:0} # The return value of the command - this resource raises an exception if the return value does not match.\n\t${14:#}timeout ${15:nil} # How many seconds to let the command run before timing it out.\n\t${16:#}user ${17:nil} # A user name or user ID that we should change to before running this command.\n\t${18:#}umask ${19:nil} # Umask for files created by the command\n\t${20:#}${21:action :run} # Run this command (Default)\n\t${22:#}${0:action :nothing} # Do not run this command\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "execute": true
      },
      "source": "vim-snippets/snippets"
    },
    "dbdca0cc68936662a2cc616158ee62ca": {
      "content": "[${1:#:link}](${2:#:url} \"${3:#:title}\")${4}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "[link](url \"title\")",
      "matches": {
        "linkurltitle": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dbe70abe33bd1e57fae30fd11a44e847": {
      "content": "background-attachment: scroll",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bga:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "dbf7da35f11f60fb864042fcefe9a5e3": {
      "content": "\\supercite{${1}}${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\supercite": true,
        "supercite": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dbf8827bd419e9669ed6b4840cfebe1e": {
      "content": "public string ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps+": true
      },
      "source": "vim-snippets/snippets"
    },
    "dbfc066906bb37a5885651e5fcddbb9d": {
      "content": "background-size ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgz": true
      },
      "source": "vim-snippets/snippets"
    },
    "dbfcf572746ae12db8f26f3a72d56aeb": {
      "content": "hset",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "HashSet",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "dc04897c40206997995b917c16e61063": {
      "content": "NSMutableArray *${1:#:array} = [NSMutableArray array];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "array": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dc0aa84aeaf1baac8e16fafe938cdfe5": {
      "content": "namespace ${1:MyNamespace}\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "namespace",
      "matches": {
        "namespace": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "dc191b2cd2c2f3e2af4a29568041445c": {
      "content": "import { Component } from '@angular/core';\n\n@Component({\n\tselector: '${1:prefix-app}',\n\ttemplate: `\n\t\t<router-outlet></router-outlet>\n\t\t`\n})\nexport class ${2:App}Component { }\n$0",
      "doc": "Angular App root component",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Root Component",
      "matches": {
        "a-component-root": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "dc1a39ba235e7f92d1964daf4c59f5f0": {
      "content": "public string ${1} { get; protected set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps+|": true
      },
      "source": "vim-snippets/snippets"
    },
    "dc283719881ee934d01860014a017704": {
      "content": "java.util.",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "j.u": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dc39b68ec47542423d2b7803eb2ac968": {
      "content": "${0:// A buffer ID of zero unbinds a buffer object}\ngl.glBindBuffer(GL.GL_ARRAY_BUFFER, ${1:0});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl bind buffer",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "dc43471141dd5cdddd898fccef2ab090": {
      "content": "_.conformsTo(${object}, ${source})",
      "doc": "var object = { 'a': 1, 'b': 2 };\n\n_.conformsTo(object, { 'b': function(n) { return n > 1; } });\n// => true\n\n_.conformsTo(object, { 'b': function(n) { return n > 2; } });\n// => false\n\nChecks if `object` conforms to `source` by invoking the predicate\nproperties of `source` with the corresponding property values of `object`.\n\n**Note:** This method is equivalent to `_.conforms` when `source` is\npartially applied.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-conformsto",
      "matches": {
        "lodash conformsto": true
      },
      "source": "javascript/lodash"
    },
    "dc45e92db6dc622252c783411729d164": {
      "content": "border-bottom-right-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbri:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "dc536213d7b5a67ae95c2385d0793ee9": {
      "content": ".. code-block:: ${1:#:filetype}\n${2:#:content}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "code",
      "matches": {
        "code_block": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dc57dc014cf0f5f24d9253b57e294954": {
      "content": "page-break-after left",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "dc5a5b658437dc77eafff61e2b0d4019": {
      "content": "render xml: '${0:text to render}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rxml": true
      },
      "source": "vim-snippets/snippets"
    },
    "dc5d76fcadd21fa5ffa2a3355a41409e": {
      "content": "#[cfg(${1:target_os = \"linux\"})]",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "cfg attribute",
      "matches": {
        "cfg": true
      },
      "source": "vim-snippets/snippets"
    },
    "dc5f636ffdd47f59f5d4e02daf40a2ea": {
      "content": "{elif ${1:expression}}\n\t$0",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "else if .. (eli)",
      "matches": {
        "eli": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "dc6a2308cba17bf9bec95b8f5a3ed4b2": {
      "content": "author = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "author": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dc6f1ac7ca7e7e2a8cb9e8f208b2c1f8": {
      "content": "display: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "dc7f9e3fa3361c272f72ddf63f8cd34b": {
      "content": "${1:obj}.mouseup(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mup": true
      },
      "source": "snippets/javascript"
    },
    "dc83744c9d61f4d48a057d2020556c1b": {
      "content": "const ref = React.createRef()\n",
      "doc": "Forward ref statement used inside component",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-forwardref",
      "matches": {
        "fref": true,
        "react forwardref": true
      },
      "source": "javascript/react"
    },
    "dc90b9b611ab9347a76003bb0141b37a": {
      "content": "${1:TARGET} => ${2:#expr},${3}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true,
        "mcase": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dc9901fde164891b515d58365ba8d84f": {
      "content": "grid-column-gap: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gcg": true
      },
      "source": "vim-snippets/snippets"
    },
    "dc9b455b4d2ae2947163ebe11e9d2e57": {
      "content": "after info ${0:id}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "afin": true
      },
      "source": "vim-snippets/snippets"
    },
    "dca4fec2d0f4a6da7bf51de9257bf0b1": {
      "content": "padding: ${1:0};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "padding",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "dca8481e225e78bece2f234cebf4519c": {
      "content": "[${1:id}]: http://${2:url} \"${3:title}\"",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[:": true
      },
      "source": "vim-snippets/snippets"
    },
    "dca9ebfeb35cf793bec1aa8a55df34bf": {
      "content": "echo CHtml::activeHiddenField(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhahf": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcba7979a012cff918cbb36a2d77d2a6": {
      "content": "refute_includes ${1:collection}, ${2:object}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rfi": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcbdf6e830a766fe88c2682b90656de5": {
      "content": "\\\\newunicodechar{${1}}{${2:\\\\ensuremath}${3:tex-substitute}}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\newunicodechar",
      "matches": {
        "nuc": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcc2fdd0f7f1814d7f19b631bd847385": {
      "content": ":yields: ${0:arguments}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "y": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcc45daa66792507525c0c8755817639": {
      "content": "(for/or ([${1}])\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "for/or",
      "matches": {
        "foro": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcc9a4afda221a4b6110d252087eeee1": {
      "content": "'''''${1}'''''",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "'''''": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dcd2290e10a088fde60e896fc61ef5f3": {
      "content": "int ${1:index} = threadIdx.${2:x} + blockIdx.$2 * blockDim.$2;",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Get current index (1D)",
      "matches": {
        "ii": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcd51d755c52d8c8f0b73957ef8e2085": {
      "content": "#!/usr/bin/env ruby -wKU",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rb": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcd96c3e7da853ab09fb13be8ac05bb9": {
      "content": "#ifdef ${1:#:SYMBOL}\n${0}\n#endif",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "#ifdef ... #endif",
      "matches": {
        "#ifdef": true,
        "ifdef": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dce62b689d3e61188e4585d6e8a37670": {
      "content": "{ |${1:var}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcea34d09f82830e83c28239549eff4d": {
      "content": "place-items ${1:stretch} ${0:stretch}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi+": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcec06a804a0e1d4904edf427068f300": {
      "content": "<rt>${0}</rt>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rt": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcec64cb7a6375bea2b139eb37760458": {
      "content": "$this->input->server(\"${1:index}\");${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_input-server": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcf0d58284d0e68ae188b246162fb802": {
      "content": "internal string ${1}(${2})\n{\n\t${0:return \"\";}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ms&": true
      },
      "source": "vim-snippets/snippets"
    },
    "dcf3dff626cbc0bf05bf66b8cc8b9bb1": {
      "content": "xhr :put, :${1:update}, id: ${2:1}, ${3:object}: ${4:object}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xput": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd0475a69bc03e56a28c6db70de9d300": {
      "content": "@moduledoc \"\"\"\n${0}\n\"\"\"",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mdoc": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd06438c9a19879363ed0ae7989e1b10": {
      "content": "<input type=\"${1:text}\" value=\"$2\" name=\"$3\"${4: id=\"${5:$3}\"}/>$7",
      "doc": "",
      "filetype": "html_minimal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "dd10e84d3c5080c8301e03758a2cddf3": {
      "content": "${1:callbacks}.empty()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cempty": true
      },
      "source": "snippets/coffee"
    },
    "dd10ee5649c6d08407e20846f23a4109": {
      "content": "_.merge(${object}, ${sources})",
      "doc": "var object = {\n  'a': [{ 'b': 2 }, { 'd': 4 }]\n};\n\nvar other = {\n  'a': [{ 'c': 3 }, { 'e': 5 }]\n};\n\n_.merge(object, other);\n// => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n\nThis method is like `_.assign` except that it recursively merges own and\ninherited enumerable string keyed properties of source objects into the\ndestination object. Source properties that resolve to `undefined` are\nskipped if a destination value exists. Array and plain object properties\nare merged recursively. Other objects and value types are overridden by\nassignment. Source objects are applied from left to right. Subsequent\nsources overwrite property assignments of previous sources.\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-merge",
      "matches": {
        "lodash merge": true
      },
      "source": "javascript/lodash"
    },
    "dd11cba35b5b6361a244582248a08b92": {
      "content": "must_match /${0:regex}/",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mm": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd1b37afbfec414db83aad4e4405ca66": {
      "content": "kv.test(${1:x}, ${0:y})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "kvt": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd1d6b1d2f22662a616e2d2a119502a0": {
      "content": "font: ${1:1em} ${2:Arial},${0:sans-serif}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "f+": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd300fd97a57c8cc4f1d073afb83e770": {
      "content": "_.stubString()",
      "doc": "_.times(2, _.stubString);\n// => ['', '']\n\nThis method returns an empty string.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-stubstring",
      "matches": {
        "lodash stubstring": true
      },
      "source": "javascript/lodash"
    },
    "dd365f19d8f12fab441a2e3974bb41d6": {
      "content": "render action: '${0:action}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ra": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd4969902653c61a0fe00e8bb91e79d7": {
      "content": "for var ${1:i = 0}; ${2:i < j}; ${3:i++} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dd4e3d293222c7f9612c2825aecc3508": {
      "content": "before(() => {\n\t${0:${VISUAL}}\n});",
      "doc": "",
      "filetype": "javascript-mocha",
      "grammar": "snu",
      "label": "before(() => { ... })",
      "matches": {
        "bef": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd4e5a3e70ad55540fb847df5400cd58": {
      "content": "case '${1:#:variable}':\n\t${0:#:code...}\n\tbreak;",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dd50cfe9c97b76ada68b9eccab8ea96e": {
      "content": "$.ajaxStart(function () {\n\t${1:// handler for when an AJAX call is started and no other AJAX calls are in progress};\n});\n${0}",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxstart": true
      },
      "source": "snippets/javascript"
    },
    "dd57a56454385fee27eb750dd16bca34": {
      "content": "else if (${1}) begin\n\t${0}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd657b3e28bc6ff84d1be6bb3fae2bcb": {
      "content": "\\\\begin{columns}\n\t\\\\begin{column}{0.5\\\\textwidth}\n\t\t${1}\n\t\\\\end{column}\n\t\\\\begin{column}{0.5\\\\textwidth}\n\t\t${0}\n\t\\\\end{column}\n\\\\end{columns}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "two-column environment",
      "matches": {
        "col2": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd67c7ded23d45894c0beaae12e9503a": {
      "content": "class ${1} ${2:#:extends_or_implements}{\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dd69d623ce63a56d5208ce161e374cd7": {
      "content": "${1:obj}.mousedown (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mdown": true
      },
      "source": "snippets/coffee"
    },
    "dd6a65dac0f8310e70fa64b2df9b302d": {
      "content": "for ${1:i} = ${2:1:n}\n\t${0}\nend",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "for",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd6bc5834a4cf8e3bba93162fb6b9c5b": {
      "content": "pub enum ${1:Name} {\n\t${2},\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "pub enum definition",
      "matches": {
        "penum": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd6e0d0e46a61678580c559f319829c8": {
      "content": "grid-auto-rows: auto",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd74cf4fa61cfcfb2acc860069169582": {
      "content": "<% ${0} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "%": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd781029acdfbdd753190fd824ea3575": {
      "content": "@for ($i = 0; $i < ${1}; $i++)\n    ${2}\n@endfor",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@for ... @endfor",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dd7ce6bd89bb5f57b3725b31ab20aa2b": {
      "content": "<datatemplate>\n\t${0}\n</datatemplate>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "datatemplate": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd7f2c32cae9cbe8719c910bcf8e04ee": {
      "content": "{% cycle ${1:val1} ${2:val2} ${3:as ${4}} %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cycle": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd8e37b61711c68cd7e9ab05885adc3d": {
      "content": "border-right: ${1:1px} ${2:solid} #${0:000}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdr+": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd93fb25eec3bed02ecb9cc6a712ae40": {
      "content": "list-style: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lis:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "dd970df73a13148fa8e63189a0cdfd7d": {
      "content": "setTimeout(function() { ${0} }, ${1:10});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "setTimeout-function": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dd981820bb97cd239b26c54fb126bf91": {
      "content": "white-space-collapse break-all",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whsc:ba": true
      },
      "source": "vim-snippets/snippets"
    },
    "dda17a8b274ba3f2dd2a549e068c69e7": {
      "content": "$.map ${1:arrayOrObject}, (${2:value}, ${3:indexOrKey}) ->\n\t${0:// callback}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mapp": true
      },
      "source": "snippets/coffee"
    },
    "dda5f08f3a69b823933989d324bc5bde": {
      "content": "<iframe class=\"${1}\" src=\"${2}\" frameborder=\"0\"></iframe>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iframe.": true
      },
      "source": "vim-snippets/snippets"
    },
    "ddac9926331ff817eb9f8c9b21aabc90": {
      "content": "${1:obj}.css({${2:attribute1}: '${3:value1}', ${4:attribute2}: '${5:value2}'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cssm": true
      },
      "source": "snippets/javascript"
    },
    "ddb290c07aa0491680795ad7f87b00b7": {
      "content": "getter! ${0:name}",
      "doc": "",
      "filetype": "crystal",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r!": true
      },
      "source": "vim-snippets/snippets"
    },
    "ddb2f142fe2962433c0499d34b41ea02": {
      "content": "redirect_to action: \"${1:show}\", id: ${0:@item}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "redirect_to (action, id)",
      "matches": {
        "reai": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ddb966ecfd803eeaf0d96aad651ab091": {
      "content": "{% blockquote %}\n${0:quote}\n{% endblockquote %}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blockquote": true
      },
      "source": "vim-snippets/snippets"
    },
    "ddbb41e2567790fa0e0df99109b9f489": {
      "content": "word-wrap: normal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "ddbf9204c1ef795426c6f57732ad2e2c": {
      "content": "rel=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rel": true
      },
      "source": "vim-snippets/snippets"
    },
    "ddd14064f7d04f38768aa9a16ca31ffd": {
      "content": "content normal",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "ddddd2fc76653aff95f29ae50f659ecf": {
      "content": "place-content: start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "dddeef3b03629834f42941d13993a68a": {
      "content": "font-family: ${0:Georgia,'Times New Roman'},serif;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "dde455261a6c18cca90aefbb832e3879": {
      "content": "text-transform: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt": true
      },
      "source": "vim-snippets/snippets"
    },
    "ddebd4154eda37b2bc4bbf846812e30b": {
      "content": "context '${1:message}' do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cont": true
      },
      "source": "vim-snippets/snippets"
    },
    "ddedd36ce514edde4ad10e90d8f43c6f": {
      "content": "${1:obj}.not('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "not": true
      },
      "source": "snippets/javascript"
    },
    "ddee662127a5eb99bf258645adda6318": {
      "content": "${1:obj}.ajaxError(function (${1:e}, xhr, settings, thrownError) {\n\t${2:// error callback}\n});\n${0}",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxerror": true
      },
      "source": "snippets/javascript"
    },
    "ddf8ddf263b67674ba6eb0836052727d": {
      "content": "default_scope ${1:order(${2:'${3:created_at DESC}'})}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "default_scope",
      "matches": {
        "dscope": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "de0071c545026a4d4317b43eac0d9721": {
      "content": "it { should set_session :${0:key} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isss": true
      },
      "source": "vim-snippets/snippets"
    },
    "de05a63323713292b212b6e64b80929f": {
      "content": "notFoundIfNull(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rnfin": true
      },
      "source": "vim-snippets/snippets"
    },
    "de06a672d20c69a93c2fbe4a8061c4b0": {
      "content": "import React, { Component } from 'react'\n\nexport default class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
      "doc": "Creates a React component class with ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-class-component",
      "matches": {
        "rcc": true,
        "react component class": true
      },
      "source": "javascript/react"
    },
    "de0f7a93919eb305ca6215479839f508": {
      "content": "/**\n * @Route(\"$3\", name=\"$4\")\n * @Method({${5:\"POST\"}})\n * @Template()\n */\npublic function $1Action($2)\n{\n\t$6\n}",
      "doc": "",
      "filetype": "php-symfony2",
      "grammar": "snu",
      "label": "Symfony2 action",
      "matches": {
        "act": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "de12a5e41fef3a11ef0b10972f2fc88b": {
      "content": "{\n\t\"type\": \"select\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"options\": [\n\t\t{\n\t\t\t\"group\": \"${5}\",\n\t\t\t\"value\": \"${6}\",\n\t\t\t\"label\": \"${0}\"\n\t\t}\n\t],\n\t\"default\": \"${3}\",\n\t\"info\": \"${4}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_select": true
      },
      "source": "vim-snippets/snippets"
    },
    "de130c9ba31434a4eeacec62763ca6ee": {
      "content": "break;",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "br": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "de159cd5c75744a31e4e152df0211fd6": {
      "content": "text-justify: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "de1925b76459f0b6d0f7726d6d232053": {
      "content": "when ${1} => ${2};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "when",
      "matches": {
        "whe": true
      },
      "source": "vim-snippets/snippets"
    },
    "de194574dcb3e6bffebc15177375913b": {
      "content": "for ${1:key}, ${2:value} of ${3:Object}\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Object Comprehension",
      "matches": {
        "foro": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "de1acdf5bf4b2be5ef1106a5fddd8803": {
      "content": "import '${1:module}';$0",
      "doc": "Imports entire module in ES6 syntax without module name",
      "filetype": "base",
      "grammar": "lsp",
      "label": "importnomodulename",
      "matches": {
        "base import no module name": true
      },
      "source": "javascript/base"
    },
    "de26c766b58d1d43e455cc968bf20c0d": {
      "content": "jest.fn($0)",
      "doc": "creates jest.fn()",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-jest-fn",
      "matches": {
        "jest fn": true,
        "jfn": true
      },
      "source": "javascript/jest"
    },
    "de29ed33aff2e755a3eadaf8c58ddcc5": {
      "content": "${1:obj}.delay('${2:slow/400/fast}'${3:, 'queue name'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "delay": true
      },
      "source": "snippets/coffee"
    },
    "de42f12bbbeb3c4e2cc410098851249f": {
      "content": "flash[:${1:notice}] = '${0}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "flash": true
      },
      "source": "vim-snippets/snippets"
    },
    "de48f05c23d052d93830074f54e86e70": {
      "content": "border-bottom-color: #${1:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbc": true
      },
      "source": "vim-snippets/snippets"
    },
    "de493e80d8d13f3bf59164fae8f13b00": {
      "content": "overflow-style: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs": true
      },
      "source": "vim-snippets/snippets"
    },
    "de4dc34e842f863b0163d91365f66ad0": {
      "content": "expect.assertions($0);",
      "doc": "expects the test to make the indicated number of assertions (useful for async)",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-expect-assertions",
      "matches": {
        "expas": true,
        "jest expect assertions": true
      },
      "source": "javascript/jest"
    },
    "de502895ca0122fa3c6e037d8a26ed30": {
      "content": "const ${1:x} = useSpring(${2:0}, { ${3:stiffness}: ${4:300} })",
      "doc": "useSpring()\nCreates a MotionValue that, when set, will use a spring animation to animate to its new state.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-spring",
      "matches": {
        "framer-motion use-spring": true,
        "use-spring": true
      },
      "source": "javascript/framer-motion"
    },
    "de5a1eb455fef00a682cd394260a9e04": {
      "content": "font-effect: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef": true
      },
      "source": "vim-snippets/snippets"
    },
    "de62a864a113b1cbcb2f1cd385f7425b": {
      "content": "PropTypes.instanceOf($0),",
      "doc": "Is an instance of a class prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeInstanceOf",
      "matches": {
        "pti": true
      },
      "source": "vscode-react/snippets"
    },
    "de635950f595c3950d9091e8767b70e7": {
      "content": "import { mapState } from 'vuex'\n\nexport default {\n\tcomputed: {\n\t\t...mapState([\n\t\t\t${1:'nameOfState'},\n\t\t])\n\t},\n}",
      "doc": "map getters inside a vue component",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-mapstate",
      "matches": {
        "vmapstate": true,
        "vue mapstate": true
      },
      "source": "javascript/vue"
    },
    "de67594a48bdb55f6ae6c6e21825cee8": {
      "content": "// multiply the current matrix by a general scaling matrix\ngl.glScalef(${1:x}, ${2:y}, ${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl scale f",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "de6b895aa34e9b9f069d9ddb7891e1e7": {
      "content": "font: ${1:normal/italic/oblique} ${2:normal/small-caps} ${3:normal/bold} ${4:1em/1.5em} ${5:Arial}, ${6:sans-}serif;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "font:   style variant weight size:line-height font -family (font)",
      "matches": {
        "font": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "de74a7f5e81f2836d77b3b2fe38014ed": {
      "content": "expect($1).toMatchInlineSnapshot($0);",
      "doc": "returns true if the argument matches the most recent inline snapshot",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tomatchinlinesnapshot",
      "matches": {
        "jest expect tomatchinlinesnapshot": true,
        "tmis": true
      },
      "source": "javascript/jest"
    },
    "de76ad4f80bd30bf4772ba6d8a2b6ce8": {
      "content": "if err != nil {\n\tt.Fatal(err)\n}\n${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error test fatal ",
      "matches": {
        "errt": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "de7af1e66d27341cbc06126ee9512390": {
      "content": "while True:\n\t${1}\n\tif ${0:condition}:\n\t\tbreak",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dowh": true
      },
      "source": "vim-snippets/snippets"
    },
    "de80062ba63a520437be1db323166cac": {
      "content": "@php\n    ${1}\n@endphp",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@php ... @endphp",
      "matches": {
        "php": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "de810807f1045a33b76ea5f4e7f166ae": {
      "content": "<transition\n\tmode=\"out-in\"\n\t@before-enter=\"beforeEnter\"\n\t@enter=\"enter\"\n\n\t@before-leave=\"beforeLeave\"\n\t@leave=\"leave\"\n\t:css=\"false\">\n\n</transition>",
      "doc": "transition component js hooks",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Transition Component with JavaScript Hooks",
      "matches": {
        "vanim": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "de8430f88bce82d28e1ad8c1f5067581": {
      "content": ":- begin_tests(${1:name}).\n  ${0}\n:- end_tests($1).",
      "doc": "",
      "filetype": "prolog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "begintest": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "de8e0d160a6a8cd8b54c16181ebdd0a7": {
      "content": "/**\n * ${1:undocumented constant}\n */",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doc_dp": true
      },
      "source": "vim-snippets/snippets"
    },
    "de8e4ccb477b6d15087d80192339a6c7": {
      "content": "const ${1:name} = (${2:params}) => {\n\t${3}\n}\n",
      "doc": "Creates a named function in ES7 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "namedFunction",
      "matches": {
        "nfn": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "de8fd85ed0915e5021434ca13c6b4a06": {
      "content": "${1:_} => ${2:expression}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Case clause of pattern match",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "de9fb2233046179cb57b1f49d4ba4fe5": {
      "content": "$${1:#:expression}$${2}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "$ expression $",
      "matches": {
        "$": true,
        "mathexpression": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dea4be020a9e8db5dc3d015829e140d3": {
      "content": "$_SESSION['${1:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "SS": true
      },
      "source": "vim-snippets/snippets"
    },
    "debb9cb05070714535ed26b9c1f4e5e8": {
      "content": "while ${1} loop\n\t${2}\nend loop;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "debffb4b106d3686cafa61b01a5722b8": {
      "content": "{% redirect \"${1}\" %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig redirect",
      "matches": {
        "redirect": true
      },
      "source": "vim-snippets/snippets"
    },
    "dec9960e2ccbaa3ee60338cea82b9422": {
      "content": "System.out.format(${1});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "format": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "decb72e373db34472119b0b00512440b": {
      "content": "place-content flex-end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "decf7e9d337735d3f77408f9740fbbf9": {
      "content": "std.traits",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "traits": true
      },
      "source": "vim-snippets/snippets"
    },
    "ded552228c4cd9fff5dfe2708ae49e84": {
      "content": "import * as ${2:alias} from '${1:module}'$0",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "importEverything",
      "matches": {
        "ime": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "ded6bc3d819513e735884e9287eaacc9": {
      "content": "in\n{\n\tassert(${1:/*condition*/}, \"${2:error message}\");\n\t$3\n}\nbody",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "in contract (in)",
      "matches": {
        "in": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ded8b4322ae6b576532b9cf4e35c960a": {
      "content": "${1:obj}.trigger('${2:event name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trig": true
      },
      "source": "snippets/javascript"
    },
    "ded96ddbd9c166d93b5c6b20ce6d83de": {
      "content": "func (${1:receiver} ${2:type}) ${3:funcName}(${4:w} http.ResponseWriter, ${5:r} *http.Request) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "http handler function on receiver",
      "matches": {
        "fumh": true
      },
      "source": "vim-snippets/snippets"
    },
    "dedfcb7095e61083245367e6df1535dd": {
      "content": "${fn:contains(${1:string}, ${0:substr})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "contains": true
      },
      "source": "vim-snippets/snippets"
    },
    "dee025318730b49ee5cef02772ef84af": {
      "content": "@setState\n\t${1:myvar}: ${2:myvalue}\n\t$3",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React setState",
      "matches": {
        "setState": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "dee415a186404f3ac446ff09c6674b2a": {
      "content": "mixed.test()",
      "doc": "mixed.test(options: object): Schema\n\nAlternative test(..) signature. options is an object containing some of the following options:Options = {\n  // unique name identifying the test\n  name: string;\n  // test function, determines schema validity\n  test: (value: any) => boolean;\n  // the validation error message\n  message: string;\n  // values passed to message for interpolation\n  params: ?object;\n  // mark the test as exclusive, meaning only one of the same can be active at once\n  exclusive: boolean = false;\n}\nIn the case of mixing exclusive and non-exclusive tests the following logic is used.\nIf a non-exclusive test is added to a schema with an exclusive test of the same name\nthe exclusive test is removed and further tests of the same name will be stacked.If an exclusive test is added to a schema with non-exclusive tests of the same name\nthe previous tests are removed and further tests of the same name will replace each other.let max = 64;\nlet schema = yup.mixed().test({\n  name: \"max\",\n  exclusive: true,\n  params: { max },\n  message: \"${path} must be less than ${max} characters\",\n  test: value => value == null || value.length <= max\n});\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-test",
      "matches": {
        "yup mixed test": true
      },
      "source": "javascript/yup"
    },
    "deea6ddf58218bab43cde38f2bcaa9c1": {
      "content": "Object.defineProperty(\n\t${1:object},\n\t'${2:property}',\n\t{\n\t\tget : function $1_$2_getter() {\n\t\t\t// getter code\n\t\t},\n\t\tset : function $1_$2_setter(value) {\n\t\t\t// setter code\n\t\t},\n\t\tvalue        : ${3:value},\n\t\twriteable    : ${4:boolean},\n\t\tenumerable   : ${5:boolean},\n\t\tconfigurable : ${0:boolean}\n\t}\n);",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prop": true
      },
      "source": "snippets/javascript"
    },
    "def939625ae40483eac5b80b69642f47": {
      "content": "import renderer from 'react-test-renderer'\n\nimport { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_setupReactTest",
      "matches": {
        "_stest": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "def9e9e4b65c823d5f7eeec9a405a867": {
      "content": "Element Should Be Focused    ${${1:locator}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Element Should Be Focused",
      "matches": {
        "esbf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "defdee6895679c3b61962368719c00a4": {
      "content": "alert(\"${1:message}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alert": true
      },
      "source": "vim-snippets/snippets"
    },
    "df01786e0f462d55d43debfdbe018204": {
      "content": "-ifndef(${1:TEST}).\n${0}\n-endif.",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifnd": true
      },
      "source": "vim-snippets/snippets"
    },
    "df03ee4dd9e353f1f1290c4caee620ce": {
      "content": "text-shadow none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tsh:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "df0a38caa6c5d52a2599eb8aad464819": {
      "content": "string.length()",
      "doc": "string.length(limit: number | Ref, message?: string | function): Schema\n\nSet a required length for the string value. The ${length} interpolation can be used in the message argument",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-length",
      "matches": {
        "yup string length": true
      },
      "source": "javascript/yup"
    },
    "df0a5397d2db17b5773c14ebe77790f0": {
      "content": "text-justify: kashida;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:k": true
      },
      "source": "vim-snippets/snippets"
    },
    "df0c5dc72312796af80f67e929fcc748": {
      "content": "<xsl:attribute name=\"${1:name}\">${2}</xsl:attribute>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "blank",
      "matches": {
        "attribute": true
      },
      "source": "vim-snippets/snippets"
    },
    "df0f67dd91e4f2d30346d60912550f6e": {
      "content": "${1:ptr} = (${2:type}*) calloc(${3:size}, sizeof($2));",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clc": true
      },
      "source": "vim-snippets/snippets"
    },
    "df15536d0fec15a6c2b5add90bfad1b4": {
      "content": "println(${1})",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "println()",
      "matches": {
        "p": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "df17599b5b186534f19455d641159770": {
      "content": "${fn:toUpperCase(${0:string})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "uc": true
      },
      "source": "vim-snippets/snippets"
    },
    "df1865d9f7b94d34293f3e0a672bab07": {
      "content": "border-left none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdl:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "df1923d19f1f7f110c16d9cb54f43b9a": {
      "content": "def __len__(self):\n\t${1:pass}\ndef __getitem__(self, key):\n\t${2:pass}\ndef __setitem__(self, key, value):\n\t${3:pass}\ndef __delitem__(self, key):\n\t${4:pass}\ndef __iter__(self):\n\t${5:pass}\ndef __reversed__(self):\n\t${6:pass}\ndef __contains__(self, item):\n\t${7:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "methods for emulating a container type",
      "matches": {
        "contain": true
      },
      "source": "vim-snippets/snippets"
    },
    "df1fd7bd74897bf4a4913e464ee050c9": {
      "content": "__import__('bpdb').set_trace()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bpdb": true
      },
      "source": "vim-snippets/snippets"
    },
    "df216300b4aeb504d9ff6d3a1b3685df": {
      "content": "display none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "df3777395c7100da44249009b13d4665": {
      "content": "${1:/* condition */} ? ${2:a} : ${3:b}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "df3b17f82c8209a9636532b6b37ab975": {
      "content": "PropTypes.bool,",
      "doc": "Bool prop type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-bool",
      "matches": {
        "prop-types bool": true,
        "ptb": true
      },
      "source": "javascript/prop-types"
    },
    "df47104fd18a84ecbfb18c3e67ee13bb": {
      "content": "background: ${1:none};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background",
      "matches": {
        "bg": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "df4c7b05697e6b637103f5d28642d10e": {
      "content": "<button type=\"reset\">${0}</button>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "button:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "df553209b5211e1c7316629c2d6d6aed": {
      "content": "def new\n\t@${1:model_class_name} = ${2:ModelClassName}.new\n\trespond_to do |format|\n\t\tformat.html # new.html.erb\n\t\tformat.json  { render json: @$1 }\n\tend\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defnew": true
      },
      "source": "vim-snippets/snippets"
    },
    "df5a279216e8b1cbfaa4e09cd8f5000e": {
      "content": "loadStrings(\"${0:filename}\");",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loadStrings": true
      },
      "source": "vim-snippets/snippets"
    },
    "df5e0b086da2db19f83847aa13f3d227": {
      "content": "_.forInRight(${object}, ${iteratee})",
      "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forInRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n\nThis method is like `_.forIn` except that it iterates over properties of\n`object` in the opposite order.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-forinright",
      "matches": {
        "lodash forinright": true
      },
      "source": "javascript/lodash"
    },
    "df69d2337951e4dd6b8e4b21518e34ff": {
      "content": "for (${1:item} <- ${2:obj}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "df6b5415e76a648e9e5de2268863c1ef": {
      "content": "<% ${0} %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rc": true
      },
      "source": "vim-snippets/snippets"
    },
    "df6eabc8908bb53f968f05ebe5d56b4c": {
      "content": "Session::id();",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_session_id": true
      },
      "source": "vim-snippets/snippets"
    },
    "df81e5e98206b3e18fdc3cbf7587ed7c": {
      "content": "{% dd ${1} %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig dd",
      "matches": {
        "dd": true
      },
      "source": "vim-snippets/snippets"
    },
    "df83849eed61748e27605812c4a2fb87": {
      "content": "default_if_none:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defaultifnone": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "df8e658839e423abb03c82d6474685ee": {
      "content": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sbash": true
      },
      "source": "vim-snippets/snippets"
    },
    "df957b56232c0ed453ae0f119abf55c4": {
      "content": "import { motion } from 'framer-motion'",
      "doc": "",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-import",
      "matches": {
        "framer-motion import": true
      },
      "source": "javascript/framer-motion"
    },
    "df95900df5d2dcf4d9bf8b5ecb7a648f": {
      "content": "_.before(${n}, ${func})",
      "doc": "jQuery(element).on('click', _.before(5, addContactToList));\n// => Allows adding up to 4 contacts to the list.\n\nCreates a function that invokes `func`, with the `this` binding and arguments\nof the created function, while it's called less than `n` times. Subsequent\ncalls to the created function return the result of the last `func` invocation.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-before",
      "matches": {
        "lodash before": true
      },
      "source": "javascript/lodash"
    },
    "df9ee589cfef9148ad80f9278d40b601": {
      "content": "switch (${1}) {\n    ${2:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dfa08286df46372ffda1049157d54744": {
      "content": "justify-items stretch",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "dfac828775c174f9edc16dd19e3a704d": {
      "content": "\\ *${1:Emphasis}*\\ ${0}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "*c": true
      },
      "source": "vim-snippets/snippets"
    },
    "dfb5c5dda135dbfcde4ebcdd83c9d277": {
      "content": "int main(int argc, char* argv[])\n{\n\t${0:TARGET}\n\treturn 0;\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dfb99999baf85282a2e59e77f648006a": {
      "content": "lines(${1:x}${2:, color=${3:red}})",
      "doc": "Polygonal Line",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "lin",
      "matches": {
        "lines": true
      },
      "source": "vscode-R/snippets"
    },
    "dfbe5763df3535796722da1bc984b5e2": {
      "content": "background-clip: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp": true
      },
      "source": "vim-snippets/snippets"
    },
    "dfc21abfab5283d06a1b8a8c4155de47": {
      "content": "_.updateWith(${object}, ${path}, ${updater}, ${customizer})",
      "doc": "var object = {};\n\n_.updateWith(object, '[0][1]', _.constant('a'), Object);\n// => { '0': { '1': 'a' } }\n\nThis method is like `_.update` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-updatewith",
      "matches": {
        "lodash updatewith": true
      },
      "source": "javascript/lodash"
    },
    "dfcdce73e380b00927908a32ad2e3001": {
      "content": "/// ${1:description}\n///\n/// ${2:details}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "generic ddoc block (doc)",
      "matches": {
        "doc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "dfd41751f8bbe39b42b13c89845635cd": {
      "content": "<cite>${0}</cite>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cite": true
      },
      "source": "vim-snippets/snippets"
    },
    "dfd5003b39053ecc2c04f5d93fbc1fda": {
      "content": "text-wrap: normal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "dfd9bbc1a860d10cdf295a06763a2d81": {
      "content": "${1:obj}.prev('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prev": true
      },
      "source": "snippets/javascript"
    },
    "dfdef7b40a441a100aee665e32c4e2f4": {
      "content": "import ${1};\n${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "import": true,
        "imt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dfe994fc49d139be5a6ea74722d0f9fd": {
      "content": "background-origin: border-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "dfe9afecb1de81908481f79f8fc68323": {
      "content": "<nowiki>${1}</nowiki>",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nowiki": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dfee352f97f09551a410f84f0a5e5aca": {
      "content": "// multiply the current matrix by a translation matrix\ngl.glTranslatef(${1:x}, ${2:y}, ${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl translate f",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "dff075a24ea3ee99dd4a3a63b91a25e6": {
      "content": "set the_choice to choose from list ${1}\"\\}}",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "choose",
      "matches": {
        "choose_ItemFromList": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "dff2a824ba1ed32724122c8aaeadbee6": {
      "content": "invariant()\n{\n\tassert(${1:/*condition*/}, \"${2:error message}\");\n\t$3\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "invariant (inv)",
      "matches": {
        "inv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "dffb07f4bdff430a397eba26945f57ad": {
      "content": "t.float :${1:title}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.float (tcf)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "dffe58b0909a979d1cd7cb44066770e5": {
      "content": "jasmine.objectContaining({\n\t${VISUAL}$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "object containing (js)",
      "matches": {
        "objc": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0082005c1372f2cdf8ca0725bc7168d": {
      "content": "zoom: 1;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "zoo": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0107eb4db065d228bf30a824ecd42c0": {
      "content": "static ${1}: ${2:usize} = ${0};",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "static item declaration",
      "matches": {
        "stat": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0157808eaa329c158be071e9582f038": {
      "content": "NSLog(@\"${1:%@}\"${2});",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "log": true
      },
      "source": "vim-snippets/snippets"
    },
    "e018b7eec2a0da3761d4ae7f6bda8c47": {
      "content": "if (${1:#:condition}) {\n  ${2:TARGET}\n} else {\n  ${3}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ife",
      "matches": {
        "if-else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e01e57de6cf43548823504d6efede882": {
      "content": "overflow-x: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0221e56d0850def8b9b1844e28b8934": {
      "content": "_.startsWith(${string}, ${target}, ${position})",
      "doc": "_.startsWith('abc', 'a');\n// => true\n\n_.startsWith('abc', 'b');\n// => false\n\n_.startsWith('abc', 'b', 1);\n// => true\n\nChecks if `string` starts with the given target string.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-startswith",
      "matches": {
        "lodash startswith": true
      },
      "source": "javascript/lodash"
    },
    "e02d6d9e70b548087147c61b50ba1f82": {
      "content": "grid-template ${1} / ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gt+": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0307291bb76278ee0a5f2afe5cc23b3": {
      "content": "@if ${1:condition} {\n\t${2}\n} @else {\n\t${0}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0379fb7c6f0e7a8e6c83509ed3ce69d": {
      "content": "| plus: ${1:1}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "plus": true
      },
      "source": "vim-snippets/snippets"
    },
    "e03bb866ba334521d33af097c4fb1b08": {
      "content": "leave-class=\"$1\"$0",
      "doc": "leave-class=''. Expects: string.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-leave-class",
      "matches": {
        "leaveclass": true,
        "vue leave-class": true
      },
      "source": "javascript/vue"
    },
    "e03d52003aa618d93d1a656e56a0a050": {
      "content": "${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {\n  return ${2:name}${5:.id};$0\n}",
      "doc": "TrackBy Function",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "TrackBy Function",
      "matches": {
        "a-trackby": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "e04e0f90198721030cb254566bc99275": {
      "content": "public function action${1:Index}(${2:params})\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yact": true
      },
      "source": "vim-snippets/snippets"
    },
    "e058bfb72e66c27a8531f5a4ed44dad0": {
      "content": "${1: obj} match {\n\tcase ${2:e} => ${3}\n\tcase _ => ${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "match": true
      },
      "source": "vim-snippets/snippets"
    },
    "e067878b8fa012f7241da5686fdae514": {
      "content": "\\\\chapter{${1:chapter name}}%\n\\\\label{cha:${2:$1}}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\chapter",
      "matches": {
        "cha": true
      },
      "source": "vim-snippets/snippets"
    },
    "e06be920b3e432e6ebdfe4fc87c534d0": {
      "content": "interface ${1:name} {\n\t${2:/* methods */}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "full interface ",
      "matches": {
        "inf": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0751a0c3f9a632d536c9d3608eefd51": {
      "content": "border-bottom-style: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0784d230cad4e212f642aae9b3b0636": {
      "content": "$this->${1:method}()->shouldNotBeLike(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotBeLike('value')",
      "matches": {
        "snblike": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e07ca19c1c9adf8ce82db53300609a9f": {
      "content": "| join: '${1:, }'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "join": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0812ecd16d9fdc4fa0e997310c2a658": {
      "content": "${1:obj}.error(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "error": true
      },
      "source": "snippets/javascript"
    },
    "e0840767f9ba32cdd84b21ac34c7eb4c": {
      "content": "case \"$${1:{name\\}}\" in\n\t${2:pattern*})\n\t\t${0}\n\t\t;;\n\t*)\n\t\t${3:echo \"$$1 Didn't match anything\"}\nesac",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e085682e6e3c2ba0e1ff13a440274eb8": {
      "content": "| minus: ${1:1}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "minus": true
      },
      "source": "vim-snippets/snippets"
    },
    "e08ae3369ad74db77d6faf21dafb6c2f": {
      "content": "justify-content: flex-start;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "e09f59f339921418a6205afc7e12dc95": {
      "content": "<select name=\"${1}\" id=\"${2:$1}\">\n\t${0}\n</select>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "select": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0a079e722c8d4aedcdda2cba162a45e": {
      "content": "**${1}**${2}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "**strong**",
      "matches": {
        "strong1": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e0a1fb73a4d1b027a341bc12a9013064": {
      "content": "align-content: start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0a5db18f6c99313468d130021ec07eb": {
      "content": "orphans ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "orp": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0a7278a9a8ae4231978b40a060873bd": {
      "content": "t.binary :${1:title}${2:, limit: ${3:2}.megabytes}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create binary column",
      "matches": {
        "tcbi": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e0b3110e5fefdbeba69a6866372a436a": {
      "content": "\\\\section{${1:section name}}%\n\\\\label{sec:${2:$1}}\n${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\section",
      "matches": {
        "sec": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0b65c254377cde8feb73a93fbf5b2ce": {
      "content": "list-style-position: ${1:inside/outside};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "list-style-position: pos (list)",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e0ba8e2d816a66cd51b2ba29bca1b755": {
      "content": "${1:app}.get('$2', $3);",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "express GET",
      "matches": {
        "eget": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e0c885033f13328f003fd18e4d5bbe1e": {
      "content": "library(${1:package}, ${2:help}, ${3:pos = ${4:2}}, ${5:lib.loc = ${6:NULL}})",
      "doc": "Library",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "lib",
      "matches": {
        "library": true
      },
      "source": "vscode-R/snippets"
    },
    "e0d6d6c018389b01c8a733fbcba6f911": {
      "content": "const ${1:results} = await request(\n  ${2:url},\n  ${3:query}\n);",
      "doc": "",
      "filetype": "graphql-request",
      "grammar": "lsp",
      "label": "graphql-request-request",
      "matches": {
        "graphql-request request": true
      },
      "source": "javascript/graphql-request"
    },
    "e0d7a1a5d9aeefe21f2e1227f4010676": {
      "content": "NSMutableArray ${0}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nsma": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0f2814da1d01e2a968b405005465f1b": {
      "content": "=> $0",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "=> ",
      "matches": {
        "=": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0f9b7cfb1a81a9cf08ffdaeb9713504": {
      "content": "{%- tablerow ${1:item} in ${2:collection} cols: ${3:2} -%}\n\t${0}\n{%- endtablerow -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tablerow-": true
      },
      "source": "vim-snippets/snippets"
    },
    "e0fcd55383c3cd972677d2321b061c1d": {
      "content": "for ${1} in ${2} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "forin  {}",
      "matches": {
        "forin": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e1010ed600b36570fd9bd4b757036fd2": {
      "content": "t.time :${1:title}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create time column",
      "matches": {
        "tcti": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e104c40f25aabc54b787959dc8247348": {
      "content": "margin: ${1:0} ${2:0} ${3:0};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:3": true
      },
      "source": "vim-snippets/snippets"
    },
    "e109b2493c61ed47287288cbcb94a5b7": {
      "content": "place-self ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps": true
      },
      "source": "vim-snippets/snippets"
    },
    "e10ccaf945bd8b45d63eca1388f33f99": {
      "content": "<pre>\n${1:TARGET}\n</pre>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pre": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e110db8180cd026027b659ed9abc2f34": {
      "content": "<input type=\"button\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:button": true
      },
      "source": "vim-snippets/snippets"
    },
    "e12298f5be6ef4d7b5d6e8ae805703ac": {
      "content": "$.getScript('${1:mydomain.com/url}', function (script, textStatus, jqXHR) {\n\t${0:// callback}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "getscript": true
      },
      "source": "snippets/javascript"
    },
    "e123a8f341a357aeaaf497c8e3079809": {
      "content": "static getDerivedStateFromProps(props, state) {\n\t${1}\n}",
      "doc": "Invoked right before calling the render method, both on the initial mount and on subsequent updates.",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-getderivedstatefromprops",
      "matches": {
        "gdsfp": true,
        "react getderivedstatefromprops": true
      },
      "source": "javascript/react"
    },
    "e130462f60b1729f59a0278602cd01c8": {
      "content": "{{ ${1} }}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{": true
      },
      "source": "vim-snippets/snippets"
    },
    "e13340246d00748b2a8647e9817f15c7": {
      "content": "while ${1:conidition}\n\t${0}\nend",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "e13e1de8807c6ef0761921b0bba74651": {
      "content": "truncatewords_html:${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "truncatewordshtml": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1430d0bae52939e22b5dcf5d7534623": {
      "content": "delegate :${1:methods}, to: :${0:object}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "delegate .. to",
      "matches": {
        "dele": true
      },
      "source": "vim-snippets/snippets"
    },
    "e14ffaf6612d134228b11990385b9d13": {
      "content": "$.data('${1:selector expression}', '${2:key}'${3:, 'value'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dataa": true
      },
      "source": "snippets/javascript"
    },
    "e15573f61a2aca883f8e6d4ba7e25632": {
      "content": "debugger;",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "db": true,
        "debugger": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e15a143395ac2d104f200f66259f8a27": {
      "content": "import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\t\n})\n\nconst mapDispatchToProps = {\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})\n",
      "doc": "Creates a React component class with connected redux and ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassCompomentRedux",
      "matches": {
        "rcredux": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "e15bd7c152ba1e36eb65217abe3eb162": {
      "content": "grid-auto-flow: ${1:row} ${0:dense}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf+": true
      },
      "source": "vim-snippets/snippets"
    },
    "e15cba7b161ce3be64439ff8d643d181": {
      "content": "urlizetrunc:${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "urlizetrunc": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1633424b097ddc05b0065d731600742": {
      "content": "(${1:x}) => ${2:x}${0:;}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "l": true
      },
      "source": "vim-snippets/snippets"
    },
    "e16b555476ed5c67d6ec6cda6c3dfc88": {
      "content": "let s:hooks = neobundle#get_hooks('${1}')\nfunction! s:hooks.on_source(bundle) abort\n  ${0}\nendfunction\nunlet s:hooks",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "neobundle hooks",
      "matches": {
        "bundle_hooks": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e16e13d1ee131318fae788001be36901": {
      "content": "type ${1:name} struct {\n\t${2:attrName} ${3:attrType}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "composite literals",
      "matches": {
        "cl": true
      },
      "source": "vim-snippets/snippets"
    },
    "e17998d87c57cd4ce3abd369ddadd88c": {
      "content": "import 'react-native'\nimport React from 'react'\nimport renderer from 'react-test-renderer'\n\nimport ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "setupReactNativeTest",
      "matches": {
        "sntest": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "e18142238aa8f30540c148eb5c4600bb": {
      "content": ":nth-last-child(${0})",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":nlc": true
      },
      "source": "vim-snippets/snippets"
    },
    "e183cc43cb70dbdffc4deb23e719c4a9": {
      "content": "private",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "e18fb42f41d923694e6a6905f6530bf4": {
      "content": "#[bench]\nfn ${1:bench_function_name}(b: &mut test::Bencher) {\n\tb.iter(|| {\n\t\t${0}\n\t})\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Bench function",
      "matches": {
        "bench": true
      },
      "source": "vim-snippets/snippets"
    },
    "e19c13005d7477542296e33e80d9d1a4": {
      "content": "switch (${1:switch_on})\n{\n\t${0}\n\tdefault:\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switch": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1a3c8ad1c60a419ebb342213765568d": {
      "content": "border-bottom: ${1:1}px ${2:solid} #${3:999};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-bottom: size style color (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e1a4a00d53bf145bade53107be6ba413": {
      "content": "grid-auto-rows: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1a7ea2a399ae2429fff339e614bfd3c": {
      "content": "{% else %}\n  ${1:TARGET}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e1a811e56642cafe49a595bcf4a2c95c": {
      "content": "(cond\n\t[(${1}) ${0}])",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cond": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1ac06cb3f9ee890df5b639696180997": {
      "content": "dockerfile {\n\tfilename '${1:Dockerfile.build}'\n\tdir '${2:build}'\n\tlabel '${3:my-defined-label}'\n\tregistryUrl '${4:https://myregistry.com/}'\n\tregistryCredentialsId '${5:myPredefinedCredentialsInJenkins}'\n}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "df": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1b11026a75f0c0b63b5e3dbfe005d1e": {
      "content": "box-shadow: ${1:0} ${2:0} ${3:0} #${4:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh+": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1b383f2df114a55d2209297c1b70145": {
      "content": "if ARGV.${1}\n\tabort \"Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}\"${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "usai": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1b7658f8b52f14cf1ec75805a804b30": {
      "content": "${1:super_class}.instance_method(:${0:method}).bind(self).call",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "super_call": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1bb7cabef02210e1f176d90537eba4c": {
      "content": "overflow-x: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1bce365d3bde75bac0511b8267fbdac": {
      "content": "display: inline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1cc480657779bfb6a1d9a780609f32e": {
      "content": "border-style groove",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:g": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1d6e814e156a18789d5faf80629e795": {
      "content": "_.sortedUniq(${array})",
      "doc": "_.sortedUniq([1, 1, 2]);\n// => [1, 2]\n\nThis method is like `_.uniq` except that it's designed and optimized\nfor sorted arrays.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sorteduniq",
      "matches": {
        "lodash sorteduniq": true
      },
      "source": "javascript/lodash"
    },
    "e1d9c4d38c274ef98594bd537767c961": {
      "content": "import ${2:moduleName} from '${1:module}'$0",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import",
      "matches": {
        "imp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "e1db54b48d90e76a4fbacb9850e44d9f": {
      "content": "filter progid:DXImageTransform.Microsoft.Alpha(Opacity=${0:100})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "op:ie": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1e17ca6f2b2e815aea1a3c5cd6fa6f7": {
      "content": "($3 *)realloc(${1:OLD}, ${2:N_MEMBERS} * sizeof(${3:TYPE}));\n${0}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "realloc(old, size)",
      "matches": {
        "realloc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e1ecf5564cf13f79943751c2a5c3419e": {
      "content": "sub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {\n\tmy $self = shift;\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tsub": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1f41ec4fdb6ff1ce64b2145a879dcac": {
      "content": "auto ${1} = std::make_unique<${2:T}>(${3});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "amup": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1f55ec4b6bd87a90bbe1303ee095245": {
      "content": "type ${1:Type} struct {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "type T struct { ... }",
      "matches": {
        "st": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "e1f64fd5c3a19df75cab35b25b462255": {
      "content": "{#each ${1:items} as ${2:item}, i (${3:key})}\n\t${4: <!-- content here -->}\n{/each}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-each-index-key-block",
      "matches": {
        "sveach-i-k": true,
        "svelte each index key": true
      },
      "source": "javascript/svelte"
    },
    "e1f651606af6a2dcb7f89adc58a9be2e": {
      "content": "[org.clojars.hozumi/clj-glob \"0.1.2\"]\n(:require [org.satta.glob :as g])\n(g/glob \"${0:TARGET}\")",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dir-glob": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e1fa2ed941e6bb78a4dbf343df9940da": {
      "content": "clip: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cp:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "e1fc3d543bb5f56c6138cc1bd168a1b1": {
      "content": "[NSString stringWithFormat:@\"${1}\", ${2}]${0}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "format": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e215fc3ad4b7a882aaaaeaebf3beac73": {
      "content": "catch${1:#:pattern} {\n    ${0:TARGET}\n}${9}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "catch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e2191cc0ebe08ccc8e32dbad2ffd41d2": {
      "content": "box-sizing: border-box",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxz:bb": true
      },
      "source": "vim-snippets/snippets"
    },
    "e21e99e477ecb10dd09c0f1c66f67926": {
      "content": "grid-auto-columns: max-content;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac:mac": true
      },
      "source": "vim-snippets/snippets"
    },
    "e225e5ec750363daf5ecc792619d5f9b": {
      "content": "{{http://${1:image_url}}}${2}",
      "doc": "",
      "filetype": "vimwiki",
      "grammar": "snu",
      "label": "{{<image url>}}",
      "matches": {
        "image": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e226cda266227246bc82e460831b2bf8": {
      "content": "radians(${0:deg});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "radians": true
      },
      "source": "vim-snippets/snippets"
    },
    "e22927212ddcdfa5ebe50106e24f1e1a": {
      "content": "${1:obj}.prev('${2:selector expression}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prev": true
      },
      "source": "snippets/coffee"
    },
    "e22b4844d75d43228cdb0158caee505a": {
      "content": "${0:obj}.toArray()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "toarr": true
      },
      "source": "snippets/coffee"
    },
    "e2323517eea0ee09e123514e2c073c8c": {
      "content": "import React from 'react'\n\nconst ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}\n",
      "doc": "Creates a React Arrow Function Component with ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-arrow-function-export-component",
      "matches": {
        "rafce": true,
        "react component arrow function export": true
      },
      "source": "javascript/react"
    },
    "e23c5123e1c12178bf946e489745d76b": {
      "content": "_.max(${array})",
      "doc": "_.max([4, 2, 8, 6]);\n// => 8\n\n_.max([]);\n// => undefined\n\nComputes the maximum value of `array`. If `array` is empty or falsey,\n`undefined` is returned.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-max",
      "matches": {
        "lodash max": true
      },
      "source": "javascript/lodash"
    },
    "e23d1988f85e3c5c4764a9f0573c63d6": {
      "content": "{ path: '**', component: ${1:PathNotFoundComponent} },$0",
      "doc": "Angular 404 route path",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular 404 Route Path",
      "matches": {
        "a-route-path-404": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "e241ae1dc0cea66ba01fccccab4e8d68": {
      "content": "(:members (clojure.reflect/refrect ${1}))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "java-methods": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e246bc395c6412c30c0b6af1d02dd541": {
      "content": "margin: 0;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:0": true
      },
      "source": "vim-snippets/snippets"
    },
    "e2480eb519281887452345c292b564ca": {
      "content": "display: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d": true
      },
      "source": "vim-snippets/snippets"
    },
    "e2503d283a2c3204c1bbeb87c7ed2b77": {
      "content": "static ${1:#:NAME}(${2:#:ARGS}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "static": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e26354e5084c9e1774a33ccbc9e1e559": {
      "content": "enum ${1} {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enum": true
      },
      "source": "vim-snippets/snippets"
    },
    "e27822d3394a6794a79375ee40ca8ded": {
      "content": "clear: right",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "e2817a7d2303aec9bcf5b86d89a0cb2c": {
      "content": "import ${0:module}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "imp": true
      },
      "source": "vim-snippets/snippets"
    },
    "e28c750cae7cab0c5501e00b3e5ab09f": {
      "content": "sphere(${0:radius});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sphere": true
      },
      "source": "vim-snippets/snippets"
    },
    "e28da4b1812d059b7b89bb77c68b13d3": {
      "content": "white-space: normal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "e2b285f64d3d368d68fe1bf9fff25d97": {
      "content": "while (${1}) {\n    ${2:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e2b641405c33afc98e8599376e562d6c": {
      "content": "reverse_each { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reve": true
      },
      "source": "vim-snippets/snippets"
    },
    "e2b643ee7e25759224b92b4e93f67131": {
      "content": "${1}:\nloop\n\t${0}\nend loop $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "named loop",
      "matches": {
        "named_loop": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e2c09b37573d6a1aa653d44d98ee2699": {
      "content": "sap.ui.controller(\"$1\", {\n   onInit: function(){\n   },\n   onAfterRendering: function() {\n   },\n   onAfterRendering: function() {\n   },\n   onExit: function() {\n   },\n});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapcomponent": true
      },
      "source": "vim-snippets/snippets"
    },
    "e2c70cb180c4c6a2e01a1363b78bf60f": {
      "content": "<h3 id=\"${1}\">${0}</h3>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h3#": true
      },
      "source": "vim-snippets/snippets"
    },
    "e2ce7278aa88246646a157cf1d356c6f": {
      "content": "for (let ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "reversed for (...) {...}",
      "matches": {
        "forr": true
      },
      "source": "snippets/javascript"
    },
    "e2d12800479ea7d035fc01f9cdd76c99": {
      "content": "import { Injectable } from '@angular/core';\nimport { CanLoad, Route } from '@angular/router';\n\n@Injectable({providedIn: ${1:'root'}})\nexport class ${2:Name}Guard implements CanLoad {\n\tconstructor() { }\n\n\tcanLoad(route: Route) {\n\t\treturn true;$0\n\t}\n}",
      "doc": "Angular CanLoad guard",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-canload-guard",
      "matches": {
        "a-guard-can-load": true,
        "angular can load guard": true
      },
      "source": "javascript/angular"
    },
    "e2d5e5b46ca5fcf2cef87e1771eb8682": {
      "content": "\\\\begin{exampleblock}{${1:title}}\n\t${0:${VISUAL}}\n\\\\end{exampleblock}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "exampleblock environment",
      "matches": {
        "example": true
      },
      "source": "vim-snippets/snippets"
    },
    "e2d8c4e55151b2f526ae164dccb7b0d8": {
      "content": "${1:deferred}.reject(${2:args})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Drej": true
      },
      "source": "snippets/coffee"
    },
    "e2db8d1c9089234d505f45db4366a647": {
      "content": "select { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sel": true
      },
      "source": "vim-snippets/snippets"
    },
    "e2e217c9b36ca4f895083d6b01168d1b": {
      "content": "inout",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ino": true
      },
      "source": "vim-snippets/snippets"
    },
    "e2e39fe22968fc64b1912629ba42456a": {
      "content": "${1:FIELDNAME} = forms.RegexField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "RegexField",
      "matches": {
        "freg": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e2ebebe9d3ef39e8cbfd8a2bf2021b4c": {
      "content": "class ${1:#:name} {\n    ${2}\n};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "class {}",
      "matches": {
        "class-without-constructor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e2ec0ea6406082b78e56c0baa2c463b5": {
      "content": "acos(${0:rad});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "acos": true
      },
      "source": "vim-snippets/snippets"
    },
    "e300e1a441d511cc475a05bdda8ae3cf": {
      "content": "protected string ${1:}(${2:})\n{\n\t${0:return \"\";}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ms|": true
      },
      "source": "vim-snippets/snippets"
    },
    "e30a02dfffcb81ee5c902072a9df842e": {
      "content": "<${1:div} :class=\"[${2:classNameA}, ${3:classNameB}]\"></${1:div}>",
      "doc": "vue class binding",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue Class Binding Object",
      "matches": {
        "vclass-obj": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "e30b6f829c4beeb90a558e68a32f7ad9": {
      "content": "place-items: start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "e311b5d4f946f2232e83c0d8bd0e9886": {
      "content": "sprintf('${1:#:format}', ${2:#:vars})",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "sprintf",
      "matches": {
        "sprintf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e3136215c3ea516f8e06586a7513c71e": {
      "content": "$this->db->select(\"${1:id, ...}\");${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_db-select": true
      },
      "source": "vim-snippets/snippets"
    },
    "e31fa16974fb10b0a7feb5cfd87a5ad2": {
      "content": "(ns ${0:name})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ns": true
      },
      "source": "vim-snippets/snippets"
    },
    "e323e49b68c36f6e83a9c82b5b52d42b": {
      "content": "flex-wrap: wrap-reverse;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxw:wr": true
      },
      "source": "vim-snippets/snippets"
    },
    "e33060756830562703cc93402048618c": {
      "content": "func ${1:handler}(w http.ResponseWriter, r *http.Request) {\n\t${0:fmt.Fprintf(w, \"hello world\")}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "http.HandlerFunc",
      "matches": {
        "hf": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "e3322b354d183d87610e55535bcfb169": {
      "content": "_.initial(${array})",
      "doc": "_.initial([1, 2, 3]);\n// => [1, 2]\n\nGets all but the last element of `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-initial",
      "matches": {
        "lodash initial": true
      },
      "source": "javascript/lodash"
    },
    "e342469bc947dcafd1dfe2f32f9c079a": {
      "content": "grid-row: ${1} / ${2};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gr": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3529f2926a42f243ef93d0910793498": {
      "content": "debug(\"${1:message}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "debug": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3590ff92af91892925308222292ca40": {
      "content": "each_cons(${1:2}) { |${2:group}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "each_cons(..) { |group| .. }",
      "matches": {
        "eac-": true
      },
      "source": "vim-snippets/snippets"
    },
    "e35a68b3cc24d47edc13da83abcc1298": {
      "content": "-\n-\n-\n-",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e35cbb626408bcf472d793bc6f6909a1": {
      "content": "std::forward_list<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "flist": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3643bf0fc7e15d92ade0240286bcec4": {
      "content": "proc ${1:#:name}(${2}):${3:#:type} =\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "procgt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e36e7906a0ceb64ebc0ec6e875cc1bde": {
      "content": "${1:Rails.}logger.debug { \"${1:message}\" }$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "logger.debug",
      "matches": {
        "logd": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e370e1a31e605f1c80f9e163581b08d9": {
      "content": "PropTypes.array,",
      "doc": "Array prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeArray",
      "matches": {
        "pta": true
      },
      "source": "vscode-react/snippets"
    },
    "e372a43d5fd65fc3a5bb3ef950c794a5": {
      "content": "<bdo dir=\"ltr\">${0}</bdo>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdo:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "e379240908022204f3e358c3d8e570db": {
      "content": "<meta name=\"description\" content=\"${1}\">${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "metadescription": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e37b325653af2edf458f930a3368b5a7": {
      "content": "font-smooth ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm": true
      },
      "source": "vim-snippets/snippets"
    },
    "e37d494b7d5baf3127e01f6df7442cf4": {
      "content": "case ${1} is\n\twhen ${2} => ${3},${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "case expression",
      "matches": {
        "casex": true
      },
      "source": "vim-snippets/snippets"
    },
    "e385926f18a4d96dfd1349e893e10356": {
      "content": "{@html ${1:expression}}",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-expression-html",
      "matches": {
        "svelte expression html": true,
        "svexphtml": true
      },
      "source": "javascript/svelte"
    },
    "e386097ccc3f4340823b36ee4d45a9cd": {
      "content": "${1:FIELDNAME} = forms.ChoiceField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "ChoiceField",
      "matches": {
        "fchoice": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e38836140b954ef94301c59d30a503d9": {
      "content": "instance ${1:Class} ${2:Type} where\n  ${3:function} ${4:self} = ${0:TARGET}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "instance": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e38c7d239629581e4cf3507a9268e5ce": {
      "content": "if ${1:#:condition}\n  ${2:TARGET}\nelse\n  ${3}\nendif",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "if else endif",
      "matches": {
        "ifelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e38ce32c2534d0ecb4d88aaab162ad8a": {
      "content": "// replaces the top of the active matrix stack with the identity matrix\ngl.glLoadIdentity();",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl load identity",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "e39af7a246642d9973bff44579e89fe9": {
      "content": "background-attachment ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bga": true
      },
      "source": "vim-snippets/snippets"
    },
    "e39dff58f918a862f1e8e11a7fbf1f49": {
      "content": "catch {${1}} ${2:err} ${0:options}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "catch": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3a4ae73f40f74a1f815af04d270fdeb": {
      "content": "text-justify: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3a59f7b7a6ac76867c6e736610a8416": {
      "content": "auto ${1} = std::make_shared<${2:T}>(${3});",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "amsp": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3b8f7f843fa963891404618800451ce": {
      "content": "<dl id=\"${1}\">\n\t${0}\n</dl>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dl#": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3bd6a56135d6634a54233fdf6ad9d4a": {
      "content": "resources:\n{{ toYaml .Values.${1:value_key}.resources | indent 12 }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "resources_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3c65984a02c1b5b95001ef27dead059": {
      "content": "${1:obj}.queue(${2:name}${3:, newQueue})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "queue": true
      },
      "source": "snippets/coffee"
    },
    "e3c716384d39daf47460a8d0c1e9d1d1": {
      "content": "text-justify: distribute",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3cae9616d742f7c5bb0ede40516d1bc": {
      "content": "${1:expression} if ${2:condition};",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xif": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3d466940b661a3a5abed96bb61051ad": {
      "content": "post {\n\tcleanup {\n\t\t${1}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3deae98e1de34d3ff6c5ddf9de4dc1a": {
      "content": "${1:map}.resources :${2:resource}${10: do |${11:$2}|\n\t$0\nend}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "map.resources",
      "matches": {
        "maprs": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e3e734c48b9f0eb7229b1b5bedd10fad": {
      "content": "Co-authored-by: ${1} <${2}>",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "co": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3e7cbf4dba3c9ece7c19208015d40f7": {
      "content": "$_SESSION['${1}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "session",
      "matches": {
        "session": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3eb6aa6d44f01eaa21f9f8358d1d49f": {
      "content": "place-items: end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3ed6b3d9fba7fb3b45ae06ba815f642": {
      "content": "let ${1}: ${2:any} = ${3};\n${0}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "ts let",
      "matches": {
        "tlet": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3f08cccfee2d3bcee9f5aa3022349c7": {
      "content": "def __repr__(self):\n\t${1:pass}\ndef __str__(self):\n\t${2:pass}\ndef __unicode__(self):\n\t${3:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "methods implementing string representation",
      "matches": {
        "repr": true
      },
      "source": "vim-snippets/snippets"
    },
    "e3ff2e7f49cb0229e3728ae7c028d4d1": {
      "content": "echomsg string(${1:TARGET})",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "echomsg": true,
        "log": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e4007c22755bbe1f94ea0f502b3dda7b": {
      "content": "grid-column-gap: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gcg": true
      },
      "source": "vim-snippets/snippets"
    },
    "e411eecb4e572eee7764106ca018da3c": {
      "content": "clear right",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "e41449a89e5aad16aabb2288c2c827de": {
      "content": "table-layout: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbl": true
      },
      "source": "vim-snippets/snippets"
    },
    "e41d0b31413d55575cce6dcfb956b47f": {
      "content": "${1:value_key}:\n  livenessProbe:\n\tfailureThreshold: 3\n\tinitialDelaySeconds: 10\n\tperiodSeconds: 10\n\tsuccessThreshold: 1\n\ttimeoutSeconds: 1\n\tport: 10254\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "livenessProbe_values": true
      },
      "source": "vim-snippets/snippets"
    },
    "e4247939ff9aeac9ecfe8e808a0c4357": {
      "content": "elif [ ${1:#:condition} ]; then\n\t${0:TARGET}",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e42bd660d6502387d997110bf2f180a9": {
      "content": "@impl true\ndef ${1:name} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "impl": true
      },
      "source": "vim-snippets/snippets"
    },
    "e42ed4ef1228c77eb4f49b98280f93d4": {
      "content": "\\\\begin{itemize}\n\t\\\\item ${0}\n\\\\end{itemize}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "itemize environment",
      "matches": {
        "item": true
      },
      "source": "vim-snippets/snippets"
    },
    "e43fb2ee4f899b9058e56bece12a77c3": {
      "content": "angular.forEach ${1:iterateOver}, (value, key) ->\n\t${2}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngfor": true
      },
      "source": "snippets/coffee"
    },
    "e4455c04d7efbd46cfd7f3224f4051bc": {
      "content": "data.frame(${1:...}, ${2:row.names = ${3:NULL}}, ${4:check.rows = ${5:FALSE}}, ${6:check.names = ${7:TRUE}}, ${8:stringsAsFactors = ${9:default.stringsAsFactors()}})",
      "doc": "Data Frame",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "daf",
      "matches": {
        "data.frame": true
      },
      "source": "vscode-R/snippets"
    },
    "e44e02de98a92b6a4f44668ec051df10": {
      "content": "<button type=\"submit\" [disabled]=\"!${1:form}.form.valid\">\n\tSave\n</button>",
      "doc": "Angular form submit",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngformsubmit",
      "matches": {
        "a-form-submit": true,
        "angular ng form submit": true
      },
      "source": "javascript/angular"
    },
    "e451c489d006856544938869d697cc90": {
      "content": "align-content: space-around",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:sa": true
      },
      "source": "vim-snippets/snippets"
    },
    "e45a4379a5c24f4a8c00fcdf1e35bec5": {
      "content": "margin-top: ${1:20px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "margin-top: length (margin)",
      "matches": {
        "margin": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e45af60f5d6fb0c4f43b14877167a918": {
      "content": "expect { ${1:object} }.to raise_error ${2:StandardError}, /${0:message_regex}/",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "experr": true
      },
      "source": "vim-snippets/snippets"
    },
    "e45daa4ac164ecb2539a67bb7be68c39": {
      "content": "fun ${1:name}(${2}): ${3:String} {\n\t${4}\n}",
      "doc": "",
      "filetype": "kotlin",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "e460fcf6b3c47ddf3999957c5ea08680": {
      "content": "font-smooth: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fsm:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "e4666879a8df9dfcd9ae201ea554f0b0": {
      "content": "${1:fn} :: ${2:a}\n$1 = ${0:undefined}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn0": true
      },
      "source": "vim-snippets/snippets"
    },
    "e46e26afc4d4242b2c43d5810d13084f": {
      "content": "before_update $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "before_update",
      "matches": {
        "befu": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e47adcd83a83067e3f25c267cbd7fd05": {
      "content": "verify only: [:$1], session: :user, params: :id, redirect_to {:action: '${2:index}'}\n",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "verify -- redirect",
      "matches": {
        "verify": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e47fb4536a896f81b6e8b2c75f36a0a0": {
      "content": "console.trace();",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "console-trace": true,
        "ct": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e482b297889d2c95d1bb20357d30db84": {
      "content": "if ${1}\n\t${2:${VISUAL}}\nelse\n\t${0}\nendif",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "if ... else statement",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "e496496cfc58ab118a97c294b7d5f334": {
      "content": "float: left;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "e4acedd4c80216c79dff8453669f160f": {
      "content": "namespace ${1:Foo\\Bar\\Baz};\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ns": true
      },
      "source": "vim-snippets/snippets"
    },
    "e4b0b48a26d1d0bc95dfcb523c0cb1d8": {
      "content": "ifeq (${1:cond0}, ${2:cond1})\n\t${0:${VISUAL}}\nendif",
      "doc": "",
      "filetype": "make",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "e4b15e28fec56afde228a91bad0ad50a": {
      "content": "$.isPlainObject(${1:obj})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isobj": true
      },
      "source": "snippets/javascript"
    },
    "e4b8619952da8f3f3e06304a17323210": {
      "content": "{% ${1:tag_name} %}\n${0}\n{% end$1 %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "%%": true
      },
      "source": "vim-snippets/snippets"
    },
    "e4beff618e7fdb3a0882e660a4b4ecea": {
      "content": "# -*- coding: ascii -*-",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cascii": true
      },
      "source": "vim-snippets/snippets"
    },
    "e4d0097b6ca482eb9857febc6f57c3ec": {
      "content": "echo CHtml::cdata(${0:text});",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhc": true
      },
      "source": "vim-snippets/snippets"
    },
    "e4d90f9f9ca9556476415737b7562fb4": {
      "content": "{% regroup $1 by $2 as $3 %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "regroup": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e4e8c25f4d1ff97ea880349608e548c5": {
      "content": "<returns>$0</returns>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "XML returns comment",
      "matches": {
        "<r": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e4fcf8a9cb01204a1f0c324eaecb0c7d": {
      "content": "[${1}](${2}){${3}};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ld": true
      },
      "source": "vim-snippets/snippets"
    },
    "e4ff0f26f39ae19c9c75d4d91e452d34": {
      "content": "border-style wave",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "e4ff41fc36a62ec7749d6311be64f20c": {
      "content": "class ${0:name} extends Suite {\n\tdef test() {\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "suite": true
      },
      "source": "vim-snippets/snippets"
    },
    "e509f99e67cb177787f70f5b66cf7b7a": {
      "content": "${1:obj}.prevUntil('${2:selector expression}'${3:, 'filter expression'})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prevu": true
      },
      "source": "snippets/javascript"
    },
    "e50b4103fef4c62a9c2bd2bb7e937228": {
      "content": "case ${1:word} in\n\t${2:pattern})\n\t\t${0};;\nesac",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "e5116c0ec42546875266d5b1af4f5633": {
      "content": "assert_operator ${1:left}, :${2:operator}, ${3:right}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aso": true
      },
      "source": "vim-snippets/snippets"
    },
    "e518b74cd748d82a41095bc42e8be733": {
      "content": "padding-right ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "e522e0d1ca3c99f673f9c645deddc7cc": {
      "content": "clear: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "e526dc0c73e97e654f9d183937bb3f1c": {
      "content": "${1:public} int ${2}(${3})\n{\n\t${0:return 0;}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mi": true
      },
      "source": "vim-snippets/snippets"
    },
    "e5304ef0ac31068ebaf9675a7c4e82ad": {
      "content": "typedef ${1:int} ${2:MyCustomType};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "td": true
      },
      "source": "vim-snippets/snippets"
    },
    "e53acc9c5027a33ff4b502a0ab5dc814": {
      "content": "border-bottom: ${1:1px} ${2:solid} #${3:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdb+": true
      },
      "source": "vim-snippets/snippets"
    },
    "e544ac47208dc3392a79b84d31c80674": {
      "content": "import React from 'react';",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "import React",
      "matches": {
        "ir": true
      },
      "source": "snippets/javascript"
    },
    "e549d1d4db52302e4b5f55de8b231cb9": {
      "content": "${1:obj}.append('${2:Some text <b>and bold!</b>}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "append": true
      },
      "source": "snippets/javascript"
    },
    "e54cc18a2f1178703c353bec64d46408": {
      "content": "DO${1: Clauses}:\n\t${0}\nEND.",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "e553b4a821adeecaaa335e95b87972bb": {
      "content": "@doc ~S\"\"\"\n${0}\n\"\"\"",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "docs": true
      },
      "source": "vim-snippets/snippets"
    },
    "e554847f34dd0095624141a6f38797c0": {
      "content": "<VirtualHost ${1:*}:${2:80}>\n\tServerAdmin ${3:webmaster@example.com}\n\tDocumentRoot ${4:/www/example.com}\n\tServerName ${0:www.example.com}\n</VirtualHost>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "virtualhost": true
      },
      "source": "vim-snippets/snippets"
    },
    "e5600595dcf28a12cb89d7862e75766b": {
      "content": "${1:component}.$on(${2:eventname}, ${3:handler});",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-component-on",
      "matches": {
        "svcomon": true,
        "svelte component on": true
      },
      "source": "javascript/svelte"
    },
    "e561bdfd1c2586780e37e9d09e8c6eca": {
      "content": "console.log('${1:object} :>> ', ${1:object});",
      "doc": "Displays an object in the console with its name",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleLogObject",
      "matches": {
        "clo": true
      },
      "source": "vscode-javascript/snippets"
    },
    "e563876303b180840ae96665d411e5f1": {
      "content": "text-align right",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ta:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "e56ce637c9e343a1d233d1f1666a66d2": {
      "content": "max-width: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maw": true
      },
      "source": "vim-snippets/snippets"
    },
    "e574f3367350fa9096c34f796fd8fbd5": {
      "content": "font-style: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "e586956dbaab674c6a0df3f5f4b28f93": {
      "content": "time:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "time": true
      },
      "source": "vim-snippets/snippets"
    },
    "e5876f091528355bae37c8a9ae889c91": {
      "content": "border-top-right-image url(${0})",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtri": true
      },
      "source": "vim-snippets/snippets"
    },
    "e58818508bd11fc89de585b60d2f2ed8": {
      "content": "border-fit overwrite",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:of": true
      },
      "source": "vim-snippets/snippets"
    },
    "e58a6cf300d5dcfd1dd2ef16c228262e": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script lang=\"ts\">\n\timport Vue from 'vue'\n\n\texport default Vue.extend({\n\t\t${0}\n\t})\n</script>\n\n<style scoped>\n\n</style>",
      "doc": "Base for Vue File with Typescript",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component with Typescript",
      "matches": {
        "vbase-ts": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "e59acda20582d9e6607cedbf4934bc5f": {
      "content": "${1:public} ${2:int} ${3} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prop": true
      },
      "source": "vim-snippets/snippets"
    },
    "e59d4522634ebf5ea6ac3eeb8c4e9a77": {
      "content": "{% with $1 as $2 %}\n\t${VISUAL}\n{% endwith %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "with": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e59de817087726fc821e6ea911f2a27c": {
      "content": "Mouse Out    ${1:${locator}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Mouse Out",
      "matches": {
        "mout": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e59f033a34c9c0c30978545688ac21eb": {
      "content": "module Main exposing (Model, Msg(..), init, main, subscriptions, update, view)\nimport Browser\nimport Html exposing (..)\nimport Json.Encode\nmain : Program Flags Model Msg\nmain =\n\tBrowser.element\n\t\t{ init = init\n\t\t, update = update\n\t\t, subscriptions = subscriptions\n\t\t, view = view\n\t\t}\ntype alias Model =\n\t{}\ntype alias Flags =\n\tJson.Encode.Value\ninit : Flags -> ( Model, Cmd Msg )\ninit flags_ =\n\t( {}\n\t, Cmd.none\n\t)\ntype Msg\n\t= Noop\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n\tcase msg of\n\t\tNoop ->\n\t\t\t( model\n\t\t\t, Cmd.none\n\t\t\t)\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n\tSub.none\nview : Model -> Html Msg\nview model =\n\th1 [] [ text \"Hello, world!\" ]",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "element": true
      },
      "source": "vim-snippets/snippets"
    },
    "e5a1a44699b4d9e0023068538be5437e": {
      "content": "validates_uniqueness_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:must be unique}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_uniqueness_of (vu)",
      "matches": {
        "vu": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e5a3b1c7a4a8d90f32f71097ff71b437": {
      "content": "? {\n\t\"${1}\"\t=> ${0}\n  }",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "?": true
      },
      "source": "vim-snippets/snippets"
    },
    "e5a43a21f889f0aa8bdc5381056e134c": {
      "content": "<object width=\"$2\" height=\"$3\" classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\"\ncodebase=\"http://www.apple.com/qtactivex/qtplugin.cab\">\n\t<param name=\"src\" value=\"$1\">\n\t<param name=\"controller\" value=\"$4\">\n\t<param name=\"autoplay\" value=\"$5\">\n\t<embed src=\"${1:movie.mov}\"\n\t\twidth=\"${2:320}\" height=\"${3:240}\"\n\t\tcontroller=\"${4:true}\" autoplay=\"${5:true}\"\n\t\tscale=\"tofit\" cache=\"true\"\n\t\tpluginspage=\"http://www.apple.com/quicktime/download/\">\n</object>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "movie": true
      },
      "source": "vim-snippets/snippets"
    },
    "e5b2725a39a699222557222823be1558": {
      "content": "while (${1}) begin\n\t${0}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/snippets"
    },
    "e5b4d753a01afe153654fe18ad0650c4": {
      "content": "bind:@\"${1:binding}\" toObject:${2:observableController} withKeyPath:@\"${3:keyPath}\" options:${4:nil}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Key:value binding (bind)",
      "matches": {
        "bind": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e5b4fd1f2dc6bc583620fb81a9680107": {
      "content": "subtype ${1} is ${2};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "subtype",
      "matches": {
        "subty": true
      },
      "source": "vim-snippets/snippets"
    },
    "e5bea8bdf5386e0ec17b820015a7ec5b": {
      "content": "volume = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "volume": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e5e291500e9395eb2ecc6ba5d8205302": {
      "content": "lapply(${1:list}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapply": true
      },
      "source": "vim-snippets/snippets"
    },
    "e5ee8fe45b871fa07925141fb06fd775": {
      "content": "$.ajaxPrefilter(function (${1:options}, ${2:originalOptions}, jqXHR) {\n\t${0: // Modify options, control originalOptions, store jqXHR, etc}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxprefilter": true
      },
      "source": "snippets/javascript"
    },
    "e5f3a0d15c6bb6e789d79c610269e822": {
      "content": "try {\n\t${1:TARGET}\n} catch {\n\tcase e${2:: Exception} => ${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "try {} catch { case ... }",
      "matches": {
        "try": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e6146c2018c2f961c176fc2eb853caea": {
      "content": "- (${1:#:id})${2:#:thing}\n{\n\treturn ${2};\n}\n- (void)set${2}:(${1})aValue\n{\n\t${0}${1}old${2} = ${2};\n\t${2} = [aValue retain];\n\t[old${2} release];\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "obj": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e616813586b95eb8bf5c558690048b5a": {
      "content": "text-height: max-size;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6194a8598211b143da50fcc28db29fe": {
      "content": "grid-template: ${1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gt": true
      },
      "source": "vim-snippets/snippets"
    },
    "e61fa26c8f7794c2d5b2a3324481e9e1": {
      "content": "delete_if { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deli": true
      },
      "source": "vim-snippets/snippets"
    },
    "e62103c6ee997e7a06649755f87311d3": {
      "content": "[ngClass]=\"{${1:cssClass}: ${2:expression}}\"",
      "doc": "Angular ngClass",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngClass",
      "matches": {
        "a-ngClass": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "e624afb50cdf6c922183fb2d9755eb8b": {
      "content": "echo CHtml::activeLabelEx(${1:model}, '${2:attribute}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhale": true
      },
      "source": "vim-snippets/snippets"
    },
    "e62661f4ee584614367dd45294a27143": {
      "content": "PropTypes.array.isRequired,",
      "doc": "Array prop type required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-array-required",
      "matches": {
        "prop-types array required": true,
        "ptar": true
      },
      "source": "javascript/prop-types"
    },
    "e632e0c7b4047bfcf6436b6fd221820b": {
      "content": "if (${1}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "e633a43921f43b23c23fedda5d443d6f": {
      "content": "font-emphasize-style: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "e642eb4d84a57c7c2b1002a1fca56d38": {
      "content": "validates_format_of :${1:attribute}, with: /${2:^[${3:\\w\\d}]+\\$}/${4:, on: :${5:create}, message: \"${6:is invalid}\"}, if: proc { |obj| ${7:obj.condition?} }}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_format_of if",
      "matches": {
        "vfif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e64f1fe41256c561051b41149b1a70ea": {
      "content": "Plug '${1}', { 'tag': '${0}' }",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "vim-plug Plugin definition with { 'tag': '' }",
      "matches": {
        "plugtag": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6508a63774aae489fa4fb48e98b32c2": {
      "content": "use v6;\nuse Test;\n${1:use lib 'lib';}\nplan ${2:$num-tests};",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "e65556cc8bdf3180fc89c1f05c906805": {
      "content": "${1:obj}.unload(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unload": true
      },
      "source": "snippets/javascript"
    },
    "e656ff047cae6bb7f467d688ebc23096": {
      "content": "_.zipWith(${arrays}, ${iteratee})",
      "doc": "_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n  return a + b + c;\n});\n// => [1, 222]\n\nThis method is like `_.zip` except that it accepts `iteratee` to specify\nhow grouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-zipwith",
      "matches": {
        "lodash zipwith": true
      },
      "source": "javascript/lodash"
    },
    "e6696702bdfc5ea1a093e6bee9ddf595": {
      "content": "expect(${1:target}).not.toBeGreaterThan(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to not be greater than (js)",
      "matches": {
        "notg": true
      },
      "source": "vim-snippets/snippets"
    },
    "e66a2d35287af854f737d451f6dce7a7": {
      "content": "props: {\n\t${1:propName}: {\n\t\ttype: ${2:Number},\n\t\tdefault: ${0}\n\t},\n},",
      "doc": "Vue Props with Default",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-props-with-default",
      "matches": {
        "vprops": true,
        "vue props with default": true
      },
      "source": "javascript/vue"
    },
    "e6736865416a0f72bb119febb4412631": {
      "content": "_.uniqWith(${array}, ${comparator})",
      "doc": "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.uniqWith(objects, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n\nThis method is like `_.uniq` except that it accepts `comparator` which\nis invoked to compare elements of `array`. The order of result values is\ndetermined by the order they occur in the array.The comparator is invoked\nwith two arguments: (arrVal, othVal).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-uniqwith",
      "matches": {
        "lodash uniqwith": true
      },
      "source": "javascript/lodash"
    },
    "e67ffb567bb8ca89ea3d2ec34c2cc782": {
      "content": "state = {\n\t$1\n}\n",
      "doc": "Creates empty state object. To be used in a constructor.",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-empty-state",
      "matches": {
        "est": true,
        "react empty state": true
      },
      "source": "javascript/react"
    },
    "e6a3f36a45f50479c7b1b19ee058f4a5": {
      "content": "t.decimal :${1:title}${2:${3:, precision: ${4:10}}${5:, scale: ${6:2}}}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create decimal column",
      "matches": {
        "tcd": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e6a9a0580862806f8e5f47062a09ecec": {
      "content": "border-collapse ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdcl": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6ac14174a79e2fb5e05716fe2f6c378": {
      "content": "console.info(${1:object});",
      "doc": "Displays a message in the console but also displays a blue information icon along with the logged message",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consoleinfo",
      "matches": {
        "base console info": true
      },
      "source": "javascript/base"
    },
    "e6be9dde6db273125c197f4b3f4b2b5f": {
      "content": "apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: {{ template \"$2.fullname\" . }}-data-pv\n  labels:\n\tapp: {{ template \"$2.name\" . }}\n\tchart: {{ .Chart.Name }}-{{ .Chart.Version }}\n\theritage: {{ .Release.Service }}\n\trelease: {{ .Release.Name }}\n\tid: {{ template \"${2:chartName}.name\" . }}-data-pv\n\ttype: nfs-volume\nspec:\n  capacity:\n\tstorage: {{ .Values.$1.persistence.nfs.capacity }}\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  nfs:\n\tserver: {{ .Values.$1.persistence.nfs.ip }}\n\tpath: \"{{ .Values.${1:value_key}.persistence.nfs.haDataMount }}\"\n\treadOnly: false\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pv_nfs_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6bfaff274a0d87a6508638a72753b29": {
      "content": "$(function () {\n\t${0}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ready": true
      },
      "source": "snippets/javascript"
    },
    "e6c386681e45bddc2e8b5aff91420f13": {
      "content": "public void set${1:Name}(${2:String} ${3:name}) {\nthis.$3 = $3;\n}\npublic $2 get$1() {\nreturn $1;\n}${0:TARGET}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "setget": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e6c57c11623f60d7e60fce65d547fc32": {
      "content": "{% load ${0} %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "load": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6c5d3bc0afc31527dac1c4e73e9c433": {
      "content": "def destroy\n\t@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])\n\t@$1.destroy\n\trespond_to do |format|\n\t\tformat.html { redirect_to($1s_url) }\n\t\tformat.json  { head :ok }\n\tend\nend",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defdestroy": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6c93897d4f6a8e13277b159f8c11d2e": {
      "content": "EntityDataModule.forRoot(${1:entityConfig}),",
      "doc": "Import NgRx Entity Data Module",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "NgRx Data Import Entity Data Module",
      "matches": {
        "a-ngrx-data-entity-data-module-import": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "e6d13d8e39a13ecc8c91ccc664de0219": {
      "content": "| img_url: '${1:medium}'",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img_url": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6d5713df0e75503d18136c6463cea0d": {
      "content": "overflow-y auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6d5fa8c7c91f08186e523c62a4d6c2a": {
      "content": "text-justify: distribute;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:d": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6ecef2b9dfbce998eab99a24a2f54a1": {
      "content": "validates :${1:attribute}, inclusion: { in: %w(${0: mov avi }) }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vi": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6f1c2cfc558dbb7c4af57a8adfb11d1": {
      "content": "resize: horizontal;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6f364ce1c4b1d47571d516fab566853": {
      "content": "throw new (\"${1:Exception()}\");",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "throw": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6f3daab62bdbc9c9b6fb6763b6159e0": {
      "content": "for ${1} in ${2} do\n\t${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6f59b116fcbaa0434a6b44c247e667b": {
      "content": "content: attr(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "e6ff5e63893b71c5bcd33b982c30d218": {
      "content": "class $1 extends StatelessWidget {\n\t@override\n\tWidget build(BuildContext context) {\n\t\treturn Container(\n\t\t\t$2\n\t\t);\n\t}\n}",
      "doc": "",
      "filetype": "dart-flutter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stless": true
      },
      "source": "vim-snippets/snippets"
    },
    "e705cfe3240c09d1834865cbeac7ffb4": {
      "content": "println!(\"${1}{${2}}\", ${3});",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "println! with format param",
      "matches": {
        "pln,": true
      },
      "source": "vim-snippets/snippets"
    },
    "e70a2c1b38c48e779dd4511a9e24b198": {
      "content": "each_with_index { |${1:e}, ${2:i}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eawi": true
      },
      "source": "vim-snippets/snippets"
    },
    "e70f31a92f18eed142ea6c239e62aa16": {
      "content": "<style>\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with CSS",
      "matches": {
        "style_with_CSS": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e71be9b77c1bc12618470e1f234b7fa3": {
      "content": "millis();",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ml": true
      },
      "source": "vim-snippets/snippets"
    },
    "e723a174117041352e27e7a5a7609e90": {
      "content": "yup.addMethod()",
      "doc": "yup.addMethod(schemaType: Schema, name: string, method: ()=> Schema): void\n\nAdds a new method to the core schema types. A friendlier convenience method for schemaType.prototype[name] = method.yup.addMethod(yup.date, \"format\", function(formats, parseStrict) {\n  return this.transform(function(value, originalValue) {\n    if (this.isType(value)) return value;\n\n    value = Moment(originalValue, formats, parseStrict);\n\n    return value.isValid() ? value.toDate() : new Date(\"\");\n  });\n});\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "yup-add-method",
      "matches": {
        "yup addmethod": true
      },
      "source": "javascript/yup"
    },
    "e75250804ac1eccf95aea6f1dbb860a4": {
      "content": "grid-template-areas: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gta": true
      },
      "source": "vim-snippets/snippets"
    },
    "e752b631dad2aa8772e08d46f1cf3c8e": {
      "content": "for {set ${2:var} 0} {$$2 < ${1:count}} {${3:incr} $2} {\n\t${0}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "vim-snippets/snippets"
    },
    "e753ef9f20fc3f2b2a42d14ba1af2865": {
      "content": "",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "e75c15581c5f9f8d52463d2744deaa59": {
      "content": "${1:obj}.css({${2:attribute1}: '${3:value1}', ${4:attribute2}: '${5:value2}'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cssm": true
      },
      "source": "snippets/coffee"
    },
    "e75fbe68f154bfdc04804fd6452c50f6": {
      "content": "border-style: dotted;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "e7658b561f07372904e72a0f50a52480": {
      "content": "{% youtube ${0:video_id} %}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "youtube": true
      },
      "source": "vim-snippets/snippets"
    },
    "e766eaeb23a27580ecf64d5a4b629658": {
      "content": "{{ ${1:#:TARGET} }}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "{{ }}",
      "matches": {
        "output": true,
        "{{": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e76958d6281202fe1ace7fa420607d82": {
      "content": "digitalWrite(${1}, LOW);",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dwLow": true
      },
      "source": "vim-snippets/snippets"
    },
    "e76b526f41477bd9020224eb54dbc69b": {
      "content": "names(${1:x})",
      "doc": "Names",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "nam",
      "matches": {
        "names": true
      },
      "source": "vscode-R/snippets"
    },
    "e781a44f583f4a79ea7811818f82fb74": {
      "content": "float ${1:f}${2: = }${0:0.0f};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "float": true
      },
      "source": "vim-snippets/snippets"
    },
    "e78708ae7dfe1c516f3ada28915d76de": {
      "content": "${1:fn} :: ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}\n$1 ${6} = ${0:undefined}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn3": true
      },
      "source": "vim-snippets/snippets"
    },
    "e78b2f3bcc192d9418abf779bd6fc7c5": {
      "content": "(sizeof(${1:#:array}) / sizeof(*($1)))",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "array_size": true,
        "sizeof_array": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e78cafd78b5441927bd08dc861e935ee": {
      "content": "- ${1:#:text}\n-\n-\n-",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nested_list": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e78f04ad88763595d2e0c5d032dbd181": {
      "content": "${1:value_key}:\n  readinessProbe:\n\tfailureThreshold: 3\n\tinitialDelaySeconds: 10\n\tperiodSeconds: 10\n\tsuccessThreshold: 1\n\ttimeoutSeconds: 1\n\tport: 10254\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "readinessProbe_values": true
      },
      "source": "vim-snippets/snippets"
    },
    "e7932b0f9f02c9616fc1518032b5cf44": {
      "content": "Box::new(${0:${VISUAL}})",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Box::new()",
      "matches": {
        "boxp": true
      },
      "source": "vim-snippets/snippets"
    },
    "e794c10dedc74efb31e2bb400b68055f": {
      "content": "align-items: first baseline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:fb": true
      },
      "source": "vim-snippets/snippets"
    },
    "e7a225fe650ba795ad93e066e471893e": {
      "content": "import DS from 'ember-data';\n\nexport default DS.Model.extend({\n\t${0://Properties here...}\n});",
      "doc": "",
      "filetype": "javascript-ember",
      "grammar": "snu",
      "label": "import DS from 'ember-data';",
      "matches": {
        "emod": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e7a68777e7df3a9f045d30f2aa77fda0": {
      "content": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n\"http://www.w3.org/TR/html4/loose.dtd\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doct": true
      },
      "source": "vim-snippets/snippets"
    },
    "e7aa74c9cb41ec7b48a9009ad7dba4e7": {
      "content": "border-width: ${1:1px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-width: width (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e7b0b94b116a964cfafe7e8b6894cfaa": {
      "content": "${1:deferred}.always(${2:callbacks})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dalways": true
      },
      "source": "snippets/javascript"
    },
    "e7cc10362a4f7cd0c28f5ab1d58a38d2": {
      "content": "expect(${1:target}).toBe(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to be (js)",
      "matches": {
        "eb": true
      },
      "source": "vim-snippets/snippets"
    },
    "e7d6df5e7a54d005bc0f9e049ad64660": {
      "content": "switch ${2:$1 := }${1:v}.(type) {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "type switch x { ... }",
      "matches": {
        "tswitch": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "e7da151a98ca4700a25a205dabeb244c": {
      "content": "# File resource\nfile ${1:\"/path/to/file\"} do # Path to the file\n\t${2:#}backup ${3:5} # How many backups of this file to keep. Set to false if you want no backups.\n\t${4:#}owner ${5} # The owner for the file\n\t${6:#}group ${7} # The group owner of the file (string or id)\n\t${8:#}mode ${9} # The octal mode of the file (4-digit format)\n\t${10:#}content ${11:nil} # A string to write to the file. This will replace any previous content if set\n\t${12:#}${13:action :create} # Create this file (Default)\n\t${14:#}${15:action :delete} # Delete this file\n\t${16:#}${0:action :touch} # Touch this file (update the mtime/atime)\nend",
      "doc": "",
      "filetype": "chef",
      "grammar": "snu",
      "label": "",
      "matches": {
        "file": true
      },
      "source": "vim-snippets/snippets"
    },
    "e7e8ab8c332c8846ec323513a54bbea2": {
      "content": "module.exports = {\n\tcss: {\n\t\tloaderOptions: {\n\t\t\t${1:sass}: {\n\t\t\t\tdata: `${2:@import '@/styles/_variables.scss';}`\n\t\t\t}\n\t\t}\n\t}\n}",
      "doc": "vue.config.js",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-vue-config-js-import",
      "matches": {
        "vconfig": true,
        "vue vue.config.js import": true
      },
      "source": "javascript/vue"
    },
    "e7ede9552448c0f7c27621577eb00acc": {
      "content": "${1:#:expression} unless ${2:#:condition};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "xun",
      "matches": {
        "xunless": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e7f55eb8463b1d1a5316924bab41001f": {
      "content": "set border",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set border",
      "matches": {
        "border": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e804d8db34c60fdaa252f10540aed5a7": {
      "content": "<%= unless ${1} do %>\n\t${0:${VISUAL}}\n<% end %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unless": true
      },
      "source": "vim-snippets/snippets"
    },
    "e805dea5c5374825768e8fdb51147efa": {
      "content": "require 'byebug'; byebug",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "debug": true
      },
      "source": "vim-snippets/snippets"
    },
    "e807039b2e05b5858204ddbde21dff82": {
      "content": "background-repeat: ${1:repeat/repeat-x/repeat-y/no-repeat};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background-repeat:  r:r-x:r-y:n-r (background)",
      "matches": {
        "background": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e807a964bc90212ad085932fd49571af": {
      "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter})\n{\n\t${5}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun1": true
      },
      "source": "vim-snippets/snippets"
    },
    "e80bd42e71866b4fcd2a8a498c029ea6": {
      "content": "local $@;\neval {\n\t${1:# do something risky...}\n};\nif (my $e = $@) {\n\t${0:# handle failure...}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eval": true
      },
      "source": "vim-snippets/snippets"
    },
    "e815ad20c7c47f82d3401d7167c8c144": {
      "content": "expect(${1:target}).not.toBeTruthy();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to be truthy (js)",
      "matches": {
        "nott": true
      },
      "source": "vim-snippets/snippets"
    },
    "e81f63b5fa36c587610e54ab55341fe0": {
      "content": "justify-content: stretch;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "e824316a71094745c19fdc011eccbcd4": {
      "content": "let ${1} =\n\t${0}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn": true
      },
      "source": "vim-snippets/snippets"
    },
    "e8249b8de9e285f6d06c702fc0a783a6": {
      "content": "text-emphasis after",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "e8281a8c1b95afc8bd054f24886de01f": {
      "content": "ReactDOM.render(${1}, ${2});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "ReactDOM.render",
      "matches": {
        "rdr": true
      },
      "source": "snippets/javascript"
    },
    "e82a1f00a5095524afe8390de18dcdec": {
      "content": "<img src=\"${1}\" alt=\"${2}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "img": true
      },
      "source": "vim-snippets/snippets"
    },
    "e82c5c6b68e9dc452e226ead87e5b02b": {
      "content": "_.property(${path})",
      "doc": "var objects = [\n  { 'a': { 'b': 2 } },\n  { 'a': { 'b': 1 } }\n];\n\n_.map(objects, _.property('a.b'));\n// => [2, 1]\n\n_.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n// => [1, 2]\n\nCreates a function that returns the value at `path` of a given object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-property",
      "matches": {
        "lodash property": true
      },
      "source": "javascript/lodash"
    },
    "e83227fc9552e752d38a744d2e419e88": {
      "content": "const {\n  ${1:queryName}: { childImageSharp: {fixed: ${2:imageFixed}}}\n} = useStaticQuery(graphql`\n  query {\n    ${1:queryName}: file(relativePath: { eq: \"${3:imagePath.png}\" }) {\n      childImageSharp {\n        fixed(width: ${4:300}) {\n          ...${5|GatsbyImageSharpFixed,GatsbyImageSharpFixed_noBase64,GatsbyImageSharpFixed_tracedSVG,GatsbyImageSharpFixed_withWebp,GatsbyImageSharpFixed_withWebp_noBase64,GatsbyImageSharpFixed_withWebp_tracedSVG|}\n        }\n      }\n    }\n  }\n`)",
      "doc": "",
      "filetype": "gatsby-image",
      "grammar": "lsp",
      "label": "gatsby-image-usestaticquery-fixed",
      "matches": {
        "gatsby-image usestaticquery fixed": true
      },
      "source": "javascript/gatsby-image"
    },
    "e8374b7caf852c9e1ce64399cad6717b": {
      "content": "{% elif %}\n\t$1",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e83d870c22ca0dff1dd0905d2bb6826c": {
      "content": "import 'react-native'\nimport renderer from 'react-test-renderer'\n\nimport ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'\n\ndescribe('<${1:${TM_FILENAME_BASE}} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t})\n})\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_setupReactNativeTest",
      "matches": {
        "_sntest": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "e855d9d39f1368810be25c1de2efd205": {
      "content": "test.todo('${1:should }');",
      "doc": "creates a test placeholder",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-test-todo",
      "matches": {
        "jest test todo": true,
        "testt": true
      },
      "source": "javascript/jest"
    },
    "e8591ba84a83887e7a517baf3bfe0b25": {
      "content": "![${1:#:alt}](${2:#:url} \"${3:#:title}\")${4}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "![alt](url \"title\")",
      "matches": {
        "alturltitle": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e85dd86c6945fa94e05fe56582408187": {
      "content": "{< ${1:x} = ${2:y} >}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "object functional update",
      "matches": {
        "{{": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e85e7135a53736458458e91f2fda03a5": {
      "content": "${1:app}.delete('${2:route}', ${3:handler});",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "edel": true
      },
      "source": "snippets/javascript"
    },
    "e867fd7de8826476470b17d917670c46": {
      "content": "${1:pattern}${2: when ${3:guard}} ->\n\t${4:body}",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "Case:Receive:Try Clause",
      "matches": {
        "pat": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e8755912444b367fa0d30b215d3e5f26": {
      "content": "border-bottom-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbi": true
      },
      "source": "vim-snippets/snippets"
    },
    "e877b1df882f0f9b91964c61c2ec1e37": {
      "content": "_.sortBy(${collection}, ${iteratees})",
      "doc": "var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 34 }\n];\n\n_.sortBy(users, [function(o) { return o.user; }]);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n\n_.sortBy(users, ['user', 'age']);\n// => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n\nCreates an array of elements, sorted in ascending order by the results of\nrunning each element in a collection thru each iteratee. This method\nperforms a stable sort, that is, it preserves the original sort order of\nequal elements. The iteratees are invoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sortby",
      "matches": {
        "lodash sortby": true
      },
      "source": "javascript/lodash"
    },
    "e88245cdf98970b23fa3654271293ec6": {
      "content": "position: ${1:relative};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "position",
      "matches": {
        "pos": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e89b45ed412c598e3f8aacdd48c564b9": {
      "content": "render nothing: ${1:true}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (nothing) (rn)",
      "matches": {
        "rn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e8a36ac6e60f47d6324e25c2344ed1f3": {
      "content": "private ${1:int} ${2:_myProperty};\n\npublic $1 ${3:MyProperty}\n{\n\tget { return $2; }\n\tset { $2 = value; }\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "Full property declaration",
      "matches": {
        "propfull": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e8a8493d4feaf24ba2270c69f7be6e60": {
      "content": "Set Test Variable    \\${${1:name}}    ${2:${value}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Set Test Variable",
      "matches": {
        "stv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e8af517880119ccf242f0157cae12909": {
      "content": "forceUpdate(${1:callback});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fup": true
      },
      "source": "snippets/javascript"
    },
    "e8b55abd74303ff6aa2cd0a3d49ea12e": {
      "content": "with(${1:exp}) {\n\t${2}\n} ${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "with": true
      },
      "source": "vim-snippets/snippets"
    },
    "e8ba4ac1db01c0dc016b034592d36df0": {
      "content": "caption-side top",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cps:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "e8bfa01e9f27f204850bdaf9e653c8ef": {
      "content": "do\n  ${0:TARGET}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "do ... end",
      "matches": {
        "do": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e8c08945b7acbbdda1f584292a3c59ca": {
      "content": "place-content: space-around",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:sa": true
      },
      "source": "vim-snippets/snippets"
    },
    "e8c0e2c7a0fa0e78cd4ed424f6fb8048": {
      "content": "page-break-after: right",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgba:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "e8c0fa69d06bcb70eb37f28105ab3bdc": {
      "content": "<xsl:call-template name=\"${1:template}\" />",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "call-template": true
      },
      "source": "vim-snippets/snippets"
    },
    "e8c6efd4a3c62e6b0728f750b7468b74": {
      "content": "${1:obj}.addClass('${2:class name}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "addClass": true
      },
      "source": "snippets/javascript"
    },
    "e8cb0b22220c616e0129fd07f49ad425": {
      "content": "outline-color: ${1:#000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oc": true
      },
      "source": "vim-snippets/snippets"
    },
    "e8ceb98b8fd2abf4ca3e6e844d3200de": {
      "content": "{@link ${1:#:target} ${0:#:label}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{link": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e8e1545b29049db1898dfdd50effd35f": {
      "content": "_.differenceBy(${array}, ${values}, ${iteratee})",
      "doc": "_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2]\n\n// The `_.property` iteratee shorthand.\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n\nThis method is like `_.difference` except that it accepts `iteratee` which\nis invoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:\n(value).\n\n**Note:** Unlike `_.pullAllBy`, this method returns a new array.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-differenceby",
      "matches": {
        "lodash differenceby": true
      },
      "source": "javascript/lodash"
    },
    "e8e94cf3b4f3097176dae60f0c3f48ec": {
      "content": "@throws ${1:#:class} ${0:#:description}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "throws": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e8f340446f641ff513815b55da43fa69": {
      "content": "{% module ${0:expression} %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "module": true
      },
      "source": "vim-snippets/snippets"
    },
    "e8fc97ba2aa1bf5d37030acac9d8faab": {
      "content": "require 'optparse'\noptions = { ${0:default: 'args'} }\nARGV.options do |opts|\n\topts.banner = \"Usage: #{File.basename($PROGRAM_NAME)}\"\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "optp": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9080485ac36ab97131d851ea0047fd1": {
      "content": "<ol type=\"i\">${1:TARGET}</ol>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "oli": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e90921c7155049f47756623eaa01afdc": {
      "content": "text-transform uppercase",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "e91683d418032d2ed5c3c38597a06d54": {
      "content": "int choice = NSRunAlertPanel(@\"${1:Something important!}\", @\"${2:Something important just happend, and now I need to ask you, do you want to continue?}\", @\"${3:Continue}\", @\"${4:Cancel}\", nil);\nif(choice == NSAlertDefaultReturn) // \"$3\"\n{\n\t$0;\n}\nelse if(choice == NSAlertAlternateReturn) // \"$4\"\n{\n\t\t$0\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "NSRunAlertPanel (alert)",
      "matches": {
        "alert": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "e918d9d75aafa04f04930fc68b5bd5c6": {
      "content": "\\\\begin{eqnarray}\n\t${0:${VISUAL}}\n\\\\end{eqnarray}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "eqnarray environment",
      "matches": {
        "eqnarray": true
      },
      "source": "vim-snippets/snippets"
    },
    "e919de735ad1b8b91ae68341d2252c69": {
      "content": "overflow-style scrollbar",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "e921caf5bd7c7e83c6d58465a020e956": {
      "content": "{% header \"${1}\" %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig header",
      "matches": {
        "header": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9237245caf06862339ee4b929487726": {
      "content": "${1:TMPFILE}=$(mktemp ${2:XXX})\ntrap \"rm -f '${$1}'\" 0               # EXIT\ntrap \"rm -f '${$1}'; exit 1\" 2       # INT\ntrap \"rm -f '${$1}'; exit 1\" 1 15    # HUP TERM\n${0}",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tmp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e92be82076adfc6885ee89435be434f3": {
      "content": "text-height: font-size",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "e930b5298ec68cb9c610f802db9da211": {
      "content": "|> IO.inspect(label: \"${1:label}\")",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "pipe to inspect with label",
      "matches": {
        ">il": true
      },
      "source": "vim-snippets/snippets"
    },
    "e939b6d06cb94720ad5eb0ec8e0f732a": {
      "content": "<param name=\"${1}\" value=\"${2}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "param": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9480bb38a71e599cf42445b41581d93": {
      "content": "_.repeat(${string}, ${n})",
      "doc": "_.repeat('*', 3);\n// => '***'\n\n_.repeat('abc', 2);\n// => 'abcabc'\n\n_.repeat('abc', 0);\n// => ''\n\nRepeats the given string `n` times.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-repeat",
      "matches": {
        "lodash repeat": true
      },
      "source": "javascript/lodash"
    },
    "e950749b96a7921771b77e418645fc74": {
      "content": "import React, { useState, useEffect } from 'react'\n",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "import-react-usestate-useeffect",
      "matches": {
        "imrse": true,
        "react import usestate useeffect": true
      },
      "source": "javascript/react"
    },
    "e95882381bc2068b197cc429543b1bba": {
      "content": "clip: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cp": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9589547c0b563c4809d9cd5dfa2bed5": {
      "content": "margin-left: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ml:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "e95b4d05fce28e824a6dc892d7fe8c19": {
      "content": "${1:obj}.fadeIn('slow/400/fast', function () {\n\t${0:// callback};\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fadeinc": true
      },
      "source": "snippets/javascript"
    },
    "e9660f5a7b43117b770f8e612a76c49d": {
      "content": "lerpColor(${1:c1}, ${2:c2}, ${0:amt});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lerpColor": true
      },
      "source": "vim-snippets/snippets"
    },
    "e96718fda72e26d84b7564ddb0b82894": {
      "content": "sort_by { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sorb": true
      },
      "source": "vim-snippets/snippets"
    },
    "e96e3d5095f19a58b127763fac4f6945": {
      "content": "*args, **kwargs${1:,}${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "akw": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9719b2162230404cd9906a56f1e8e74": {
      "content": "${1:FIELDNAME} = models.AutoField(${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "auto": true
      },
      "source": "vim-snippets/snippets"
    },
    "e974df8bd17470d26418a2b0a516a028": {
      "content": "_.uniqBy(${array}, ${iteratee})",
      "doc": "_.uniqBy([2.1, 1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n\nThis method is like `_.uniq` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nuniqueness is computed. The order of result values is determined by the\norder they occur in the array. The iteratee is invoked with one argument:\n(value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-uniqby",
      "matches": {
        "lodash uniqby": true
      },
      "source": "javascript/lodash"
    },
    "e97e4b9aec309bbdc355457520dbc587": {
      "content": "@author ${0:$TM_FULLNAME}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "author": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e97f648357f256e4237296f8142a97f4": {
      "content": "list-style-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lisi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "e98f4b79c5f0bfc6d9628a2c752393de": {
      "content": "@extend ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ext": true
      },
      "source": "vim-snippets/snippets"
    },
    "e992a9d0c4a0b13b3bba7fee93b15445": {
      "content": "[NSThread detachNewThreadSelector:@selector(${1:#:method}:) toTarget:${2:#:aTarget} withObject:${3:#:anArgument}]",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "thread": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e993317fac6b819349ad49c686f8dfbd": {
      "content": "@interface ${1:NSObject} (${2:Category})\n@end\n@implementation ${1} (${2})\n${0}\n@end",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Category",
      "matches": {
        "cat": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "e99842c59fd547e77caac3ed3170d23a": {
      "content": "grid-row-end: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gre": true
      },
      "source": "vim-snippets/snippets"
    },
    "e99e807685e9fde0037dda5662ab5e12": {
      "content": "d_ply(${1:frame}, ${2:variables}, ${0:function})",
      "doc": "",
      "filetype": "r",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d_": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9a9f69a48646c40c56e9e59f51284d7": {
      "content": "proc ${1:function_name} {${2:args}} {\n\t${0}\n}",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pro": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9b64812b92c3c960efc567713095cde": {
      "content": "wont_include ${0:what}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wi": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9c5cc49ccb62a37f5ab368578e75ddd": {
      "content": "border-corner-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdci": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9d2db37840f99be3812acdbe823c975": {
      "content": "<aside>\n\t${0}\n</aside>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "aside": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9f2c7fee1f0c1dea80d780d1b8a97db": {
      "content": "mixins: [${1:mixinName}],",
      "doc": "vue use mixin",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-use-mixin",
      "matches": {
        "vmixin-use": true,
        "vue use mixin": true
      },
      "source": "javascript/vue"
    },
    "e9f380d181c32ec4e482f40b737f5ac7": {
      "content": "{\n\telem : '${1:name}',\n\tcontent : [\n\t\t'${2:content}'\n\t]\n}",
      "doc": "",
      "filetype": "javascript-bemjson",
      "grammar": "snu",
      "label": "",
      "matches": {
        "e": true
      },
      "source": "vim-snippets/snippets"
    },
    "e9fbddb9d3c8c24d59bdd4e9508056da": {
      "content": "#include \"${1}\"",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ea0566e2bffd0df67ab5f621ca9a8e97": {
      "content": "new RegExp(r'${1}')",
      "doc": "",
      "filetype": "dart",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rgx": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea0739a7e2db4aec13c2e183c944105a": {
      "content": "Yii::t('${1:category}', '${2:message}',array(${0}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yt": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea078a6700d5d573145e1113d58ad080": {
      "content": "(let [bench-before (System/currentTimeMillis)]\n  ${1:TARGET}\n  (prn 'Took (- (System/currentTimeMillis) bench-before) 'msec))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bench": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ea0a5bfe0add6bf3b09ce0721a013d3c": {
      "content": "quotes: '\\201C' '\\201D' '\\2018' '\\2019';",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q:en": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea0c558be16b5716521229634847c645": {
      "content": "echo CHtml::label('${1:label}', '${2:for}',array('${3:optionName}'=>${0:optionValue}));",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yhlabel": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea0c955cd084c6196535cde36ff821b3": {
      "content": "<fieldset>\n\t<legend><span>${1}</span></legend>\n\t${2}\n</fieldset>\nfieldset+${0}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fieldset+": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea0f14dad5faaeb84378388061db9334": {
      "content": "{\n\t\"type\": \"paragraph\",\n\t\"content\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_paragraph": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea159174c57fd17a871d9339cce1198e": {
      "content": "beginRecord(${1:renderer}, ${0:filename});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "beginRecord": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea22c2277b5822a5af28e6a4505f7b80": {
      "content": "\\\\left[ ${0:${VISUAL}} \\\\right]",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "left[ right]",
      "matches": {
        "lr[": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea34db488e8d1ad8c843ec983044f215": {
      "content": "display table",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tb": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea38df25d2c5d1097e75127086775fc4": {
      "content": "cursor: move;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea412035c546d46d3a7d984be1d103be": {
      "content": "place-self: stretch",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea4474eb15a4e3d295a43d0324cc6154": {
      "content": "justify-content: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea4a661646b32a82432453d85c252ff2": {
      "content": "<AnimateSharedLayout>\n</AnimateSharedLayout>",
      "doc": "Animate between different components that share a layout ID",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-animate-shared-layout",
      "matches": {
        "animate-shared-layout": true,
        "framer-motion animate-shared-layout": true
      },
      "source": "javascript/framer-motion"
    },
    "ea59065400201275d23467aa2a83e685": {
      "content": "if exists('g:loaded_${1}')\n  finish\nendif\n${0}\nlet g:loaded_$1 = 1",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "if exists('g:loaded_{plugin-name}')",
      "matches": {
        "g:loaded": true,
        "loaded": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ea5ae89d4522e6ea78e631929715ce3a": {
      "content": "case ${1} do\n  ${2} -> ${3}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "case .. end",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ea73383eed6809622ad20afbe9526ba4": {
      "content": "nuxtServerInit ({ commit }, { req }) {\n\t${1:data}\n}",
      "doc": "In universal mode, useful to fetch data on the server and give directly to the client-side.",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-serverinit",
      "matches": {
        "nuxt serverinit": true
      },
      "source": "javascript/nuxt"
    },
    "ea782ef76b07a89a6fdd9dbe566edd05": {
      "content": "<rp>${0}</rp>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rp": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea78e49b1bf3c1b46d6c1425ba6aac0b": {
      "content": "logger.error { \"${1:message}\" }$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "logger.error",
      "matches": {
        "loge": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ea7c5e0748e17b458ff9446e47c5752d": {
      "content": "begin\n\t${0}\nrescue ${1:StandardError} => ${2:e}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "beg": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea7d313384bb389d35278fb666deb124": {
      "content": "sap.ui.layout.VerticalLayout.extend(\"$1\", {\n    metadata: {\n\tproperties: {\n\t  \t$2\n\t},\n\taggregations: {\n\t\t$3\n\t},\n\tevents: {\n\t\t$4\n\t}\n    },\n   init: function(){\n\t$5\n    },\n    renderer: \"$6\"\n});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "extendVerticalL": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea7ffcf9bdbf0b9fde14f370e64de1f7": {
      "content": "${1:obj}.andSelf()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "andself": true
      },
      "source": "snippets/coffee"
    },
    "ea828d43597aef11de688eb372346de6": {
      "content": "for ${1:name} in [${2:start}..${3:finish}]\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forr": true
      },
      "source": "snippets/coffee"
    },
    "ea8a41d7098186f903b9ca63f5056e55": {
      "content": "font-weight: lighter;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fw:lr": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea9411d2e7a9c2adfd340877bf233e0f": {
      "content": "$this->${1:method}()->shouldNotBeEqualTo(${2:'value'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotBeEqualTo('value')",
      "matches": {
        "snbequalto": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ea9430c18cc35cb3c31a967ba8a8a48f": {
      "content": "(if (not ${1})\n\t(begin\n\t\t${2})\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifnb": true
      },
      "source": "vim-snippets/snippets"
    },
    "ea943de3918457f25c252c8b41fdcb31": {
      "content": "(define/match (${1})\n  [(${2}) ${3}]\n\t${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "define/match",
      "matches": {
        "defm": true
      },
      "source": "vim-snippets/snippets"
    },
    "eaa39a6e8dd5ec0434dc2de5689d1854": {
      "content": "${1:obj}.outerHeight()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "outerh": true
      },
      "source": "snippets/javascript"
    },
    "eaa9d2f51d986fd39ecaef01cbdc43f6": {
      "content": "const ${1:client} = new GraphQLClient(\n  ${2:url},\n  {\n    headers: {\n      ${3:key}: ${4:value}\n    },\n  }\n);",
      "doc": "",
      "filetype": "graphql-request",
      "grammar": "lsp",
      "label": "graphql-request-client",
      "matches": {
        "graphql-request client": true
      },
      "source": "javascript/graphql-request"
    },
    "eaae0c988fec4625687dcdc16af1a6f4": {
      "content": "-> { throw :${1:error} }.must_throw :${2:error}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mthrow": true
      },
      "source": "vim-snippets/snippets"
    },
    "eab58192c8c579669d06bb7439886120": {
      "content": "[[${1:id}]]${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "[[id]] text",
      "matches": {
        "anchor": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "eab8f94de239bdf11bca9247e35545bb": {
      "content": "chan ${0:int}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "channel",
      "matches": {
        "ch": true
      },
      "source": "vim-snippets/snippets"
    },
    "eabc47743f50fc2951139d89869756fb": {
      "content": "expect($1).toHaveBeenLastCalledWith($0);",
      "doc": "returns true if the spy has been last called with",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tohavebeenlastcalledwith",
      "matches": {
        "jest expect tohavebeenlastcalledwith": true,
        "thblcw": true
      },
      "source": "javascript/jest"
    },
    "eac0a19c748101e9f4dd1f7772ce61fa": {
      "content": "$this->assertFileExists(${1:'path/to/file'});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertFileExists('path/to/file')",
      "matches": {
        "asfex": true
      },
      "source": "vim-snippets/snippets"
    },
    "eac2bb8eebda447c719078142d9227ea": {
      "content": "expect($1).toHaveBeenCalled();$0",
      "doc": "returns true if the spy was called",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tohavebeencalled",
      "matches": {
        "jest expect tohavebeencalled": true,
        "thbc": true
      },
      "source": "javascript/jest"
    },
    "eac4895a376c3d0d32617ec36c0d77c8": {
      "content": ".. contents:: ${1:Table of Contents}\n\t${0:content}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "",
      "matches": {
        "con:": true
      },
      "source": "vim-snippets/snippets"
    },
    "eac5ef4f16eb7a6d232ab34bbad1cde3": {
      "content": "overflow-x: hidden",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "eac841194e51c489274f45b0345a3b02": {
      "content": "throw new ${1:Exception}(\"${2:Error Processing Request}\");",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "throw new Exception()",
      "matches": {
        "te": true
      },
      "source": "vim-snippets/snippets"
    },
    "eac866eeae5f826f6ba8d8eda4642038": {
      "content": "test.only('${1:should }', () => {\n\t$0\n});",
      "doc": "creates a test block  that runs only",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-test-only",
      "matches": {
        "jest test only": true,
        "testo": true
      },
      "source": "javascript/jest"
    },
    "eacdc8bae60181822b01c9e9c27e20ac": {
      "content": "resize ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz": true
      },
      "source": "vim-snippets/snippets"
    },
    "ead0ff7a9d563e938f531e201501b85a": {
      "content": "t.timestamp :${1:title}\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "Create timestamp column",
      "matches": {
        "tcts": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ead5c051156e759434fbd1a1f46c6118": {
      "content": "docker {\n\timage '${1:myregistry.com/node'}'\n\tlabel '${2:my-defined-label'}'\n\tregistryUrl '${3:https://myregistry.com/'}'\n\tregistryCredentialsId '${4:myPredefinedCredentialsInJenkins'}'\n}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d": true
      },
      "source": "vim-snippets/snippets"
    },
    "ead9174526774bee0f2dfb81e9ae7c83": {
      "content": "${1:obj}.clearQueue(${2:'queue name'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "clearq": true
      },
      "source": "snippets/coffee"
    },
    "ead9c24f5bea89ac4d99ecb9aa0b5705": {
      "content": "import React from 'react'\n\nexport const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n",
      "doc": "Creates a React Arrow Function Component with ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-arrow-function-component",
      "matches": {
        "rafc": true,
        "react component arrow function": true
      },
      "source": "javascript/react"
    },
    "eadf8073c68fc5ecff4517334f9169af": {
      "content": "console.info(${0});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.info",
      "matches": {
        "ci": true
      },
      "source": "snippets/javascript"
    },
    "eae6f57e2b279b000d48138e314a4b3d": {
      "content": "@mixin ${1:NAME}(${2:#:ARGS}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "@mixin(...){...}",
      "matches": {
        "mixin": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "eaf3c51b5554e697275ee10982aeda44": {
      "content": "<Link to=\"${1:/blog}\" activeClassName={\"${2:myActiveClassName}\"} >Text</Link>",
      "doc": "",
      "filetype": "gatsby",
      "grammar": "lsp",
      "label": "gatsby-link-activeclassname",
      "matches": {
        "gatsby link activeclassname": true
      },
      "source": "javascript/gatsby"
    },
    "eafc1282111e72dc0155db928f4bef31": {
      "content": "${1:#:NAME}(${2:#:Args}): ${3:#:TYPE} {\n  ${0:#:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "method": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "eafce09583bbf30f5f6793a299f721a9": {
      "content": "public ${1:int} ${2:MyProperty} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "Simple property declaration",
      "matches": {
        "prop": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "eb0dad42f5c9ae0e1b663eae0d73242c": {
      "content": "border-left: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdl:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb0f0d98ef042d6c090db0b80613937a": {
      "content": "grid-auto-flow: column dense;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf:cd": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb14027f430cda39033fe73766a6b8c4": {
      "content": "renderArgs.put(\"${1}\", ${2});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rena": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb15b798ac5d20de9ffce5076119f5b7": {
      "content": "var_dump(${0});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vd": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb17fdab6f70658d0278d70dca403fe2": {
      "content": "<input type=\"datetime-local\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:datetime-local": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb236ac12b1e25053dc4180d42265319": {
      "content": "eval {\n\t${1:TARGET}\n};\nif ($@) {\n\t${2:#:handle failure...}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eval": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "eb2b11340679a561ece8476cb0d2286f": {
      "content": "debug\n{\n\t${VISUAL}$1\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "debug",
      "matches": {
        "debug": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "eb2f802560739396c0e6c3859a94fa53": {
      "content": "import React, { Component } from 'react'\n\ninterface Props {\n\t\n}\ninterface State {\n\t\n}\n\nexport default class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {\n\tstate = {}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
      "doc": "Creates a React component class with ES7 module system and TypeScript interfaces",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typeScriptReactClassComponent",
      "matches": {
        "tsrcc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "eb32d4a80fb7b27dd562fd432618e78e": {
      "content": "dictsort:\"$1\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dictsort": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "eb37debca1538d0166e5d0e0abb8acaf": {
      "content": "constrain(${1:value}, ${2:min}, ${0:max});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "constrain": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb37ec8b4bd8960b2c3c8040a304bcde": {
      "content": "import React from 'react'\nimport { View, Text } from 'react-native'\n\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactNativeFunctionalComponent",
      "matches": {
        "rnf": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "eb43cf1c4546a1d57c4a7bdd2725375b": {
      "content": "import ${1|onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,,onActivated,onDeactivated,onErrorCaptured,onRenderTracked,onRenderTriggered|} from '${2|vue,@vue/composition-api|}'",
      "doc": "Import Lifecycle hooks to use in file",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v3lifecyclehook-import",
      "matches": {
        "vue v3 importlifecyclehook ": true
      },
      "source": "javascript/vue"
    },
    "eb49f8087159af5f269b40b9ce600558": {
      "content": "${1:attribute}=\"${2:property}\" attr+",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "attr+": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb4f5508e0596ca792ca6440180fa850": {
      "content": "{% if ${1:#:condition} %}\n  ${2:TARGET}\n{% else %}\n  ${3}\n{% endif %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "if else endif",
      "matches": {
        "ifelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "eb5559d09299697f4d56c25d45ce9e10": {
      "content": "async ${0}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "async",
      "matches": {
        "as": true
      },
      "source": "snippets/javascript"
    },
    "eb58ea4102bd7c5ebabe966d80dadb3d": {
      "content": "if ${1} then ${2} else ${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "if expression",
      "matches": {
        "ifex": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb70504cdfc6237894dc7f40c85f02bc": {
      "content": "class ${2:#:ClassName} {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "class": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "eb794a5f43be0add4f999af551f3ac99": {
      "content": "do {\n\t${0}\n} while (${1:cond})",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb7a5cb6b6b052553c47641cd1f8f013": {
      "content": "{% url ${1} as ${0} %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "url": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb83250d54d43abf29da42dbc9058b01": {
      "content": "{% elsif ${1:condition} %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elsif": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb84732347712079a4cda89d5698066f": {
      "content": "<h6 class=\"${1}\">${0}</h6>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h6.": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb85bdcd466750cfd39d11bd431e3352": {
      "content": "${1:ModelName}::model()->deleteAll(${2:condition},array('${3:key}'=>${0:value}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ydela": true
      },
      "source": "vim-snippets/snippets"
    },
    "eb8b839d1b9dc5d55663744938481f12": {
      "content": "${1:callbacks}.lock()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Clock": true
      },
      "source": "snippets/coffee"
    },
    "eb915e4bcc16c2fcae998d013e9784f4": {
      "content": "import styled from 'styled-components/native';\n\nexport const ${1:Container} = styled.${2:View}`\n  ${3}\n`;\n",
      "doc": "Create React Native Styled Components file",
      "filetype": "snippets-ts",
      "grammar": "lsp",
      "label": "styles",
      "matches": {
        "styled-react-native": true
      },
      "source": "rocketseat-vscode-react-native-snippets/snippets"
    },
    "eb98f90707bfe43474099a744e34c3e9": {
      "content": "@serialField ${1:#:name} ${2:#:type} ${0:#:description}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "eb9ba25ba18b9bde785922144bf711e2": {
      "content": "grid-auto-columns auto",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "eba75e84177b905418f730dc305437e9": {
      "content": "shininess(${0:shine});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "shininess": true
      },
      "source": "vim-snippets/snippets"
    },
    "eba9de6ad8a30fafc4ef77df55aa8e16": {
      "content": "<%def name=\"${1:name}\">\n\t${2:}\n</%def>",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "definition",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ebabc04dc0a62119db30f5f5cb5a1742": {
      "content": "expect(${1:target}).not.toBeFalsy()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect not to be falsy (coffee)",
      "matches": {
        "notf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ebb87ffc5719a6a38ca2679e81224f6d": {
      "content": "write(${1:*},${2:*}) ${3}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "write",
      "matches": {
        "wr": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ebbf2df440873446587fa64a993b7da5": {
      "content": "curveDetail(${0:detail});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "curveDetail": true
      },
      "source": "vim-snippets/snippets"
    },
    "ebc2be14d437c1d1b5406763578bf94d": {
      "content": "describe.each([${1:[1, 2], [2, 4]}])(\n\t'${2:double(%d)}',\n\t(${3:input, expected}) => {\n\t\ttest(`returns \\${expected}`, () => {\n\t\t\t${4:expect(double(input)).toBe(expected);}\n\t\t});\n\t}\n);",
      "doc": "creates a describe block with different test data sets",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-describe-each",
      "matches": {
        "desce": true,
        "jest describe each": true
      },
      "source": "javascript/jest"
    },
    "ebce18f77d3e43f6fa5d44f15e94884f": {
      "content": "if ${1} then\n\t${2}\nelse\n\t${3}\nend if;",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "ebd20b5d546f08939cc1ca00d3bf92e5": {
      "content": "override ${1:attribute} => sub {\n\t${2:# my $self = shift;};\n\t${0:# my ($self, $args) = @_;};\n};",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "override": true
      },
      "source": "vim-snippets/snippets"
    },
    "ebd335045fc62dc3353d42e339cd895b": {
      "content": "border-style dotted",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:dt": true
      },
      "source": "vim-snippets/snippets"
    },
    "ebdce083f684fd2dee64d9fa0e6f403f": {
      "content": "display: table-header-group",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbhg": true
      },
      "source": "vim-snippets/snippets"
    },
    "ebe0243663ff5ca94c95a7220a02b946": {
      "content": "return${1};${0}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ret": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ebe47918153e0318e90a76743c7f1873": {
      "content": "else if(${1:/*condition*/})\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "else if (elif)",
      "matches": {
        "elif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ebeb0c992a5f5ac88c6ee35b78106d1d": {
      "content": "use GenServer\n@doc false\ndef start_link, do: GenServer.start_link(__MODULE__, ${1:Map.new})\n@impl true\ndef init(state), do: {:ok, state}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "basic genserver structure",
      "matches": {
        "genserver:": true
      },
      "source": "vim-snippets/snippets"
    },
    "ebefd06b8ce5e43ff847fdcf2f3d37a4": {
      "content": "switch (${1:/* variable */}) {\n\tcase ${2:/* variable case */}:\n\t\t${3}\n\t\t${4:break;}${5}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "switchndef": true
      },
      "source": "vim-snippets/snippets"
    },
    "ebf4a8fe13581fd9b3c377654afc0d74": {
      "content": "\\\\citeyear{${1}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\citeyear",
      "matches": {
        "citey": true
      },
      "source": "vim-snippets/snippets"
    },
    "ebfdd6893556c09ec57e454d472f3886": {
      "content": "require('dotenv').config({ path: '${1:/full/custom/path/to/your/env/vars}' })",
      "doc": "You may specify a custom path if your file containing environment variables is located elsewhere.",
      "filetype": "dotenv",
      "grammar": "lsp",
      "label": "dotenv-path",
      "matches": {
        "dotenv path": true
      },
      "source": "javascript/dotenv"
    },
    "ec02424ccafd41f2a0ab5c684ef36bc9": {
      "content": "case ${1} of\n\t${2} -> ${0}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "case ... of",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ec082e097bedf7849bc44b80415c8f0e": {
      "content": "post {\n\talways {\n\t\t${1}\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pa": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec0ac87ec8a68eb953c1a570a16fd0dc": {
      "content": "import Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n\tstate: {\n\t\t${1:key}: ${2:value}\n\t}\n});",
      "doc": "Base for Vuex store",
      "filetype": "vue-script-vuex",
      "grammar": "lsp",
      "label": "Vuex Store",
      "matches": {
        "vstore": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "ec11b7da8a3d2376888a68f648601af0": {
      "content": "#[test]\nfn ${1:function_name}_test() {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Unit test function",
      "matches": {
        "test": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec1ed537fa71ba53a9d5d9523a5d7358": {
      "content": "resize none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec21bad83f3671b8484974324fff763e": {
      "content": "assert_redirected_to ${1:action}: '${2:index}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "art": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec2277433b2617a23a5ea4285ebe6f41": {
      "content": "<transition></transition>",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "transition": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec2484c3d909dc01c23122e7f4f946c2": {
      "content": "\\\\begin{description}\n\t\\\\item[${1}] ${0}\n\\\\end{description}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "description environment",
      "matches": {
        "desc": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec24eac2b797659526d89a4666be0d39": {
      "content": "info(\"${1:message}\")",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "info": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec2ba1b9280c57262247faae5f4ecdf1": {
      "content": "if (${1}) {\n\t${2}\n}\nelsif (${3}) {\n\t${4:# elsif...}\n}\nelse {\n\t${0}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ifee": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec388f23dafd78315aedd934551e3024": {
      "content": "place-content: space-between",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec46e6624de30440adc3e9f0db3462e7": {
      "content": "!> @param[${1}]${0}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doxp": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec4d204d595190124ae8889f7c9bdd8b": {
      "content": "border-collapse separate",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdcl:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec4d5ad404648fc18fc77b78fcb9d185": {
      "content": "vertical-align: top",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:t": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec4f9c5215f36c958f1ae3d9b6b09787": {
      "content": "int choice;\nwhile (1)\n{\n\tstatic struct option long_options[] =\n\t{\n\t\t/* Use flags like so:\n\t\t{\"verbose\",\tno_argument,\t&verbose_flag, 'V'}*/\n\t\t/* Argument styles: no_argument, required_argument, optional_argument */\n\t\t{\"version\", no_argument,\t0,\t'v'},\n\t\t{\"help\",\tno_argument,\t0,\t'h'},\n\t\t${1}\n\t\t{0,0,0,0}\n\t};\n\tint option_index = 0;\n\t/* Argument parameters:\n\t\tno_argument: \" \"\n\t\trequired_argument: \":\"\n\t\toptional_argument: \"::\" */\n\tchoice = getopt_long( argc, argv, \"vh\",\n\t\t\t\tlong_options, &option_index);\n\tif (choice == -1)\n\t\tbreak;\n\tswitch( choice )\n\t{\n\t\tcase 'v':\n\t\t\t${2}\n\t\t\tbreak;\n\t\tcase 'h':\n\t\t\t${3}\n\t\t\tbreak;\n\t\tcase '?':\n\t\t\t/* getopt_long will have already printed an error */\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t/* Not sure how to get here... */\n\t\t\treturn EXIT_FAILURE;\n\t}\n}\n/* Deal with non-option arguments here */\nif ( optind < argc )\n{\n\twhile ( optind < argc )\n\t{\n\t\t${0}\n\t}\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "getopt": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec5db2849bfcd0cf3419bd9ffa474e56": {
      "content": "unless ${1:condition}\n\t$2\nelse\n\t$0\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "unlesse": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec65efd51e1d57059234099f966b2048": {
      "content": "<template></template>",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "template": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec679f0d645c4d78a2245f24147ce342": {
      "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class ${1:${TM_FILENAME_BASE}} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
      "doc": "Creates a React component class with PropTypes and ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactClassCompomentPropTypes",
      "matches": {
        "rccp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "ec6afb62fb7ff75e8314b7057c15d73b": {
      "content": "def test_${1:case_name}\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deft": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec6f4bb7ac16ec5a1c62132ec861d702": {
      "content": "[${1} for ${2} in ${3:${VISUAL}}]${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "list comprehension",
      "matches": {
        "lcp": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec7064013cf2e7fe9294ebc5c58c8b7e": {
      "content": "destroyed () {\n\t${0};\n},",
      "doc": "destroyed lifecycle method",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-lifecycle-destroyed",
      "matches": {
        "vdestroyed": true,
        "vue lifecycle destroyed": true
      },
      "source": "javascript/vue"
    },
    "ec778cc923a7def59d3ff5844d0ee42f": {
      "content": "_.wrap(${value}, ${wrapper})",
      "doc": "var p = _.wrap(_.escape, function(func, text) {\n  return '<p>' + func(text) + '</p>';\n});\n\np('fred, barney, & pebbles');\n// => '<p>fred, barney, &amp; pebbles</p>'\n\nCreates a function that provides `value` to `wrapper` as its first\nargument. Any additional arguments provided to the function are appended\nto those provided to the `wrapper`. The wrapper is invoked with the `this`\nbinding of the created function.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-wrap",
      "matches": {
        "lodash wrap": true
      },
      "source": "javascript/lodash"
    },
    "ec7a1f38a5879f4996741075f9cf4b4a": {
      "content": "{% if ${1:condition} %}\n  ${0}\n{% end %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec7c11296e996334e31255c717025cb1": {
      "content": "export const ${1:action} = createAction('[${2:Source}] ${3:Event}');",
      "doc": "Creates an NgRx Action",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "NgRx Create Action",
      "matches": {
        "a-ngrx-create-action": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "ec7eccc42305983d23e82d468f294de1": {
      "content": "Page Should Contain Radio Button    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Contain Radio Button",
      "matches": {
        "pscrb": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ec8572409ec7ec2c9a03b66809222800": {
      "content": "| capitalize",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "capitalize": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec870559ee5f1c251b373d185f97f91f": {
      "content": "[[ ${0:test} ]]",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec8885c2363cd287c9a04962328ed9a7": {
      "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} extends Component {\n\tstatic propTypes = {\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}\n",
      "doc": "Creates a React component class with ES7 module system",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-class-export-component-proptypes",
      "matches": {
        "rcep": true,
        "react component class export proptypes": true
      },
      "source": "javascript/react"
    },
    "ec8fea817182f8962f8b7bfcb1cd3296": {
      "content": "real, dimension(${1}), intent(in)  :: ${2}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "real dimension intent(in)",
      "matches": {
        "redi": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ec90a6592b65d30a675910796053ad70": {
      "content": "font-family: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ff": true
      },
      "source": "vim-snippets/snippets"
    },
    "ec91cef9e95a915cf9d03b498cedbb2b": {
      "content": "for ${1} {\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "for ... { ... }",
      "matches": {
        "for": true
      },
      "source": "gosnippets/snippets"
    },
    "eca70827de4fb74f1ebf0032093e52e0": {
      "content": "expect(${1:target}).wasNotCalledWith(${2:arguments})",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect was not called with (coffee)",
      "matches": {
        "noscw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ecab48991c75e427bd4a8024f4d22f4e": {
      "content": "final ${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fi": true
      },
      "source": "vim-snippets/snippets"
    },
    "ecc4e136a3b251b0c0b9265395aa76c1": {
      "content": "<table>\n\t${0}\n</table>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "table": true
      },
      "source": "vim-snippets/snippets"
    },
    "ecc83566bd43963b440cf82665339ef4": {
      "content": "align-items: last baseline",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:lb": true
      },
      "source": "vim-snippets/snippets"
    },
    "eccc816394911c411123cae253012f17": {
      "content": "${1:obj}.triggerHandler('${2:event name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trigh": true
      },
      "source": "snippets/coffee"
    },
    "eccc8e651efb9c6cd645e27a013f4bdf": {
      "content": "float: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "eccdaa5ca9abb9206520d5e220751fa9": {
      "content": "expect(${1:target}).not.toThrow(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to throw (js)",
      "matches": {
        "notth": true
      },
      "source": "vim-snippets/snippets"
    },
    "ecd3689529ae7f34bbf3d1cd265aa752": {
      "content": "{% load $1 %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "load": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ecd8eee1bdbef1d0017539c4678de094": {
      "content": "void main() {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "vim-snippets/snippets"
    },
    "ecda36d6932b2d8e78c5c5c1501ffe73": {
      "content": "${1:deferred}.progress(${2:callbacks})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Dprog": true
      },
      "source": "snippets/javascript"
    },
    "ece7f851dc8f98f95737b78cf469cf92": {
      "content": "align-content: first baseline;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:fb": true
      },
      "source": "vim-snippets/snippets"
    },
    "ecead7add42fe0a3415e18013af24224": {
      "content": "border-top ${1:1px} ${2:solid} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdt+": true
      },
      "source": "vim-snippets/snippets"
    },
    "ecf85d0ec9add5d8ed3fcf3d39f5b3f1": {
      "content": "<xsl:template name=\"${1:name}\">${0}\n</xsl:template>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "named",
      "matches": {
        "template": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed084bc6fbd980b5e8335d3192cf8e25": {
      "content": "|> ${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed0a064706380f57a83284f6dad574ab": {
      "content": "_.assign(${object}, ${sources})",
      "doc": "function Foo() {\n  this.a = 1;\n}\n\nfunction Bar() {\n  this.c = 3;\n}\n\nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n\n_.assign({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'c': 3 }\n\nAssigns own enumerable string keyed properties of source objects to the\ndestination object. Source objects are applied from left to right.\nSubsequent sources overwrite property assignments of previous sources.\n\n**Note:** This method mutates `object` and is loosely based on\n[`Object.assign`](https://mdn.io/Object/assign).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-assign",
      "matches": {
        "lodash assign": true
      },
      "source": "javascript/lodash"
    },
    "ed1ab0909b258cab7d34ec7c1d3dd506": {
      "content": "text-wrap: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:no": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed2169add68dfb652b40a20b44b916fd": {
      "content": "{% block ${1} %}\n  ${0}\n{% end %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "block": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed238c932a8054735cb2220c5bfbaec3": {
      "content": "word-break: break-strict;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:bs": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed31cf13b745e3a3cbea97633c1b29ac": {
      "content": "setProperty(${1:#:target}, ${2:#:property}, ${3:#:value});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ed35c5b9b653c83104e02525393cd06e": {
      "content": "box-shadow: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed3f76e03fbaf27abd1c49b9dacdc7d6": {
      "content": "bezierPoint(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${0:t});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bezierPoint": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed462d19548bc526d60be09fc578bfe9": {
      "content": "module ${1:(* Name *)} = struct\n\t${2:(* BODY *)}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "module - no signature",
      "matches": {
        "mod": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ed47365a444781afc43209e5ed6652fa": {
      "content": "setInterval(() => {\n\t${0}\n}, ${1:delay});",
      "doc": "setInterval",
      "filetype": "base",
      "grammar": "lsp",
      "label": "setinterval",
      "matches": {
        "base set interval": true
      },
      "source": "javascript/base"
    },
    "ed476044e5fc1842a47af07dd7759d47": {
      "content": "#!/usr/bin/env perl",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed4b6105d1c0a6d2bedb72f831868f48": {
      "content": "gl.glClear(${1:GL.GL_COLOR_BUFFER_BIT}${2: | }${0:GL.GL_DEPTH_BUFFER_BIT});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "gl clear",
      "matches": {
        "gl": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed4bdfe6e4e88dd1dd10a0ab8b8ac14e": {
      "content": "overflow: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed4cada522f9ee587f47a5fd20aa74fc": {
      "content": "border-collapse: separate",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdcl:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed4d5d6cabbf4d2d08cc8b5c9bf025b9": {
      "content": "expect(${1:target}).not$0",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect not (coffee)",
      "matches": {
        "notx": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ed5d0cc097d3dc55f633f58e1f3bf99b": {
      "content": "mixin Signal!(${1:/*args*/}) ${2:/*name*/};",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "signal (signal)",
      "matches": {
        "signal": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ed5d76f9590c5df402e8ae83988355d0": {
      "content": "${1:obj}.attr('${2:attribute}', '${3:value}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "attr": true
      },
      "source": "snippets/coffee"
    },
    "ed69c71472c058aef119e53e5b1de923": {
      "content": "<%= link_to \"${1:Link text...}\", ${2:model}_path(${0:@$2}) %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "lip": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed8d56b2116234b4acdc2156d8c17084": {
      "content": "foreach(${1:i}, ${2:elem}; ${3:range}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fei": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed90851e668810274a3cf143ec2c7f2b": {
      "content": "overflow-y visible",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovy:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed929100af1a8195f68c27feb47af3ec": {
      "content": "margin: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m": true
      },
      "source": "vim-snippets/snippets"
    },
    "ed979d728284d317f8b3c20fb972b2e2": {
      "content": "import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n\n}\n\nconst ${1:${TM_FILENAME_BASE}} = createSlice({\n\tname: ${2:sliceName},\n\tinitialState,\n\treducers: {\n\t\n\t}\n});\n\nexport const {\n\n} = ${1:${TM_FILENAME_BASE}}.actions\nexport default ${1:${TM_FILENAME_BASE}}.reducer",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reduxSlice",
      "matches": {
        "rxslice": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "eda4e024dd2b83e553de16dbfd058bba": {
      "content": "reject do |${1:e}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rejd": true
      },
      "source": "vim-snippets/snippets"
    },
    "edad0878d8f8369651da2385a40b9f6f": {
      "content": "${1:document}.getElementById('${0:element ID}')",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "by#": true
      },
      "source": "snippets/javascript"
    },
    "edb0f9b33b10bc4e86bedaac8042f783": {
      "content": "border-top: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdt": true
      },
      "source": "vim-snippets/snippets"
    },
    "edb1df4f6d5dd24bb8433dc4267bb3fb": {
      "content": "Wait Until Element Is Not Visible    ${1:${locator}}    ${2:${timeout=None}}    ${3:${error=None}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Wait Until Element Is Not Visible",
      "matches": {
        "wueinv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "edc1bc355d77bbf4c8f721285b4dd364": {
      "content": "static public final ${1:#:type} ${2:#:var} = ${3};${4}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "const": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "edc3e5d0ac0d5836ba27ab36a4981dfb": {
      "content": "${1:FIELDNAME} = forms.FileField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "FileField",
      "matches": {
        "ffile": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "edc84a7b0600b935b0aa14425abd5784": {
      "content": "protected type ${1}(${2}) is\n\t${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "protected type",
      "matches": {
        "prot": true
      },
      "source": "vim-snippets/snippets"
    },
    "edca05f92f111fefa9c2b6a2be716cee": {
      "content": "set(${1:x}, ${2:y}, ${0:color/image});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "pixel",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/snippets"
    },
    "edd0ce244fa9e51bcfdedc55eaceb94c": {
      "content": "border-style ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds": true
      },
      "source": "vim-snippets/snippets"
    },
    "edd2a307e2460613ce974e0ce7100ac6": {
      "content": "MsgBox(0, \"Debug\", ${0:\"Debug Message\"})",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "debug": true
      },
      "source": "vim-snippets/snippets"
    },
    "edd43e6ff0a85a29f6a599654a2a89a4": {
      "content": "${1:attribute}=\"${0:property}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "attr": true
      },
      "source": "vim-snippets/snippets"
    },
    "edd5e6aed98533a33ad6bae71d94b3c9": {
      "content": "expect(${1:target}).not.toBeHidden()",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "expect not to be hidden (coffee)",
      "matches": {
        "noth": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "eddbf449775aa3579737fbafbe487cf6": {
      "content": "font-style: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "font-style": true,
        "fs": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "eddc32756e6a16c7caf12baeacccb97c": {
      "content": "grid-row ${1} / ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gr": true
      },
      "source": "vim-snippets/snippets"
    },
    "ede3a212b87408ca875b6f50abfc57f8": {
      "content": "{\n\t\"type\": \"image_picker\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_image_picker": true
      },
      "source": "vim-snippets/snippets"
    },
    "ede6359e07c3c6f34ea1f1181ceea391": {
      "content": "object ${1:X} {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "object": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "edea2835fa2979b58707f5fbb7d2e023": {
      "content": "_.groupBy(${collection}, ${iteratee})",
      "doc": "_.groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n\n// The `_.property` iteratee shorthand.\n_.groupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }\n\nCreates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The order of grouped values\nis determined by the order they occur in `collection`. The corresponding\nvalue of each key is an array of elements responsible for generating the\nkey. The iteratee is invoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-groupby",
      "matches": {
        "lodash groupby": true
      },
      "source": "javascript/lodash"
    },
    "edf72e813bf4a70e0d70919340209c48": {
      "content": "$.param(${1:obj})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "param": true
      },
      "source": "snippets/javascript"
    },
    "edfc69a9e87d49f7717d2e89e5e57dd9": {
      "content": "xhr :get, :${1:show}${2:, id: ${3:1}}$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "xhr get",
      "matches": {
        "xget": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ee093e49b5ec40e26afd191fa8623f76": {
      "content": "import ${2:moduleName} from '${1:module}';$0",
      "doc": "Imports entire module statement in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import",
      "matches": {
        "imp": true
      },
      "source": "vscode-javascript/snippets"
    },
    "ee0a5a521db82c838a85fa40a0960fbf": {
      "content": "flex-shrink: ${0:1};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxs": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee0d5fb3b7327be61ddda367e174146e": {
      "content": "assert_nothing_thrown do\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asntd": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee1271bb8ab30409bf9b51c33adfeab4": {
      "content": "noise(${1:x}${2:, }${3:y}${4:, }${0:z});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "noise": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee185ac6b027b1b69fdaf837d52e7d66": {
      "content": "background-image none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee1b815eca5af0c276dd766819354c87": {
      "content": "it { should validate_acceptance_of :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isva": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee284a7cff845313e9094242a6631327": {
      "content": "${1:obj}.mouseleave (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mleave": true
      },
      "source": "snippets/coffee"
    },
    "ee2e25bc94f90757fe205f26d03bf917": {
      "content": "import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\ninterface Props {\n\t\n}\n\nconst ${1:${TM_FILENAME_BASE}} = (props: Props) => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n\nconst styles = StyleSheet.create({})\n",
      "doc": "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typescriptReactNativeArrowFunctionComponentWithStyles",
      "matches": {
        "tsrnfs": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "ee367298856932dc313db66f20e44fd0": {
      "content": "word-wrap: normal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee379fcbf6dd500ecb298d77173e4a1e": {
      "content": "padding-bottom ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee3ebaf1328de23285dd55029c98aec5": {
      "content": "font-size: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "font-size": true,
        "fs": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ee421ee972ce972caa07a89a85cf98ea": {
      "content": "xhr :get, :${1:show}, id: ${2:1}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "xget": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee4318015fcca122c33febaf333a0ca9": {
      "content": "filters: {\n\t${1:fnName}: function(${2:value}) {\n\t\treturn ${2:value}${0};\n\t}\n}",
      "doc": "vue filter",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Filter",
      "matches": {
        "vfilter": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "ee45e02088b23386757d4975b590d4c0": {
      "content": "<sub>${1:TARGET}</sub>${2}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sub": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ee480f91fc4b1a7c6ca4e348f8219e9f": {
      "content": "beforeMount () {\n\t${0};\n},",
      "doc": "beforeMount lifecycle method",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-lifecycle-beforemount",
      "matches": {
        "vbeforemount": true,
        "vue lifecycle beforemount": true
      },
      "source": "javascript/vue"
    },
    "ee49167c98a35e5691cbb34430938344": {
      "content": "bottom: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "b": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee5b2220c25a2fb7c8dbc0f8973eb78f": {
      "content": "<figure class=\"${1}\">\n\t${0}\n</figure>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "figure.": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee5c67ae56100461dc898dca4040a28d": {
      "content": "type alias ${1:Model} =\n\t${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tya": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee61e30c09a3a0c9243239e90f44081f": {
      "content": "try do\n\t${1:${VISUAL}}\nrescue\n\t${2} -> ${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "try .. rescue .. end",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee682a8549c84a6e542bc6961eacb94b": {
      "content": "tapply(${1:X}, ${2:INDEX}, ${3:FUN = ${4:NULL}}, ${5:...}, ${6:simplify = ${7:TRUE}})",
      "doc": "Tapply",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "tap",
      "matches": {
        "tapply": true
      },
      "source": "vscode-R/snippets"
    },
    "ee6a947d6c7fc8eb8ccf528726cb51c4": {
      "content": "if ($1) {\n\t${2:# body...}\n}\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "if",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ee6b551f25c205af6835506c3e9b6c93": {
      "content": "validates_presence_of",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_presence_of",
      "matches": {
        "vp": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ee6ceeb998390fe58749d55c9ea4f114": {
      "content": "#!/usr/bin/env julia",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee791461b93dd92c565138312263cf40": {
      "content": "{% if $1 %}$2{% endif %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ee7b7b96ace62249b0dcd393456fea68": {
      "content": "before_save $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "before_save",
      "matches": {
        "befs": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ee82af2ccef7a2bceecfeb3e4b3ac3f7": {
      "content": "else if ${1}\n\t${0}",
      "doc": "",
      "filetype": "julia",
      "grammar": "snu",
      "label": "else if part of if statement",
      "matches": {
        "eif": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee8a5454903060bb4dc2621ad10fd03d": {
      "content": "expect($1).toMatch($0);",
      "doc": "returns true if the argument matches the second value",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-tomatch",
      "matches": {
        "jest expect tomatch": true,
        "tm": true
      },
      "source": "javascript/jest"
    },
    "ee8bab7187b8ae08324cd5e2b8582fbd": {
      "content": "**kwargs${1:,}${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "kwargs": true
      },
      "source": "vim-snippets/snippets"
    },
    "ee917ae8ef018a957ceefdbc8a25096b": {
      "content": "do {\n\t${0:TARGET}\n} while (${1:#:condition});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dowhile": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ee9964b913db230b40e94ac178b53b42": {
      "content": "@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();",
      "doc": "Angular @Output event and emitter",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Output Event",
      "matches": {
        "a-output-event": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "eea7fb40a4c334cb0db5f369b3617cfb": {
      "content": "setup_all do\n\t${1}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "setupa": true
      },
      "source": "vim-snippets/snippets"
    },
    "eebbcd6f3d829eec689d4dc4261622f2": {
      "content": "font-stretch: expanded;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fst:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "eebfb02dab46a6fb069ceebe4dad9e78": {
      "content": "grid-column: ${1} / ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gc": true
      },
      "source": "vim-snippets/snippets"
    },
    "eec8c217f6fc5011e7215a1628e80d40": {
      "content": "-moz-box-shadow: ${1:0} ${2:0} ${3:0} #${4:000};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:m+": true
      },
      "source": "vim-snippets/snippets"
    },
    "eee01bf15a43c6ede20ef97c0083647a": {
      "content": "$.isWindow(${1:obj})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iswin": true
      },
      "source": "snippets/javascript"
    },
    "eeed9cd787ecadaa9be3e648bc6e0f05": {
      "content": "${1:name}\tnumber\t${3:default 0}\t${0:not null}",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ncol": true
      },
      "source": "vim-snippets/snippets"
    },
    "eef6bb5daa72738a47eb8efd89d85dab": {
      "content": "${1} := ${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "v := value",
      "matches": {
        ":": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "eef6fab2a9e90bbfd30c3985a5cf8b96": {
      "content": "function ${1:function_name}(${2})${3}\n{\n\t${0}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "eefc6b1c08a157e248004125a37d6eec": {
      "content": "_.trimEnd(${string}, ${chars})",
      "doc": "_.trimEnd('  abc  ');\n// => '  abc'\n\n_.trimEnd('-_-abc-_-', '_-');\n// => '-_-abc'\n\nRemoves trailing whitespace or specified characters from `string`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-trimend",
      "matches": {
        "lodash trimend": true
      },
      "source": "javascript/lodash"
    },
    "ef0093b2c04ba5ca21375cf4af0192a4": {
      "content": "align-content last baseline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:lb": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef05cfaf7e6f218392973ada45029a11": {
      "content": "position absolute",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pos:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef0d4a409f573c55a14c0c60d978be02": {
      "content": "\\\\begin{equation}\n\t${0:${VISUAL}}\n\\\\end{equation}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "equation environment",
      "matches": {
        "eq": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef1d1301eb9eb4728838aa1e71799446": {
      "content": "(${1}) => ${0:${VISUAL}}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "() =>",
      "matches": {
        "af": true
      },
      "source": "snippets/javascript"
    },
    "ef30157706d31dc044cd232cc3998836": {
      "content": "overflow-style: scrollbar",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef329dfca32a35c49ccef718e4c0cb66": {
      "content": "try\n{\n\t${VISUAL}$0\n}\nfinally\n{\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "try finally block",
      "matches": {
        "tryf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ef32dca136ec95bcf911557916598cd1": {
      "content": "table-layout: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbl": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef389e9cda12a90e8d0f8c56a21448af": {
      "content": "{\n\t\"type\": \"text\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": \"${3}\",\n\t\"info\": \"${4}\",\n\t\"placeholder\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_text": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef4166f0075d84175bc3a10ee22a798d": {
      "content": "panic(\"${0:msg}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "panic()",
      "matches": {
        "pn": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "ef4ea85854cd879ec54ae137fa8e266e": {
      "content": "align-self first baseline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "as:fb": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef5529599d564efffb4b85833aa9a2a9": {
      "content": "<table class=\"${1}\">\n\t${0}\n</table>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "table.": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef558cf9e905eab4d089c55508b8aa28": {
      "content": "<h3 class=\"${1}\">${0}</h3>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "h3.": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef5cfb0f791bcec3abb684ebbfc5d7f1": {
      "content": "_.memoize(${func}, ${resolver})",
      "doc": "var object = { 'a': 1, 'b': 2 };\nvar other = { 'c': 3, 'd': 4 };\n\nvar values = _.memoize(_.values);\nvalues(object);\n// => [1, 2]\n\nvalues(other);\n// => [3, 4]\n\nobject.a = 2;\nvalues(object);\n// => [1, 2]\n\n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b']);\nvalues(object);\n// => ['a', 'b']\n\n// Replace `_.memoize.Cache`.\n_.memoize.Cache = WeakMap;\n\nCreates a function that memoizes the result of `func`. If `resolver` is\nprovided, it determines the cache key for storing the result based on the\narguments provided to the memoized function. By default, the first argument\nprovided to the memoized function is used as the map cache key. The `func`\nis invoked with the `this` binding of the memoized function.\n\n**Note:** The cache is exposed as the `cache` property on the memoized\nfunction. Its creation may be customized by replacing the `_.memoize.Cache`\nconstructor with one whose instances implement the\n[`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\nmethod interface of `clear`, `delete`, `get`, `has`, and `set`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-memoize",
      "matches": {
        "lodash memoize": true
      },
      "source": "javascript/lodash"
    },
    "ef6601b927d9463bfbd3ed9f543f0e23": {
      "content": "word-break: keep-all;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:k": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef663ee943ccad4155000b711881f346": {
      "content": "#!/usr/bin/env perl6",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef6f85a742bcdb1ed06d15299654a4f7": {
      "content": "text-justify ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef702abfad31ee043f03d0f977c2617f": {
      "content": "justify-items: start",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef719fe428fafee79738e3ef860b6a88": {
      "content": "@Before\nstatic void ${1:intercept}(${2:args}) { ${0} }",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "before": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef78bdec108c7c1e4f981ed179f6a347": {
      "content": "%__MODULE__{\n\t${1:key_name}: ${2:value}\n}",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "%M": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef7ee59d936626732f59635b93fe03db": {
      "content": "${1:obj}.css('${2:attribute}', '${3:value}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "css": true
      },
      "source": "snippets/javascript"
    },
    "ef7f6ba6774cd3c99c3dfbbd626722f6": {
      "content": "afterAll(() => {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine-arrow",
      "grammar": "snu",
      "label": "after all (js)",
      "matches": {
        "afta": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ef7fd8e8f89eebc1a317af93f9a7e47f": {
      "content": "protocol ${1:name} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "protocol": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ef855326e7d382328b66aa03f0ea0648": {
      "content": "{% macro ${1}(${2}) %}\n\t${0}\n{% endmacro %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig macro",
      "matches": {
        "macro": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef89eb942932da19e5932c4a63c8563a": {
      "content": "form_hidden(\"${1:name}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_hidden": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef8d127b7c021d32ec525edcd076d76e": {
      "content": "if (${1}) {\n    ${2:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ef920f35f22cd90a4b6627def22501ed": {
      "content": "with ${1:item} <- ${2:items} do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wi": true
      },
      "source": "vim-snippets/snippets"
    },
    "ef946b9aff2f95775b0c24847536c1f9": {
      "content": "while (${1}) {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "wh",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ef9bed851eef56089633b98ccf737b68": {
      "content": "_.mapValues(${object}, ${iteratee})",
      "doc": "var users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n};\n\n_.mapValues(users, function(o) { return o.age; });\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n\n// The `_.property` iteratee shorthand.\n_.mapValues(users, 'age');\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n\nCreates an object with the same keys as `object` and values generated\nby running each own enumerable string keyed property of `object` thru\n`iteratee`. The iteratee is invoked with three arguments:\n(value, key, object).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-mapvalues",
      "matches": {
        "lodash mapvalues": true
      },
      "source": "javascript/lodash"
    },
    "efa0539a875265b880d3e7ca5b9867a2": {
      "content": "| strip",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "strip": true
      },
      "source": "vim-snippets/snippets"
    },
    "efa2ba6c64c13e46a1e46d8f45db87d5": {
      "content": "${1:obj}.blur(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blur": true
      },
      "source": "snippets/javascript"
    },
    "efa388c796ae14fd4882d9883f5c3fe3": {
      "content": "task ${1} is\n\tentry ${0}\nend $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "task": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "efa49b138ac0f57f5ea5452a94aae412": {
      "content": "place-content center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "efa5b27ae9064ba7d974c547854dd9fb": {
      "content": "_.countBy(${collection}, ${iteratee})",
      "doc": "_.countBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': 1, '6': 2 }\n\n// The `_.property` iteratee shorthand.\n_.countBy(['one', 'two', 'three'], 'length');\n// => { '3': 2, '5': 1 }\n\nCreates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the number of times the key was returned by `iteratee`. The\niteratee is invoked with one argument: (value).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-countby",
      "matches": {
        "lodash countby": true
      },
      "source": "javascript/lodash"
    },
    "efa7ccd733d78cb712f4d6a19651acfe": {
      "content": "validates_confirmation_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:should match confirmation}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_confirmation_of (vc)",
      "matches": {
        "vc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "efa8695f6a2a7a2d440fb01dcc69c679": {
      "content": "it { should validate_uniqueness_of :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "isvu": true
      },
      "source": "vim-snippets/snippets"
    },
    "efb51bad2424d0ae15fc2200a02f6917": {
      "content": "foreach_reverse(${1:i}, ${2:elem}; ${3:range}) {\n\t${0}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "feri": true
      },
      "source": "vim-snippets/snippets"
    },
    "efb54d1cbf28c631bddf4fbfb644c3d0": {
      "content": "?assertNotEqual(${1}, ${0})",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asneq": true
      },
      "source": "vim-snippets/snippets"
    },
    "efb749cd80c48ad94355146ae68b1356": {
      "content": "mixed.nullable()",
      "doc": "mixed.nullable(isNullable: boolean = true): Schema\n\nIndicates that null is a valid value for the schema. Without nullable()\nnull is treated as a different type and will fail isType() checks.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-nullable",
      "matches": {
        "yup mixed nullable": true
      },
      "source": "javascript/yup"
    },
    "efb7920890bc3658e9792d3d4d2aca44": {
      "content": "switch ${1:var} {\ncase ${2:value1}:\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "switch x { ... }",
      "matches": {
        "switch": true
      },
      "source": "gosnippets/snippets"
    },
    "efcdc6c03c50e672f16b08acff72614a": {
      "content": "border-right-image: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdri:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "efcee9b8f425f4fbcd9d88404f61ed05": {
      "content": "text-emphasis circle",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "te:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "efd1a72e0dded99970dbaec091faa9fa": {
      "content": "List<${1:Object}> ${2:list} = new ArrayList<$1>();${0}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d.al": true
      },
      "source": "vim-snippets/snippets"
    },
    "efe00f641cf33800ff304aafbd77387d": {
      "content": "describe('${1:description}', function() {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "Describe (js)",
      "matches": {
        "des": true
      },
      "source": "vim-snippets/snippets"
    },
    "efe0e01feb79313aa4745ed6eda650b7": {
      "content": "$.trim('${1:string}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eltrim": true
      },
      "source": "snippets/javascript"
    },
    "efe78c5c09379b11b16d17f84d41a837": {
      "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}\n\n",
      "doc": "Creates a React Functional Component with ES7 module system with PropTypes",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-functional-component-with-proptypes",
      "matches": {
        "react component functional proptypes": true,
        "rfcp": true
      },
      "source": "javascript/react"
    },
    "efecf1da623939871af76833899f1c71": {
      "content": "@param {${1:Type}} ${2:varname} ${3:Description}",
      "doc": "",
      "filetype": "javascript-jsdoc",
      "grammar": "snu",
      "label": "@param {Type} varname Description",
      "matches": {
        "@p": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "efeda0e5dcd048a901e31c79cae63018": {
      "content": "for ${1:name} from ${2:start} to ${3:finish}\n\t${4}",
      "doc": "",
      "filetype": "ls",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forr": true
      },
      "source": "vim-snippets/snippets"
    },
    "efedc77501633af91821f21044d25a40": {
      "content": "+ (void)initialize\n{\n\t[[NSUserDefaults standardUserDefaults] registerDefaults:[NSDictionary dictionaryWithObjectsAndKeys:\n\t\t${0}@\"value\", @\"key\",\n\t\tnil]];\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "MethodInitialize",
      "matches": {
        "mi": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "eff291439e5a6ab0c1ce431e83c4910e": {
      "content": ":- initialization main.\nmain :-\n  current_prolog_flag(argv, Args),\n  writeln(Args),\n  halt.",
      "doc": "",
      "filetype": "prolog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "main": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f002112afdcc6210d281e067de99c63f": {
      "content": "PropTypes.number,",
      "doc": "Number prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeNumber",
      "matches": {
        "ptn": true
      },
      "source": "vscode-react/snippets"
    },
    "f002fa43f0767394faa9a05532657eba": {
      "content": "if ${1}\n\t${0}\nend",
      "doc": "",
      "filetype": "matlab",
      "grammar": "snu",
      "label": "if",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "f007767a4f4bfd7f86f68a7ed828ad9d": {
      "content": "create table ${1:table} (\n\t${0:columns}\n);",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tbl": true
      },
      "source": "vim-snippets/snippets"
    },
    "f009c8ec2129f1f3e73ead930e16c92f": {
      "content": "border-top-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "border-top-style: style (border)",
      "matches": {
        "border": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f011d906e86a4cd8459380ca45e2894a": {
      "content": "${1:obj}.val('${2:text}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "val": true
      },
      "source": "snippets/javascript"
    },
    "f01fa0bca14aed856b860d91435e1067": {
      "content": "View::render('${1:view}', $${2:array});",
      "doc": "",
      "filetype": "simplemvcf",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sm_render": true
      },
      "source": "vim-snippets/snippets"
    },
    "f020258e9c324a8cc13ea2c2ea5bc319": {
      "content": "grid-template-rows ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gtr": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0225674115acd40d19b4c6b16740aed": {
      "content": "(+ ${1}\n\t${0})",
      "doc": "",
      "filetype": "scheme",
      "grammar": "snu",
      "label": "",
      "matches": {
        "+": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0242ba8aaa6d9a24e3519903a40178e": {
      "content": "namespace current",
      "doc": "",
      "filetype": "tcl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nsc": true
      },
      "source": "vim-snippets/snippets"
    },
    "f031eb16a8720da5077d592520f27653": {
      "content": "\\\\sum_{{$1}} {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "summation",
      "matches": {
        "summ": true
      },
      "source": "vim-snippets/snippets"
    },
    "f03d4a224d2f1e2b0fb842f3dd45680e": {
      "content": "Run Keyword If Test Passed    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword If Test Passed",
      "matches": {
        "rkitp": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f040db9ab13765b28bf4743b79440d4e": {
      "content": "(defrecord ${1:record} [${2:constructor-args}]\n  ${3:protocol} (${3:method} [${5}] ${6}))",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defrecord": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f042c011e5453d2144ce3eac446f00c3": {
      "content": "<select [(ngModel)]=\"${1:model}\">\n\t<option *ngFor=\"let ${2:item} of ${3:list}\" [value]=\"${2:item}\">{{${2:item}}}</option>\n</select>",
      "doc": "<select> control with ngModel",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngSelect",
      "matches": {
        "a-select": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "f04df32f7039d64d694cb2e75836a881": {
      "content": "expect(${1:target}).toBeVisible();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to be visible (js)",
      "matches": {
        "ev": true
      },
      "source": "vim-snippets/snippets"
    },
    "f055adeebf628e6fc053792957c6afe4": {
      "content": "border-radius: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrz": true
      },
      "source": "vim-snippets/snippets"
    },
    "f05c68386d083649cde07dd38789cdb0": {
      "content": "thread::spawn(${1:move }|| {\n\t${0}\n});",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "spawn a thread",
      "matches": {
        "spawn": true
      },
      "source": "vim-snippets/snippets"
    },
    "f05d8ad9adc0c6dfefe778ba96abcc98": {
      "content": "border-image: url('${1}') ${2:0} ${3:0} ${4:0} ${5:0} ${6:stretch} ${0:stretch}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdi": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0600b5b739510ec773a8c4f54e68973": {
      "content": "echo CHtml::tag('${1:tag}',array('${2:optionName}'=>${3:optionValue}),${4:false},${0:true});",
      "doc": "",
      "filetype": "yii-chtml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yht": true
      },
      "source": "vim-snippets/snippets"
    },
    "f06269fd9eaad48829718fd420c618c8": {
      "content": "_.sortedUniqBy(${array}, ${iteratee})",
      "doc": "_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n// => [1.1, 2.3]\n\nThis method is like `_.uniqBy` except that it's designed and optimized\nfor sorted arrays.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-sorteduniqby",
      "matches": {
        "lodash sorteduniqby": true
      },
      "source": "javascript/lodash"
    },
    "f06c2eca85d78df87849593d3827ccf5": {
      "content": "{% autoescape ${1:off} %}\n\t${0}\n{% endautoescape %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "autoescape": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0702efb7cb935e7a124d7fb09e3c565": {
      "content": "id=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#": true
      },
      "source": "vim-snippets/snippets"
    },
    "f072db6923e14f5ec76392ea2031e877": {
      "content": "justify-self stretch",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "js:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "f073ab35abca744467a56b5d23257c8a": {
      "content": "if ${1:condition}\n\t${0:# body...}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "If",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f078aa534cb9b53bb9672f4ae53ca737": {
      "content": "${1:deferred}.rejectWith(${2:this}, ${3:args})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Drejw": true
      },
      "source": "snippets/javascript"
    },
    "f081a598c917e70b0b1482a8bc708f25": {
      "content": "@serial ${0:#:description}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "serial": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f0859ad15ec33f4c24582d73c5427e8f": {
      "content": "export const ${1:exportVariable} = ${2:localVariable};\n",
      "doc": "Export named variable in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "exportNamedVariable",
      "matches": {
        "env": true
      },
      "source": "vscode-javascript/snippets"
    },
    "f089be62c383f2297345bc0ca142b4d4": {
      "content": "padding: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p": true
      },
      "source": "vim-snippets/snippets"
    },
    "f08e164ae8eded2f86cb682fc84581c8": {
      "content": "font-emphasize-position: before;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "femp:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0a10b9ac02d4d540ced26850e811d11": {
      "content": "import ${1} from '${2:$1}';",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "import xyz from 'xyz'",
      "matches": {
        "im": true
      },
      "source": "snippets/javascript"
    },
    "f0aeeff017d72e40cb03177182e51f83": {
      "content": "background-origin: content-box;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo:cb": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0b4e4c56b62948bf1a512bf437deb84": {
      "content": "<!DOCTYPE html\nPUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "doctypetransitional": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f0bdb15cf035bfbe7c4f6aed538604c8": {
      "content": "| url_encode",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "url_encode": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0ca7e204a12d8ffef8ba817aa951293": {
      "content": "while (${1:/* condition */}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "(condition) { ... }",
      "matches": {
        "wh": true
      },
      "source": "snippets/javascript"
    },
    "f0cb81a9962aa8155600c32df0994920": {
      "content": "float left",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fl:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0d2b82d16e3a7d063f7ec7b9232130b": {
      "content": "panic(\"${0:msg}\")",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "panic",
      "matches": {
        "pn": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0d47cd5c491a01b6a6626f9e9bf6ad1": {
      "content": "parser.add_argument(\"${0:arg}\", \"${1:long_arg}\", action=\"${2:store_true}\", default=${3:False}, help=\"${4:Help text}\")",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "addaarg": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0d94032e060cecf3a98520249f5160a": {
      "content": "it('${1:description}', inject(function($2) {\n\t$0\n}));",
      "doc": "",
      "filetype": "javascript-angular",
      "grammar": "snu",
      "label": "it (js, inject)",
      "matches": {
        "iti": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f0dfe437ca388de9baba5d16ccae52aa": {
      "content": "reverse(${0:array});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reverse": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0ea44588e940b9959500614d85ff629": {
      "content": "{\n\t\"type\": \"textarea\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"default\": \"${3}\",\n\t\"info\": \"${4}\",\n\t\"placeholder\": \"${0}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_textarea": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0ef126e6a479a32b2209a70872be9a6": {
      "content": "t.references :${1:taggable}${2:, polymorphic: ${3:{ default: '${4:Photo}' }}}\nt.$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "t.references (tcr)",
      "matches": {
        "t.": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f0f548811246db853d75f272b6de7f0d": {
      "content": "$this->${1:method}()->shouldNotEndWith(${2:'string'});",
      "doc": "",
      "filetype": "php-phpspec",
      "grammar": "snu",
      "label": "$this->XYZ()->shouldNotEndWith('string')",
      "matches": {
        "snend": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f0f6a809f5ede7dcca7536328b35139d": {
      "content": "<col>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "col": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0f730294481f65051c9f761fe860ea5": {
      "content": "DEFINE INPUT PARAMETER ${1:ParamName} AS ${0}.",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0f80afd00d8f71606e509efb40e900e": {
      "content": "${1}:\nwhile ${2} loop\n\t${0:${VISUAL}}\nend loop $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "named while",
      "matches": {
        "nwh": true
      },
      "source": "vim-snippets/snippets"
    },
    "f0ff0fe4393edf2bddd1184fee7658fc": {
      "content": "<blockquote>${1}</blockquote>",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "blockquote": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f0ffcb74eae718a6b45c948414cfb7df": {
      "content": "before_validation :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbv": true
      },
      "source": "vim-snippets/snippets"
    },
    "f1009245af2eacc18cd0efe7dc32ca8d": {
      "content": "ref=\"${1:reference}\"$0",
      "doc": "Expects: string. ref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-ref",
      "matches": {
        "ref": true,
        "vue ref": true
      },
      "source": "javascript/vue"
    },
    "f1098461ccf85fd1beb669033c124367": {
      "content": "${1:FIELDNAME} = models.DecimalField(max_digits=${2:10}, decimal_places=${3:2})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "DecimalField",
      "matches": {
        "mdecimal": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f10e2cbd64a62cddcc0a613f7030b228": {
      "content": "(filter ${1} ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filter": true
      },
      "source": "vim-snippets/snippets"
    },
    "f10e47b1a649f9aff1a39fa3625a8baf": {
      "content": "map(${1:value}, ${2:low1}, ${4:high1}, ${5:low2}, ${0:high2});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/snippets"
    },
    "f1195340e98962828d8f7180a66292a6": {
      "content": "list-style-type: decimal",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:dc": true
      },
      "source": "vim-snippets/snippets"
    },
    "f126dc085b82e344b20cdba16975537b": {
      "content": "each_with_object(${1:init}) { |${2:e}, ${3:var}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eawo": true
      },
      "source": "vim-snippets/snippets"
    },
    "f1337032a475b16f6169f3ae34d0724c": {
      "content": "${1:FIELDNAME} = forms.IPAddressField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "IPAddressField",
      "matches": {
        "fip": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f134932bfba9c7a7d4dafaf353504798": {
      "content": "${1:obj}.mouseup (${2:e}) ->\n\t${0:// event handler}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mup": true
      },
      "source": "snippets/coffee"
    },
    "f135318958291055f8823f57f672236d": {
      "content": "'''\n${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "horizontal rule",
      "matches": {
        "hrule": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f1359fcd64ff97afa445622a28c5a032": {
      "content": "{% for ${1:#:value} in ${2:#:list} %}\n\t${0:TARGET}\n{% endfor %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% for ... in ... %} ... {% endfor %}",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f14783b82a1fd9978c9a55227ba6284c": {
      "content": "opacity: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "op": true
      },
      "source": "vim-snippets/snippets"
    },
    "f14b4de10c682d6a6676d23e0684e10e": {
      "content": "grid-column-end: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gce": true
      },
      "source": "vim-snippets/snippets"
    },
    "f15899088dd62297154efaf5f46eedd3": {
      "content": "align-content: stretch;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "f15e4089f68a635782e6454438d590cd": {
      "content": "let ${1:s:M} = ${2:s:V}.import('${3:#:module_name}')",
      "doc": "",
      "filetype": "vital",
      "grammar": "snu",
      "label": "let s:M = s:V.import('...')",
      "matches": {
        "vital_import": true
      },
      "source": "neosnippets/vim"
    },
    "f1679a439857225f39671da527564414": {
      "content": "leave-active-class=\"$1\"$0",
      "doc": "leave-active-class=''. Expects: string.",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-leave-active-class",
      "matches": {
        "leaveactiveclass": true,
        "vue leave-active-class": true
      },
      "source": "javascript/vue"
    },
    "f16833b2119439567c12d04ff2ab1a0d": {
      "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})\n{\n\t${7}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defun2": true
      },
      "source": "vim-snippets/snippets"
    },
    "f16e4829952cae4917fdbcf0605146f5": {
      "content": "_.pull(${array}, ${values})",
      "doc": "var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n\n_.pull(array, 'a', 'c');\nconsole.log(array);\n// => ['b', 'b']\n\nRemoves all given values from `array` using\n[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\nfor equality comparisons.\n\n**Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\nto remove elements from an array by predicate.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-pull",
      "matches": {
        "lodash pull": true
      },
      "source": "javascript/lodash"
    },
    "f17870c6ff90d32df40b44871d80bf81": {
      "content": "\\\\index{${1:index}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\index",
      "matches": {
        "index": true
      },
      "source": "vim-snippets/snippets"
    },
    "f186893ee2346a5393b4bcdb6f668c54": {
      "content": "mattr_accessor :${0:attr_names}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "mattr_accessor",
      "matches": {
        "mrw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f189528ac512a423d88a979064e6084b": {
      "content": "border-left-style: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bls": true,
        "border-left-style": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f18b9f144be7148914aad75b31b0462c": {
      "content": "$_REQUEST['${1:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "R": true
      },
      "source": "vim-snippets/snippets"
    },
    "f18f0ae1948c1cb16faa7bcb2cf28548": {
      "content": "background-repeat: no-repeat",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "f194ebd4ebb66dd2bcfc2b198091693f": {
      "content": "type(${1}), dimension(${2::}), allcatable :: ${3}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "type dimension",
      "matches": {
        "tyd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f19a0530495503d6f15040b784238d9e": {
      "content": "import { NgModule } from '@angular/core';\nimport { BrowserModule  } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\n\nimport { ${1:App}Component } from './${1:app}.component';\n\n@NgModule({\n\timports: [\n\t\tBrowserModule,\n\t\tHttpModule,\n\t],\n\tdeclarations: [${1:App}Component],\n\tbootstrap: [${1:App}Component],\n})\nexport class ${1:App}Module { }\n$0",
      "doc": "Angular Root Module",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Root Module",
      "matches": {
        "a-module-root": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "f19a949bfa3dfe4988450dc2168e5e82": {
      "content": "when {\n\tallOf '${1:allOf}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whenallOf": true
      },
      "source": "vim-snippets/snippets"
    },
    "f1a57a57f50f7d9db06e2cbe7f2dc351": {
      "content": "function ${1:name}($2) result($3)\n\t${0}\nend function $1",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "func": true
      },
      "source": "vim-snippets/snippets"
    },
    "f1b07a190e27d29a2b3dce1dad3d7676": {
      "content": "asyncData ({isDev, route, store, env, params, query, req, res, redirect, error}) {\n\treturn { ${1:data} }\n\n},",
      "doc": "Fetch and pre-render data on the server without using a store. The result from asyncData will be merged with data",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-async-data",
      "matches": {
        "nuxt asyncdata": true
      },
      "source": "javascript/nuxt"
    },
    "f1b3a9d19931232a8293bf2898a020d7": {
      "content": "proc ${1:#:name}(${2}) =\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "procg": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f1b3ebf0ba7bdbdd3e446f8217443e9b": {
      "content": "{% comment %}\n\t$1\n{% endcomment %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "comment": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f1b8e685c7fa0161f98eaf38b677342c": {
      "content": "border-top-left-image: url('${0}')",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtli": true
      },
      "source": "vim-snippets/snippets"
    },
    "f1c773b9bf20357997cd9b17e007d6d4": {
      "content": "interface name {\n\tfunction method(${1}):${0:returntype};\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "interface": true
      },
      "source": "vim-snippets/snippets"
    },
    "f1c7d51ab459c4a88c684e476f5b5998": {
      "content": "<#-- ${0:comment${VISUAL}} -->",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<#-- comment -->",
      "matches": {
        "com": true
      },
      "source": "vim-snippets/snippets"
    },
    "f1d3ec5b10e3863bca3e682440d5030e": {
      "content": "allow(${1:object}).to ${0}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "allow": true
      },
      "source": "vim-snippets/snippets"
    },
    "f1d8b4c2ab695da924995e0e6705d32c": {
      "content": "PropTypes.element,",
      "doc": "React element prop type",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeElement",
      "matches": {
        "ptel": true
      },
      "source": "vscode-react/snippets"
    },
    "f1dca6212cd8977c49ec8fa974a63500": {
      "content": "form_textarea(\"${1:name}\", \"${2:value}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_textarea": true
      },
      "source": "vim-snippets/snippets"
    },
    "f1e179833b1faae6cc0b2d47b690fbb4": {
      "content": "const ${1:state} = useSelector(state => state.${1:state})",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useSelector",
      "matches": {
        "useSelector": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "f1e1ffd1d7af7f11d40778cbf559b254": {
      "content": "\\${${1:val}}=    Evaluate    ${2:${x} - 10}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Evaluate",
      "matches": {
        "eval": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f1fe0ce6abceaa0ca88a8fd9eb543735": {
      "content": "logger.error { '${1:message}' }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "loge": true
      },
      "source": "vim-snippets/snippets"
    },
    "f20bd02b8942ea7a18818ddfc96ddea8": {
      "content": "Yii::app()->clientScript->registerScript('${1:id}', '${2}', CClientScript::POS_${0:READY});",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "yregs": true
      },
      "source": "vim-snippets/snippets"
    },
    "f21acffac343206543648eed8d1334a2": {
      "content": "\\draw[${1}] ${2};${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\draw": true,
        "draw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f2200780b0e55fa3d2015b2fa4b65890": {
      "content": "require_relative '${1}'",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "reqr": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2220d0d904b09b38cb1d6b2c1f6edca": {
      "content": ":nth-child($0)",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":nc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f227fb164a1190e8385621d777e5e590": {
      "content": "font-emphasize-style: accent",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fems:ac": true
      },
      "source": "vim-snippets/snippets"
    },
    "f22f08040fbaf04d0b13a19c6aec0e8a": {
      "content": "false",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "false",
      "matches": {
        "f": true
      },
      "source": "vim-snippets/snippets"
    },
    "f22f93c4955be045b958387b0b375b03": {
      "content": "caption-side: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cps": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2304c1d4eb73e25f76e8f5f2ac2822b": {
      "content": "${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ter": true
      },
      "source": "snippets/javascript"
    },
    "f231737bba5c9c5148a1ca14f819c204": {
      "content": "{% now \"${0:jS F Y H:i}\" %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "now": true
      },
      "source": "vim-snippets/snippets"
    },
    "f236a19ff41418f3cb91b778db456980": {
      "content": "for ($${1:i}=${2:0}; $$1 < ${3}; $$1++) {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "for": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f2382b177a6797ca3a73eb7114b4f736": {
      "content": "place-self: ${1:stretch};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps": true
      },
      "source": "vim-snippets/snippets"
    },
    "f23926aed847d9c1bc78f531a88c697b": {
      "content": "render file: '${1:filepath}', use_full_path: ${0:false}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rfu": true
      },
      "source": "vim-snippets/snippets"
    },
    "f23bf35af9995783855e958e25c9482c": {
      "content": "bezier(${1:x1}, ${2:y1}, ${3:cx1}, ${4:cy1}, ${5:cx2}, ${6:cy2}, ${7:x2}, ${0:y2});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bezier": true
      },
      "source": "vim-snippets/snippets"
    },
    "f25130a400a8ffbe011be1fc6d2bb2e2": {
      "content": "function! s:suite.${1}()\n  ${2:TARGET}\n  call s:assert.equal(${3:expected}, ${4:actual})\nendfunction",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "suite": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f26f2670cc9a67c4a993eaeba94a4a88": {
      "content": "srand(time(NULL));",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "seed_rand": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f279fa55ea8fb98488fcd4b62939191f": {
      "content": "multi ${1:function_name}(${2:Str $var}) {\n\t${3}\n}",
      "doc": "",
      "filetype": "perl6",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mul": true
      },
      "source": "vim-snippets/snippets"
    },
    "f281f5a06e16c574461a0f145c0de2f5": {
      "content": "text-justify inter-cluster",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tj:ic": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2882e6fd5a9c31a4003748c462508fc": {
      "content": "(let/cc here (set! ${1} here) ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "letcc": true
      },
      "source": "vim-snippets/snippets"
    },
    "f28b44ebbbcf8f09d2954a81c228f104": {
      "content": "improvement(${1:scope}): ${2:title}\n\n${0:${VISUAL}}",
      "doc": "",
      "filetype": "gitcommit",
      "grammar": "snu",
      "label": "improvement conventional commit",
      "matches": {
        "improvement": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f28c5c4e0ba3f2577b9153e1124bcb28": {
      "content": "_.eachRight(${collection}, ${iteratee})",
      "doc": "_.forEachRight([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `2` then `1`.\n\nThis method is like `_.forEach` except that it iterates over elements of\n`collection` from right to left.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-eachright",
      "matches": {
        "lodash eachright": true
      },
      "source": "javascript/lodash"
    },
    "f29c7ae8a3c4b7a2b0231d09b3cf1f36": {
      "content": "render file: '${0:filepath}'",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rf": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2afb86eaaf181429ca94335b9148118": {
      "content": "subroutine ${1:name}($2)\n\t${0}\nend subroutine $1",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sub": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2b379799b7777e9357c20e1b5ad0a47": {
      "content": "_.isBuffer(${value})",
      "doc": "_.isBuffer(new Buffer(2));\n// => true\n\n_.isBuffer(new Uint8Array(2));\n// => false\n\nChecks if `value` is a buffer.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isbuffer",
      "matches": {
        "lodash isbuffer": true
      },
      "source": "javascript/lodash"
    },
    "f2bd1855fc666b9fde16d786a4539f03": {
      "content": "<caption>${0}</caption>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "caption": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2c31c9bd9c5db2e274e37dd40c853a0": {
      "content": "unicode-bidi: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ub": true,
        "unicode-bidi": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f2c4932d8b8ef2e18822304885a2c78e": {
      "content": "$${1:variable}: ${0:value};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2d7ad04ee84f48e19ff28bc52557ac0": {
      "content": "margin-right: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mr": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2e529db2113a97096c858c0770b0ca6": {
      "content": "{% capture ${1:#:var} %}${2:#:TARGET}{% endcapture %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "capture": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f2f1eafb6e0a195807502dace3f69870": {
      "content": "step(${1:2}) { |${2:n}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ste": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2f6d012821eae87499b2017d4405442": {
      "content": "<label for=\"${2:$1}\">${1}</label>\n<select name=\"${3:$2}\" id=\"${4:$2}\">\n\t<option value=\"${5}\">${0:$5}</option>\n</select>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "label:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2fafaa25157599e38581c7e337d8ba2": {
      "content": "${1:void} ${2:function_name}(${3:Type} ${4:Parameter})\n{\n\t${5}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defun1": true
      },
      "source": "vim-snippets/snippets"
    },
    "f2ff3650e32004ca20dd30085e91aa45": {
      "content": "watch: {\n\t${1:data}(${2:newValue}, ${3:oldValue}) {\n\t\t${0}\n\t}\n},",
      "doc": "vue watcher",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-watchers",
      "matches": {
        "vue watchers": true,
        "vwatcher": true
      },
      "source": "javascript/vue"
    },
    "f30568522320e980aeb65c4f517ccbdb": {
      "content": "<value>${0:#:description}</value>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<value></value>",
      "matches": {
        "value": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f311a913f98a795e4b0f00e4f057a063": {
      "content": "${1:fn} :: ${2:a} -> ${3:a}\n$1 ${4} = ${0:undefined}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn1": true
      },
      "source": "vim-snippets/snippets"
    },
    "f31333d40c99d1b954f49fcacb58cfd0": {
      "content": "<left>{\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "kp19pp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "left": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f31e0d8d15b96da39370ffab5a169997": {
      "content": "if ${1:true} then\n\t${0:TARGET}\nend if",
      "doc": "",
      "filetype": "applescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f3266cad967b91be9d6894df12c8db34": {
      "content": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1:${TM_FILENAME_BASE}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n};\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\t$0\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
      "doc": "Creates a stateless React component with PropTypes and ES6 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactStatelessProps",
      "matches": {
        "rscp": true
      },
      "source": "vscode-react/snippets"
    },
    "f32d287081b404a5d8be82c3f9505194": {
      "content": "pub async fn ${1:function_name}(${2})${3} {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Async function definition",
      "matches": {
        "pafn": true
      },
      "source": "vim-snippets/snippets"
    },
    "f335f61c35a3be6d06ee9d5a43d0571f": {
      "content": "border-fit: scale",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:sc": true
      },
      "source": "vim-snippets/snippets"
    },
    "f33636bfa8b92aed6e696cfb5140314b": {
      "content": "append(${1:slice}, ${0:value})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "append",
      "matches": {
        "ap": true
      },
      "source": "vim-snippets/snippets"
    },
    "f33ccd3bebae836edb230640256980ba": {
      "content": "${1:obj}.show('${2:slow/400/fast}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "show": true
      },
      "source": "snippets/coffee"
    },
    "f344e4383c69e755ba8fe3c78a90115e": {
      "content": "assert_same ${1:expected}, ${2:actual}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "assert_same(..)",
      "matches": {
        "ass": true
      },
      "source": "vim-snippets/snippets"
    },
    "f34b1ea3202fcc91017c7ce9e3d0fdbe": {
      "content": "${1:map}.resources :${0:resource}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maprs": true
      },
      "source": "vim-snippets/snippets"
    },
    "f34cedc5f7a7545fa97b7da66e8ea9a2": {
      "content": "seq(${1:from}, ${2:to}, ${3:by})",
      "doc": "Sequence (from,to,by)",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "seq",
      "matches": {
        "seq": true
      },
      "source": "vscode-R/snippets"
    },
    "f34db69237f040d173459c593049c16d": {
      "content": "${fn:containsIgnoreCase(${1:string}, ${0:substr})}",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "contains:i": true
      },
      "source": "vim-snippets/snippets"
    },
    "f3590bf4cf119d8b29763f9177490d2c": {
      "content": "${1:obj}.size()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "size": true
      },
      "source": "snippets/javascript"
    },
    "f361eaf8ef383509abe6943880e85622": {
      "content": "{% sandbox %}\n\t${0:TARGET}\n{% endsandbox %}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "{% sandbox %} ... {% endsandbox %}",
      "matches": {
        "sandbox": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f36351465f4b7220573a72e96b1cb083": {
      "content": "<a class=\"${1}\" href=\"${2:#}\">${0:$1}</a>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "a.": true
      },
      "source": "vim-snippets/snippets"
    },
    "f36b7def74d5c97f762a8ed3639e1b3e": {
      "content": "border-spacing ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdsp": true
      },
      "source": "vim-snippets/snippets"
    },
    "f37d716036432a10f0e71ca5a328bc82": {
      "content": "<?php if (${1:#:condition}): ?>\n${0:TARGET}\n<?php endif; ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f37de1e185f9763b97307868c9a92b69": {
      "content": "\\\\vec{{$1}} {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "vector",
      "matches": {
        "vec": true
      },
      "source": "vim-snippets/snippets"
    },
    "f3857299682ddc61360baa478941b85d": {
      "content": "if (${1:condition}) {\n\t${0}\n} else {\n\t\n}",
      "doc": "if/else statement",
      "filetype": "base",
      "grammar": "lsp",
      "label": "if-else-statement",
      "matches": {
        "base if else": true
      },
      "source": "javascript/base"
    },
    "f38be2e1511ee2794d953e3b501a90cb": {
      "content": "shouldComponentUpdate(nextProps, nextState) {\n\t${1}\n}",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "shouldComponentUpdate",
      "matches": {
        "scu": true
      },
      "source": "snippets/javascript"
    },
    "f38e15a78e3313f0767a99465690a1b4": {
      "content": "${1:obj}.parents('${2:selector expression}')",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "parents": true
      },
      "source": "snippets/javascript"
    },
    "f38f45332fe265fc4d05beb142a756d4": {
      "content": "\"${0:key}\": null,",
      "doc": "",
      "filetype": "json",
      "grammar": "snu",
      "label": "Null",
      "matches": {
        "null": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f3901eb4657fd48ba1138d1d2437379c": {
      "content": "logger.fatal { \"${1:message}\" }$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "logger.fatal",
      "matches": {
        "logf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f392453dfce2772756e20eb02afffd96": {
      "content": "_.isRegExp(${value})",
      "doc": "_.isRegExp(/abc/);\n// => true\n\n_.isRegExp('/abc/');\n// => false\n\nChecks if `value` is classified as a `RegExp` object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isregexp",
      "matches": {
        "lodash isregexp": true
      },
      "source": "javascript/lodash"
    },
    "f396780fe80e1c07cd92d9f2b01386ea": {
      "content": "${1:callbacks}.fired()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "Cfired": true
      },
      "source": "snippets/coffee"
    },
    "f3b02a8497c93110467c8bdf411fb628": {
      "content": "#include <${1}.h>",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc": true
      },
      "source": "vim-snippets/snippets"
    },
    "f3b0be66a2e668b19a5cf8cea60ca139": {
      "content": "===== ${1} =====\n${2}",
      "doc": "",
      "filetype": "mediawiki",
      "grammar": "snu",
      "label": "",
      "matches": {
        "=====": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f3b2817de60dc0918e131cf3620550da": {
      "content": "def ${1:name}(${2:arg})(${3:arg}) = ${0:}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "crdef": true
      },
      "source": "vim-snippets/snippets"
    },
    "f3c1a8b1f40a54a802136f748e45e674": {
      "content": "import PropTypes from 'prop-types'\n\nconst ${1:${TM_FILENAME_BASE}} = props => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\n${1:${TM_FILENAME_BASE}}.propTypes = {\n\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React 17 Arrow Function Component with ES7 module system with PropTypes",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "_reactArrowFunctionComponentWithPropTypes",
      "matches": {
        "_rafcp": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "f3c6a97bbf11fade0ff33a663b21efd2": {
      "content": "const ${1:instance} = axios.create({\n\tbaseURL: '${2:uri}',\n\ttimeout: $3,\n\theaders: {'${4:key}': '${5:value}'}",
      "doc": "Create an Axios instance for requests",
      "filetype": "axios",
      "grammar": "lsp",
      "label": "axios-instance",
      "matches": {
        "axios instance": true
      },
      "source": "javascript/axios"
    },
    "f3c7584de1a728819729d5e35fb6cb0e": {
      "content": "text-indent: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "text-indent": true,
        "ti": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f3c9e69a26a8fb910ed09a3c2d22ac3d": {
      "content": "${1:$foo}->get${0:Bar}();",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$g": true
      },
      "source": "vim-snippets/snippets"
    },
    "f3d20d601d9718498627388bed140a3b": {
      "content": "this(${1:/*args*/})\n{\n\t${VISUAL}$2\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "ctor (this)",
      "matches": {
        "this": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f3d4989f59cb51b9caea0d12fa1532e6": {
      "content": "${1:#:method_name}: function(${2:#:attribute}) {\n  ${0:TARGET}\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":f": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f3dcab214e54cef843fc3ff0e4bc4ec0": {
      "content": "flex-grow: ${0:0};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxg": true
      },
      "source": "vim-snippets/snippets"
    },
    "f3e802d308b25e7759c8c66882c93f1e": {
      "content": "img(:src=\"'/path/to/images/' + ${1:fileName}\" alt=\"${2:altText}\")",
      "doc": "image source binding",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Image Source Binding",
      "matches": {
        "vsrc": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "f3ec0e1c463f59a2f0180f141719a448": {
      "content": "switch ${1:var} {\ncase ${2:value1}:\n\t${3}\ncase ${4:value2}:\n\t${5}\ndefault:\n\t${0}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "switch",
      "matches": {
        "sw": true
      },
      "source": "vim-snippets/snippets"
    },
    "f3f2ca0f192245fc5097e0d8cda8c72a": {
      "content": "word-wrap: unrestricted",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:u": true
      },
      "source": "vim-snippets/snippets"
    },
    "f3fabf3f14479ec4a27ad3f36ed9196b": {
      "content": "return ${0}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "return",
      "matches": {
        "rt": true
      },
      "source": "vim-snippets/snippets"
    },
    "f401c612663fa924a282202bb1fd0a2b": {
      "content": "background-origin content-box",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgo:cb": true
      },
      "source": "vim-snippets/snippets"
    },
    "f4031d8d07c3e4b76cca0d1b0b4cdde4": {
      "content": "grid-auto-flow: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf": true
      },
      "source": "vim-snippets/snippets"
    },
    "f40bfd79c8fdf39e36a07d53ff407aa5": {
      "content": "const ${controls} = useAnimation()",
      "doc": "useAnimation()\nuseAnimation hook can be used to create a set of imperative AnimationControls with a start and stop method.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-animation",
      "matches": {
        "framer-motion use-animation": true,
        "use-animation": true
      },
      "source": "javascript/framer-motion"
    },
    "f40deeaa3de6d7c65474dfbc58fa3e26": {
      "content": "font-effect: engrave",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:eg": true
      },
      "source": "vim-snippets/snippets"
    },
    "f419a55cfe8ed1c83e4c34d825e9672d": {
      "content": "$this->assertNotNull(${1});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertNotNull($a)",
      "matches": {
        "asnnu": true
      },
      "source": "vim-snippets/snippets"
    },
    "f4253b258d5254ffa08c6dff8b5d2d80": {
      "content": "<input class=\"${1}\" type=\"${2:text/submit/hidden/button/image}\" name=\"${3}\" id=\"${4:$3}\" value=\"${5}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input.": true
      },
      "source": "vim-snippets/snippets"
    },
    "f42c3813b5c14fdf7d8ed8aa74cc91ff": {
      "content": "else if(${1:true})\n{\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true
      },
      "source": "vim-snippets/snippets"
    },
    "f4308323f391cfb9b624588c8ea1d661": {
      "content": "if ${1:condition} {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "if ... { ... }",
      "matches": {
        "if": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "f43677f600f148d82ef67f955add389f": {
      "content": "clip ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cp": true
      },
      "source": "vim-snippets/snippets"
    },
    "f437620809e82ff517465e6b48b3791e": {
      "content": "border-right-width: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrw": true
      },
      "source": "vim-snippets/snippets"
    },
    "f43b83547990055acf24e4910ff7dd97": {
      "content": "_.isLength(${value})",
      "doc": "_.isLength(3);\n// => true\n\n_.isLength(Number.MIN_VALUE);\n// => false\n\n_.isLength(Infinity);\n// => false\n\n_.isLength('3');\n// => false\n\nChecks if `value` is a valid array-like length.\n\n**Note:** This method is loosely based on\n[`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-islength",
      "matches": {
        "lodash islength": true
      },
      "source": "javascript/lodash"
    },
    "f43fb6907f78b5ee4a312d5cdb0d5b4d": {
      "content": "<fieldset class=\"${1}\">\n\t${0}\n</fieldset>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fieldset.": true
      },
      "source": "vim-snippets/snippets"
    },
    "f4458beee11bf1d8b50befe133fb877e": {
      "content": "case ${1} => ${0}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "case .. => ..",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f4492eca427a49f329a73fda417e52dd": {
      "content": "floatformat:\"${0}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "floatformat": true
      },
      "source": "vim-snippets/snippets"
    },
    "f44cadde485e628fa12e635c72351a82": {
      "content": "JSON.stringify(${0:object});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jsons": true
      },
      "source": "snippets/javascript"
    },
    "f45118c3ae17270815b90e642d3607f5": {
      "content": "for all ${1} ${2:in} ${3} => ${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "for all",
      "matches": {
        "fora": true
      },
      "source": "vim-snippets/snippets"
    },
    "f45ace728c437fbe4e93065e715fe915": {
      "content": "fill(${1:value1}, ${2:value2}, ${3:value3}${4:, }${0:alpha});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fill": true
      },
      "source": "vim-snippets/snippets"
    },
    "f45c69e76a51068b5d826289f0208093": {
      "content": "${1:obj}.addClass('${2:class name}')",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "addClass": true
      },
      "source": "snippets/coffee"
    },
    "f45dd522b93a9bcb1acfe736344971b4": {
      "content": "${1:YYYY}-${2:MM}-${3:DD} close ${4:#:Account}",
      "doc": "",
      "filetype": "beancount",
      "grammar": "snu",
      "label": "close account",
      "matches": {
        "close": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f45e23ec59e2d1bae25705cc201c6f15": {
      "content": "break",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "break",
      "matches": {
        "br": true
      },
      "source": "vim-snippets/snippets"
    },
    "f46618a5ae4abf4c4c698b4ef054b3ed": {
      "content": "-moz-border-radius: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrz:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "f470c4fded7af4c05b13f7f7b02da3bb": {
      "content": "justify-items end",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:e": true
      },
      "source": "vim-snippets/snippets"
    },
    "f472cb2f7eb2b94332eac553c0cf5172": {
      "content": "@section('${1:section name}')\n    @parent\n    ${2}\n@endsection",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@section @parent ... @endsection",
      "matches": {
        "section-parent": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f47411da656716b017fd47297766a84f": {
      "content": "unique(${1:x}, ${2:incomparables = ${3:FALSE}}, ${4:...})",
      "doc": "Unique",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "uni",
      "matches": {
        "unique": true
      },
      "source": "vscode-R/snippets"
    },
    "f478c682bbcef6383744a4f3d078e1a7": {
      "content": "Returns:  ${1:return value/s}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "Returns (Ret)",
      "matches": {
        "Ret": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f47efd4b52e1fd7dcda2a9be23520129": {
      "content": "type tt_${1:name} is table of tr_${0:name};",
      "doc": "",
      "filetype": "plsql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt": true
      },
      "source": "vim-snippets/snippets"
    },
    "f480f53ce93fc1d134d87d7b63251de5": {
      "content": "set ${1:setting} = ${0:value}",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/snippets"
    },
    "f495719eee2c99ef9177669db6c5f56d": {
      "content": "has('patch-${1}')",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "vim-version-check-new",
      "matches": {
        "version_new": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f49870abbc7df2732783517b8b5fe691": {
      "content": "${1:key}:${2:value}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "Key:value for object",
      "matches": {
        "kv": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f49ee1c288fa635c047dd7f43e8cb960": {
      "content": "PropTypes.objectOf(PropTypes.shape($0)),",
      "doc": "An object whose keys are known ahead of time",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeObjectOfShape",
      "matches": {
        "ptoos": true
      },
      "source": "vscode-react/snippets"
    },
    "f4aaf19bfa26da9a0ca691d3671967d2": {
      "content": "each_byte {|${1:#:variable}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each_byte": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f4b0a3a7731023aa04a4d45b8a15c00f": {
      "content": "_.toFinite(${value})",
      "doc": "_.toFinite(3.2);\n// => 3.2\n\n_.toFinite(Number.MIN_VALUE);\n// => 5e-324\n\n_.toFinite(Infinity);\n// => 1.7976931348623157e+308\n\n_.toFinite('3.2');\n// => 3.2\n\nConverts `value` to a finite number.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-tofinite",
      "matches": {
        "lodash tofinite": true
      },
      "source": "javascript/lodash"
    },
    "f4b8a1eaf7e4bfa3673b5d0c677c27b4": {
      "content": "it.each([${1:[1, 2], [2, 4]}])(\n\t'${2:double(%d)}',\n\t(${3:input, expected}) => {\n\t\t${0:expect(double(input)).toBe(expected);}\n\t}\n);",
      "doc": "creates an it block with different test data sets",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-it-each",
      "matches": {
        "ite": true,
        "jest it each": true
      },
      "source": "javascript/jest"
    },
    "f4be6afa3cb4ae25edb9aad4c4d6ae52": {
      "content": "+ (${1:id})${2:method}\n{\n\t${0:return nil;}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "M": true
      },
      "source": "vim-snippets/snippets"
    },
    "f4ce7500d72bee03f5a847f6ca420795": {
      "content": "string.matches()",
      "doc": "string.matches(regex: Regex, options: { message: string, excludeEmptyString: bool }): Schema\n\nAn alternate signature for string.matches with an options object. excludeEmptyString, when true,\nshort circuits the regex test when the value is an empty stringlet schema = string().matches(/(hi|bye)/, { excludeEmptyString: true });\n\nawait schema.isValid(\"\"); // => true\n",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "string-matches",
      "matches": {
        "yup string matches": true
      },
      "source": "javascript/yup"
    },
    "f4cfeb1f7f5d968101924abe532acabc": {
      "content": "[NSGraphicsContext saveGraphicsState];\n$0\n[NSGraphicsContext restoreGraphicsState];\n",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Save and Restore Graphics Context (gsave)",
      "matches": {
        "gsave": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f4d3d900e3af0fdca584db54197b11e8": {
      "content": "$routeProvider.otherwise redirectTo: '${1:url}'\n${2}",
      "doc": "",
      "filetype": "angular_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ngro": true
      },
      "source": "snippets/coffee"
    },
    "f4dc4d9a164abc7753e72533a603500a": {
      "content": "background-clip: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp": true
      },
      "source": "vim-snippets/snippets"
    },
    "f4e89ece410f0f12edd97ac4dd3c4efb": {
      "content": "_.isArrayLikeObject(${value})",
      "doc": "_.isArrayLikeObject([1, 2, 3]);\n// => true\n\n_.isArrayLikeObject(document.body.children);\n// => true\n\n_.isArrayLikeObject('abc');\n// => false\n\n_.isArrayLikeObject(_.noop);\n// => false\n\nThis method is like `_.isArrayLike` except that it also checks if `value`\nis an object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isarraylikeobject",
      "matches": {
        "lodash isarraylikeobject": true
      },
      "source": "javascript/lodash"
    },
    "f4f1db79d96eae71c0e5d501231fef18": {
      "content": "case ${1:expression} of\n\t${2:pattern} ->\n\t\t${0:body};\nend",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "vim-snippets/snippets"
    },
    "f4f1e840313a1393b417ee2e76d34d11": {
      "content": "${1:/* condition */} ? ${2:a} : ${0:b}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "t": true
      },
      "source": "vim-snippets/snippets"
    },
    "f504d053d1e28efd994080a5618fe595": {
      "content": "quotes: '\\00AB' '\\00BB' '\\201E' '\\201C';",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q:ru": true
      },
      "source": "vim-snippets/snippets"
    },
    "f506f9a54537a12cc7ef303810802555": {
      "content": "snippet     ${1:#:trigger}\nabbr        ${2:#:abbr}\noptions     head\n    ${3:#:TARGET}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "snippet abbr options <snippet code>",
      "matches": {
        "snip": true,
        "snippet": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f5087ed2555fa08f5d92f27426a00292": {
      "content": "public int ${1} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pi+-": true
      },
      "source": "vim-snippets/snippets"
    },
    "f511fe9d40a40a291174629e072f2414": {
      "content": "_.upperFirst(${string})",
      "doc": "_.upperFirst('fred');\n// => 'Fred'\n\n_.upperFirst('FRED');\n// => 'FRED'\n\nConverts the first character of `string` to upper case.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-upperfirst",
      "matches": {
        "lodash upperfirst": true
      },
      "source": "javascript/lodash"
    },
    "f51b2d72ecdecfa7b2add8cf01727b73": {
      "content": "display: inline-block;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:ib": true
      },
      "source": "vim-snippets/snippets"
    },
    "f51ec299b2e0568e46b296c2481c8010": {
      "content": "switch(${1:/*var*/})\n{\n\tcase ${2:/*value*/}:\n\t\t$3\n\t\tbreak;\n\tcase ${4:/*value*/}:\n\t\t$5\n\t\tbreak;\n\t${7:/*more cases*/}\n\tdefault:\n\t\t${6:assert(false);}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "switch (sw)",
      "matches": {
        "sw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f524b218dbdb1c3df69f45f4eb634c1b": {
      "content": "## no critic\nour $VERSION = '${0:version}';\neval $VERSION;\n## use critic",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vers": true
      },
      "source": "vim-snippets/snippets"
    },
    "f52bb0b80da668be6f7b62a01d105751": {
      "content": "cy.route('${1:METHOD}', '${2:url}', ${3:response});",
      "doc": "Use cy.route() to manage the behavior of network requests.",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-route",
      "matches": {
        "cypress route": true
      },
      "source": "javascript/cypress"
    },
    "f53ce677ae5ac81de26ef3e1bffea4b8": {
      "content": "<%= $0 %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "<%= %>",
      "matches": {
        "=": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f53f5095db4541ec7ea21b5988b9bd43": {
      "content": "${1:FIELDNAME} = models.ForeignKey($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "ForeignKey",
      "matches": {
        "fk": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f54561c5e7128effadbc5f9ef726c43a": {
      "content": "{%- include '${0:snippet}' -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "include-": true
      },
      "source": "vim-snippets/snippets"
    },
    "f546e57e969371d15b7d9b3bf5fccad7": {
      "content": ":last-child",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        ":lc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f54b27cd87ea44155957fa6d30347e54": {
      "content": "grid-auto-flow: ${1:row} ${2:dense};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gaf+": true
      },
      "source": "vim-snippets/snippets"
    },
    "f54c67ac766032162349fdccd756aba2": {
      "content": "logger.error",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "logger.error",
      "matches": {
        "loge": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f566aafb119fa66c9c3e98ee59bfe3e4": {
      "content": "align-content ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac": true
      },
      "source": "vim-snippets/snippets"
    },
    "f56765822d0d8a37dca7a2c5e6bacf94": {
      "content": "background-color: #${0:fff}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgc": true
      },
      "source": "vim-snippets/snippets"
    },
    "f57a24a8d1059b469d4f6c5f39729dd8": {
      "content": "vertical-align text-bottom",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "va:tb": true
      },
      "source": "vim-snippets/snippets"
    },
    "f57f67efdc1f8b46176aa176491b1638": {
      "content": "$this->assertNotContains(${1:$needle}, ${2:$haystack});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertNotContains($needle, $haystack)",
      "matches": {
        "asncon": true
      },
      "source": "vim-snippets/snippets"
    },
    "f58240946b3b4fd3a465193940614b8c": {
      "content": "must_be ${0}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb": true
      },
      "source": "vim-snippets/snippets"
    },
    "f591396a79067b58ef1e3bfd8af8178f": {
      "content": "\\\\documentclass{${1:class}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\documentclass{}",
      "matches": {
        "dcl": true
      },
      "source": "vim-snippets/snippets"
    },
    "f5972152818d55a1d38074e5bf491f9d": {
      "content": "nextScene();",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ns": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f5a956032eaea293aa3a904cbdc46718": {
      "content": "function ${1:function_name} (${2:argument}: ${3:argument_type}) {\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "function (named)",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f5b03f5166a092ffdc41e8296d31e976": {
      "content": "it { is_expected.to ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iiexp": true
      },
      "source": "vim-snippets/snippets"
    },
    "f5b84ed5e0eac916deaefac27d794e32": {
      "content": "place-content space-between",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:sb": true
      },
      "source": "vim-snippets/snippets"
    },
    "f5bc3c3acd773825f4bd6da49b246cae": {
      "content": "resize: vertical",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rz:v": true
      },
      "source": "vim-snippets/snippets"
    },
    "f5bf14e8099206ea40524f1c6664962a": {
      "content": "import { reactive, toRefs } from 'vue'\n\nexport default {\n\tsetup () {\n\t\tconst state = reactive({\n\t\t\t${0:count}: ${1:0},\n\t\t})\n\t\n\t\treturn {\n\t\t\t...toRefs(state),\n\t\t}\n\t}\n}",
      "doc": "Vue Composition API Script with Reactive",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Composition API Reactive Script",
      "matches": {
        "v3reactive-setup": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "f5c14d6c1516ffb755a257a9f475dfc4": {
      "content": "grep(${1:pattern}, ${2:x}, ${3:ignore.case = ${4:FALSE}}, ${5:perl = ${6:FALSE}})",
      "doc": "Grep",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "grep",
      "matches": {
        "grep": true
      },
      "source": "vscode-R/snippets"
    },
    "f5c50ee01e30c676c09d51c2f8acbb3b": {
      "content": "*ngFor=\"let ${1:item} of ${2:list}\"${0}",
      "doc": "Angular *ngFor",
      "filetype": "html",
      "grammar": "lsp",
      "label": "ngFor",
      "matches": {
        "a-ngFor": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "f5c699b5ff77c58aff7efd16d38bb68e": {
      "content": "width=\"${1}\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "width": true
      },
      "source": "vim-snippets/snippets"
    },
    "f5cb532a065ea92848a3c2e42637c298": {
      "content": "try {\n    ${0:TARGET}\n} catch (${1:Exception} ${2:e}) {\n    ${3:Console.WriteLine(e.Message);}\n} finally {\n    ${4}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "try {} catch () {} finally {}",
      "matches": {
        "try_catch_finally": true,
        "try_cf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f5e297466eac36c0a56877e3ff20fd3c": {
      "content": "constructor( @Optional() @SkipSelf() parentModule: ${1:ModuleName} {\n\tif (parentModule) {\n\t\tconst msg = `${1:ModuleName} has already been loaded. \n\t\t\tImport ${1:ModuleName} once, only, in the root AppModule.`;\n\t\tthrow new Error(msg);\n\t}\n}",
      "doc": "Angular Module SkipSelf constructor",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Module SkipSelf Constructor",
      "matches": {
        "a-ctor-skip-self": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "f5e80db611f6ac74b4afc6c583680643": {
      "content": "@before-appear=\"$1\"$0",
      "doc": "@before-appear=''",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-before-appear",
      "matches": {
        "beforeappearevent": true,
        "vue before-appear": true
      },
      "source": "javascript/vue"
    },
    "f5e8aa078d1d204c457313173bc73d49": {
      "content": "t.decimal :${1:title}, precision: ${2:10}, scale: ${3:2}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tcd": true
      },
      "source": "vim-snippets/snippets"
    },
    "f5eab2559202e28e0f3355cd23f00cb8": {
      "content": "page-break-before ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb": true
      },
      "source": "vim-snippets/snippets"
    },
    "f5f1d2a5d85c7f1e99ee3d3766c3c18f": {
      "content": "assert(${1:var} = assigns(:$1), \"Cannot find @$1\")\n$0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "assert(var = assigns(:var))",
      "matches": {
        "asg": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f5fa7eda280cc1da6ecf773f382a4aab": {
      "content": "else\n\t${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "f60bf2618e7581a628480b058ac5f984": {
      "content": "create index ${0:$1_$2} on ${1:table}(${2:column});",
      "doc": "",
      "filetype": "sql",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ind": true
      },
      "source": "vim-snippets/snippets"
    },
    "f60e4418531688e32cdce5c9e44ba612": {
      "content": "mutable.HashMap[${1:T},${2:T}]${0:(keyval)}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mhmap": true
      },
      "source": "vim-snippets/snippets"
    },
    "f6194a310561e6dffc49f2c8d9bf0542": {
      "content": "character(${1}), dimension(${2}) :: ${3}",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "character dimension",
      "matches": {
        "chd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f622e448962060301aa0358af2ab654e": {
      "content": "![${1:id}]: ${2:url} \"${3:title}\"",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "![:": true
      },
      "source": "vim-snippets/snippets"
    },
    "f6261b08cf0957cdf3ea4a7669814341": {
      "content": "import ${1:Img} from 'gatsby-image';",
      "doc": "",
      "filetype": "gatsby-image",
      "grammar": "lsp",
      "label": "gatsby-image-import",
      "matches": {
        "gatsby-image import": true
      },
      "source": "javascript/gatsby-image"
    },
    "f62d56c351a99a9933f122d80236f7ba": {
      "content": "background-color ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgc": true
      },
      "source": "vim-snippets/snippets"
    },
    "f6346ed8aa95bcb265c2ba6019795ff4": {
      "content": "float: ${1:left/right/none};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "float: left:right:none (float)",
      "matches": {
        "float": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f639c45ab1b172ac528fe991dae1c50d": {
      "content": "until ${1:condition}\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "until": true
      },
      "source": "vim-snippets/snippets"
    },
    "f64b04f4449864984d2524bbdfddbe7b": {
      "content": "cy.getCookies();",
      "doc": "Get all of the browser cookies.",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-cookies-get-all",
      "matches": {
        "cypress cookies get all": true
      },
      "source": "javascript/cypress"
    },
    "f64b784d2c988ff3bf668456d5205a2b": {
      "content": "${1:obj}.mouseover(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mover": true
      },
      "source": "snippets/javascript"
    },
    "f65b26259a7fb3ef2350ce4c52378558": {
      "content": "${1:obj}.mouseenter(function (${2:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "menter": true
      },
      "source": "snippets/javascript"
    },
    "f65d067a779c1ed8b9424d9ac83e9797": {
      "content": "while (${1:#:condition}) {\n\t${2:TARGET}\n}",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "wh",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f668e8743bee899b50aaa40586347df9": {
      "content": "@while ($1)\n\t${2:${VISUAL}}\n@endwhile",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@while directive",
      "matches": {
        "wh": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f669985df8ef9c7b754882fe8762054a": {
      "content": "<optgroup>\n\t<option value=\"${1}\">${2:$1}</option>\n\topt+${0}\n</optgroup>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "optgroup": true
      },
      "source": "vim-snippets/snippets"
    },
    "f66b4e457680234dcdac0b86d860c1ec": {
      "content": "export const ${1:exportVariable} = ${2:localVariable};\n",
      "doc": "Export named variable in ES6 syntax",
      "filetype": "base",
      "grammar": "lsp",
      "label": "exportnamedvariable",
      "matches": {
        "base export named variable": true
      },
      "source": "javascript/base"
    },
    "f679ecd655b046c5b1d026e809408cf6": {
      "content": "if ${1} then ${2} else ${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "if expression",
      "matches": {
        "ife": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f67c6258a7df51a8a4265415b7ca36c2": {
      "content": "Logger.error(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "error": true
      },
      "source": "vim-snippets/snippets"
    },
    "f67db90ff03b86c3862c5c7746be5fb0": {
      "content": "${1:FIELDNAME} = models.FilePathField(path=${2:\"/abs/path/to/dir\"}${3:, max_length=100}${4:, match=\"*.ext\"}${5:, recursive=True}${0:, blank=True, })",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "filepath": true
      },
      "source": "vim-snippets/snippets"
    },
    "f686529d0eb21f961deb1ee23f461237": {
      "content": "# coding: utf-8\n${0}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "enc": true,
        "encoding": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f686ae814d977c45b4ce59037d6d5e02": {
      "content": "{% pullquote %}\n${1:text} {\" ${2:quote} \"} ${0:text}\n{% endpullquote %}",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pullquote": true
      },
      "source": "vim-snippets/snippets"
    },
    "f69aa13c86069c5bad4222632aed3e8e": {
      "content": "attrs : { ${1:attr} : '${2:val}' },",
      "doc": "",
      "filetype": "javascript-bemjson",
      "grammar": "snu",
      "label": "",
      "matches": {
        "a": true
      },
      "source": "vim-snippets/snippets"
    },
    "f69b7c2ef567ea2b704c6dcff657e339": {
      "content": "if ${1:condition}\n\t${0:${VISUAL}}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "f69c52d975258c77256b0e6767f75ca1": {
      "content": "if (${1}) {\n\t${0:${VISUAL}}\n}",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "if (condition) { ... }",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "f6b0f8e07fa9954bb6db3f74433df40a": {
      "content": "$${1:variable}: ${0:value}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "$": true
      },
      "source": "vim-snippets/snippets"
    },
    "f6b1788a2a6fa9b55fb1320bbae53207": {
      "content": "render inline: \"${1:<%= 'hello' %>}\", locals: { ${2:name}: '${3:value}'${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ril": true
      },
      "source": "vim-snippets/snippets"
    },
    "f6c41e7cb8ccadb306b1e3d72180d232": {
      "content": "tellTarget( ${1:#:target} ) {\n\t${0:TARGET}\n}",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tt": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f6c87a1a222ebe61bdd4bc737e0c79b5": {
      "content": "do {\n\t${0}\n} while (${1})",
      "doc": "",
      "filetype": "awk",
      "grammar": "snu",
      "label": "do ... while",
      "matches": {
        "do": true
      },
      "source": "vim-snippets/snippets"
    },
    "f6d47815f49f0d2ec50a9d44b9ab638f": {
      "content": "page-break-before: right;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "f6d970eeab96c173b6a3e354fc171334": {
      "content": "else if (${1}) {\n    ${2:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "elif": true,
        "elseif": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f6db2a3d77ae3cb186eee6e96d94daf4": {
      "content": "console.trace(${1:object});",
      "doc": "Prints a stack trace from the point where the method was called",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleTrace",
      "matches": {
        "ctr": true
      },
      "source": "vscode-javascript/snippets"
    },
    "f6dc67e351bd59177d1936e2945d1ad3": {
      "content": "@foreach ($$1 as $$2)\n\t${3:${VISUAL}}\n@endforeach",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "@foreach directive",
      "matches": {
        "foreach": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f6e7be93c9fac4073bf04bc6b48ab976": {
      "content": "grid-auto-columns max-content",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gac:mac": true
      },
      "source": "vim-snippets/snippets"
    },
    "f6f748632b107727b201db922f464a39": {
      "content": "class << ${1:self}\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "class << self .. end",
      "matches": {
        "claself": true
      },
      "source": "vim-snippets/snippets"
    },
    "f70f745882f0987b399e7b79e7b1a820": {
      "content": "continue",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "continue",
      "matches": {
        "cn": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "f715768a8c4f77cd5f007c3d4346fe64": {
      "content": "{%- case ${1:variable} -%}\n\t{%- when ${2:condition} -%}\n\t\t${3}\n\t{%- else -%}\n\t\t${0}\n{%- endcase -%}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case-": true
      },
      "source": "vim-snippets/snippets"
    },
    "f72345e349f94dca358a3572e06c1d29": {
      "content": "<style lang=\"scss\" scoped>\n${0}\n</style>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <style> with scss scoped",
      "matches": {
        "style_with_scss_scoped": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f725e54e754b1075639d7ad2f2ae6e04": {
      "content": "def ${1:#:name}(${2}):\n\t\"\"\"${3:#:function documentation}\"\"\"\n\t${0:pass}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "def function(...): \"\"\"...\"\"\"",
      "matches": {
        "defd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f72b7892e434b37943bba29d09566787": {
      "content": "<input v-model=\"${1:data}\" type=\"text\" />",
      "doc": "v-model directive",
      "filetype": "vue-template",
      "grammar": "lsp",
      "label": "Vue v-model Directive",
      "matches": {
        "vmodel": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "f72d3094dbfb267c2cb034005ec7b582": {
      "content": "margin: ${1:0} ${0:0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "m:2": true
      },
      "source": "vim-snippets/snippets"
    },
    "f73709d8657657eca2a37cf48274ee34": {
      "content": "<dl>\n\t${0}\n</dl>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dl": true
      },
      "source": "vim-snippets/snippets"
    },
    "f73e31530737820ca15b4672a36edea6": {
      "content": "background: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bg": true
      },
      "source": "vim-snippets/snippets"
    },
    "f73e46ff77683ed8488fe8a1c9fa3578": {
      "content": "import * as ${2:alias} from '${1:module}';$0",
      "doc": "Imports everything as alias from the module in ES6 syntax",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "importEverything",
      "matches": {
        "ime": true
      },
      "source": "vscode-javascript/snippets"
    },
    "f7420701cd52957a0200a67a5327c83c": {
      "content": "module ${1} : sig\n  ${2:TARGET}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "module signature",
      "matches": {
        "mos": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f74b0e947dd0edf25589b14209e14cb0": {
      "content": "paste(${1:...}, ${2:sep = ${3:\" \"}}, ${3:collapse = ${4:NULL}})",
      "doc": "Paste",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "pas",
      "matches": {
        "paste": true
      },
      "source": "vscode-R/snippets"
    },
    "f74f0494b013ece13853573a7b456e7d": {
      "content": "_.bindAll(${object}, ${methodNames})",
      "doc": "var view = {\n  'label': 'docs',\n  'click': function() {\n    console.log('clicked ' + this.label);\n  }\n};\n\n_.bindAll(view, ['click']);\njQuery(element).on('click', view.click);\n// => Logs 'clicked docs' when clicked.\n\nBinds methods of an object to the object itself, overwriting the existing\nmethod.\n\n**Note:** This method doesn't set the \"length\" property of bound functions.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-bindall",
      "matches": {
        "lodash bindall": true
      },
      "source": "javascript/lodash"
    },
    "f75673fb43541b1edee939024a752d0f": {
      "content": "${1:private/public }${2:Object} ${3:o}${4: = new }$2(${0});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "obj": true
      },
      "source": "vim-snippets/snippets"
    },
    "f7596e768254d394c4a283e3d2359c43": {
      "content": "_.keys(${object})",
      "doc": "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keys(new Foo);\n// => ['a', 'b'] (iteration order is not guaranteed)\n\n_.keys('hi');\n// => ['0', '1']\n\nCreates an array of the own enumerable property names of `object`.\n\n**Note:** Non-object values are coerced to objects. See the\n[ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\nfor more details.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-keys",
      "matches": {
        "lodash keys": true
      },
      "source": "javascript/lodash"
    },
    "f75ace524aac3ae346a79385c6e076fe": {
      "content": "${1:obj}.promise(${2:'fx'}, ${3:target})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "promise": true
      },
      "source": "snippets/javascript"
    },
    "f76274472dfe8cd4413d2f848e337eb0": {
      "content": "Element Should Contain    ${${1:locator}}    ${2:${expected}}    ${3:${optional message}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Element Should Contain",
      "matches": {
        "esc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f76cbe513212665fb8f57a9821e3a565": {
      "content": "do {\n\t${0:${VISUAL}}\n} while (${1:/* condition */});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "do { ... } while (condition)",
      "matches": {
        "do": true
      },
      "source": "snippets/javascript"
    },
    "f7752f3ca7c3720589d4be4ac0bfcbd0": {
      "content": "t.change :${1:name}, :${2:string}, ${3:limit}: ${4:80}\n${0}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tch": true
      },
      "source": "vim-snippets/snippets"
    },
    "f784b82dc170b9a36b16ae04a2aecb5e": {
      "content": "process.stdin",
      "doc": "",
      "filetype": "javascript-node",
      "grammar": "snu",
      "label": "stdin",
      "matches": {
        "stdin": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f7854562d9cdcdb911211b67d9f7ed74": {
      "content": "display: block;$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "display: block (display)",
      "matches": {
        "display": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f78efa78636d29083615f391b268a8bf": {
      "content": "bool",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "Boolean",
      "matches": {
        "T": true
      },
      "source": "vim-snippets/snippets"
    },
    "f79668b179f9b5a792cc13d0f9f237dd": {
      "content": "_.isEmpty(${value})",
      "doc": "_.isEmpty(null);\n// => true\n\n_.isEmpty(true);\n// => true\n\n_.isEmpty(1);\n// => true\n\n_.isEmpty([1, 2, 3]);\n// => false\n\n_.isEmpty({ 'a': 1 });\n// => false\n\nChecks if `value` is an empty object, collection, map, or set.\n\nObjects are considered empty if they have no own enumerable string keyed\nproperties.\n\nArray-like values such as `arguments` objects, arrays, buffers, strings, or\njQuery-like collections are considered empty if they have a `length` of `0`.\nSimilarly, maps and sets are considered empty if they have a `size` of `0`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-isempty",
      "matches": {
        "lodash isempty": true
      },
      "source": "javascript/lodash"
    },
    "f7a8118756a3f73a88429540d999808f": {
      "content": "@synthesize ${1:property};",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "Synthesize",
      "matches": {
        "syn": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f7ae365f2bf762d7646398da10aa6329": {
      "content": "set key",
      "doc": "",
      "filetype": "gnuplot",
      "grammar": "snu",
      "label": "set key",
      "matches": {
        "key": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f7ae8ed5caa301dfffae193fc2828e4d": {
      "content": "@misc{${1:LABEL},\n    memo = {author, title, howpublished, month, year, note},\n}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@misc": true,
        "misc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f7b0e3242fb72e2aaf85cb17436abfd6": {
      "content": "text-shadow ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tsh": true
      },
      "source": "vim-snippets/snippets"
    },
    "f7b32bc681c112c334b6eb9d1cd7111c": {
      "content": "_.thru(${value}, ${interceptor})",
      "doc": "_('  abc  ')\n .chain()\n .trim()\n .thru(function(value) {\n   return [value];\n })\n .value();\n// => ['abc']\n\nThis method is like `_.tap` except that it returns the result of `interceptor`.\nThe purpose of this method is to \"pass thru\" values replacing intermediate\nresults in a method chain sequence.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-thru",
      "matches": {
        "lodash thru": true
      },
      "source": "javascript/lodash"
    },
    "f7c256315714a290d1340fe29fd49272": {
      "content": "[${1:id}]: mailto:${2:email} \"${3:title}\"",
      "doc": "",
      "filetype": "rmd",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[:@": true
      },
      "source": "vim-snippets/snippets"
    },
    "f7c4d893e9f97b04c62a2bdd145c7baa": {
      "content": "<input type=\"color\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:color": true
      },
      "source": "vim-snippets/snippets"
    },
    "f7c665d2469c58c1201bc2c34636cd00": {
      "content": "map!(${1:f})(${2:xs});\n${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/snippets"
    },
    "f7d75824d46252d3362cba394a526b88": {
      "content": "internal string ${1} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps&-": true
      },
      "source": "vim-snippets/snippets"
    },
    "f7dcb2dc08601c4ad3498f165f558a15": {
      "content": "align-content: flex-end",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "f7de2cd8e84fcf7bce3b34b63cf96f3d": {
      "content": "${1:FIELDNAME} = models.EmailField($2)",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "EmailField",
      "matches": {
        "memail": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f7f46976e981d71cf0211c3f51baa3e6": {
      "content": "background-position-x: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgpx": true
      },
      "source": "vim-snippets/snippets"
    },
    "f7f75f8c72ba6ce5ce116dc6c109ba01": {
      "content": "validates_exclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not allowed}\"}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "validates_exclusion_of (ve)",
      "matches": {
        "ve": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f7f911d376fcc15faed5a224c393f3bf": {
      "content": "${1}:\nfor ${2:I} in ${3} loop\n\t${0}\nend loop $1;",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "named for",
      "matches": {
        "nfor": true
      },
      "source": "vim-snippets/snippets"
    },
    "f7fc9e6ccad2feef5fdeaf334a115fde": {
      "content": "{% else %}\n\t${1}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "vim-snippets/snippets"
    },
    "f7ffb10e21152c546d07d9c6185fb3ff": {
      "content": "justify-content: space-around",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:sa": true
      },
      "source": "vim-snippets/snippets"
    },
    "f80899392a4952c9d77eb81d0cb5e184": {
      "content": "display: list-item;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:li": true
      },
      "source": "vim-snippets/snippets"
    },
    "f8177ac0876f4fb1663558fdb616b987": {
      "content": "import ${1:Html} as ${2} exposing (${2:..})\n${0}",
      "doc": "",
      "filetype": "elm",
      "grammar": "snu",
      "label": "import ... as ... exposing (..)",
      "matches": {
        "impae": true,
        "importAsExposing": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f81beb409aa53f8ca5902b4aab999b2b": {
      "content": "PropTypes.element,",
      "doc": "React element prop type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-element",
      "matches": {
        "prop-types element": true,
        "ptel": true
      },
      "source": "javascript/prop-types"
    },
    "f832c50598995967b8c8f3e2321767d1": {
      "content": "title = {${1}},\n${0}",
      "doc": "",
      "filetype": "bib",
      "grammar": "snu",
      "label": "",
      "matches": {
        "title": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f832ec002681ef24b056046e27ac1ac7": {
      "content": "export const ${1:constantName} = '${1:constantName}'",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reduxConst",
      "matches": {
        "rxconst": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "f833c1ad6b20ca5658524125132f897a": {
      "content": "{%- when ${1:condition} -%}\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when-": true
      },
      "source": "vim-snippets/snippets"
    },
    "f834ba75308261c27f978c506ccb9e63": {
      "content": "background-repeat: repeat-y",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgr:y": true
      },
      "source": "vim-snippets/snippets"
    },
    "f83d99b58e5a8142bbca2a6ded4e2c1f": {
      "content": "propTypes: ->\n\t${1:myVar}: React.PropTypes.${2:type}${3:.isRequired}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define propTypes",
      "matches": {
        "PropTypes": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f848216fb8c99022bed248c80eabf68c": {
      "content": "import ${1:New} from './components/$1.vue';",
      "doc": "",
      "filetype": " css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "vimport": true
      },
      "source": "vim-snippets/snippets"
    },
    "f84c4352a87ac2ec2cb823c3c0b19552": {
      "content": "CHARACTER",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "char": true
      },
      "source": "vim-snippets/snippets"
    },
    "f85b951d337b3c171aba7a85d671d6fa": {
      "content": "const ${1:scale} = useMotionValue(${2:1})",
      "doc": "useMotionValue()\nCreates a MotionValue to track the state and velocity of a value.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-motion-value",
      "matches": {
        "framer-motion use-motion-value": true,
        "use-motion-value": true
      },
      "source": "javascript/framer-motion"
    },
    "f8662a10705182a710975e6761ca45bb": {
      "content": "class ${1:CLASS_NAME}(TemplateView):\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Generic Template View",
      "matches": {
        "templateview": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f874087efa7a9e199c758d219860d767": {
      "content": "watch([${1:foo}, ${2:bar}], ([new${1}, new${2}], [prev${1}, prev${2}]) => {\n\t${3}\n})",
      "doc": "Vue Composition api - watch as array",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Composition API - watch - array",
      "matches": {
        "v3watch-array": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "f87c9a7c95b3f7112855885be4c22712": {
      "content": "${1:p}\n{\n\tsolver          GAMG;\n\ttolerance       1e-${2:6};\n\trelTol          ${0:0.0};\n\tsmoother        GaussSeidel;\n\tcacheAgglomeration true;\n\tnCellsInCoarsestLevel 10;\n\tagglomerator    faceAreaPair;\n\tmergeLevels     1;\n}",
      "doc": "",
      "filetype": "openfoam",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gamg": true
      },
      "source": "vim-snippets/snippets"
    },
    "f882291e0083c86eac5df56c75821dbf": {
      "content": "wont_be_nil",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wbn": true
      },
      "source": "vim-snippets/snippets"
    },
    "f8822e5c9e1db1b9cf94ba4e76287973": {
      "content": "cursor: hand",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cur:ha": true
      },
      "source": "vim-snippets/snippets"
    },
    "f8835d66c04b448f6cdd6984a94eab42": {
      "content": "border-spacing: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdsp": true
      },
      "source": "vim-snippets/snippets"
    },
    "f88463114d12bf361b64f73781625830": {
      "content": "Boolean",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bool": true
      },
      "source": "vim-snippets/snippets"
    },
    "f88bab6d44d75c372aa6801836125496": {
      "content": "this.${1:refName}Ref = React.createRef()\n",
      "doc": "Create ref statement used inside constructor",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "createRef",
      "matches": {
        "cref": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "f89644066e3e602bf2f846924e2ceccc": {
      "content": "pixels[${0:index}]",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pixels": true
      },
      "source": "vim-snippets/snippets"
    },
    "f89c79ded12e3590b26810e3333fa77c": {
      "content": "(provide ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prov": true
      },
      "source": "vim-snippets/snippets"
    },
    "f8a2b006f9f5366f2fbee56efca3a32c": {
      "content": "|> List.map (fun x -> printfn \"%A\" x; x) // tap",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ltap": true
      },
      "source": "vim-snippets/snippets"
    },
    "f8a357a67bd8de6900ce32126bf36e55": {
      "content": "module ${1:main};${0}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mod": true
      },
      "source": "vim-snippets/snippets"
    },
    "f8a5a72c5205c778d4d40b2c72a5fe3b": {
      "content": "unsigned int\t${1:object}Count = [${2:array} count];\n\nfor(unsigned int index = 0; index < $1Count; index += 1)\n{\n\t${3:id}\t$1 = [$2 objectAtIndex:index];\n\t$0\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "for NSArray loop (forarray)",
      "matches": {
        "forarray": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f8a95fa171230f7ab72f80289b352234": {
      "content": "background-image: url($1);$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "background-image:  url (background)",
      "matches": {
        "background": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f8ad3dcf1c529ef7777beb4b7a1f27e3": {
      "content": "setContext(${1:key}, ${2:context})",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-set-context",
      "matches": {
        "sv-content": true,
        "svelte set content": true
      },
      "source": "javascript/svelte"
    },
    "f8add023cb4356cb853a2e972ceb381e": {
      "content": "else:\n  ${0:pass}",
      "doc": "",
      "filetype": "nim",
      "grammar": "snu",
      "label": "else: ...",
      "matches": {
        "else": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f8aeb849acc3aa5f2d0d5216e72c1467": {
      "content": "componentWillUnmount: ->\n\t$1",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "React define componentWillUnmount",
      "matches": {
        "componentWillUnmount": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f8b9fdeccbaf963bc9c7c8f609a5eba9": {
      "content": "background-color: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "backcolor": true,
        "bc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f8cd09a7ddf80090f6457e2ac87d4fd3": {
      "content": "{{ $1 }}$2",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "{": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f8e54d1717e772422badbb1bcb05c9ab": {
      "content": "<template lang=\"pug\">\n  ${0}\n</template>",
      "doc": "",
      "filetype": "vue",
      "grammar": "snu",
      "label": "Scaffold <template> with pug",
      "matches": {
        "template_with_pug": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f8f198fb8864e53814b2abe0dd943fe0": {
      "content": "align-content baseline",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ac:b": true
      },
      "source": "vim-snippets/snippets"
    },
    "f8f3aa7902dd172f896556996a7509f7": {
      "content": "\\\\documentclass[${1:options}]{${2:class}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "\\documentclass[]{}",
      "matches": {
        "dclo": true
      },
      "source": "vim-snippets/snippets"
    },
    "f8f5e8d059188fe8a519912acb532fbf": {
      "content": "<xsl:include href=\"${1:stylesheet}\" />",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "include": true
      },
      "source": "vim-snippets/snippets"
    },
    "f8fa8af7cfe994cf71a7a7706a7a9e57": {
      "content": "form_open(\"${1:action}\");${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_open": true
      },
      "source": "vim-snippets/snippets"
    },
    "f90188daba4981aaf49611636d8975c0": {
      "content": "options(${1:...})",
      "doc": "Options",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "opt",
      "matches": {
        "option": true
      },
      "source": "vscode-R/snippets"
    },
    "f904ea3e2176b96f7ccefbb2e3bb6656": {
      "content": "render text: \"${1:text to render...}\"",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "render (text) (rt)",
      "matches": {
        "rt": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f90673d5c7e8ca59fcb2384faab6d36a": {
      "content": "for [${1},${2}] in items(${3})\n\t${0}\n\tunlet $1 $2\nendfor",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "for [key, value] in loop",
      "matches": {
        "forkv": true
      },
      "source": "vim-snippets/snippets"
    },
    "f910d6ffb6ab86d013da231ff46e8b6c": {
      "content": "try ${1:e}\nwith ${2:Not_found} -> ${3:()}",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "try",
      "matches": {
        "try": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f914d683d85bcd5cdf586d6552552538": {
      "content": "text-wrap none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tw:no": true
      },
      "source": "vim-snippets/snippets"
    },
    "f91904bebc3a6ebfe2e92de6f9a6e020": {
      "content": "@forelse (${1} as ${2})\n    ${3}\n@empty\n    ${4}\n@endforelse",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@forelse ... @empty ... @endforeach",
      "matches": {
        "forelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f92329dbd3fe6d97930ad41d732e7c00": {
      "content": "color: rgb(${1:255},${2:255},${3:255});$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "color:  color-rgb (color)",
      "matches": {
        "color": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f9266f53e69e3a0b4bcf4c22b9378225": {
      "content": "if ${1}err != nil {\n\treturn errors.Wrap(err, \"${2}\")\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "Error handling with errors.Wrap",
      "matches": {
        "errwr": true
      },
      "source": "vim-snippets/snippets"
    },
    "f92fa9002f3a8a07ccadd9eca32417ba": {
      "content": "_.concat(${array}, ${values})",
      "doc": "var array = [1];\nvar other = _.concat(array, 2, [3], [[4]]);\n\nconsole.log(other);\n// => [1, 2, 3, [4]]\n\nconsole.log(array);\n// => [1]\n\nCreates a new array concatenating `array` with any additional arrays\nand/or values.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-concat",
      "matches": {
        "lodash concat": true
      },
      "source": "javascript/lodash"
    },
    "f935350ce9498b4fd82c45ead06eb1b7": {
      "content": "_.last(${array})",
      "doc": "_.last([1, 2, 3]);\n// => 3\n\nGets the last element of `array`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-last",
      "matches": {
        "lodash last": true
      },
      "source": "javascript/lodash"
    },
    "f938b819a6984aa9fad97e7e3fba174a": {
      "content": "${1:obj}.remove()",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rem": true
      },
      "source": "snippets/javascript"
    },
    "f9472a5a00bf05221bd578346384019b": {
      "content": "border-bottom-left-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbli:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "f948b37180b8b743995cca8cb6a237d4": {
      "content": "{% with %}\n\t$1\n{% endwith %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "with",
      "matches": {
        "with": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f94d789b55bf9caebc663b884e0cd7a7": {
      "content": "-export([${1:function}/${0:arity}]).",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "exp": true
      },
      "source": "vim-snippets/snippets"
    },
    "f94d8779f786ccc5b7b7bc259f31e0ce": {
      "content": "list-style-type: decimal-leading-zero",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list:dclz": true
      },
      "source": "vim-snippets/snippets"
    },
    "f951a425c56f81843f45317d839c8cec": {
      "content": "{% set ${1:x} = ${0:y} %}",
      "doc": "",
      "filetype": "htmltornado",
      "grammar": "snu",
      "label": "",
      "matches": {
        "set": true
      },
      "source": "vim-snippets/snippets"
    },
    "f954ec4cd2d3607813431e60a99bc871": {
      "content": "LOGICAL",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "log": true
      },
      "source": "vim-snippets/snippets"
    },
    "f95aabc4b9e7e72a85d40a73f4bc4a71": {
      "content": "word-wrap: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wow:no": true
      },
      "source": "vim-snippets/snippets"
    },
    "f964255d7d5ed518eb2789abd4b09e6b": {
      "content": "counter-reset ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cor": true
      },
      "source": "vim-snippets/snippets"
    },
    "f96c7ae4fba62168e4fa4295055a2504": {
      "content": "@each ${1:$item} in ${2:items}\n\t${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "each": true
      },
      "source": "vim-snippets/snippets"
    },
    "f96ee84b63fba854f11233fbe9d3eecc": {
      "content": "{% endembed %}${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig endembed",
      "matches": {
        "endembed": true
      },
      "source": "vim-snippets/snippets"
    },
    "f97414ef3fe7ab1bbabcabaad2a5047e": {
      "content": "overflow scroll",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:s": true
      },
      "source": "vim-snippets/snippets"
    },
    "f9758c297d6f47cfa18896af03e4c0c1": {
      "content": "filters: {\n\t${1:fnName}: function(${2:value}) {\n\t\treturn ${2:value}${0};\n\t}\n}",
      "doc": "vue filter",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-filter",
      "matches": {
        "vfilter": true,
        "vue filter": true
      },
      "source": "javascript/vue"
    },
    "f9798689f858919b6f027417d4120d88": {
      "content": "justify-content right",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "f9969f628217caee4e40f84f0c126d46": {
      "content": "#!/usr/bin/env ruby",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "#!": true
      },
      "source": "vim-snippets/snippets"
    },
    "f9aa43c3e65f4e9d8909dd19683747e1": {
      "content": "border-top-width: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "border-top-width": true,
        "btw": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f9b071a4d51f969789150c2335988fcf": {
      "content": "font-effect: emboss",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fef:eb": true
      },
      "source": "vim-snippets/snippets"
    },
    "f9b5d4916834a67a3de32a466b4e3411": {
      "content": "stage('${1:Test}'){\n\tsteps {\n\t\tsh '${2:make check}'\n\t\tjunit '${3:reports/**/*.xml}'\n\t}\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "stage": true
      },
      "source": "vim-snippets/snippets"
    },
    "f9c0184cabb8e12ab69d1afa77c534f0": {
      "content": "for (int ${1:i} = ${2:10}; $1 >= 0; $1--)\n{\n\t${VISUAL}$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "for loop (reverse)",
      "matches": {
        "forr": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f9c94d6bb2094d2ed621a6769b80c11d": {
      "content": "import React, { PureComponent } from 'react'\n\ninterface Props {\n\t\n}\n\nclass ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1:${TM_FILENAME_BASE}}\n",
      "doc": "Creates a React pure component class with ES7 module system and TypeScript interface",
      "filetype": "ts-snippets",
      "grammar": "lsp",
      "label": "typeScriptReactClassExportPureComponent",
      "matches": {
        "tsrpce": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "f9ca6fddd1e044f0755a29ece783dcc1": {
      "content": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: '${1:selector-name}',\n\ttemplate: `$0`\n})\n\nexport class ${2:Name}Component implements OnInit {\n\tconstructor() { }\n\n\tngOnInit() { }\n}",
      "doc": "Angular component with an inline template",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-component-with-inline-template",
      "matches": {
        "a-component-inline": true,
        "angular component inline template": true
      },
      "source": "javascript/angular"
    },
    "f9cb282bed4bf45971cf3f6b142d577a": {
      "content": "case ${1:#:condition}:\n  ${2:TARGET}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "",
      "matches": {
        "case": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f9cf9097d11e7dfa4df945215324e5e7": {
      "content": "beforeEach(function() {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "before each (js)",
      "matches": {
        "bef": true
      },
      "source": "vim-snippets/snippets"
    },
    "f9d034326c46788a2fce9040702de83c": {
      "content": "PropTypes.object,",
      "doc": "Object prop type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-object",
      "matches": {
        "prop-types object": true,
        "pto": true
      },
      "source": "javascript/prop-types"
    },
    "f9e770d3ac224c957fd055d7ff56aea9": {
      "content": "display: table-row-group",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "d:tbrg": true
      },
      "source": "vim-snippets/snippets"
    },
    "f9e8e7d5dc9d595fae19059af72ea67f": {
      "content": "before_create $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "before_create",
      "matches": {
        "befc": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "f9f1569a779bd862f96ceed9ae3a1b09": {
      "content": "- (${1:#:id})${2:#:attribute}\n{\n\t[self willAccessValueForKey:@\"$2\"];\n\t$1 value = [self primitiveValueForKey:@\"$2\"];\n\t[self didAccessValueForKey:@\"$2\"];\n\treturn value;\n}\n- (void)set$2:($1)aValue\n{\n\t[self willChangeValueForKey:@\"$2\"];\n\t[self setPrimitiveValue:aValue forKey:@\"$2\"];\n\t[self didChangeValueForKey:@\"$2\"];\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "CoreData",
      "matches": {
        "cd": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "f9f2ca0cfb4bd608adc6c175c7f4148d": {
      "content": "_.stubObject()",
      "doc": "var objects = _.times(2, _.stubObject);\n\nconsole.log(objects);\n// => [{}, {}]\n\nconsole.log(objects[0] === objects[1]);\n// => false\n\nThis method returns a new empty object.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-stubobject",
      "matches": {
        "lodash stubobject": true
      },
      "source": "javascript/lodash"
    },
    "f9f9e49be661b04642d1a51a149fdc88": {
      "content": "refute_equal ${1:unexpected}, ${2:actual}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rfe": true
      },
      "source": "vim-snippets/snippets"
    },
    "f9fa711b9dec78e10e22e90f33c4b031": {
      "content": "number.min()",
      "doc": "number.min(limit: number | Ref, message?: string | function): Schema\n\nSet the minimum value allowed. The ${min} interpolation can be used in the\nmessage argument.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "number-min",
      "matches": {
        "yup number min": true
      },
      "source": "javascript/yup"
    },
    "fa04a29380f12ea716326718a6ca7cb6": {
      "content": "-define(${1:macro}, ${2:body}).",
      "doc": "",
      "filetype": "erlang",
      "grammar": "snu",
      "label": "",
      "matches": {
        "def": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa04bc179b539a53a4fd7c0fc3267e13": {
      "content": "(${1:a} => ${0})",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "(a": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa0530395fc3f6a42ff94ceb44d30a9d": {
      "content": "module.exports = {\n\tcss: {\n\t\tloaderOptions: {\n\t\t\t${1:sass}: {\n\t\t\t\tdata: `${2:@import '@/styles/_variables.scss';}`\n\t\t\t}\n\t\t}\n\t}\n}",
      "doc": "vue.config.js",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue.config.js Import",
      "matches": {
        "vconfig": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "fa0ff6656d4a0e42241fd44718888241": {
      "content": "<video\nsrc={${1:clip}}\nbind:${2:duration}\nbind:${3:buffered}\nbind:${4:seekable}\nbind:${5:played}\nbind:${6:currentTime}\nbind:${7:paused}\nbind:${8:volume}\n></video>",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-bind-video",
      "matches": {
        "svbind-video": true,
        "svelte bind video": true
      },
      "source": "javascript/svelte"
    },
    "fa10b56e763e3f8e869652c039df9564": {
      "content": "${1:FIELDNAME} = models.TimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "time": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa1df3bf003a2fdbaed183edcbabb097": {
      "content": "_.lastIndexOf(${array}, ${value}, ${fromIndex})",
      "doc": "_.lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n\n// Search from the `fromIndex`.\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1\n\nThis method is like `_.indexOf` except that it iterates over elements of\n`array` from right to left.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-lastindexof",
      "matches": {
        "lodash lastindexof": true
      },
      "source": "javascript/lodash"
    },
    "fa1f1f9f55529121e7d7122048004112": {
      "content": "find(${1:id})",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "find(id)",
      "matches": {
        "fini": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fa2a1ced97d7ffbb3b8230f1ee163daf": {
      "content": "| ${1} -> ${0}",
      "doc": "",
      "filetype": "alpaca",
      "grammar": "snu",
      "label": "",
      "matches": {
        "-": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa2e96924aaf0e97013eeb689b7353b9": {
      "content": "xhr :post, :${1:create}, ${2:object}: { $3 }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "xhr post",
      "matches": {
        "xpost": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fa3001083c50c5beba09d2c229fe4cf5": {
      "content": "Ada.Text_IO.Put_Line(${1});\n${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "Ada.Text_IO.Put_Line",
      "matches": {
        "put_line": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fa35f798b3c9d192a83d9c2e9616726a": {
      "content": "validation_errors();${1}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_validation_errors": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa3c2efc660bc5dc7c2330e62adc73c3": {
      "content": "border-corner-image: continue;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdtli:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa3c5aeb4fc3208f5fe50de05943bffc": {
      "content": "<template>\n\t<div>\n\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\t${0}\n\t}\n</script>\n\n<style lang=\"stylus\" scoped>\n\n</style>",
      "doc": "Base for Vue File with Stylus",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "Vue Single File Component with Stylus",
      "matches": {
        "vbase-styl": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "fa3d0de183b6812a38eb7cdcf016d70e": {
      "content": "PropTypes.func.isRequired,",
      "doc": "Func prop type required",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-func-required",
      "matches": {
        "prop-types func required": true,
        "ptfr": true
      },
      "source": "javascript/prop-types"
    },
    "fa44ae19bf25f6d16026763a4a14e12f": {
      "content": "<http://${1:url}>",
      "doc": "",
      "filetype": "markdown",
      "grammar": "snu",
      "label": "",
      "matches": {
        "<": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa4978e5246e3922cc7f81da855651fd": {
      "content": "import { BrowserRouter as Router } from 'react-router-dom'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React Browser Router",
      "matches": {
        "imbr": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "fa4b70eaf5503d4c63c05137892150e3": {
      "content": "std::list<${1:T}> ${2};",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "",
      "matches": {
        "list": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa4ebad126af5afd013cdfe6cd5eb77d": {
      "content": "${1:obj}.size()",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "size": true
      },
      "source": "snippets/coffee"
    },
    "fa4eea17ffd6162423ace50fecad22b2": {
      "content": "clear left",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa50bb76f0da118f4f190d40d13ec8c1": {
      "content": "border-fit space",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:sp": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa5b877e908169e9ac1bb07369e61a76": {
      "content": "#region ${1:Region}\n${VISUAL}$0\n#endregion",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "#region #endregion",
      "matches": {
        "#region": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fa6252c191a3db615bb2e5f8cc89de42": {
      "content": "const ${1:feature}Reducer = createReducer(\n\tinitialState,\n\ton($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),\n);\n\nexport function reducer(state: State | undefined, action: Action) {\n\treturn $1Reducer(state, action);\n}",
      "doc": "Creates an NgRx Reducer",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngrx-create-reducer",
      "matches": {
        "a-ngrx-create-reducer": true,
        "angular ng rx create reducer": true
      },
      "source": "javascript/angular"
    },
    "fa65894028391d5a5c3e4c49733fd02b": {
      "content": "justify-items center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ji:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa75958144ead9537903679548343ef5": {
      "content": "import { ${1:libName} } from '${1:libName}'",
      "doc": "import a library",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-import-library",
      "matches": {
        "vimport-lib": true,
        "vue import library": true
      },
      "source": "javascript/vue"
    },
    "fa7e74dc73a9d125090ef602df2cc044": {
      "content": "background: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "background": true,
        "bg": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fa8425412dfcb524073f5cbd81ec0ecc": {
      "content": "static getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
      "doc": "Invoked after a component is instantiated as well as when it receives new props.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "getDerivedStateFromProps",
      "matches": {
        "gdsfp": true
      },
      "source": "vscode-react/snippets"
    },
    "fa84bbf2cc14900a0ccef8f802324a8f": {
      "content": "expect(${1:target}).toThrow(${2:value});",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to throw (js)",
      "matches": {
        "eth": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa8f4e70853cabdc090fd8f89526df0f": {
      "content": "_.flow(${funcs})",
      "doc": "function square(n) {\n  return n * n;\n}\n\nvar addSquare = _.flow([_.add, square]);\naddSquare(1, 2);\n// => 9\n\nCreates a function that returns the result of invoking the given functions\nwith the `this` binding of the created function, where each successive\ninvocation is supplied the return value of the previous.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-flow",
      "matches": {
        "lodash flow": true
      },
      "source": "javascript/lodash"
    },
    "fa93c147b99f04268cf869cad141786c": {
      "content": "import React, { PureComponent } from 'react'\n",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "import React, { PureComponent }",
      "matches": {
        "imrpc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "fa9d86fc67067e1edf671fbc8020ed38": {
      "content": "class ${1:name}${2:(arg)} extends Ordered[$1] ${3: with} {\n\t${4:override def toString = \"$1\"}\n\tdef compare(that: $1) = ${5:this - that}\n\t${0}\n}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ordered": true
      },
      "source": "vim-snippets/snippets"
    },
    "fa9db1597c209bfb9e619d500b0e5eda": {
      "content": "text-indent: -9999px",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ti:-": true
      },
      "source": "vim-snippets/snippets"
    },
    "fab058c40927fce166a2861f60fed824": {
      "content": "${1:public} bool ${2}(${3})\n{\n\t${0:return false;}\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mb": true
      },
      "source": "vim-snippets/snippets"
    },
    "fabd5216f56f0926a1cf7ba76babc7bb": {
      "content": "border-fit: space",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:sp": true
      },
      "source": "vim-snippets/snippets"
    },
    "fac578829825865c64bc22ec0aa17c12": {
      "content": "{% trans \"${1:string}\" %}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "trans": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "facafa891df33726039c1154c0add4ee": {
      "content": "align-items: flex-end;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:fe": true
      },
      "source": "vim-snippets/snippets"
    },
    "fade8d811591956652167f8cfcb9e1ad": {
      "content": "static int Main(string[] args)\n{\n\t$0\n}",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "static int main",
      "matches": {
        "sim": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "faf7e6df99863383850d6e9da8905361": {
      "content": "/**\n* @group ${1}\n*/",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "phpunit comment with group",
      "matches": {
        "testcmt": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb0d7a746c2868cef46f6d27a29807b5": {
      "content": "middleware ({ store, redirect }) {\n\t${1:data}\n},",
      "doc": "Set the middleware for a specific page of the application.",
      "filetype": "nuxt",
      "grammar": "lsp",
      "label": "nuxt-middleware",
      "matches": {
        "nuxt middleware": true
      },
      "source": "javascript/nuxt"
    },
    "fb0d9da08d54838713c4985e9f3dff8d": {
      "content": "[${1:text}](http://${2:link})$0",
      "doc": "Insert link",
      "filetype": "rmarkdown",
      "grammar": "lsp",
      "label": "Insert link",
      "matches": {
        "link": true
      },
      "source": "vscode-R/snippets"
    },
    "fb103885bbb4004d05127a4c5d8c71c2": {
      "content": "${1:fn} : ${2:a}\n$1 =\n\t${0}",
      "doc": "",
      "filetype": "idris",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn0": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb20560f038faed95cbc0d9464ec2185": {
      "content": "<script>\n\t${1:// your script goes here}\n</script>",
      "doc": "",
      "filetype": "svelte",
      "grammar": "lsp",
      "label": "svelte-script-tag",
      "matches": {
        "svelte script": true,
        "svscript": true
      },
      "source": "javascript/svelte"
    },
    "fb2a6266ce9d867689d6273e1e321caf": {
      "content": "Logger.info(${1:param});",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "info": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb2d66ff0efbde3c1f7f436148279649": {
      "content": "qr/${0:regex}/x",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "qr/": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb2d6e2129c09c072a5247415c3ded8b": {
      "content": "each_index { |${1:i}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eai": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb304b950ae81a00713bf207710d6150": {
      "content": ":source-highlighter: highlight.js$0",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "source-highlighter: highlight.js",
      "matches": {
        "highlight-highlight.js": true,
        "hihighlight.js": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fb3185c04acdf0707b09ab6c8fe30e88": {
      "content": "hsl(${1:360}, ${2:100}%, ${3:100}%)$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "color hsl",
      "matches": {
        "hsl": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fb32c7097f9fb6865653436f432b0291": {
      "content": "if ${1}\n\t${0:${VISUAL}}\nendif",
      "doc": "",
      "filetype": "vim",
      "grammar": "snu",
      "label": "if statement",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb3d47e00ee394b0280d62b56f403cc6": {
      "content": "word-break break-all",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wob:ba": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb429015213e06e831f524c8ead7a40a": {
      "content": "let ${1} = ${2}\nin ${3}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "let": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb4e0d9bde5fed4a03b90c27b21e7241": {
      "content": "import ${1:defaultMember} from \"${0:TARGET}\";",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "import defaultMember from \"module-name\";",
      "matches": {
        "import-default": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fb4faa9cb1277d1580e0078ea2d20df5": {
      "content": "align-items flex-start",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:fs": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb51afe6b36a23593f3b775704600188": {
      "content": "justify-content: stretch",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb73c39845f942598156c94bc4adeffd": {
      "content": "<?php foreach ($${1:variable} as $${2:value}): ?>\n\t${0:${VISUAL}}\n<?php endforeach; ?>",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "<?php foreach ($var as $value): ?>  ... <?php endforeach; ?>",
      "matches": {
        "foreachil": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb7775f1f5650275ff9c013e1e4cce26": {
      "content": "\\ ${1:x} -> ${0}",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "λ",
      "matches": {
        "lambda": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fb8079e817a58ccb27386cba0f1892e5": {
      "content": "text-height max-size",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:m": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb833a391afb09e73dbe1b60461dddf6": {
      "content": "afterEach(() => {\n\t$0\n});",
      "doc": "",
      "filetype": "javascript-jasmine-arrow",
      "grammar": "snu",
      "label": "after each (js)",
      "matches": {
        "aft": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fb83cf93e5c5e9003943abdf15f813d5": {
      "content": "padding ${1:0} ${2:0} ${3:0} ${0:0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "p:4": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb852a6fe745781e029b6551c6351e91": {
      "content": "border-right ${1:1px} ${2:solid} ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdr+": true
      },
      "source": "vim-snippets/snippets"
    },
    "fb883a564973fa595350132d61dedeea": {
      "content": "${1:obj}.one('${2:event name}', function (${3:e}) {\n\t${0:// event handler}\n});",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "one": true
      },
      "source": "snippets/javascript"
    },
    "fb9af8568c23bdd896aec26a82f369a4": {
      "content": "wont_be_within_delta ${1:0.1}, ${2:0.1}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "wbwd": true
      },
      "source": "vim-snippets/snippets"
    },
    "fba01cd2b66b06091b66e7ceea5550eb": {
      "content": "$this->input->get(\"${1:index}\");${2}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_input-get": true
      },
      "source": "vim-snippets/snippets"
    },
    "fba7219c8cbf9670c975999545f825bf": {
      "content": "$Params = @{\n\t${1:Param1} = '${2:Value1}'\n\t${3:Param2} = '${4:Value2}'\n}\n${5:CommandName} @Params",
      "doc": "",
      "filetype": "ps1",
      "grammar": "snu",
      "label": "",
      "matches": {
        "splatting": true
      },
      "source": "vim-snippets/snippets"
    },
    "fba8e91efae90b6ba32410eb64cb9c14": {
      "content": "for ${1:item} in ${2:list}; do\n\t${0:${VISUAL}}\ndone",
      "doc": "",
      "filetype": "zsh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fore": true
      },
      "source": "vim-snippets/snippets"
    },
    "fbb4d180143f62aeebfc10620184229a": {
      "content": "<param name=\"${1:#:name}\">${0:#:description}</param>",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "<param name=\"\"></param>",
      "matches": {
        "param": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fbb58477547689a6618fcd2dfc8003cc": {
      "content": "TESTS = ${1:10_000}\nBenchmark.bmbm do |results|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bm-": true
      },
      "source": "vim-snippets/snippets"
    },
    "fbbb12e18770ebc4402167a6da7ae9d6": {
      "content": "font-variant: ${1:normal/small-caps};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "font-variant:   normal:small-caps (font)",
      "matches": {
        "font": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fbbf4b020166202be5c3a92768f035c9": {
      "content": "define(\"${1:#name}\", [\"${2:#dependencies1}\"], function (${3:#dependencies2}) {\n\treturn ${0:TARGET};\n});",
      "doc": "",
      "filetype": "javascript-requirejs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defn": true
      },
      "source": "snippets/javascript"
    },
    "fbc0660b22b9bcdbae04591facd92000": {
      "content": "<xsl:when test=\"${1:test}\">${0}\n</xsl:when>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when": true
      },
      "source": "vim-snippets/snippets"
    },
    "fbccf02311d2c7f0fe6210826a3e6ed7": {
      "content": "(apply ${1} ${0})",
      "doc": "",
      "filetype": "racket",
      "grammar": "snu",
      "label": "",
      "matches": {
        "apply": true
      },
      "source": "vim-snippets/snippets"
    },
    "fbd1a603d73f0da057bad7b0ca39d408": {
      "content": "{% default %}\n\t${0}",
      "doc": "",
      "filetype": "twig",
      "grammar": "snu",
      "label": "twig switch default",
      "matches": {
        "default": true
      },
      "source": "vim-snippets/snippets"
    },
    "fbd370d28dd7f1855f0c4902acc2b79f": {
      "content": "componentDidCatch(error, info) {\n\t$0\n}\n",
      "doc": "Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentDidCatch",
      "matches": {
        "cdc": true
      },
      "source": "vscode-react/snippets"
    },
    "fbe460afd208c6e9d21a2fcc50f85160": {
      "content": "_.escape(${string})",
      "doc": "_.escape('fred, barney, & pebbles');\n// => 'fred, barney, &amp; pebbles'\n\nConverts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\ncorresponding HTML entities.\n\n**Note:** No other characters are escaped. To escape additional\ncharacters use a third-party library like [_he_](https://mths.be/he).\n\nThough the \">\" character is escaped for symmetry, characters like\n\">\" and \"/\" don't need escaping in HTML and have no special meaning\nunless they're part of a tag or unquoted attribute value. See\n[Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n(under \"semi-related fun fact\") for more details.\n\nWhen working with HTML you should always\n[quote attribute values](http://wonko.com/post/html-escaping) to reduce\nXSS vectors.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-escape",
      "matches": {
        "lodash escape": true
      },
      "source": "javascript/lodash"
    },
    "fbe688376290b651c6e69407b9faa7d3": {
      "content": "include '${1:file}';",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc": true
      },
      "source": "vim-snippets/snippets"
    },
    "fbe6a1e5abd3f75aeac05c264502ae25": {
      "content": "\\$_FILES['${1:#:variable}']",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "",
      "matches": {
        "files": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fbe9a191ea7f679dcc9fb45162583029": {
      "content": "border-fit: clip",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "fbf364946db436865256296075bbf011": {
      "content": "__syncthreads();",
      "doc": "",
      "filetype": "cpp",
      "grammar": "snu",
      "label": "Synchonize threads",
      "matches": {
        "sync": true
      },
      "source": "vim-snippets/snippets"
    },
    "fbf4cb5c4165a04856941d2b7a8bd6d0": {
      "content": "align-items: stretch",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc00525fddafc4026e7903d2fabf193d": {
      "content": "text-align-last: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "tal:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc061a9a71e7a79b43920ac5e7ce3779": {
      "content": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: '${1:selector-name}'\n})\n\nexport class ${2:Name}Pipe implements PipeTransform {\n\ttransform(value: any, ...args: any[]): any {\n\t\t$0\n\t}\n}",
      "doc": "Angular pipe",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Pipe",
      "matches": {
        "a-pipe": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "fc0ff2484978022e2b34e8da6524810d": {
      "content": "${1:FIELDNAME} = models.IPAddressField(${0})",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ip": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc1237eca6356acfbff9f707db352439": {
      "content": "\\\\frac{\\\\partial^2 {$1}}{\\\\partial {$2} \\\\partial {$3}} {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "second partial derivation",
      "matches": {
        "ppdv": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc25045385f609e42e371e511e8ff33e": {
      "content": "assert_nil ${1:instance}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "asn": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc2957907a212b5253cd7c8558e36695": {
      "content": "before_save :${0:method}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mbs": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc2b1dbc21a9806499a76eb237402151": {
      "content": "public bool ${1} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb+-": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc35d56680fd4d3d60871fc63cd6b8d4": {
      "content": "describe('${1:Name of the group}', () => {\n\n\tlet ${2:cut};\n\n\tbeforeEach(() => {\n\t\t$2 = $3;\n\t});\n\n\ttest('${1:should }', () => {\n\t\texpect($2).toBe($0);\n\t});\n\n});",
      "doc": "creates a template to test a class under test",
      "filetype": "jest",
      "grammar": "lsp",
      "label": "jest-template-cut",
      "matches": {
        "cut": true,
        "jest template cut": true
      },
      "source": "javascript/jest"
    },
    "fc39ad0b8623645d90d489d9107a3548": {
      "content": "expect(${1:target}).toBeHidden();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to be hidden (js)",
      "matches": {
        "eh": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc3a803d85b4ff1dae280ae16dbaddac": {
      "content": "byte ${1:b}${2: = }${0:127};",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "byte": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc4313c3557ab9b62cd08edd83bc49a8": {
      "content": "sig\n\t${2:(* BODY *)}\nend",
      "doc": "",
      "filetype": "ocaml",
      "grammar": "snu",
      "label": "anonymous signature",
      "matches": {
        "sig": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fc489a9d872e1178724a1f72f080b769": {
      "content": "box(${1:width}, ${2:height}, ${0:depth});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "box": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc4b12038d65c6fbdb11b56c91daa969": {
      "content": "${1:obj}.ajaxError (${1:e}, xhr, settings, thrownError) ->\n\t${2:// error callback}\n${0}",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ajaxerror": true
      },
      "source": "snippets/coffee"
    },
    "fc57f27c0de0dc51881dfe01b62e45c4": {
      "content": "_.unzipWith(${array}, ${iteratee})",
      "doc": "var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n// => [[1, 10, 100], [2, 20, 200]]\n\n_.unzipWith(zipped, _.add);\n// => [3, 30, 300]\n\nThis method is like `_.unzip` except that it accepts `iteratee` to specify\nhow regrouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-unzipwith",
      "matches": {
        "lodash unzipwith": true
      },
      "source": "javascript/lodash"
    },
    "fc5f5b41ceb0a22a4505806b73274856": {
      "content": "\\begin{document}\n\t${1:TARGET}\n\\end{document}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{document} \\document": true,
        "document": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fc612a7c227956535458c9c6ea69b06d": {
      "content": "justify-content ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc6139b02bff650002440d28f72a05ea": {
      "content": "${${1:0}#${0:optional}}",
      "doc": "",
      "filetype": "neosnippet",
      "grammar": "snu",
      "label": "${X#optional}",
      "matches": {
        "$#": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fc6188a6b53e527e5432a001b2da7606": {
      "content": "background-image: none",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgi:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc6c5859a14d7ea727f054c98297aff7": {
      "content": "justify-content: right;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jc:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc6d81face80d9d13c9d621bd348a12a": {
      "content": "void keyReleased(){\n\t${0}\n}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "keyReleased": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc7291b450afc698f1069e759edc3d3a": {
      "content": "trait ${1:Name} {\n\t${0}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "Trait definition",
      "matches": {
        "trait": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc7c977d00d6454c2bd9b821adb07a2e": {
      "content": "max-width none",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "maw:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc7e44fedb62e5b50049164324347454": {
      "content": "digitalRead(${1});",
      "doc": "",
      "filetype": "arduino",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dr": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc82be3459a40da4314512a1314a91bd": {
      "content": "func Test${1:name}(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t}{\n\t\t{\n\t\t\tname: \"${2:test name}\",\n\t\t},\n\t}\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\t${0:${VISUAL}}\n\t\t})\n\t}\n}",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "table test function",
      "matches": {
        "testt": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc86935b473052da5134a39d937d7be5": {
      "content": "text-indent: -9999px;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ti:-": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc878e2b9526d43dea5e0fcfb47afce8": {
      "content": "if ${1:#:condition} {\n    ${2:TARGET}\n} else {\n    ${3}\n}",
      "doc": "",
      "filetype": "rust",
      "grammar": "snu",
      "label": "if () {} else {}",
      "matches": {
        "ifelse": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fc898fc091f96ee54ede74bae1c1fa76": {
      "content": "padding-right: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pr": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc899fa404a23e7f0374eb9433724152": {
      "content": "quotes: '\\00AB' '\\00BB' '\\201E' '\\201C'",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q:ru": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc8b20ecaf4c2bf75fd623c3afd3e47a": {
      "content": "cy.viewport('${1:preset}');",
      "doc": "Control the size of the screen for your application via presets. Preset supports the following options: ipad-2, ipad-mini, iphone-3, iphone-4, iphone-5, iphone-6, iphone-6+, iphone-x, iphone-xr, macbook-11, macbook-13, macbook-15, samsung-note9, samsung-s10",
      "filetype": "cypress",
      "grammar": "lsp",
      "label": "cypress-viewport-preset",
      "matches": {
        "cypress viewport preset": true
      },
      "source": "javascript/cypress"
    },
    "fc8d6a3027fdc427bd0e01e8cdcf08a4": {
      "content": "If ${1:condition} Then\n\t${0:; True code}\nEndIf",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc8faa0d75dd4adb9f1b93dc0a107ec3": {
      "content": "when {\n\tequals '${1:equals}'\n}\n${0}",
      "doc": "",
      "filetype": "jenkins",
      "grammar": "snu",
      "label": "",
      "matches": {
        "whenequals": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc913ec0cfa2bb76413948c36697f912": {
      "content": "const $1 = useSelector(state => state.$1);",
      "doc": "Redux useSelector() hook",
      "filetype": "redux",
      "grammar": "lsp",
      "label": "redux-useselector",
      "matches": {
        "redux useselector": true,
        "uss": true
      },
      "source": "javascript/redux"
    },
    "fc91ef9c1e30db9eafb5bbdc80949bd8": {
      "content": "__import__('ptpython.repl', fromlist=('repl')).embed(globals(), locals(), vi_mode=${1:False}, history_filename=${2:None})",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ptpython": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc9383607ab825ccc91b9552d625456f": {
      "content": "#include <${1:stdio}.h>",
      "doc": "",
      "filetype": "lpc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inc": true
      },
      "source": "vim-snippets/snippets"
    },
    "fc993fa203cb730a8d3b405d37684c9e": {
      "content": "fmt.Sprintf(\"%${1:s}\", ${2:var})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "fmt.Sprintf(...)",
      "matches": {
        "sp": true
      },
      "source": "gosnippets/UltiSnips"
    },
    "fc9a94ca883592a680efacb2c689cdad": {
      "content": "padding-top: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pt": true
      },
      "source": "vim-snippets/snippets"
    },
    "fca0fb26468238ef726bffda123db684": {
      "content": "${1:key}->${2:val}${0:, keyval}",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "keyval": true
      },
      "source": "vim-snippets/snippets"
    },
    "fcaf14136cd09c67dae41160d29560ed": {
      "content": "const ${1:context} = useContext(${2:contextValue})",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useContext",
      "matches": {
        "useContext": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "fcb7609a8abc70f48c5eee15f35c8d63": {
      "content": "map { |${1:e}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "map": true
      },
      "source": "vim-snippets/snippets"
    },
    "fcba869e29ac7dc48e4a6186fae2987d": {
      "content": "(:require [clojure.core.strint :refer (<<)])",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "use-strint-in-ns": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fcbb9e8220ca0656e00973ff05d81085": {
      "content": "after_destroy $0",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "after_destroy",
      "matches": {
        "aftd": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fcc12d21bb2102dde94544c9f5220e08": {
      "content": "\\begin{enumerate}\n\t\\item ${1:TARGET}\n\\end{enumerate}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{enumerate} \\enumerate enum": true,
        "enumerate": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fcc229561b1cfff57f2c2a14a9cadd80": {
      "content": "${1:YYYY}-${2:MM}-${3:DD} balance ${4:Account} ${5:Amount} ${6:#:Commodity}",
      "doc": "",
      "filetype": "beancount",
      "grammar": "snu",
      "label": "balance",
      "matches": {
        "balance": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fcc5078ab00e887ac16b1aa0ac45343d": {
      "content": "integer, intent(out) ::",
      "doc": "",
      "filetype": "fortran",
      "grammar": "snu",
      "label": "integer intent(out)",
      "matches": {
        "ino": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fccaf5e2c73c5e9f04a18ec0debbbc08": {
      "content": "MsgBox(${0:MsgType}, ${1:\"Title\"}, ${2:\"Message Text\"})",
      "doc": "",
      "filetype": "autoit",
      "grammar": "snu",
      "label": "",
      "matches": {
        "msg": true
      },
      "source": "vim-snippets/snippets"
    },
    "fcceb796e90cd831e73b0082d617de55": {
      "content": "flex-direction: row;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxd:r": true
      },
      "source": "vim-snippets/snippets"
    },
    "fcdb4d01f97aafb6112019f10a9d64f5": {
      "content": "each_pair { |${1:name}, ${2:val}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eap": true
      },
      "source": "vim-snippets/snippets"
    },
    "fcdd5a15882e065bf65a1dbad978c14d": {
      "content": "${1:expression} if ${2:condition};\n",
      "doc": "",
      "filetype": "perl",
      "grammar": "snu",
      "label": "Conditional one-line (xif)",
      "matches": {
        "xif": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fcddc0e18b36234da9070d5fa79b3730": {
      "content": "console.log(${1:object});",
      "doc": "Displays a message in the console",
      "filetype": "base",
      "grammar": "lsp",
      "label": "consolelog",
      "matches": {
        "base console log": true
      },
      "source": "javascript/base"
    },
    "fcf02086550a7b4f2b39e0d37a28f261": {
      "content": "for ${1:#:name} in ${2:#:array}\n  ${0:TARGET}",
      "doc": "",
      "filetype": "coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fora": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fcf4878c730e11ef75f94203b700c451": {
      "content": "\\begin{thebibliography}\n\t${1:TARGET}\n\\end{thebibliography}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{thebibliography} \\thebibliography": true,
        "thebibliography": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fcf714f301027447afd3e5a903d659b2": {
      "content": "private string ${1} { get; set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ps-": true
      },
      "source": "vim-snippets/snippets"
    },
    "fcfbc7df1d315fc82b8f3ae08076f8a9": {
      "content": "go func(${1}) {\n\t${3:/* TODO */}\n}(${2})",
      "doc": "",
      "filetype": "go",
      "grammar": "snu",
      "label": "go func(...) { ... }(...)",
      "matches": {
        "gof": true
      },
      "source": "gosnippets/snippets"
    },
    "fd2068b42c8b37535030bbe4c445933e": {
      "content": "page-break-before: left;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pgbb:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd20afa646add88ea49135dfdbe2313a": {
      "content": "signal ${1} : unsigned (${2} downto 0);",
      "doc": "",
      "filetype": "vhdl",
      "grammar": "snu",
      "label": "",
      "matches": {
        "un": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd20e346e7cf7733bf756e5503b030ca": {
      "content": "attr_protected :${0:attr_names}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "atp": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd218c5fa2af85758a0c060d4b021134": {
      "content": "text-height font-size",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "th:f": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd33c1aa0798b4daa604a04dea721294": {
      "content": "export const state = () => ({\n\tvalue: 'myvalue'\n})\n\nexport const getters = {\n\tgetterValue: state => {\n\t\treturn state.value\n\t}\n}\n\nexport const mutations = {\n\tupdateValue: (state, payload) => {\n\t\tstate.value = payload\n\t}\n}\n\nexport const actions = {\n\tupdateActionValue({ commit }) {\n\t\tcommit('updateValue', payload)\n\t}\n}",
      "doc": "vuex store 2",
      "filetype": "vuex",
      "grammar": "lsp",
      "label": "vuex-store-2",
      "matches": {
        "vstore2": true,
        "vuex store 2": true
      },
      "source": "javascript/vuex"
    },
    "fd3aacec655d9fcfd0b7c220b3191797": {
      "content": "<ng-content select=\"${0:selector}\"></ng-content>",
      "doc": "Angular ng-content",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ng-content",
      "matches": {
        "a-ng-content": true,
        "angular ng-content": true
      },
      "source": "javascript/angular"
    },
    "fd3d352dc910991897e8cfa4f97c4e1e": {
      "content": "kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: {{ template \"$2.fullname\" . }}\n  labels:\n\tchart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n\trelease: \"{{ .Release.Name }}\"\n\theritage: \"{{ .Release.Service }}\"\n\tapp: {{ template \"${2:chartName}.fullname\" . }}\nspec:\n  accessModes:\n\t- {{ .Values.persistence.accessMode | quote }}\n  resources:\n\trequests:\n\t  storage: {{ .Values.persistence.size | quote }}\n{{- if .Values.persistence.storageClass }}\n{{- if (eq \"-\" .Values.persistence.storageClass) }}\n  storageClassName: \"\"\n{{- else }}\n  storageClassName: \"{{ .Values.persistence.storageClass }}\"\n{{- end }}\n{{- end }}\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pvc_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd40960601d9efe6d28862664ff7de81": {
      "content": "border-style: dot-dot-dash",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds:dtdtds": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd52fd042b6cf6165741715899f3a34b": {
      "content": "${1:void} ${2:#:method}(${3}) ${4:throws} {\n    ${0:TARGET}\n}",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "method": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fd580811b5a01a9770cf8cb226bc685e": {
      "content": "def_delegators :${1:@del_obj}, :${0:del_methods}",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "defds": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd61934be91fd1d73dae8ac8dbe3943d": {
      "content": "NO-UNDO",
      "doc": "",
      "filetype": "progress",
      "grammar": "snu",
      "label": "",
      "matches": {
        "nu": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd70531d9018bb7d53e5bc23a8aee345": {
      "content": "console.debug(${0});",
      "doc": "",
      "filetype": "javascript",
      "grammar": "snu",
      "label": "console.debug",
      "matches": {
        "cd": true
      },
      "source": "snippets/javascript"
    },
    "fd72967cc72f20a49ddca7a3374aa0fe": {
      "content": "${1:name}.flatMap${0:[T]}(a",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "flatmap": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd72f34f9c191463dc9ed14e81f8ed64": {
      "content": "assert(${1:a} === ${0:b})",
      "doc": "",
      "filetype": "scala",
      "grammar": "snu",
      "label": "",
      "matches": {
        "assert": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd7be834927abd1bd74d209a9271dbec": {
      "content": "const ${1:${TM_FILENAME_BASE}} = () => {\n\t$2\n}\n\nexport default ${1:${TM_FILENAME_BASE}}",
      "doc": "Creates a React Custom Hook with ES7 module system",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "reactCustomHook",
      "matches": {
        "rch": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "fd7e522ad7eebe8ac7c697127d3e48dc": {
      "content": "align-items center",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ai:c": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd807b636c3497e5f961f7ed388279f6": {
      "content": "= ${1:Document Name}\n${2:Alice <alice@example.com>}\n${3:Revision line}\n:toc:\n:imagesdir: img/\n:homepage: https://www.example.com\n:icons: font\n:data-uri:\n${0}",
      "doc": "",
      "filetype": "asciidoc",
      "grammar": "snu",
      "label": "Start a new document",
      "matches": {
        "doc": true,
        "title": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fd83ed86e201383ee631a1067dc26aa7": {
      "content": "overflow-x: auto;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovx:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd88a56a8814bc36586f2f1136228312": {
      "content": "font-variant: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fv": true
      },
      "source": "vim-snippets/snippets"
    },
    "fd95eb2e6d10d7d97494cae812c6215f": {
      "content": "place-content stretch",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pc:st": true
      },
      "source": "vim-snippets/snippets"
    },
    "fda603a8271bc104ff33d63ee26e7485": {
      "content": "[formGroupName]=\"${1:name}\"",
      "doc": "Angular formGroupName",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "ngformgroupname",
      "matches": {
        "a-formgroupname": true,
        "angular ng form group name": true
      },
      "source": "javascript/angular"
    },
    "fda87ca3ddd51fd149a1c54a2dfcae08": {
      "content": "module ${1} =\n\t${0}",
      "doc": "",
      "filetype": "fsharp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mod": true
      },
      "source": "vim-snippets/snippets"
    },
    "fdaab78d9f5f13f4edfa1c036a3bf488": {
      "content": "<%= gettext(\"${0:${VISUAL}}\") %>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "gettext",
      "matches": {
        "gt": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fdb58bbbbea9bcd7e765a82efec1ac43": {
      "content": "expect(${1:target}).not.toBeNull();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect not to be null (js)",
      "matches": {
        "notn": true
      },
      "source": "vim-snippets/snippets"
    },
    "fdc79f0d09f18554a8ec057698f59d99": {
      "content": "margin-top: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "mt": true
      },
      "source": "vim-snippets/snippets"
    },
    "fdcee6203906c43739001609dc46998c": {
      "content": "overflow: hidden;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ov:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "fdd32b9f2bfc2f35bd417a0501b332db": {
      "content": "protected bool ${1} { get; private set; }",
      "doc": "",
      "filetype": "cs",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pb|-": true
      },
      "source": "vim-snippets/snippets"
    },
    "fdd451f0292b383aaca0ad845fcf0783": {
      "content": "border-fit: overwrite;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdf:of": true
      },
      "source": "vim-snippets/snippets"
    },
    "fdd5251e769ebad51505df84db940402": {
      "content": "const ${1:refContainer} = useRef(${2:initialValue});",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "useRef",
      "matches": {
        "userf": true
      },
      "source": "snippets/javascript"
    },
    "fdd8eb44043a457cce8240c739b63dea": {
      "content": "<div id=\"${1}\">${2:TARGET}</div>${3}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "divid": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fdda2d9483c10416af32f81107e41a44": {
      "content": "content: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "c": true,
        "content": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fde8984ec1c8b91068cfadf0778aa7fa": {
      "content": "test \"${1:test_name}\", ctx do\n\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "testc": true
      },
      "source": "vim-snippets/snippets"
    },
    "fdf972cdfca95a836ddd031c54e69d9b": {
      "content": ".. important:: ${0:#:CURSOR}",
      "doc": "",
      "filetype": "rst",
      "grammar": "snu",
      "label": "important",
      "matches": {
        "important": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fdf9b388f5b9adb37cf8307820ce8276": {
      "content": "-webkit-box-shadow: ${1};${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bxsh:w": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe0069dbdcae7d7a2ac314497479084b": {
      "content": "java.math.",
      "doc": "",
      "filetype": "java",
      "grammar": "snu",
      "label": "",
      "matches": {
        "j.m": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe028a60638560dd8386c7409705cb64": {
      "content": "return ${0}",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ret": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe056f9bc862afaea9cbfb6b71395a0f": {
      "content": "expect(${1:target}).toBeDefined();",
      "doc": "",
      "filetype": "javascript-jasmine",
      "grammar": "snu",
      "label": "expect to be defined (js)",
      "matches": {
        "etbd": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe095145523e808a0ca7d3a7870aa54a": {
      "content": "grid-auto-rows: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gar": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe0d40a1107b2ab41e9c31d34aa2b284": {
      "content": "repeat {\n    ${0:TARGET}\n} while ${1:false}",
      "doc": "",
      "filetype": "swift",
      "grammar": "snu",
      "label": "",
      "matches": {
        "repeat": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fe14d9f13f93fce7458b414661ca4b02": {
      "content": "forever begin\n\t${0}\nend",
      "doc": "",
      "filetype": "verilog",
      "grammar": "snu",
      "label": "",
      "matches": {
        "forev": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe1d3f5f58ac7de88ab8ecff8ddfbddb": {
      "content": "console.dir(${1:object});",
      "doc": "Prints a JavaScript representation of the specified object",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "consoleDir",
      "matches": {
        "cdi": true
      },
      "source": "vscode-javascript/snippets"
    },
    "fe2121bc28e52112ed7ea96474d1d342": {
      "content": "{{- if .Values.$1.initContainers }}\n\t  initContainers:\n\t  - name: wait-workers\n\t\timage: \"{{ .Values.$1.image.repository }}:{{ .Values.$1.image.tag }}\"\n\t\timagePullPolicy: {{ .Values.${1:value_key}.image.pullPolicy }}\n\t\t# env\n\t\tcommand:\n\t\t  - sh\n\t\t  - -c\n\t\t  - |\n\t\t\tuntil printf \".\" && nc -z -w 2 {{ template \"${2:chartName}.fullname\" . }} {{ .Values.postgresql.service.port }}; do\n\t\t\t\tsleep 2;\n\t\t\tdone;\n\t\t\techo 'PostgreSQL OK ✓'\n\t\t# args\n{{- end }}\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "initContainers_spec": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe24cce45750e3905150717ae3320669": {
      "content": "- if ${1:condition}\n\t${2:${VISUAL}}\n- else\n\t${0}",
      "doc": "",
      "filetype": "haml",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe28e37540419f600b886d27d86199de": {
      "content": "logger.fatal",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "logger.fatal",
      "matches": {
        "logf": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fe3043558d5999e374d86ae0db55d58b": {
      "content": "[ ${1} ]",
      "doc": "",
      "filetype": "puppet",
      "grammar": "snu",
      "label": "",
      "matches": {
        "[": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe34471dcbbeb62d9e9b4630d70527f6": {
      "content": "${1:div}(:class=\"[${2:classNameA}, {${3:classNameB} : ${4:condition}}]\")",
      "doc": "vue multiple conditional class bindings",
      "filetype": "vue-pug",
      "grammar": "lsp",
      "label": "Vue Multiple Conditional Class Bindings",
      "matches": {
        "vclass-obj-mult": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "fe3ba70d0d798c49c5e1dc2a0be5c981": {
      "content": "${1:obj}.replaceAll(${2:target})",
      "doc": "",
      "filetype": "javascript-jquery",
      "grammar": "snu",
      "label": "",
      "matches": {
        "repa": true
      },
      "source": "snippets/javascript"
    },
    "fe3e831f494ff49565fcedc470bb27d1": {
      "content": "if (${1:true}) {${2}}\nelse{${0}}",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe45c279a67ef37b8abfcce73d60e68c": {
      "content": "form_label(\"${1:label text}\", \"${2:id}\");${3}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_form_label": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe470cba156f81757b835ee5b32da94e": {
      "content": "grep(${1:/pattern/}) { |${2:match}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "gre": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe4a589121d0cfcbd19742aa003cf3d1": {
      "content": "if ${1:condition} then\n\t${2:-- body}\nend",
      "doc": "",
      "filetype": "lua",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe4d25454d6b413ccfbc2a360505d288": {
      "content": "<input type=\"reset\" name=\"${1}\" id=\"${2:$1}\" value=\"${3}\">",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "input:reset": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe4def91021e5c1507fef40025884448": {
      "content": "import { GraphQLClient } from 'graphql-request';",
      "doc": "",
      "filetype": "graphql-request",
      "grammar": "lsp",
      "label": "graphql-request-import-client",
      "matches": {
        "graphql-request import client": true
      },
      "source": "javascript/graphql-request"
    },
    "fe521b9cbd1366a2bad2b6399945e2d1": {
      "content": "detach(${0:})",
      "doc": "Detach",
      "filetype": "r-snippets",
      "grammar": "lsp",
      "label": "det",
      "matches": {
        "detach": true
      },
      "source": "vscode-R/snippets"
    },
    "fe524de000183eba71a6d7270a871efe": {
      "content": "{% highlight ${1:#:TARGET} %}\n  ${2:code}\n{% endhighlight %}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "highlight": true,
        "hl": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fe545d276d1f05d7cad01f7308de90e6": {
      "content": "{if ${1:expression}}\n\t$2\n{else}\n\t$0\n{/if}",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "if .. else (ife)",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fe54719537e37bb1a53e7ee0cb9a90ed": {
      "content": "&#x2325;",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "option": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe61a7d9371ae9f3f06e4e4ad230f412": {
      "content": "Yii::app()->cache->add('${1:key}', ${2:value}, ${3:expire}, new C${4}CacheDependency(${0}));",
      "doc": "",
      "filetype": "yii",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ycad": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe6495f5026b9a3967a80e96038e89c4": {
      "content": "content no-open-quote",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ct:noq": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe67ca6d79b32e299838de287cca6cb4": {
      "content": "border-style: ${0}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bds": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe7dc4f70a8720ec0bfe824498bb8b9a": {
      "content": "padding-bottom: ${1:20px};$0",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "padding-bottom: length (margin)",
      "matches": {
        "padding": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fe8245d76d614f2ab5196a3df015cb49": {
      "content": "_.cloneDeepWith(${value}, ${customizer})",
      "doc": "function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(true);\n  }\n}\n\nvar el = _.cloneDeepWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 20\n\nThis method is like `_.cloneWith` except that it recursively clones `value`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-clonedeepwith",
      "matches": {
        "lodash clonedeepwith": true
      },
      "source": "javascript/lodash"
    },
    "fe8a8f8665c3de6217326e05594d8339": {
      "content": "flex-direction: ${0:row};",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fxd": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe8d16631d5e4bf6f5b75c51b4e7e34a": {
      "content": "$1:\n  name: ${1:value_key}\n  image:\n\trepository:\n\ttag:\n\tpullPolicy: IfNotPresent\n  hostNetwork: false\n  dnsPolicy: ClusterFirst\n  daemonset:\n\tuseHostPort: false\n  podLabels: {}\n  scope:\n\tenabled: false\n\tnamespace: \"\"   # defaults to .Release.Namespace\n  extraArgs: {}\n  extraEnvs: []\n  kind: Deployment\n  updateStrategy: {}\n  minReadySeconds: 0\n  tolerations: []\n  affinity: {}\n  nodeSelector: {}\n  podAnnotations: {}\n  replicaCount: 1\n  minAvailable: 1\n  resources: {}\n  autoscaling:\n\tenabled: false\n  extraContainers: {}\n  extraVolumeMounts: {}\n  extraVolumes: {}\n  extraInitContainers: []\n  lifecycle: {}\nrevisionHistoryLimit: 10\n${0}",
      "doc": "",
      "filetype": "helm",
      "grammar": "snu",
      "label": "",
      "matches": {
        "deploy_values": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe8e70254925303c30523f2dc0ba33c2": {
      "content": "border-right-color: ${1};${2}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "border-right-color": true,
        "brc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fe9b310b6eaa707b660aaf2b374b7f45": {
      "content": "params[:${1:id}]",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "pa": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe9d404e0e98ce41b1491d649867c6b4": {
      "content": "{\n\t\"type\": \"radio\",\n\t\"id\": \"${1}\",\n\t\"label\": \"${2}\",\n\t\"options\": [\n\t\t{ \"value\": \"${5}\", \"label\": \"${0}\" }\n\t],\n\t\"default\": \"${3}\",\n\t\"info\": \"${4}\"\n}",
      "doc": "",
      "filetype": "liquid",
      "grammar": "snu",
      "label": "",
      "matches": {
        "_radio": true
      },
      "source": "vim-snippets/snippets"
    },
    "fe9e48506c1a50e12df6ee0b4d60367e": {
      "content": "_.functions(${object})",
      "doc": "function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n\nFoo.prototype.c = _.constant('c');\n\n_.functions(new Foo);\n// => ['a', 'b']\n\nCreates an array of function property names from own enumerable properties\nof `object`.",
      "filetype": "lodash",
      "grammar": "lsp",
      "label": "lodash-functions",
      "matches": {
        "lodash functions": true
      },
      "source": "javascript/lodash"
    },
    "fea293a3d27e1bd63cf335f89ed798ad": {
      "content": "PropTypes.func,",
      "doc": "Func prop type",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-func",
      "matches": {
        "prop-types func": true,
        "ptf": true
      },
      "source": "javascript/prop-types"
    },
    "fea3fbd3ba49207528d1dc13e775080d": {
      "content": "\\begin{block}{${1:#:title}}\n\t${2:TARGET}\n\\end{block}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{block}": true,
        "block": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fea7cbdcd2087f1604a1cf983671e902": {
      "content": "quotes ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "q": true
      },
      "source": "vim-snippets/snippets"
    },
    "feab5507eb6e7456671afb4f1d2a2350": {
      "content": "if ${1:condition}\n\t${0}\nelse\n    ${1}\nend",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/snippets"
    },
    "feac554c0a9d35869e8abaf73dfb6b88": {
      "content": "$this->assertInstanceOf(${1:Example}::class, ${2:$actual});",
      "doc": "",
      "filetype": "php",
      "grammar": "snu",
      "label": "$this->assertInstanceOf(Example::class, $actual)",
      "matches": {
        "asi": true
      },
      "source": "vim-snippets/snippets"
    },
    "feb1176d15ba609be1eebd5704925f0f": {
      "content": "else\n\t${0:TARGET}",
      "doc": "",
      "filetype": "sh",
      "grammar": "snu",
      "label": "",
      "matches": {
        "el": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "feb898232f7b6db17428d39d75f5c3cc": {
      "content": "cattr_accessor :${0:attr_names}",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "crw": true
      },
      "source": "vim-snippets/snippets"
    },
    "feba123ef9b321204808d6ae3bf47b6d": {
      "content": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
      "doc": "Basic render.",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "componentRender",
      "matches": {
        "ren": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "febc2abceaade25df8c045c4d12acfc4": {
      "content": "v-model=\"${1:something}\"",
      "doc": "Expects: varies based on value of form inputs element or output of components",
      "filetype": "vue",
      "grammar": "lsp",
      "label": "vue-v-model",
      "matches": {
        "vmodel": true,
        "vue v-model": true
      },
      "source": "javascript/vue"
    },
    "fec18d84c2bb6500c6ae763eb2dd4b15": {
      "content": "__import__('IPython').embed()",
      "doc": "",
      "filetype": "python",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iem": true
      },
      "source": "vim-snippets/snippets"
    },
    "fec24e12ffd923995f0ff850f8e80389": {
      "content": "\\\\ddot{{$1}} {$0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "ddot",
      "matches": {
        "ddot": true
      },
      "source": "vim-snippets/snippets"
    },
    "fec42a501cd6fc8fe9c27120f8754a0e": {
      "content": "<%inherit file=\"${0:filename}\" />",
      "doc": "",
      "filetype": "mako",
      "grammar": "snu",
      "label": "",
      "matches": {
        "inherit": true
      },
      "source": "vim-snippets/snippets"
    },
    "feca0c64c5dee90af8eed438e2d3a0ae": {
      "content": "overflow-style ${0}",
      "doc": "",
      "filetype": "stylus",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs": true
      },
      "source": "vim-snippets/snippets"
    },
    "fecbcf49c4726099bc975873a2eae7fa": {
      "content": "function ${2:function_name}(${3})\n\t${0}\nend",
      "doc": "",
      "filetype": "falcon",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fun": true
      },
      "source": "vim-snippets/snippets"
    },
    "fecfb401fbd3b39cd82e1af71e4d7166": {
      "content": "receive do\n\t${1} ->\n\t\t${0}\nend",
      "doc": "",
      "filetype": "elixir",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rec": true
      },
      "source": "vim-snippets/snippets"
    },
    "fed03838245953bd66d2acd43846f496": {
      "content": "out${1:(result)}\n{\n\tassert(${2:/*condition*/}, \"${3:error message}\");\n\t$4\n}\nbody",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "out contract (out)",
      "matches": {
        "out": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fed40c7a34a49fd6a909cea1a4f09d04": {
      "content": "PropTypes.node,",
      "doc": "Anything that can be rendered: numbers, strings, elements or an array",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-node",
      "matches": {
        "prop-types node": true,
        "ptnd": true
      },
      "source": "javascript/prop-types"
    },
    "fedccb7cd849ed127e20556dfe0efb11": {
      "content": "Run Keyword If Any Critical Tests Failed    ${1:${kw}}    ${2:${args}}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Run Keyword If Any Critical Tests Failed",
      "matches": {
        "rkiactf": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "fee9f5d453355ddbe510236098cf47a6": {
      "content": "overflow-style: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ovs:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "fef34b4419e286f432c8cfe8b35a502d": {
      "content": "@if ${1:condition}\n\t${0:${VISUAL}}",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "if": true
      },
      "source": "vim-snippets/snippets"
    },
    "fef39828348f2429d34e7e59907ab0f6": {
      "content": "${1:obj}.prevUntil('${2:selector expression}'${3:, 'filter expression'})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "prevu": true
      },
      "source": "snippets/coffee"
    },
    "fef713419362da139a4a9c4afd7da1b6": {
      "content": "var $1 = new sap.m.ResponsivePopover({\n\t\t\tplacement :$2 ,//sap.m.PlacementType (default: sap.m.PlacementType.Right)\n\t\t\tshowHeader :$3 ,//boolean (default: true)\n\t\t\ttitle : $4,//string\n\t\t\ticon :$5 ,//sap.ui.core.URI\n\t\t\tmodal :$6 ,// boolean\n\t\t\toffsetX :$7, //int\n\t\t\toffsetY :$8, //int\n\t\t\tcontentWidth : $9,//sap.ui.core.CSSSize\n\t\t\tcontentHeight :$10, //sap.ui.core.CSSSize\n\t\t\thorizontalScrolling :$11, //boolean\n\t\t\tverticalScrolling :$12, //boolean\n\t\t\tshowCloseButton :$13, //boolean (default: true)\n\t\t\t//Aggregations\n\t\t\tcontent :$14,  //sap.ui.core.Control[]\n\t\t\tcustomHeader :$15,  //sap.m.IBar\n\t\t\tsubHeader : $16, //sap.m.IBar\n\t\t\tbeginButton :$17,  //sap.m.Button\n\t\t\tendButton : $18, //sap.m.Button\n\t\t\t//Associations\n\t\t\tinitialFocus : $19, //string | sap.ui.core.Control\n\t\t\t//Events\n\t\t\tbeforeOpen :$20,  //fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]\n\t\t\tafterOpen : $21, //fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]\n\t\t\tbeforeClose : $22, //fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]\n\t\t\tafterClose : $23 //fnList\n\t\t});",
      "doc": "",
      "filetype": "javascript-openui5",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sapmresponsivepopup": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff0151371704828d105fc18840189810": {
      "content": "\\begin{scshape}\n\t${1:TARGET}\n\\end{scshape}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{scshape} \\scshape": true,
        "scshape": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ff09e479aeea8b13848c746c1b445f7b": {
      "content": "useCallback(\n\t() => {\n\t\t${1:callback}\n\t},\n\t[${2:input}],\n)",
      "doc": "",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "useCallback",
      "matches": {
        "useCallback": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "ff0cb3c49de39d90e3f5b1dfce05fac4": {
      "content": "${1:app}.get('${2:route}', ${3:handler});",
      "doc": "",
      "filetype": "javascript.node",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eget": true
      },
      "source": "snippets/javascript"
    },
    "ff0e0b974b4de4e5d5c23f8b2d67fbdf": {
      "content": "$.merge(${1:target}, ${0:original})",
      "doc": "",
      "filetype": "jquery_coffee",
      "grammar": "snu",
      "label": "",
      "matches": {
        "merge": true
      },
      "source": "snippets/coffee"
    },
    "ff1074831bdffe6edaf1b747b02640c1": {
      "content": "each_with_index do |${1:e}, ${2:i}|\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eawid": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff1130ab591af45b081f204938782b22": {
      "content": "it { should serialize :${0} }",
      "doc": "",
      "filetype": "rails",
      "grammar": "snu",
      "label": "",
      "matches": {
        "iss": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff208af445592f40ba18b63da9345911": {
      "content": "\\begin{itshape}\n\t${1:TARGET}\n\\end{itshape}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{itshape} \\itshape": true,
        "itshape": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ff233191f1c8096a59a3b924ab5b9fa7": {
      "content": "right: auto",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "r:a": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff242c0377adba9cdc9ae570456b214b": {
      "content": "@try {\n\t${1:statements}\n}\n@catch (NSException * e) {\n\t${2:handler}\n}\n@finally {\n\t${0:statements}\n}",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "@try": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff25557a8e2078bee8ddca75e3c90b6c": {
      "content": "clear: left",
      "doc": "",
      "filetype": "sass",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cl:l": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff3194b593ab0f107532cdb1496da068": {
      "content": "beforeDestroy () {\n\t${0};\n},",
      "doc": "beforeDestroy lifecycle method",
      "filetype": "vue-script",
      "grammar": "lsp",
      "label": "Vue Lifecycle beforeDestroy",
      "matches": {
        "vbeforedestroy": true
      },
      "source": "vue-vscode-snippets/snippets"
    },
    "ff4dd62d4665ca7f72ff27b23b6b20a3": {
      "content": "text-align=\"center\"",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alignc": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ff4ec571e2d9afb7bcbce374ac8830ac": {
      "content": "switch (${1:#:var}) {\n\tcase ${2:#:val}:\n\t\t${0:TARGET}\n\t\tbreak;\n}",
      "doc": "",
      "filetype": "c",
      "grammar": "snu",
      "label": "switch () {}",
      "matches": {
        "switch": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ff4f6a737f1bb0f471ed54c1ea7a5f46": {
      "content": "PropTypes.shape({\n\t$0\n}).isRequired,",
      "doc": "An object taking on a particular shape required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeShapeRequired",
      "matches": {
        "ptshr": true
      },
      "source": "vscode-react/snippets"
    },
    "ff4f71010ef2b645c9624cf99482a943": {
      "content": "border-bottom-right-image: url(${1});${0}",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdbri": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff590d07b53d72b2c80f8df6f01cc9c7": {
      "content": "{% raw %}\n\t\t$1\n{% endraw %}",
      "doc": "",
      "filetype": "jinja2",
      "grammar": "snu",
      "label": "escaped block",
      "matches": {
        "raw": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ff5f010d5005691cb7e36e5e2e83c1e4": {
      "content": "const ref = React.createRef()\n",
      "doc": "Forward ref statement used inside component",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "forwardRef",
      "matches": {
        "fref": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "ff6e218065b2d790b054ac09f485a753": {
      "content": "describe('$1', () => {\n\t$0\n})\n",
      "doc": "Testing `describe` block",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "describeBlock",
      "matches": {
        "desc": true
      },
      "source": "vscode-es7-javascript-react-snippets/snippets"
    },
    "ff765255c1300c98b670bd0b56cf0aa9": {
      "content": "background-clip: no-clip;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bgcp:nc": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff8291893f84f7863157c8d07954ca87": {
      "content": "(when-let [${1:result} ${2:test}]\n\t${0:body})",
      "doc": "",
      "filetype": "clojure",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when-let": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff8620d92b7a36e0b2d9595a9bf90564": {
      "content": "mixed.required()",
      "doc": "mixed.required(message?: string | function): Schema\n\nMark the schema as required. All field values apart from undefined and null meet this requirement.",
      "filetype": "yup",
      "grammar": "lsp",
      "label": "mixed-required",
      "matches": {
        "yup mixed required": true
      },
      "source": "javascript/yup"
    },
    "ff870cffa05314e6a29c6bc52c045eb5": {
      "content": "${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}}.propTypes = {\n ${2:property}: ${3:PropTypes.node.isRequired},\n}",
      "doc": "",
      "filetype": "prop-types",
      "grammar": "lsp",
      "label": "prop-type-init",
      "matches": {
        "prop-types init": true
      },
      "source": "javascript/prop-types"
    },
    "ff87a8c844565b1a9c574ac170944d7f": {
      "content": "class ${1:MODEL_NAME}DetailView(DetailView):\n\tmodel = $1\n\ttemplate_name = \"${2:TEMPLATE_NAME}\"",
      "doc": "",
      "filetype": "django",
      "grammar": "snu",
      "label": "Generic Detail View",
      "matches": {
        "detailview": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ff88417844e6621fe5e6ae1a6ee4d24c": {
      "content": "each_key { |${1:key}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "eak": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff8fe136618b52905c4790d6f96e1941": {
      "content": "PropTypes.number.isRequired,",
      "doc": "Number prop type required",
      "filetype": "snippets",
      "grammar": "lsp",
      "label": "propTypeNumberRequired",
      "matches": {
        "ptnr": true
      },
      "source": "vscode-react/snippets"
    },
    "ff94f80c7af53ff2c7cb33e2d8c3de75": {
      "content": "import ${1:Data.Text} (${0:head})",
      "doc": "",
      "filetype": "haskell",
      "grammar": "snu",
      "label": "",
      "matches": {
        "import2": true
      },
      "source": "vim-snippets/snippets"
    },
    "ff9f8068580757f6c07dead29a6c032f": {
      "content": "$this->db->update(\"${1:table}\", $${2:set}, $${3:where});${4}",
      "doc": "",
      "filetype": "codeigniter",
      "grammar": "snu",
      "label": "",
      "matches": {
        "ci_db-update": true
      },
      "source": "vim-snippets/snippets"
    },
    "ffa25df984e5ec2b97c3204624be5c59": {
      "content": "when ${1} => ${2};${0}",
      "doc": "",
      "filetype": "ada",
      "grammar": "snu",
      "label": "",
      "matches": {
        "when": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ffa6f2e050a14b630b0c4f0378c288b1": {
      "content": "${1:Section}~\\\\ref{sec:${2}} ${0}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "reference to a section",
      "matches": {
        "section": true
      },
      "source": "vim-snippets/snippets"
    },
    "ffb589d1e483efd16223ac74c2d3cc66": {
      "content": "Page Should Contain Element    ${1:${locator}}    ${2:${message=}}    ${3:loglevel=INFO}",
      "doc": "",
      "filetype": "robot",
      "grammar": "snu",
      "label": "Page Should Contain Element",
      "matches": {
        "psce": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ffbb8b7e1726962992b9d65de7a72314": {
      "content": "class ${1:ClassName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t${2}\n\t\t\t</>\n\t\t);\n\t}\n}",
      "doc": "",
      "filetype": "javascript-react",
      "grammar": "snu",
      "label": "",
      "matches": {
        "rcla": true
      },
      "source": "snippets/javascript"
    },
    "ffbeae27ffd0ab1d178f3784f5773fb8": {
      "content": "def initialize(${1:args})\n\t${0}\nend",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "definit": true
      },
      "source": "vim-snippets/snippets"
    },
    "ffbf9a99a200bd62aece95c3039ca37e": {
      "content": "<Directory ${1:/}>\n\tDirectoryIndex ${0:index.html}\n\tOrder Deny,Allow\n\tDeny from All\n</Directory>",
      "doc": "",
      "filetype": "apache",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dir": true
      },
      "source": "vim-snippets/snippets"
    },
    "ffbfbfc0b2bc550298d9df4ec5483d11": {
      "content": "useEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:cleanup}\n\t};\n}, [${3:input}])",
      "doc": "",
      "filetype": "react",
      "grammar": "lsp",
      "label": "react-useeffect",
      "matches": {
        "react useeffect": true,
        "useeffect": true
      },
      "source": "javascript/react"
    },
    "ffc3cfb04259a147c71d7eb460774478": {
      "content": "if(${1:/*condition*/})\n{\n\t$2\n}\nelse\n{\n\t${3:/*else*/}\n}",
      "doc": "",
      "filetype": "d",
      "grammar": "snu",
      "label": "if .. else (ife)",
      "matches": {
        "ife": true
      },
      "source": "vim-snippets/UltiSnips"
    },
    "ffc635a835d0b9a375683960d33e78f2": {
      "content": "\\begin{slshape}\n\t${1:TARGET}\n\\end{slshape}",
      "doc": "",
      "filetype": "tex",
      "grammar": "snu",
      "label": "",
      "matches": {
        "\\begin{slshape} \\slshape": true,
        "slshape": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ffc94b0cb37f881e651d13182200e540": {
      "content": "sort {|${1:x}, ${2:y}| ${0} }",
      "doc": "",
      "filetype": "ruby",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sort": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "ffcc10a85e05e661cfadcbba9a44f09a": {
      "content": "import { Injectable } from '@angular/core';\nimport { PreloadingStrategy, Route } from '@angular/router';\nimport { Observable, EMPTY } from 'rxjs';\n\n// avoid typing issues for now\nexport declare var navigator;\n\n@Injectable({ providedIn: 'root' })\nexport class NetworkAwarePreloadStrategy implements PreloadingStrategy {\n\tpreload(route: Route, load: () => Observable<any>): Observable<any> {\n\t\treturn this.hasGoodConnection() ? load() : EMPTY;\n\t}\n\n\thasGoodConnection(): boolean {\n\t\tconst conn = navigator.connection;\n\t\tif (conn) {\n\t\t\tif (conn.saveData) {\n\t\t\t\treturn false; // save data mode is enabled, so dont preload\n\t\t\t}\n\t\t\tconst avoidTheseConnections = ['slow-2g', '2g' /* , '3g', '4g' */];\n\t\t\tconst effectiveType = conn.effectiveType || '';\n\t\t\tif (avoidTheseConnections.includes(effectiveType)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
      "doc": "Angular network aware preload strategy",
      "filetype": "typescript",
      "grammar": "lsp",
      "label": "Angular Network-Aware Preload Strategy",
      "matches": {
        "a-preload-network-strategy": true
      },
      "source": "vscode-angular-snippets/snippets"
    },
    "ffcd3fce6716ba8946f71ef6ee99a977": {
      "content": "<xsl:apply-templates select=\"${1:*}\">\n\t<xsl:sort select=\"${2:node}\" order=\"${3:ascending}\" data-type=\"${4:text}\">${5}\n</xsl:apply-templates>",
      "doc": "",
      "filetype": "xslt",
      "grammar": "snu",
      "label": "sort-by",
      "matches": {
        "apply-templates": true
      },
      "source": "vim-snippets/snippets"
    },
    "ffce07c9d69c875addb65673a7aedd13": {
      "content": "visibility: hidden;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "v:h": true
      },
      "source": "vim-snippets/snippets"
    },
    "ffce96705bfeb897b7f0813b7bb8e32b": {
      "content": "const ${1:y} = useTransform(${2:x}, ${3:value => value * 2})",
      "doc": "useTransform()\nCreate a MotionValue that transforms the output of another MotionValue through a function.",
      "filetype": "framer-motion",
      "grammar": "lsp",
      "label": "framer-use-transform",
      "matches": {
        "framer-motion use-transform": true,
        "use-transform": true
      },
      "source": "javascript/framer-motion"
    },
    "ffdc1d8a8dd14f1051f6e5a97a22307a": {
      "content": "${1:fn} :: ${2:a} -> ${3:a}\n$1 ${4}= ${0}",
      "doc": "",
      "filetype": "purescript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "fn1": true
      },
      "source": "vim-snippets/snippets"
    },
    "ffdc99a6c947c45777435188402d6eb0": {
      "content": "[[${1:foo} alloc] init${2}];",
      "doc": "",
      "filetype": "objc",
      "grammar": "snu",
      "label": "",
      "matches": {
        "alloc": true
      },
      "source": "vim-snippets/snippets"
    },
    "ffdd37fab71c3bfe2660b1724eafed61": {
      "content": "border-right-style: none;",
      "doc": "",
      "filetype": "css",
      "grammar": "snu",
      "label": "",
      "matches": {
        "bdrs:n": true
      },
      "source": "vim-snippets/snippets"
    },
    "ffe04ba1786fc75578cd1c7525af0cb7": {
      "content": "cos(${0:rad});",
      "doc": "",
      "filetype": "processing",
      "grammar": "snu",
      "label": "",
      "matches": {
        "cos": true
      },
      "source": "vim-snippets/snippets"
    },
    "ffe58d20bb073c3cbc1456d03137841f": {
      "content": "@while (${1})\n    ${2}\n@endwhile",
      "doc": "",
      "filetype": "blade",
      "grammar": "snu",
      "label": "@while ... @endwhile",
      "matches": {
        "while": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fff1f904f56dcbd88cc0cd1a06726021": {
      "content": "set(${1:#:name}, ${2:#:value});",
      "doc": "",
      "filetype": "actionscript",
      "grammar": "snu",
      "label": "",
      "matches": {
        "sv": true
      },
      "source": "neosnippet-snippets/neosnippets"
    },
    "fff582d2f0dc3ddaffc770e09e16f407": {
      "content": "<dl class=\"${1}\">\n\t${0}\n</dl>",
      "doc": "",
      "filetype": "html",
      "grammar": "snu",
      "label": "",
      "matches": {
        "dl.": true
      },
      "source": "vim-snippets/snippets"
    },
    "fff79cb61f57afd638e67555f92b272a": {
      "content": "import { NgModule } from '@angular/core';\nimport { BrowserModule  } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\n\nimport { ${1:App}Component } from './${1:app}.component';\n\n@NgModule({\n\timports: [\n\t\tBrowserModule,\n\t\tHttpModule,\n\t],\n\tdeclarations: [${1:App}Component],\n\tbootstrap: [${1:App}Component],\n})\nexport class ${1:App}Module { }\n$0",
      "doc": "Angular Root Module",
      "filetype": "angular",
      "grammar": "lsp",
      "label": "angular-root-module",
      "matches": {
        "a-module-root": true,
        "angular root module": true
      },
      "source": "javascript/angular"
    },
    "fffa830cdc04785482ec97d2c4d35db1": {
      "content": "<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>",
      "doc": "",
      "filetype": "jsp",
      "grammar": "snu",
      "label": "",
      "matches": {
        "jstl:fn": true
      },
      "source": "vim-snippets/snippets"
    }
  }
}